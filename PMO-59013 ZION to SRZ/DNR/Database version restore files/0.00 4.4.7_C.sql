use pcc_staging_db007693

SET NOCOUNT ON
GO

SET DEADLOCK_PRIORITY HIGH
GO


insert into upload_tracking (script, timestamp, upload) values ('UPLOAD_START',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/02_Functions/fn_poc_get_Multiselect_DocumentDescriptionAsStringNew.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**
* This function parses the JSON for a given POC documentation response
* Finds the description in the JSON string and returns a formatted string for the report
* with the descriptions. If description is found or the response is not in JSON, then the existing response is returned.
*
* Date			Author					Description
* 04/23/2019	Mustafa Behrainwala		CORE-35134 Multi-Select: Reporting - Follow-up Question Report - Change to return full text
*/

if exists (select * from sys.objects o where type='FN' and name ='fn_poc_get_Multiselect_DocumentDescriptionAsStringNew')
    DROP FUNCTION dbo.fn_poc_get_Multiselect_DocumentDescriptionAsStringNew;
GO  

CREATE FUNCTION dbo.fn_poc_get_Multiselect_DocumentDescriptionAsStringNew(@itemValue varchar(max),@documentationId varchar(max), @questionId varchar(max), @interventionDelimiter VARCHAR(10), @outcomeDelimiter VARCHAR(10))
RETURNS varchar(MAX)
AS
BEGIN
	DECLARE @result VARCHAR(MAX) = '';
	DECLARE @item_value_id INT = 0;

    DECLARE @controlType VARCHAR(MAX) = (SELECT control_type FROM cp_std_question WHERE std_question_id = @questionId)

 	    DECLARE @cprTempData table (
			cdesc varchar(200) NOT NULL,
			pdesc varchar(200) NOT NULL,
			pickListItemId int not null,
			seq int not null
		);

		DECLARE @tempResp table
		(
			item_value VARCHAR(5000),
			documentation_id varchar(32),
			std_question_id INT

		);

        -- Insert all the things we need from the documentation_responses view to be used below in other queries
		INSERT INTO @tempResp
		SELECT @itemValue, @documentationId, @questionId
	
	IF @controlType <> 'itv'
	BEGIN
		SELECT @result = @result + ISNULL(CASE WHEN LEN(@result) = 0 THEN '' ELSE ', ' END + innr.description, '')
		FROM 
		(SELECT tmp.item_value AS description
			FROM @tempResp cpr
			CROSS APPLY OPENJSON(cpr.item_value) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') tmp
			--WHERE cpr.documentation_id = @documentationId AND cpr.item_value_id='-901'
			--	AND cpr.std_question_id=@questionId
		) innr
	END
	ELSE
	BEGIN	
		SELECT @item_value_id = tmp.item_value_id 
			FROM @tempResp cpr
			CROSS APPLY OPENJSON(cpr.item_value) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') tmp
			--WHERE cpr.documentation_id = @documentationId AND cpr.item_value_id = '-901'
			--	AND cpr.std_question_id = @questionId

		IF @item_value_id IN (-97, -99, -98)
		BEGIN		
			SELECT @result = tmp.item_value 
				FROM @tempResp cpr
				CROSS APPLY OPENJSON(cpr.item_value) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') tmp
				--WHERE cpr.documentation_id = @documentationId AND cpr.item_value_id = '-901'
				--AND cpr.std_question_id = @questionId
		END		
		ELSE
		BEGIN

			INSERT INTO @cprTempData
		    SELECT pit.description AS cdesc, pit_parent.description AS pdesc, pit.std_pick_list_item_id AS pickListItemId, pit.sequence AS seq
			FROM @tempResp cpr
			CROSS APPLY OPENJSON(cpr.item_value) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') tmp
			JOIN cp_std_pick_list_item pit ON pit.item_value = tmp.item_value_id
            JOIN cp_std_question q ON pit.std_pick_list_id = q.std_pick_list_id AND q.std_question_id = @questionId
			JOIN cp_std_pick_list_item pit_parent ON pit_parent.std_pick_list_item_id = pit.parent_std_pick_list_item_id
			WHERE tmp.item_value_id >= 0 AND pit.parent_std_pick_list_item_id IS NOT NULL
			--AND cpr.documentation_id = @documentationId AND cpr.item_value_id = '-901'
			--AND cpr.std_question_id = @questionId

		SELECT @result = @result + 
			ISNULL(
				CASE 
					WHEN LEN(@result) = 0 THEN '' 
					ELSE @interventionDelimiter 
				END 
				+ 
				(
					CASE 
						WHEN LEN(innr.pdesc) = 0 THEN '' 
						ELSE innr.pdesc + (CASE WHEN LEN(innr.cdesc) = 0 THEN '' ELSE @outcomeDelimiter END)
					END
				) + innr.cdesc, 
				''
			)
        FROM
		(

			Select 	 DISTINCT  cdesc, pdesc, pickListItemId, seq
		    from @cprTempData

			UNION
			-- For 'No Interventions Attempted' intervention (Generally, any intervention with no outcome)
			SELECT '' AS cdesc, pit_parent.description AS pdesc, pit_parent.std_pick_list_item_id AS pickListItemId, pit_parent.sequence AS seq
			FROM @tempResp cpr
			CROSS APPLY OPENJSON(cpr.item_value) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') tmp
			INNER JOIN cp_std_pick_list_item pit_parent ON pit_parent.item_value = tmp.item_value_id
			INNER JOIN cp_std_question q ON pit_parent.std_pick_list_id = q.std_pick_list_id and q.std_question_id = @questionId
			LEFT JOIN cp_std_pick_list_item pit ON pit.parent_std_pick_list_item_id = pit_parent.std_pick_list_item_id
			WHERE
			 tmp.item_value_id >= 0
			--AND cpr.item_value_id = '-901'
			--AND cpr.documentation_id = @documentationId
			--AND cpr.std_question_id = @questionId
			AND pit_parent.parent_std_pick_list_item_id IS NULL
			AND pit.std_pick_list_item_id IS NULL
		) innr ORDER BY seq		
		END	
	END
	
	RETURN @result
END
GO

GRANT EXECUTE ON fn_poc_get_Multiselect_DocumentDescriptionAsStringNew TO PUBLIC
GO

GO

print 'C_Branch/02_Functions/fn_poc_get_Multiselect_DocumentDescriptionAsStringNew.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/02_Functions/fn_poc_get_Multiselect_DocumentDescriptionAsStringNew.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-26335       :   script to create sproc_prp_order_based_report Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:
2011-12-14  Aditi Iyer       Initial creation of this stored proc

2011-12-30 Aditi Iyer       Filter List, sort_list and some other information is pending also performance testing is pending 
2012-02-21 Aditi Iyer		Updated the store proc to support 3.5.2 Med Admin Audit Report
							excluding PRN / ONE TIME ONLY except it is documented  from Med Admin Audit report
							when documentation Type filter is used, it should take care or Pending Confirmation and ON Hold orders
2012-03-09 Aditi Iyer	    updated the store proc to send standard date time format for med admin audit report 	
2012-03-12	Aditi Iyer		PCC- 28737 commented Completed_date filters 
							,updated date filters logic						
							, updated the order_summary with isnull() so in case desc is null, it will show directions for ENTREAL FEED 

<  there were few updates between>

2012-03-09 Aditi Iyer       updated the store proc to change date time format for med admin audit report.
2012-03-19 Ritch Moore		PCC-28890 - add Hold/Resume/Discontinued to pending confirmation where applicable
2012-03-19 Ritch Moore		PCC-28913 Updated the 'pho_medication_class'
2012-03-21 Aditi Iyer		updated the store proc to fix the issue where PRN type of Orders were not included in Lab abd Diagnostic Report 
							due to schedule_date condition - fixed
							updated the store proc to incoporate the changes made to store hold orders - PCC-28687	

2012-03-22 Aditi Iyer		cleanng up the store proc after 3.5.2.1 delete commented lines and doing CRT
2012-03-26 Aditi Iyer		Updated the store proc to put One TIme Only in PRN Group for Lab and Diagnostic Report PCC-28969
2012-03-26 Aditi Iyer		Updated the store proc to use pho-order_status_schedule_date for lab and diagnostic report 
2012-03-26 Ritch Moore		PCC-29101 - added support for pho_order_desc filter
2012-03-28 Ritch Moore		PCC-29110 - added holds to order_desc
2012-03-28 Aditi Iyer		fix the issue for PRN/OTO for lab and diagnostic to look at the status 
2012-04-02 Aditi Iyer       Updated the order_summary to espace special characters when using for XML
2012-04-10 Ritch Moore		PCC-29294 - added support for pho_std_order, pho_facility_time_code, pho_std_frequency & pho_unsched_order filters
2012-04-10 Aditi Iyer		PCC-29429 - Updated the store proc to display Perform date only for documented Time for Med Admin Audit Report
										Also removed joins to cont_address, address and staff as T?V ORder form is not based on RTM Report
2012-04-11 Ritch Moore		Revised unscheduled orders filter
2012-04-11 Aditi Iyer       PCC-29374 updated store proc to branch out Lab & diagnostic report
2012-04-13 Ritch Moore		PCC-29530 Added pho_administered_date_time
2012-04-19	Aditi Iyer		Sending emotyString for P1 for Pset_id if not found instead of null
2012-04-24 Ritch Moore		PCC-29294 - fixed issue with pho_facility_time_code filter
2012-04-25 Aditi Iyer		pcc-29794  -- updated the store proc to change the way to get a list of clients to improve performance
2012-04-27 Aditi Iyer		PCC-29749(3.5.2.5)  updated store proc for mulitple - non duplicate route of admin 
2012-04-30 Aditi Iyer		PCC-29748(3.5.2.5)  updated for medication class- multiple values..
2012-04-30 Aditi Iyer		PCC-29464(3.5.2.5)  updated to brach out Med Admin Audit Report
2012-05-03 Aditi iyer		PCC-30039(3.5.2.5)  updated to clean up code since it is not supporting Med Admin audit Report 
2012-05-15 Aditi Iyer		PCC-30331(3.5.2.5)  updated to handle the med review date as single digit month : 5/15/012
2012-05-17 Aditi Iyer		PCC-30373(3.5.2.6)  updated to handle Order Status just 'Pending confirmation' w/o any relationship_id
2012-05-17 Aditi Iyer		PCC-30225(3.5.2.6)  updated the store proc to accommodate changes for View All Orders
2012-05-18 Rolly Sanchez	PCC-30035(3.5.2.6)  updated to branch out legacyorders with report option store proc
2012-05-30 Rolly Sanchez	PCC-27652(3.5.2.7)	Updated to include struck out orders
												assigned max_end_date to completed date
												dropped completed_date from the query so it won't create confusion
												use the renamed view
2012-05-31 Rolly Sanchez	PCC-30565(3.5.2.7) added for non intelligence census (record_type = 'C' or record_type is null) 
2012-06-05 Aditi Iyer		PCC-30848(3.6.0) added resident name for footer_1
2012-06-13 Aditi Iyer	    PCC-31057(3.5.2.8) Fixed the issue with Permanent Source Filter
2012-06-21 Rolly Sanchez	PCC-31217(3.6.0) Include all active orders within date range on med review report
2012-06-25 Rolly Sanchez	PCC-29463(3.6.0) Removed Row_type 1 from the final output
2012-06-25 Rolly Sanchez	PCC-31407(3.6.0) Excluded order with pending confirmation
2012-06-29 Rolly Sanchez	PCC-30981(3.6.1) Future dated discharge
2012-07-20 Aditi Iyer		PCC-32575(3.6.1) Updating the Grouping functionality as per new structure
2012-07-30 Rolly Sanchez	PCC-32674(3.6.1) Support medication class multiple selection
2012-08-03 Rolly Sanchez	PCC-32698(3.6.1) Support consolidated orders @vfil_consolidated_order
2012-08-08 Rolly Sanchez	PCC-29834(3.6.1) get report name from prp_rm_report table
2012-08-16 Rolly Sanchez	PCC-31559(3.6.1) drop join to pho_schedule_details_view
2012-08-17 Rolly Sanchez	PCC-33486(3.6.1) Update footer return to make it backward compatible
2012-08-22 Aditi Iyer		PCC-33539(3.6.1) Only one P1_header_id and remove P2_header_id and P3_header_id
2012-08-24 Aditi Iyer		PCC-31559(3.6.1) drop the reference of following columns:
														pho_time_code_info
														pho_shift
														pho_shift_2
														pho_shift_3
														client_name_2
														client_name_3
														pho_assignment
														pho_assignment_2
														pho_assignment_3
														pho_documented_date_time
														facility_info
														client_location_unit
														pho_order_summary_sch_dates
														pho_administered_date_time
														pho_order_type_consolidated - remove as a column, it still exists as a filter

2012-08-29 Rolly Sanchez	PCC-33869(3.6.1) output is not sorting properly when order category/type/desc is selected
2012-09-05 Rolly Sanchez	PCC-34029(3.6.1) Report should show future dated discharge clients as discharge	
2012-09-05 Rolly Sanchez	PCC-34048(3.6.1) when running custom report the group header display ${cli_client} instead of local terminology
2012-09-06 Rolly Sanchez	PCC-34089(3.6.1) when running custom report some group header is missing
2012-09-07 Aditi Iyer		PCC-34121(3.6.1) remove unnecessary fields to display and filters:
							PCC-34099(3.6.0.3.7) Medication Review Report taking too long to print the results. ( Issue recorded in one particular ORG )
													removed @vfil_supply_last_reorder_date_type( pho_supply_last_reorder_date )  filter
									pho_supply_last_reorder_date : remove 
							Filters: 
								pho_admin_record_daily 
								pho_supply_last_reorder_date
2012-09-07 Rolly Sanchez	Sort
								pho_order_category: Added
2012-09-07 Rolly Sanchez	PCC-34109(3.6.1) field that has wider width should comes first
2012-09-13 Rolly Sanchez	PCC-34419(3.6.1.1) Drop fn_pho_getOrderStatus create temp table in replacement
											   audit trace was drop from view_prp_pho_phys_order_schedule so need to add here
											   Add error catching after calling sproc_pho_getOrderStatus
											   PRP'rized temp table
2012-09-21 Rolly Sanchez	PCC-34521(3.6.1.1) Join it to Audit info when needed	
											   increased order_desc from 500 to 1000
2012-09-24 Rolly Sanchez	PCC-34254(3.6.2) Allow "-1," for pho_medication_class filter
2012-10-02 Rolly Sanchez	PCC-34842(3.6.2) changed the character length in temp table for all descriptions base from its source
2012-11-08 Rolly Sanchez	PCC-35129(3.6.2) change on how we parse med review date range though there was no problem with the old code 
											 it was changed to have consistency with selection_003 SP (filter band) 
2012-11-22 Rolly Sanchez	PCC-35121(3.6.2.2) fixed sort by option. this fixed refer to retrieving @vsort1~@vsort4
												fixed final sort when user selected physician and location as sort option and client status = both
												Added client ID on sort to fix a scenario where a room/bed of newly discharge patient was assigned to other patient
												CRT feedback
2012-11-27 Ritch Moore		PCC-36596 - Added join to new clients_attribute table for new allergy storage
2012-11-27 Ritch Moore		PCC-36597 - Added join to new clients_attribute table for new allergy storage
2012-01-16 Rolly Sanchez	PCC-37679 (3.6.3) use rm.report_id instead of rep.report_id because this is directly called by the report
2013-02-04 Rolly Sanchez	PCC-38180 (3.6.3) Added STAT on schedule template
2013-02-04 Rolly Sanchez	PCC-38779 (3.6.3) Optimized call to pho_getorderstatus SP
2013-02-15 Rolly Sanchez	PCC-39234 (3.6.3) call generic metadata for report metadata
												fixed sorting call to generic metadata
2013-03-20 Rolly Sanchez	PCC-40678 (3.6.3.1.1) Resident Header missing on Order Summary Report
												  Added is null when building P1 ( page header)
												  added default label for MRN	
2013-04-26 Rolly Sanchez	PCC-40888 (3.6.3.4)   Added struck out medication class 
2013-05-27 Rolly Sanchez	PCC-42828 (3.7.0.2)	  added logic for including administrative order trails on the report for order summary report
2013-06-19 Ritch Moore		PCC-41625 (3.7.0.2)	removed join to view_prp_pho_administrative_order and used view definition fileterd directly
2013-06-20 Ritch Moore		PCC-42633 (3.7.0.2)	added order_schedule_id to #PRP_Orders and carried through to the result set
2013-08-01 Rolly Sanchez	PCC-42904 (3.7.1) added drug protocol warning on order listing report
2013-12-10 Rolly Sanchez	PCC-50905 (3.7.2.2) change order summary formatting from style to b-tag
2013-12-16 Ritch Moore		PCC-48424 (3.7.3) add condition around order summary update for Order Listing (report_id=0) to not concatonate schedule directions
2014-04-10 Dom Christie     PCC-53333 (3.7.4) Rolled back the ICD 10 changes 
2014-04-14 Henny Ehghaghi PCC-56015  (3.7.4) Adding Drug Protocol Warning 
2014-07-31 Amro Saada		PCC-59694 (3.7.5)	Added filters and fields for Order Listing report to include order signature audit details	
2014-08-27 Amro Saada		PCC-59694 (3.7.5)	Rolled back changes for Order Listing report to include order signature audit details.	
2014-09-22 Dom Christie     PCC-63646 (3.7.5)   Added the logic for StatusCode 9 to print Pending Clinical Review
2014-09-24 Dom Christie     PCC-63646 (3.7.5)   Fixed the typo for Pending Clinical Review
2014-10-16 Dom Christie     PCC-63650  (3.7.5.1) Merged the Generic Metadata into this proc, added the join to pho_order_clinical_review table for getting reviews, 
                                                 ALso to grab the users based on the review by joining to sec_user table. The review table does not have the audit id like 
												 confirmation or revision by hence after confirming with Hitesh, directly joining to sec_user based on the reviewed_by column
2014-10-30 Dom Christie     PCC-66158 (3.7.5.1) Now the Long Username will be displayed for the Reviewed By mapping the Review By from pho_order_clinical_review                                                 table to the loginname from sec_user. This is unlike Confirmed By and Created By logic since for Review there is                                                 no mapping available to cp_Sec_user tables 												 
2014-12-19 H Ehghaghi 	   PCC-68297	(3.7.6)		 Adding  Orders Pending Signature Status 
2015-01-16 H Ehghaghi 	   PCC-69380	(3.7.6)		 Adding  Orders Pending Signature Status 
2015-01-20 H Ehghaghi 	   PCC-69765	(3.7.6)		 fixed Signed Date  that  not displayed correctly when not in the filter
2015-03-27  Dom Christie    PCC-72490 (3.7.7)	ICD10 Imeplementation using the Date range, end date if supplied or the system date as the end date to pass to the fucntion which returns the daignosis.
                                                    This logic aaplies for the SUmmary report
2015-03-27  Dom Christie    PCC-72489 (3.7.7)	ICD10 Imeplementation using the Date range, end date if supplied or the ON or AFTER DATE as the end date to pass to the fucntion which returns the daignosis
                                                    This logic applies for the Medication Reivew Report

2015-07-17	H Ehghaghi		PCC-79358 (3.7.8)  ADD 	include admin order desplay for order listing and  medication class
2015-03-27  Dom Christie    PCC-85623 (3.7.8.2) FIlter out the Discharged order based on the class id=2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2016-10-05  Dom Christie    PCC-100688 (3.7.12) Added the phys order id in the output, metadata also added for the same
2016-10-27  H Ehghaghi    PCC-101991 (3.7.11.1) Support ability to run report for multiple selected patients
2017-08-15  H Billapati   PCC-118719 (3.7.14) Fixing the Date Format to support UK Facilitues for Med Review, Order Listing, All Orders and Order Summary Report
2017-10-25  Dom Christie  CORE-5162  3.7.14.1  Added the filter to only include the orders with NULL Indication to use
2018-09-24  Dom Christie  CORE-22472  3.7.17.1 Added the ability for multiple Order By filter.
2018-10-09  Dom Christie  CORE-23122  3.7.17.1 Added Filter On Order Listing Report To Report On Electronically Transmitted Orders That Are Missing Related Diagnosis
2019-04-09  Mustafa Behrainwala CORE-36623 3.7.18.3 Report does not consider orders with indefinate schedule end date.
-- ================================================================================= */



IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_order_based_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
--, @env varchar(5) = 'USAR'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************



Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_report
 @report_id =  '0'--'-13'
,@fac_id =  '1'
,@field_list =  '-12,-13,-72,-77'
--,@field_list = '0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36'
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=0;pho_include_related_diagnosis=1;pho_order_date_range=11/01/2018,12/31/2018'--;pho_order_date_range=06/01/2013,06/30/2013'
,@sort_list =  '0=-1'
,@execution_user_login =  '_system_'
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @venv varchar(20)
	, @vSP_ClientId int
    , @vParentReportId int
	, @vWV_transfer int
	, @vEnableSignature char(1)
	, @vordered_by VARCHAR (1500)
	, @vordered_by_all SMALLINT
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)
		,@vCountryCode char(2)
		,@vdateFormatStyle smallint; --getting the format style based on the country
-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare @term_admission varchar(50)
     , @term_client varchar(50)
     ,@vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)
    , @footer varchar(50)
    , @header varchar(50)



-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit
		,@vDrugWarningMessage bit
		,@vDrugAllergyMessage bit
		,@vDrugBlackBoxMessage bit
		,@vDrugInteractionMessage bit
		,@vDrugDoseMessage bit



----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vIncludeIndication BIT
,@vIncludeRelatedDiagnosis BIT
,@vfil_client_id bit
     ,  @vfil_client_id_str bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime




	,@vfil_reviewed_by varchar(60)
	,@vfil_reviewed_date_type varchar(10)
	,@vfil_reviewed_date datetime
	,@vfil_reviewed_date2 datetime

	,@vfil_signed_by varchar(60)
	,@vfil_signed_date_type varchar(10)
	,@vfil_signed_date datetime
	,@vfil_signed_date2 datetime

	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime
	,@ICDDate datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_range varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime


	,@vfil_asof_order varchar(100)  ---as of date setting for order summary report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime


	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'

	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime
	, @vfil_drug_warning bit
	,@vfacadjusteddate DATETIME



Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

Declare @ordered_by TABLE ( items INT );
Declare @Med_Review_Date TABLE ( items varchar(10), row_num smallint);
CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


Create table #PRP_drug_severity_level (severity varchar(50), severity_id varchar(10));
CREATE table #Prp_drug_warning (phys_order_id int, warning_desc varchar(900))



CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			,reviewed_by varchar(60)
			,reviewed_date datetime
			,reviewed_by_long_username varchar(50)
			,signed_by varchar(60)
			,signed_date datetime
			,signed_by_long_username varchar(50)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary nvarchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
            , controlled_substance_code int
			, order_schedule_id int
			, drug_warning varchar(max)
			, Esigned_flag char(1)

);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #PRP_Holds
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted


CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
);


Create Clustered Index _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;

CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;

--DECLARE @common_code TABLE (item_id int, item_code varchar(20), item_description varchar(200));

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	SET @vfil_drug_warning = '0'
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';
	SET @vFacID		  = @fac_id;
     SELECT  @vfacadjusteddate= dbo.fn_adjust_time_fac_time_zone(@vFacID,GETDATE())
	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	--SET @venv		  = @env
	SET @vSortList	  = @sort_list;
	---------Code to select the date format based on the country--------------------
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)

	---------------------------------***********------------------------------------

	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	--if @venv='USRA' and @vEnableSignature='Y'
	-- BEGIN
	--	INSERT INTO	@common_code (item_id , item_code , item_description )
	--	SELECT pho_std_label_id,'phocom',description from pho_std_label	where environment='USRA' and type='comm_method' ;
	-- END
	--ELSE IF	((@venv='USRA' and @vEnableSignature='N') or @venv='N')
	--BEGIN
	--   INSERT INTO	@common_code (item_id , item_code , item_description )
	--	SELECT pho_std_label_id,'phocom',description from pho_std_label	where environment='CDN' and type='comm_method'	;
	--END


--------------------As Per the New Change, the Metadata SP is not part of this Sp hence the entire section below here is the copy paste of the
--------------------Generic Metadata SP with required tweaks here and there


	---exec dbo.sproc_prp_generic_metadata
	SET @report_id = @VreportId
	SET @fac_id = @VfacId
	SET @field_list = @vFieldList
	SET @filter_list = @vFilterList
	SET @sort_list = @Vsortlist
	SET @execution_user_login = @execution_user_login
	SET @rows_returned = null




-- handle resident listing field to display differently

	if @vReportId = -81 or ((select parent_report_id FROM dbo.prp_rm_report WITH (NOLOCK ) WHERE report_id  = @vReportId) = -81)
	BEGIN
		SELECT  @vFieldList = substring (items , charindex(':', items ) + 1, len(items ))
		 from dbo.Split(@field_list,';')
		WHERE substring(items, 1, charindex(':', items )-1 ) = 'metadata'
	END

	select @vWV_transfer = charindex('wv_transfer',@vFilterList)


	select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @report_id --and parent_report_id = -9


	/* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */

	select @vStep = 2
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting facility terminology information... ' + convert(varchar(26),getdate(),109)

	Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		--, @vTermAdmission = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc)


SET @vTermClient=@term_client
SET @vTermAdmission=@term_admission;


-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select
		sequence,
		sort_by_name,
		group_level,
		display_name,
		ref_report_sort_by_id,
		 row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT  group_level
	,column_name
	,display_name
	,ref_report_sort_by_id
	from tbSort


	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


	/* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */

	select @vStep = 4
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting list of columns based on @field_list, pre-difined fields with column width and exclude some fields when they are part of report header ... ' + convert(varchar(26),getdate(),109)

	INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id


			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id

			LEFT OUTER JOIN

					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl

					on excl.ref_report_column_id = refrepcol.ref_report_column_id




		WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay

	/* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */

	select @vStep = 5
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting sorting information... ' + convert(varchar(26),getdate(),109)

	------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */


	select @vStep = 6
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' pre-define and user selected filter information... ' + convert(varchar(26),getdate(),109)



	INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select 555,* from #PRP_Filters




	SELECT @vordered_by=filter_value FROM #PRP_Filters WHERE filter_name='pho_med_prof'
	if @debug_me='Y' begin select '@vordered_by',@vordered_by end

	IF @vordered_by IS NULL
	BEGIN
	INSERT INTO @ordered_by
	SELECT -1
	END
	ELSE
	BEGIN

	INSERT INTO @ordered_by
	SELECT items from dbo.Split(@vordered_by,',')
	END

	if @debug_me='Y'
	begin
	 select @vordered_by_all,'ordby',* from @ordered_by
	 end

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */

	select @vStep = 7
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + 'Header and footer information... ' + convert(varchar(26),getdate(),109)


	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---


SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission






	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);


	select @vStep = 7

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_minor' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Minor', '1')
		end


	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_moderate' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Moderate', '2')
		end

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_severe' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Severe', '3')
		end








	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';


	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');

	set  @vEnableSignature = isnull((select  value  FROM [dbo].[configuration_parameter] WITH (NOLOCK)
						 WHERE [name] = 'order_sign_enable' and (fac_id = @vFacId ))  ,'N');


	select @vStep = 18
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info','pho_reviewed_by','pho_reviewed_date','pho_signed_by','pho_signed_date') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;
	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		   +  isnull(@vCol2,'')
		   + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END

	-- check if drug warning message was selected

	set @vDrugAllergyMessage     = CASE WHEN charindex('pho_drug_allergy',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugInteractionMessage = CASE WHEN charindex('pho_drug_interaction',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugBlackBoxMessage    = CASE WHEN charindex('pho_black_box',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugDoseMessage        = CASE WHEN charindex('pho_dose_check',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugWarningMessage     =
	   CASE  WHEN @vDrugDoseMessage=1 or @vDrugBlackBoxMessage=1 or @vDrugInteractionMessage=1 or @vDrugAllergyMessage= 1 THEN 1
	         ELSE 0 END;




	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 25
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 35
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	SELECT @vfil_supply_reorder = filter_value from #PRP_Filters where filter_name = 'pho_supply_reorder';

	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_created_by = filter_value from #PRP_Filters where filter_name = 'pho_created_by' ;

	SELECT @vfil_confirmed_by = filter_value from #PRP_Filters where filter_name = 'pho_confirmed_by' ;

	SELECT @vfil_reviewed_by = filter_value from #PRP_Filters where filter_name = 'pho_reviewed_by';

	--SELECT @vfil_signed_by = filter_value from #PRP_Filters where filter_name = 'pho_signed_by';

	SELECT @vfil_pho_fac_time_code = filter_value from #PRP_Filters where filter_name = 'pho_facility_time_code' ;

	SELECT @vfil_pho_std_freq = filter_value from #PRP_Filters where filter_name = 'pho_std_frequency' ;

	SELECT	@vfil_consolidated_order  = filter_value from #PRP_Filters where filter_name = 'pho_order_type_consolidated' ;

	SELECT @vfil_pho_unsched_order = filter_value from #PRP_Filters where filter_name = 'pho_unsched_order' ;
	if @vfil_pho_unsched_order is null Set @vfil_pho_unsched_order  = '0';

		SELECT @vIncludeIndication = filter_value from #PRP_Filters where filter_name = 'pho_include_indication_for_use' ;

		IF @vIncludeIndication IS NULL
		BEGIN
		SET @vIncludeIndication=0
		END

	SELECT @vIncludeRelatedDiagnosis = filter_value from #PRP_Filters where filter_name = 'pho_include_related_diagnosis' ;
	IF @vIncludeRelatedDiagnosis IS NULL
		BEGIN
		SET @vIncludeRelatedDiagnosis=0
		END


	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter

	--administrative order selected
	SELECT @vIncludeAdminOrder = filter_value from #PRP_Filters where filter_name = 'pho_include_admin_order' ;



	SELECT @vfil_view_all_orders = filter_value from #PRP_Filters where filter_name = 'pho_view_all_orders'

	--Removed conversion into varchar since @vfil_view_all_orders_lookback_date is a datetime variable step 35
	if @vfil_view_all_orders  is not null Set @vfil_view_all_orders_lookback_date = dateadd(d,-@vfil_view_all_orders,@vReportDate);


	if @debug_me = 'y' Select @vfil_view_all_orders_lookback_date  as vfil_view_all_orders_lookback_date

	if @debug_me = 'y' Select @vfil_consolidated_order  as vfil_consolidated_order


	-----DATE TIME

	SELECT @vfil_confirmed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_confirmed_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_confirmed_date%'; -- range
	IF @vfil_confirmed_date_type = 'ON'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
	end

	Else if @vfil_confirmed_date_type = 'BEFORE'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date
		Set @vfil_confirmed_date = '1900-01-01'
	end

	Else if @vfil_confirmed_date_type = 'AFTER'
	begin
		Set @vfil_confirmed_date  = @vfil_confirmed_date+1
		Set @vfil_confirmed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_confirmed_date_type) = 1
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
		SEt @vfil_confirmed_date  = @vfil_confirmed_date_type
	end


	SELECT @vfil_created_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_created_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_created_date%';
	IF @vfil_created_date_type = 'ON'
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
	end

	Else if @vfil_created_date_type = 'BEFORE'
	begin
		Set @vfil_created_date2 = @vfil_created_date
		Set @vfil_created_date = '1900-01-01'
	end

	Else if @vfil_created_date_type = 'AFTER'
	begin
		Set @vfil_created_date  = @vfil_created_date+1
		Set @vfil_created_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_created_date_type) = 1
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
		SEt @vfil_created_date  = @vfil_created_date_type
	end





	SELECT @vfil_reviewed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_reviewed_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_reviewed_date%';
	IF @vfil_reviewed_date_type = 'ON'
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date+1
	end

	Else if @vfil_reviewed_date_type = 'BEFORE'
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date
		Set @vfil_reviewed_date = '1900-01-01'
	end

	Else if @vfil_reviewed_date_type = 'AFTER'
	begin
		Set @vfil_reviewed_date  = @vfil_reviewed_date+1
		Set @vfil_reviewed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_reviewed_date_type) = 1
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date+1
		SEt @vfil_reviewed_date  = @vfil_reviewed_date_type
	end

   SELECT @vfil_signed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_signed_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_signed_date%';
	IF @vfil_signed_date_type = 'ON'
	begin
		Set @vfil_signed_date2 = @vfil_signed_date+1
	end

	Else if @vfil_signed_date_type = 'BEFORE'
	begin
		Set @vfil_signed_date2 = @vfil_signed_date
		Set @vfil_signed_date = '1900-01-01'
	end

	Else if @vfil_signed_date_type = 'AFTER'
	begin
		Set @vfil_signed_date  = @vfil_signed_date+1
		Set @vfil_signed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_signed_date_type) = 1
	begin
		Set @vfil_signed_date2 = @vfil_signed_date+1
		SEt @vfil_signed_date  = @vfil_signed_date_type
	end

	SELECT @vfil_supply_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_order_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_order_date%';

	IF @vfil_supply_order_date_type = 'ON'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
	end

	Else if @vfil_supply_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date
		Set @vfil_supply_order_date = '1900-01-01'
	end

	Else if @vfil_supply_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_order_date  = @vfil_supply_order_date+1
		Set @vfil_supply_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_supply_order_date_type) = 1
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
		SEt @vfil_supply_order_date  = @vfil_supply_order_date_type
	end



	SELECT @vfil_supply_last_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_last_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_last_order_date%';

	IF @vfil_supply_last_order_date_type = 'ON'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
	end

	Else if @vfil_supply_last_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date
		Set @vfil_supply_last_order_date = '1900-01-01'
	end

	Else if @vfil_supply_last_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_last_order_date  = @vfil_supply_last_order_date+1
		Set @vfil_supply_last_order_date2 = '9999-12-31'
	end

	Else if isDate(@vfil_supply_last_order_date_type) = 1
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
		SEt @vfil_supply_last_order_date  = @vfil_supply_last_order_date_type
	end


	SELECT @vfil_discontinued_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_discontinued_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_discontinued_date%';
	IF @vfil_discontinued_date_type = 'ON'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
	end
	Else if @vfil_discontinued_date_type = 'BEFORE'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date
		Set @vfil_discontinued_date = '1900-01-01'
	end

	Else if @vfil_discontinued_date_type = 'AFTER'
	begin
		Set @vfil_discontinued_date  = @vfil_discontinued_date+1
		Set @vfil_discontinued_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_discontinued_date_type) = 1
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
		SEt @vfil_discontinued_date  = @vfil_discontinued_date_type
	end


	SELECT @vfil_order_end_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_end_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_end_date%';
	IF @vfil_order_end_date_type = 'ON'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
	end

	Else if @vfil_order_end_date_type = 'BEFORE'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date
		Set @vfil_order_end_date = '1900-01-01'
	end

	Else if @vfil_order_end_date_type = 'AFTER'
	begin
		Set @vfil_order_end_date  = @vfil_order_end_date+1
		Set @vfil_order_end_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_end_date_type) = 1
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
		SEt @vfil_order_end_date  = @vfil_order_end_date_type
	end





	SELECT @vfil_hold_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_hold_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_hold_date%';
	IF @vfil_hold_date_type = 'ON'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date+1
	end

	Else if @vfil_hold_date_type = 'BEFORE'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date
		Set @vfil_hold_date = '1900-01-01'
	end

	Else if @vfil_hold_date_type = 'AFTER'
	begin
		Set @vfil_hold_date  = @vfil_hold_date+1
		Set @vfil_hold_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_hold_date_type) = 1
	begin
		Set @vfil_hold_date2 = @vfil_order_end_date+1
		SEt @vfil_hold_date  = @vfil_hold_date_type
	End




	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SET @ICDDate=@vfil_order_date
		SEt @vfil_order_date  = @vfil_order_date_type
	End




	SELECT @vfil_order_start_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_start_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_start_date%';

	IF @vfil_order_start_date_type = 'ON'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
	end

	Else if @vfil_order_start_date_type = 'BEFORE'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_order_start_date_type = 'AFTER'
	begin
		Set @vfil_order_start_date  = @vfil_order_start_date+1
		Set @vfil_order_start_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_start_date_type) = 1
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
		SEt @vfil_order_start_date  = @vfil_order_start_date_type
	END



	SELECT @vfil_asof_order = filter_value	from #PRP_Filters where filter_name like  'pho_admin_order_asof_date%';

	if @vfil_asof_order is not null
	begin
		set @vfil_asof_order_date_d1 = @vfil_asof_order
		set @vfil_asof_order_date_d2 = @vfil_asof_order_date_d1 + 1

	end

	if @debug_me='Y' select  @vfil_asof_order_date_d1 asof_date1, @vfil_asof_order_date_d2 asof_date2


-- this block is for setting up the date range to include administrative orders in the report
-- SELECT @vfil_admin_order_date_range = filter_value from #PRP_Filters where filter_name = 'custom_order_date_range' ;

--
--	if @vfil_admin_order_date_range is not null
--		begin
--
--
--			if Charindex(@vDelim,@vfil_admin_order_date_range) > 0
--			begin
--				SELECT @vfil_order_date	= Left(@vfil_admin_order_date_range,Charindex(@vDelim,@vfil_admin_order_date_range)-1)
--					  ,@vfil_order_date2 = dateadd(dd,1,Right(@vfil_admin_order_date_range, len(@vfil_admin_order_date_range)-Charindex(@vDelim,@vfil_admin_order_date_range)) )
--					  ,@vfil_order_date_type = '1'
--			end
--
--			else
--			begin
--				set @vfil_order_date = @vfil_admin_order_date_range
--				set @vfil_order_date2 = @vfil_order_date + 1
--				set @vfil_order_date_type = '1'
--
--			end
--
--
--		end

	if @vIncludeAdminOrder = 1	 and @vReportId=0
		begin

			SET @vfil_admin_order_date_range_d1 = @vfil_order_date
			SET @vfil_admin_order_date_range_d2 = @vfil_order_date2


		end





	----Special filters date range for med review report


	;with tb
		as
		(
			select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
			cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
			where a.filter_name = 'pho_start_end_date_range_review'

		)
	select
		 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
		,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
		,@vfil_start_end_date_range_review  = '1'

	from tb

--		where row_num < 3

------Dates FOR ICD---
IF @vReportId=-10
BEGIN

SELECT @ICDDate=getdate()
END

------

	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' startdate ' + cast(@vfil_start_end_date_range_d1  as varchar(30)) + ' end date ' + cast(@vfil_start_end_date_range_d2  as varchar(30))

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' order_startdate ' + cast(@vfil_order_date  as varchar(30)) + ' order end date ' + cast(@vfil_order_date2  as varchar(30))


	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin','pho_signed_by','pho_order_status') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	, 'pho_drug_allergy','pho_drug_interaction','pho_black_box','pho_dose_check','pho_signed_by'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 39
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 40
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_admin_record%')		SET @vfil_administration_record= '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_administered_by')		SET @vfil_administered_by_id = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';


	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_type')				SET @vfil_order_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_permanent_source')		SET @vfil_permanent_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like  'pho_source%')			SET @vfil_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_route_of_admin')			SET @vfil_route_of_admin = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_schedule_template')		SET @vfil_schedule_template = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_type')				SET @vfil_diet_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_texture')			SET @vfil_diet_texture = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_fluid_consistency')		SET @vfil_fluid_consistency = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_supplement')		SET @vfil_diet_supplement = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_phys_order_id')			SET @vfil_physOrderId = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_std_order')				SET @vfil_pho_std_order = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name
	 in ('pho_drug_allergy','pho_drug_interaction','pho_black_box','pho_dose_check'))				SET @vfil_drug_warning = '1'

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_signed_by')			SET @vfil_signed_by = '1';


   update #PRP_Multi_Filters
	 set filter_value=
	case filter_name
	 when 'pho_drug_allergy' then 1
	 when 'pho_drug_interaction' then 2
	 when 'pho_black_box' then 3
	 when 'pho_dose_check' then 4
	 else filter_value
	 end ;


	if @debug_me='Y' Print 'drug_warning ' + convert(varchar , @vfil_drug_warning)

	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);
	--select @vClientIDs


	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b

		if (select count(*) from #PRP_Multi_Filters where filter_name='client_id')>1
	     set  @vfil_client_id_str=1
		else set  @vfil_client_id_str=0
	END

		-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(c.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (c.allergy ='To Be Determined' or  c.allergy='' or c.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select clients.client_id, mpi_id, client_id_number
							, clients.admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, photo_date, photo_small , allergy

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				INNER  JOIN dbo.clients_attribute ca WITH (NOLOCK)
						on clients.client_id = ca.client_id
				where clients.fac_id = @vFacID
				 and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND ((@vfil_client_status = '-1')
					OR (@vfil_client_status = 1 AND clients.discharge_date is not null  AND clients.discharge_date <@vfacadjusteddate ) )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id

		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(c.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (c.allergy ='To Be Determined' or  c.allergy='' or c.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select clients.client_id, mpi_id, client_id_number
							, clients.admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, photo_date, photo_small , allergy

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				INNER  JOIN dbo.clients_attribute ca WITH (NOLOCK)
						on clients.client_id = ca.client_id
				where clients.fac_id = @vFacID
				 and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = 0 AND (clients.discharge_date IS NULL OR clients.discharge_date > @vfacadjusteddate ) )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id

		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.effective_date asc  ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)
					   AND c.effective_date <= @vfacadjusteddate
				      AND (c.ineffective_date>= @vfacadjusteddate or c.ineffective_date is null)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )

		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 52
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select * from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 53
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;


	------Getting filtered orders from view_pho_phys_order
	select @vStep = 58
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);

	if  @vScheduleLevel = '1' or @vfil_pho_unsched_order = '1' or isnull(@vfil_pho_fac_time_code,'0')<>'0'
	BEGIN
		if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'

	;
	with tb
	as (


	select
				po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				,clinical.reviewed_by
				,clinical.reviewed_date
				,null as   [reviewed_by_long_username]
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then sg.cp_sec_user_audit_id
					when  esg.sign_user_id is not null then esg.sign_user_id
				  end signed_by
				, case
				    when  esg.sign_date is null then null
					--when sg.signature_date is not null and @vfil_signed_date_type is null and esg.sign_date is null then sg.signature_date
					when  esg.sign_date is not null then esg.sign_date
				  end   signed_date
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then isnull(secaudit.long_username , secaudit.loginname )
					when  esg.sign_user_id is not null then isnull(esu.long_username,esu.loginname)
				   end	  [signed_by_long_username]
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then
						replace(po.directions, '<', '&lt;')
						else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1'  then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date
				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				, po.order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				,case
				    when  esg.sign_user_id is null then 'N'
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then 'T'
					when  esg.sign_user_id is not null then 'E'
				 end Eflag
	from view_prp_pho_phys_order_schedule po
		inner join pho_phys_order class on class.phys_order_id=po.phys_order_id and order_class_id=1
			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId
		    left join pho_order_clinical_review	clinical
			       on clinical.phys_order_id=po.phys_order_id

			--left join pho_phys_order_sign	sg 	 with (nolock)
			--       on sg.phys_order_id=po.phys_order_id
			----left join dbo.pho_phys_order_useraudit useraudit with (nolock)
			----	on useraudit.phys_order_id = sg.phys_order_id
			--left join dbo.cp_sec_user_audit secaudit with (nolock)
			--	on secaudit.cp_sec_user_audit_id = sg.cp_sec_user_audit_id 	and secaudit.fac_id = @vFacId

			left join pho_phys_order_esignature	esg 	 with (nolock)
			       on esg.phys_order_id=po.phys_order_id
			left join sec_user esu with (nolock)
			   on esu.userid=esg.sign_user_id


	 where po.draft='0'
		and	po.order_category_id  <> 3030  ----exclude administrative orders
		AND (( @vIncludeIndication=1 AND po.communication_method=3209 AND (po.indications_for_use IS NULL OR po.indications_for_use='')  ) OR @vIncludeIndication=0)
		AND (( @vIncludeRelatedDiagnosis=1 AND po.communication_method=3209 AND (po.diagnoses IS NULL OR po.diagnoses ='')  ) OR @vIncludeRelatedDiagnosis=0)

	union all

	select   null as administered_by_id
		, ppo.alter_med_src
		, ppo.client_id
		, ppo.communication_method
		, ppo.completed_by
		, ppo.max_end_date
		, ppo.confirmed_by
		, ppo.confirmed_by_long_username
		, ppo.confirmed_date
		, ppo.created_by
		, ppo.created_by_long_username
		, ppo.created_date
		,NULL AS reviewed_by
		,NULL AS reviewed_date
		,NULL AS reviewed_by_long_username
		,NULL AS signed_by
		,NULL AS signed_date
		,NULL AS [signed_by_long_username]
		, ppo.diet_type
		, ppo.diet_texture
		, ppo.diet_supplement
		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
		, ppo.discontinued_date
		, ppo.end_date
		, ppo.fac_id
		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
		, ppo.hold_date
		, ppo.hold_date_end
		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
		, ppo.order_category_id
		, ppo.order_date
		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
		, ppo.order_status
		, null as order_relationship
		, ppo.order_type_id
		, ppo.pharmacy_id
		, ppo.phys_order_id
		, ppo.physician_id
		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
		, ppo.resume_date
		, ppo.revision_by
		, ppo.revision_by as revision_long_username
		, ppo.revision_date
		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
		, null schedule_template
		, ppo.[start_date]
		, ppo.std_order_id
		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
		, ppo.date_ordered as supply_order_date
		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
		, ppo.last_reorder_date as supply_last_reorder_date
		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
		, ppo.fluid_consistency
		, ppo.active_flag
		, ppo.order_verified
		, ppo.draft
		, ppo.std_freq_id
		, ppo.description
		, null as order_schedule_id
		, ppo.last_reorder_date
		, ppo.date_ordered
		, ppo.diagnoses
		, ppo.route_of_admin as route_of_admin
        , null as controlled_substance_code
		,'N' Eflag
	 from dbo.view_prp_pho_phys_order_strike_out ppo
	 INNER JOIN (SELECT phys_order_id FROM pho_phys_order_audit WHERE order_class_id=1 AND event_type='S') audit  ON audit.phys_order_id=ppo.phys_order_id


			inner join #clients clients  with (nolock)
					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
					AND ppo.fac_id = @vFacId
					and @vfil_order_status_strikeout = 1

			where ppo.order_category_id  not in ( -1, 3030)
			AND  (( @vIncludeIndication=1 AND  ppo.communication_method=3209 AND (ppo.indications_for_use IS NULL OR ppo.indications_for_use ='')) OR @vIncludeIndication=0)
			AND  (( @vIncludeRelatedDiagnosis=1 AND  ppo.communication_method=3209 AND (ppo.diagnoses IS NULL OR ppo.diagnoses ='')) OR @vIncludeRelatedDiagnosis=0)
	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				, order_schedule_id
				,reviewed_by
			    ,reviewed_date
				,reviewed_by_long_username
				,signed_by
			    ,signed_date
				,signed_by_long_username
				,Esigned_flag
		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				, po_sch.std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				, po.order_schedule_id
				,po.reviewed_by
			    ,po.reviewed_date
				,po.reviewed_by_long_username
				,po.signed_by
				,po.signed_date
				,po.signed_by_long_username
				,po.eflag
		From tb po with (nolock)

		left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id



		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id

		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left OUTER JOIN ( SELECT allergy.phys_order_id,
		                         allergy.allergy_id,
								 allergy.cp_sec_user_audit_id,
								 allergy.acknowledgement_date,
								 allergy.pn_id
								  FROM  dbo.pho_phys_order_allergy_acknowledgement allergy WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_allergy' AND f.filter_value = 1 -- order with drug allergy
						) algry
					on po.phys_order_id = algry.phys_order_id

		left OUTER JOIN ( SELECT DrugtoDrug.id,
		                         DrugtoDrug.phys_order_id,
								 DrugtoDrug.phys_order_id2,
								 DrugtoDrug.order_supply_id,
								 DrugtoDrug.order_supply_id2,
								 DrugtoDrug.cp_sec_user_audit_id,
		                         DrugtoDrug.acknowledgement_date,
								 DrugtoDrug.severity_code
			 FROM  dbo.pho_phys_order_drug_acknowledgement DrugtoDrug WITH (NOLOCK)
							INNER JOIN #PRP_drug_severity_level lvl WITH (NOLOCK)
								ON lvl.severity_id = DrugtoDrug.severity_code
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_interaction' AND f.filter_value = 2 -- order with drug to drug interaction
						) DtoD
					on po.phys_order_id = DtoD.phys_order_id

		left OUTER JOIN ( SELECT bb.phys_order_id,
		                         bb.order_supply_id,
								 bb.[file_name],
								 bb.cp_sec_user_audit_id,
								 bb.acknowledgement_date
								  FROM  dbo.pho_phys_order_blackbox_acknowledgement bb WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_black_box' AND f.filter_value = 3 -- order with black box warning
						) blackbox
					on po.phys_order_id = blackbox.phys_order_id

		left OUTER JOIN ( SELECT overdose.phys_order_id,
		                         overdose.over_dose
								   FROM  dbo.pho_phys_order_dose_check_acknowledgement overdose WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_dose_check' AND f.filter_value = 4 -- order with max dosage
									AND overdose.over_dose = 1
						) over_dose
					on po.phys_order_id = over_dose.phys_order_id

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		INNER JOIN @ordered_by ordby ON (ordby.items = po.physician_id OR ordby.items = -1)

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa		on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		left join #PRP_Multi_Filters schtemp	on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		left join #PRP_Multi_Filters dt			on dt.filter_name		= 'pho_diet_type'				and dt.filter_value = po.diet_type
		left join #PRP_Multi_Filters dtxt		on dtxt.filter_name		= 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		left join #PRP_Multi_Filters dsup		on dsup.filter_name		= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		left join #PRP_Multi_Filters fc			on fc.filter_name		= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	on OrderId.filter_name	= 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id

		left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'		and sgb.filter_value =po.signed_by
				   		where  (po.active_flag = 'Y' or po.active_flag is null)
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )




			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )
			AND ((@vfil_signed_by  = '1'	and po.signed_by is not null) or @vfil_signed_by  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)


			-- drug protocol warning
			and (@vfil_drug_warning = '1' AND (algry.phys_order_id IS NOT NULL  or DtoD.phys_order_id  is NOT NULL
												or blackbox.phys_order_id IS NOT NULL or over_dose.phys_order_id is NOT null)
					or @vfil_drug_warning = '0' )

			--,reviewed_by varchar(60)
			--,reviewed_date datetime
			------DATE FILTERS
			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
					else 0 end

           		AND 1 = Case when (@vfil_reviewed_date_type  is NULL) then 1
						 when po.reviewed_date  >= @vfil_reviewed_date and po.reviewed_date < @vfil_reviewed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_signed_date_type  is NULL) then 1
						 when po.signed_date  >= @vfil_signed_date and po.signed_date < @vfil_signed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
					else 0 end
			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_order_date_type is NULL) then 1
						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
					else 0 end
--			-- asof date filter
			AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
							then 1
					else 0 end

			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
						when  po.start_date >= @vfil_order_start_date and   po.start_date< @vfil_order_start_date2 then 1
						else 0 end

			AND 1  = case
					when (@vfil_order_end_date_type  is NULL or (@vfil_order_end_date_type='NODATE' and po.end_date is null)) then 1
					when (@vfil_order_end_date_type = 'ON' and po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'BEFORE' and po.end_date < @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'AFTER' and (po.end_date is null or po.end_date >=@vfil_order_end_date)) then 1
					else 0 end


			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
						else 0 end



			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
						else 0 end


			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
					else
					---show all orders
					case when
						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)

						) ---handling with or without schedules
						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
						and isnull(po.active_flag,'y') = 'y'   --- valid order
                              and po.order_verified = 'Y'   -----no pending

						then 1 else

						0 end
				   end


	END

	ELSE -- no schedule level or schedule detail level
	BEGIN

	;
	with tb1
	as (

	select
				po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, null  	as confirmed_by
				, null  	as confirmed_by_long_username
				, null		as confirmed_date
				, po.created_by      as [created_by]
				, null      as [created_by_long_username]
				, po.created_date
				,clinical.reviewed_by
	        	,clinical.reviewed_date
				,NULL AS reviewed_by_long_username
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then sg.cp_sec_user_audit_id
					when esg.sign_user_id is not null then esg.sign_user_id
				  end signed_by
				, case
				    when  esg.sign_date is null then null
					--when sg.signature_date is not null and @vfil_signed_date_type is null and esg.sign_date is null then sg.signature_date
					when  esg.sign_date is not null then esg.sign_date
				  end   signed_date
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then isnull(secaudit.long_username , secaudit.loginname )
					when  esg.sign_user_id is not null then isnull(esu.long_username,esu.loginname)
				  end	  [signed_by_long_username]

				--,sg.cp_sec_user_audit_id signed_by
				--,sg.signature_date  signed_date
				--,isnull(secaudit.long_username , secaudit.loginname ) 	  [signed_by_long_username]
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then
					replace(po.directions, '<', '&lt;')
					else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1'   then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date
				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
				, NULL as order_status--OrderStatus.order_status
				, null as order_relationship--OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				,po.revision_by       as [revision_by]
				,null       as [revision_by_long_username]
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				, po.order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
                , po.controlled_substance_code
				, case
				    when esg.sign_user_id is null then 'N'
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then 'T'
					when  esg.sign_user_id is not null then 'E'
				  else null end Eflag

		from view_prp_pho_phys_order_schedule po
			inner join pho_phys_order class on class.phys_order_id=po.phys_order_id and order_class_id=1
				inner join #clients clients  with (nolock)
						on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients
								AND po.fac_id = @vFacId
				left join pho_order_clinical_review	clinical
			        on clinical.phys_order_id=po.phys_order_id

				--left join pho_phys_order_sign	sg 	 with (nolock)
			 --       on sg.phys_order_id=po.phys_order_id
				----left join dbo.pho_phys_order_useraudit useraudit with (nolock)
				----	on useraudit.phys_order_id = sg.phys_order_id
				--left join dbo.cp_sec_user_audit secaudit with (nolock)
				--	on secaudit.cp_sec_user_audit_id = sg.cp_sec_user_audit_id 	and secaudit.fac_id = @vFacId

				left join pho_phys_order_esignature	esg 	 with (nolock)
					   on esg.phys_order_id=po.phys_order_id
				left join sec_user esu with (nolock)
				   on esu.userid=esg.sign_user_id
		where  po.draft='0'
			and po.order_category_id  <> 3030
 AND (( @vIncludeIndication=1  AND po.communication_method=3209 AND ( po.indications_for_use IS NULL OR po.indications_for_use='')) OR @vIncludeIndication=0)
  AND (( @vIncludeRelatedDiagnosis=1  AND po.communication_method=3209 AND (po.diagnoses IS NULL OR po.diagnoses='')) OR @vIncludeRelatedDiagnosis=0)
		union all

		select   null as administered_by_id
			, ppo.alter_med_src
			, ppo.client_id
			, ppo.communication_method
			, ppo.completed_by
			, ppo.max_end_date
			, ppo.confirmed_by
			, ppo.confirmed_by_long_username
			, ppo.confirmed_date
			, ppo.created_by
			, ppo.created_by_long_username
			, ppo.created_date
			,NULL AS reviewed_by
		    ,NULL AS reviewed_date
			,NULL AS reviewed_by_long_username
			,NULL AS signed_by
		    ,NULL AS signed_date
			,NULL AS signed_by_long_username
			, ppo.diet_type
			, ppo.diet_texture
			, ppo.diet_supplement
			, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
			, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
			, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_descf
			, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
			, ppo.discontinued_date
			, ppo.end_date
			, ppo.fac_id
			, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
			, ppo.hold_date
			, ppo.hold_date_end
			, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
			, ppo.order_category_id
			, ppo.order_date
			,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
			, ppo.order_status
			, null as order_relationship
			, ppo.order_type_id
			, ppo.pharmacy_id
			, ppo.phys_order_id
			, ppo.physician_id
			, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
			, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
			, ppo.resume_date
			, ppo.revision_by
			, ppo.revision_by as revision_long_username
			, ppo.revision_date
			, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
			, null schedule_template
			, ppo.[start_date]
			, ppo.std_order_id
			, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
			, ppo.date_ordered as supply_order_date
			, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
			, ppo.last_reorder_date as supply_last_reorder_date
			, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
			, ppo.fluid_consistency
			, ppo.active_flag
			, ppo.order_verified
			, ppo.draft
			, ppo.std_freq_id
			, ppo.description
			, null as order_schedule_id
			, ppo.last_reorder_date
			, ppo.date_ordered
			, ppo.diagnoses
			, ppo.route_of_admin as route_of_admin
            ,null as controlled_substance_code
			,'N' eflag

		 from dbo.view_prp_pho_phys_order_strike_out ppo
		   INNER JOIN (SELECT phys_order_id FROM pho_phys_order_audit WHERE order_class_id=1 AND event_type='S') audit  ON audit.phys_order_id=ppo.phys_order_id

				inner join #clients clients  with (nolock)
						on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
						AND ppo.fac_id = @vFacId
						and @vfil_order_status_strikeout = 1

		where ppo.order_category_id  not in ( -1, 3030)
		AND (( @vIncludeIndication=1  AND ppo.communication_method=3209 AND (ppo.indications_for_use IS NULL OR ppo.indications_for_use='')) OR @vIncludeIndication=0)
		AND (( @vIncludeRelatedDiagnosis=1  AND ppo.communication_method=3209 AND (ppo.diagnoses IS NULL OR ppo.diagnoses='')) OR @vIncludeRelatedDiagnosis=0)
		)

		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, schedule_date
				, documented_date
				, documented_by
				, administered_date
				, order_verified
				, active_flag
                , controlled_substance_code
				, order_schedule_id
				,reviewed_by
			    ,reviewed_date
				,reviewed_by_long_username
				,signed_by
			    ,signed_date
				,signed_by_long_username
				,Esigned_flag

		)
		Select

				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date

				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

					 --po.[description]
						replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;')
																			, '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
						+ '</b>' else NULL end as order_desc


				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, NULL as std_freq_id
				, NULL as schedule_date
				, NULL as documented_date
				, NULL as documented_by
				, NULL as administered_date
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				, po.order_schedule_id
				,po.reviewed_by
			    ,po.reviewed_date
				,po.reviewed_by_long_username
				,po.signed_by
			    ,po.signed_date
				,po.signed_by_long_username
				,po.eflag

		From tb1 po with (nolock)

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock) on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left OUTER JOIN ( SELECT allergy.phys_order_id,
		                         allergy.allergy_id,
								 allergy.cp_sec_user_audit_id,
								 allergy.acknowledgement_date,
								 allergy.pn_id    FROM  dbo.pho_phys_order_allergy_acknowledgement allergy WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_allergy' AND f.filter_value = 1 -- order with drug allergy
						) algry
					on po.phys_order_id = algry.phys_order_id

		left OUTER JOIN ( SELECT DrugtoDrug.id,
		                         DrugtoDrug.phys_order_id,
								 DrugtoDrug.phys_order_id2,
								 DrugtoDrug.order_supply_id,
								 DrugtoDrug.order_supply_id2,
								 DrugtoDrug.cp_sec_user_audit_id,
								 DrugtoDrug.acknowledgement_date,
								 DrugtoDrug.severity_code
		                         FROM  dbo.pho_phys_order_drug_acknowledgement DrugtoDrug WITH (NOLOCK)
							INNER JOIN #PRP_drug_severity_level lvl WITH (NOLOCK)
								ON lvl.severity_id = DrugtoDrug.severity_code
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_interaction' AND f.filter_value = 2 -- order with drug to drug interaction
						) DtoD
					on po.phys_order_id = DtoD.phys_order_id

		left OUTER JOIN ( SELECT bb.phys_order_id,
		                         bb.order_supply_id,
								 bb.[file_name],
								 bb.cp_sec_user_audit_id,
								 bb.acknowledgement_date FROM  dbo.pho_phys_order_blackbox_acknowledgement bb WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_black_box' AND f.filter_value = 3 -- order with black box warning
						) blackbox
					on po.phys_order_id = blackbox.phys_order_id

		left OUTER JOIN ( SELECT overdose.phys_order_id,
		                          overdose.over_dose FROM  dbo.pho_phys_order_dose_check_acknowledgement overdose WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_dose_check' AND f.filter_value = 4 -- order with max dosage
									AND overdose.over_dose = 1
						) over_dose
					on po.phys_order_id = over_dose.phys_order_id


		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method
	     INNER JOIN @ordered_by ordby ON (ordby.items = po.physician_id OR  ordby.items = -1)



		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		left join #PRP_Multi_Filters dt	 on dt.filter_name = 'pho_diet_type'				and dt.filter_value = po.diet_type
		left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		left join #PRP_Multi_Filters dsup	 on dsup.filter_name	= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		left join #PRP_Multi_Filters fc	 on fc.filter_name	= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id
		left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'		and sgb.filter_value =po.signed_by

		where  (po.active_flag = 'Y' or po.active_flag is null)
			----MULTIPLE VALUES SUPPORTED
			AND	((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )



			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )
			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )

			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )
			AND ((@vfil_physOrderId  = '1'			and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order  = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )
			AND ((@vfil_signed_by  = '1'	and po.signed_by is not null) or @vfil_signed_by  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )
			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)
			-- drug protocol warning
			and (@vfil_drug_warning = '1' AND (algry.phys_order_id IS NOT NULL  or DtoD.phys_order_id  is NOT NULL
												or blackbox.phys_order_id IS NOT NULL or over_dose.phys_order_id is NOT null)
				or @vfil_drug_warning = '0' )




			------DATE FILTERS
			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
					else 0 end

           AND 1 = Case when (@vfil_reviewed_date_type  is NULL) then 1
						 when po.reviewed_date  >= @vfil_reviewed_date and po.reviewed_date < @vfil_reviewed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_signed_date_type  is NULL) then 1
						 when po.signed_date  >= @vfil_signed_date and po.signed_date < @vfil_signed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_order_date_type is NULL) then 1
						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
					else 0 end
			-- asof date filter
			AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
							then 1
					else 0 end

			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
						else 0 end

			AND 1  = case
					when (@vfil_order_end_date_type  is NULL or (@vfil_order_end_date_type='NODATE' and po.end_date is null)) then 1
					when (@vfil_order_end_date_type = 'ON' and po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'BEFORE' and po.end_date < @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'AFTER' and (po.end_date is null or po.end_date >=@vfil_order_end_date)) then 1
					else 0 end


			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
						else 0 end


			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
						else 0 end


			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
					else
					---show all orders
					case when
						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
						) ---handling with or without schedules
						and (po.end_date is null  or po.end_date>= @vfil_start_end_date_range_d1)
						and (po.discontinued_date is null or po.discontinued_date >=@vfil_start_end_date_range_d1)
						and isnull(po.active_flag,'y') = 'y'   --- valid order
                        and po.order_verified = 'Y'   -----no pending

						then 1 else 0 end
				   end

	END

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)

	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status

if @debug_me = 'y'  select 'Orders' Orders, * From #prp_orders

-- get all orders for that facility/client

if (@client_id <> '-1' and @vfil_client_id_str=0) set @vSP_ClientId = @client_id

DECLARE @vSelectedDate datetime
set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vSelectedDate
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


	-- delete orders if they are not part of the filter
		delete  pr
		from #prp_orders pr
			left join #PRP_Multi_Filters os			on os.filter_name		= 'pho_order_status'		and os.filter_value = pr.order_status
			where (@vfil_order_status = '1'  and os.filter_value is null)
			or ((@vfil_view_all_orders is not null AND
					((pr.order_status = 2/*Discontinued*/ and pr.discontinued_date < @vfil_view_all_orders_lookback_date)
					 or (pr.order_status = 3/*Completed*/ and pr.completed_date < @vfil_view_all_orders_lookback_date)
					)))



	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null or  @vfil_reviewed_by is not null or  @vfil_signed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )
				,reviewed_by=secuser_reviewed.loginname
				,reviewed_by_long_username=secuser_reviewed.long_username
				--,signed_by= case when po.Esigned_flag='T' then   cpsecuser_signed.loginname
				--                 when po.Esigned_flag='E' then   secuser_signed.loginname
				--			else null end
			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by
                left join dbo.sec_user secuser_reviewed
				   on secuser_reviewed.loginname=po.reviewed_by


				--left join dbo.sec_user secuser_signed
				--   on secuser_signed.userid=po.signed_by

				--left join dbo.cp_sec_user_audit cpsecuser_signed with (nolock)
				--	on cpsecuser_signed.cp_sec_user_audit_id = po.signed_by




	end

	if  @vfil_created_by is not null or @vfil_confirmed_by is not null or @vfil_reviewed_by is not null or @vfil_signed_by is not null
	begin
		delete #PRP_Orders
			from #PRP_Orders po
			left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'
			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
							     and ((po.reviewed_by = @vfil_reviewed_by and po.reviewed_by is not null) or @vfil_reviewed_by is null)
								  AND ((@vfil_signed_by  = '1'	and po.signed_by is not null and sgb.filter_value =po.signed_by) or @vfil_signed_by  is null )
							)



	end
	if @debug_me = 'y' Select * from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retrieving administrative orders ' + convert(varchar(26),getdate(),109)

--	 get all administrative orders instead of just hold orders

--	Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)
--	Select  p.original_phys_order_id,p.effective_date,p.ineffective_date, p.order_relationship_id, p.relationship, p.reason, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
--	from  [dbo].view_prp_pho_administrative_order  p with (nolock)
--	inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on p.original_phys_order_id = po.phys_order_id
--	left OUTER JOIN dbo.contact ct WITH (NOLOCK )
--			on ct.contact_id = p.physician_id

-- eliminated usage of view_prp_pho_administrative_order
	;With tb1
	as
	(
	Select

		 pro.related_phys_order_id Original_phys_order_id
		, pro.order_related_id
		, pro.phys_order_id as admin_phys_order_id
		, pro.order_relationship_id
		, pao.effective_date
		, pao.ineffective_date
		, pao.physician_id
		, pao.reason
		, pao.created_date as admin_order_created_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
		from dbo.pho_related_order  pro with (nolock )
		inner Join dbo.pho_admin_order pao  with (nolock )
		on pro.phys_order_id = pao.phys_order_id

		inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
		where
		      (pro.deleted IS NULL OR pro.deleted = 'N')
			and  (pao.deleted IS NULL OR pao.deleted = 'N')
			and pao.exclude_eom_status_calculation=0
			AND pro.fac_id = @vFacID

			AND 1= CASE
			  when 	@vIncludeAdminOrder=1 and @vReportId=0   and pao.effective_date < @vfil_admin_order_date_range_d2
			and (pao.ineffective_date is null or pao.ineffective_date >= @vfil_admin_order_date_range_d1)   then 1
		      when 	@vIncludeAdminOrder=1 and @vReportId<>0 then 1
			else 0 end

	)
	, tb2 as
	(
	  Select tb1.original_phys_order_id
		, tb1.order_related_id
		, tb1.admin_phys_order_id
		, tb1.order_relationship_id
		, tb1.effective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
		, tb1.physician_id
		, tb1.reason
		, tb1.admin_order_created_date
		, nextrow.admin_phys_order_id as next_admin_phys_order_id
		From tb1
			left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
	)

	Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

	Select  tb2.original_phys_order_id
		, tb2.effective_date
		, tb2.ineffective_date
		, tb2.order_relationship_id
		, Case tb2.order_relationship_id
				when 1 then 'hold'
				when 2 then 'resume'
				when 3 then 'discontinue'
				else 'unknown'
			  end as relationship
		, tb2.reason
		, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
	 From tb2

	 left OUTER JOIN dbo.contact ct WITH (NOLOCK )
				on ct.contact_id = tb2.physician_id



	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 finished retrieving administrative orders ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #PRP_Holds

	if @debug_me='Y' select  555,@vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end

	if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		IF @vReportId=0
				update #PRP_Orders set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
		else
		begin
			Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
										+ replace ( replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
				from #PRP_Orders o
				Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
								(
									Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
										from dbo.view_prp_pho_phys_order_schedule po with (nolock)
										where po.phys_order_id = o.phys_order_id
										order by po.start_date
										FOR XML PATH (''), TYPE
								) a ( order_summary )
					) OrderSumm

				update #PRP_Orders
					set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
					where order_status = 4
		end
	END



	-- fill in temp table for all drug warning
	if @vDrugWarningMessage = '1'
		begin

		select @vStep = 65
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating drug warning ' + convert(varchar(26),getdate(),109)
      if @vDrugAllergyMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug Allergy: ' + isnull(sec_user.long_username + ', ', '')  + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, algy.acknowledgement_date , @vdateFormatStyle), '') + ' '  + isnull(convert(VARCHAR, algy.acknowledgement_date , 108), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_allergy_acknowledgement algy WITH (NOLOCK)
			on po.phys_order_id = algy.phys_order_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on algy.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id

      if @vDrugBlackBoxMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Black Box: ' + isnull(sec_user.long_username + ', ', '')  + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, bb.acknowledgement_date , @vdateFormatStyle), '') +' ' +  isnull(convert(VARCHAR, bb.acknowledgement_date , 108 ), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_blackbox_acknowledgement  bb WITH (NOLOCK)
			on po.phys_order_id = bb.phys_order_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on bb.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id

      if @vDrugInteractionMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug to Drug Interaction: ' +  isnull(sec_user.long_username + ', ', '') + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, dd.acknowledgement_date , @vdateFormatStyle), '') + ' ' + isnull(convert(VARCHAR, dd.acknowledgement_date , 108), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_drug_acknowledgement  dd WITH (NOLOCK)
			on po.phys_order_id = dd.phys_order_id
		inner JOIN #PRP_drug_severity_level lvl with (NOLOCK )
			ON dd.severity_code = lvl.severity_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on dd.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id


       if @vDrugDoseMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug Exceeded Maximum Dosage: '   from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_dose_check_acknowledgement  dd WITH (NOLOCK)
			on po.phys_order_id = dd.phys_order_id
			and dd.over_dose = 1


		Update #PRP_Orders Set drug_warning = isnull(o.drug_warning,'')  --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
									+ replace(replace( replace ( replace ( replace( replace( isnull('' + ltrim(isnull(warn.warn_desc,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
			from #PRP_Orders o
			Cross Apply (	Select warn_desc.value('.','varchar(max)') as warn_desc from
							(
								Select    warning_desc + char(13)
									from #Prp_drug_warning po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.warning_desc
									FOR XML PATH (''), TYPE
							) a ( warn_desc )
				) warn

		if @debug_me='Y' select * from #Prp_drug_warning
		end







	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	if @debug_me = 'y' Select * from #PRP_Orders;



	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vdateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vdateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vdateFormatStyle)			as created_date

		,  po.reviewed_by_long_username				     	as reviewed_by
		, convert(char(10),po.reviewed_date,@vdateFormatStyle)			as reviewed_date

		,  po.signed_by_long_username				     	as signed_by
		, convert(char(10),po.signed_date,@vdateFormatStyle)			as signed_date

--		, po.directions									as directions
		, replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vdateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		,CONVERT(VARCHAR,po.phys_order_id) fod_phys_order_id ---new req for field to display
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,@vdateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
            when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status in (10,11) then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'')
		, isnull(po.order_desc,'') + isnull((replace (replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
							),'')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vdateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vdateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vdateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vdateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vdateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vdateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		, po.order_schedule_id
		, po.drug_warning
		, medication_class.descdisplay medication_class
		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join common_code cc on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #PRP_Holds ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								    convert(char(10),effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								    isnull(convert(char(10),ineffective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								   reason + char(9) +
								    ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #PRP_Holds ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

				outer apply( select medication.value('.','varchar(max)') as descdisplay From
				  (SELECT  gpi.descdisplay+', '
	                from (select prf.phys_order_id, phys_order_ext_lib_rec_id
							  from dbo.pho_order_ext_lib_med_ref prf with (nolock) where  prf.phys_order_id=po.phys_order_id
								union
							 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id
							   from  dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) where  pref_audit.phys_order_id=po.phys_order_id
							) poelmr
					INNER JOIN  (
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
						) classes
			         ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
			         LEFT JOIN [mmdb].[dbo].mmw_cls_gpi gpi with (nolock)  on gpi.classid= classes.class_id and  gpi.parentclassid is null
					order by poelmr.phys_order_ext_lib_rec_id,gpi.descdisplay FOR XML PATH(''), TYPE
					) a (medication)

				) medication_class

--			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
--							(
--								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
--									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
--									where po.phys_order_id = o.phys_order_id
--									order by po.start_date
--									FOR XML PATH (''), TYPE
--							) a ( order_summary )
--				) OrderSumm

		--Left join (	 SELECT poelmr.phys_order_id,poelmr.phys_order_ext_lib_rec_id,classes.class_id,gpi.descdisplay from
		--					(select prf.phys_order_id, phys_order_ext_lib_rec_id
		--					  from #PRP_Orders po
		--					  left join dbo.pho_order_ext_lib_med_ref prf with (nolock) on po.phys_order_id=prf.phys_order_id
		--						union
		--					 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id
		--					   from #PRP_Orders po
		--					   left join dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) on po.phys_order_id=pref_audit.phys_order_id
		--					) poelmr
		--				INNER JOIN  (
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
		--					) classes
		--		 ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
		--		 left join [mmdb].[dbo].mmw_cls_gpi gpi on gpi.classid= classes.class_id
		--			   ) medication_class	on medication_class.phys_order_id = po.phys_order_id

	)
	, tbWithGroupSet
	as
	(
		Select

		fac_id
		,client_id
		,client_id_str --- required for building group id
		,client_name
		,admission_date
		,discharge_date
		,deceased_date
		,gender
		,allergy
		,location
		,date_of_birth
		,client_physician_id
		,client_physician
		,client_pharmacy
		,mrn_number
		,client_id_number
		,fac_name
		,fac_address
		,fac_tel
		,additional_directions
		,administration_record
		,administered_by
		,advanced_directive
		,communication_method
		,completed_by
		,completed_date
		,confirmed_by
		,confirmed_date
		,created_by
		,created_date
		,reviewed_by
		,reviewed_date
		,signed_by
		,signed_date
		,directions
		,discontinued_date
		,discontinued_by
		,discontinued_reason
		,order_end_date
		,hold_date
		,hold_date_end
		,hold_by
		,hold_reason
		,hold_start_end_date
		,indications_for_use
		,phys_order_id
		,physician_id
		,physician
		,order_category_id
		,order_category
		,order_date
		,order_date_time
		,order_desc
		,order_status
		,order_summary
		,order_schedule_summary
		,order_type_id
		,order_type
		,permanent_source
		,pharmacy
		,related_diagnoses
		,resume_date
		,resume_by
		,resume_reason
		,revision_by
		,revision_date
		,route_of_admin
		,schedule_template
		,order_start_date
		,related_generic
		,order_type_seq
		,diet_type_desc
		,diet_texture_desc
		,fluid_consistency_desc
		,diet_supplement_desc
		,supply_reorder
		,supply_order_date
		,supply_last_order_date
		,supply_last_reorder_date
		,initials_blank
		,notes_blank
		,renew_blank
		,stop_blank
		,schedule_time
		,schedule_date
		,schedule_date_time
		,std_freq_desc
		,documented_date
		,documented_by
		,administered_date
		,administrative_details
		,order_schedule_id
		,drug_warning
		,medication_class
		,fod_phys_order_id




		      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
			  when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
			  when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
		      when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
              when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
              when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)


			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
		      when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			, order_schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id,G1,G2,G3, G_set_id
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,ISNULL(@ICDDate,@vgs_start_time),@vFacId) ,'')

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	, order_schedule_id
   	from tbWithSort
	Order by row_num
	)
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code 
		, (case when row_num = 1 then status_text else null end )status_text			
		, phys_order_id
		, order_schedule_id
		, row_num
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics
 

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text	
		, NULL as phys_order_id
		, NULL as order_schedule_id
		, NULL as row_num
END CATCH 
END
RETURN 

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report_active_order.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-44441       :   script to create sproc_prp_order_based_active_order_report Procedure  
--						-- 
-- Written By:          Rolly Sanchez
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_active_order_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:
2013-07-08  Rolly Sanchez       Initial creation of this stored proc
2013-08-07	Rolly Sanchez		PCC-45461(3.7.0.5) Handle Indefinite hold and multiple hold

-- ================================================================================= */


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_active_order_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_active_order_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_order_based_active_order_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************


Sample Execution Script:
---Select * from prp_report_column


Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_active_order_report
 @report_id =  '-9'--'-13'
,@fac_id =  '39'
,@field_list =  '-12,-48,-51,-103,-37,-41'
--,@field_list = '0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36'
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;pho_order_status=1,4;pho_include_admin_order=1;pho_admin_order_asof_date=06/02/2013'--;pho_order_date_range=06/01/2013,06/30/2013'
,@sort_list =  '0=-1'
,@execution_user_login =  'PCC-sanchr'
,@rows_returned = null
,@debug_me = 'Y'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @vSP_ClientId int
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)

-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)




-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit


----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime


	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_range varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime


	,@vfil_asof_order varchar(100)  ---as of date setting for order summary report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime


	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'

	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime


Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary varchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
			, order_schedule_id int
            ,controlled_substance_code int
);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #prp_admin_orders
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
);


BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	SET @vSortList	  = @sort_list;


	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	exec dbo.sproc_prp_generic_metadata
	@report_id = @VreportId
	,@fac_id = @VfacId
	,@field_list = @vFieldList
	,@filter_list = @vFilterList
	,@sort_list = @Vsortlist
	,@execution_user_login = @execution_user_login
	,@rows_returned = null
	,@footer = @vFooter  OUTPUT
	,@header = @vHeader OUTPUT
	,@term_client = @vTermClient output
	,@term_admission = @vTermAdmission output
	,@debug_me = @debug_me
	,@status_code = @vGeneric_statuscode output
	,@status_text = @vGeneric_statustext output

	if isnull(@vGeneric_statuscode,0)  = 1
		  begin
				set @status_text = 'sproc_prp_generic_metadata returned the following error: ' + isnull(@vGeneric_statustext,'')
				Raiserror( @vGeneric_statustext, 11, 1 );
		  end




	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';

	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');


	select @vStep = 18
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;
	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		   +  isnull(@vCol2,'')
		   + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END



	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 25
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 35
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	SELECT @vfil_supply_reorder = filter_value from #PRP_Filters where filter_name = 'pho_supply_reorder';

	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_created_by = filter_value from #PRP_Filters where filter_name = 'pho_created_by' ;

	SELECT @vfil_confirmed_by = filter_value from #PRP_Filters where filter_name = 'pho_confirmed_by' ;

	SELECT @vfil_pho_fac_time_code = filter_value from #PRP_Filters where filter_name = 'pho_facility_time_code' ;

	SELECT @vfil_pho_std_freq = filter_value from #PRP_Filters where filter_name = 'pho_std_frequency' ;

	SELECT	@vfil_consolidated_order  = filter_value from #PRP_Filters where filter_name = 'pho_order_type_consolidated' ;

	SELECT @vfil_pho_unsched_order = filter_value from #PRP_Filters where filter_name = 'pho_unsched_order' ;
	if @vfil_pho_unsched_order is null Set @vfil_pho_unsched_order  = '0';

	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter

	--administrative order selected
	SELECT @vIncludeAdminOrder = filter_value from #PRP_Filters where filter_name = 'include_admin_order' ;



	SELECT @vfil_view_all_orders = filter_value from #PRP_Filters where filter_name = 'pho_view_all_orders'
	if @vfil_view_all_orders  is not null Set @vfil_view_all_orders_lookback_date = convert(varchar, @vReportDate-@vfil_view_all_orders,101 );

	if @debug_me = 'y' Select @vfil_view_all_orders_lookback_date  as vfil_view_all_orders_lookback_date

	if @debug_me = 'y' Select @vfil_consolidated_order  as vfil_consolidated_order


	-----DATE TIME

	SELECT @vfil_confirmed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_confirmed_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_confirmed_date%'; -- range
	IF @vfil_confirmed_date_type = 'ON'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
	end

	Else if @vfil_confirmed_date_type = 'BEFORE'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date
		Set @vfil_confirmed_date = '1900-01-01'
	end

	Else if @vfil_confirmed_date_type = 'AFTER'
	begin
		Set @vfil_confirmed_date  = @vfil_confirmed_date+1
		Set @vfil_confirmed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_confirmed_date_type) = 1
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
		SEt @vfil_confirmed_date  = @vfil_confirmed_date_type
	end


	SELECT @vfil_created_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_created_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_created_date%';
	IF @vfil_created_date_type = 'ON'
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
	end

	Else if @vfil_created_date_type = 'BEFORE'
	begin
		Set @vfil_created_date2 = @vfil_created_date
		Set @vfil_created_date = '1900-01-01'
	end

	Else if @vfil_created_date_type = 'AFTER'
	begin
		Set @vfil_created_date  = @vfil_created_date+1
		Set @vfil_created_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_created_date_type) = 1
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
		SEt @vfil_created_date  = @vfil_created_date_type
	end



	SELECT @vfil_supply_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_order_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_order_date%';

	IF @vfil_supply_order_date_type = 'ON'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
	end

	Else if @vfil_supply_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date
		Set @vfil_supply_order_date = '1900-01-01'
	end

	Else if @vfil_supply_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_order_date  = @vfil_supply_order_date+1
		Set @vfil_supply_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_supply_order_date_type) = 1
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
		SEt @vfil_supply_order_date  = @vfil_supply_order_date_type
	end



	SELECT @vfil_supply_last_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_last_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_last_order_date%';

	IF @vfil_supply_last_order_date_type = 'ON'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
	end

	Else if @vfil_supply_last_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date
		Set @vfil_supply_last_order_date = '1900-01-01'
	end

	Else if @vfil_supply_last_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_last_order_date  = @vfil_supply_last_order_date+1
		Set @vfil_supply_last_order_date2 = '9999-12-31'
	end

	Else if isDate(@vfil_supply_last_order_date_type) = 1
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
		SEt @vfil_supply_last_order_date  = @vfil_supply_last_order_date_type
	end


	SELECT @vfil_discontinued_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_discontinued_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_discontinued_date%';
	IF @vfil_discontinued_date_type = 'ON'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
	end
	Else if @vfil_discontinued_date_type = 'BEFORE'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date
		Set @vfil_discontinued_date = '1900-01-01'
	end

	Else if @vfil_discontinued_date_type = 'AFTER'
	begin
		Set @vfil_discontinued_date  = @vfil_discontinued_date+1
		Set @vfil_discontinued_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_discontinued_date_type) = 1
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
		SEt @vfil_discontinued_date  = @vfil_discontinued_date_type
	end


	SELECT @vfil_order_end_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_end_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_end_date%';
	IF @vfil_order_end_date_type = 'ON'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
	end

	Else if @vfil_order_end_date_type = 'BEFORE'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date
		Set @vfil_order_end_date = '1900-01-01'
	end

	Else if @vfil_order_end_date_type = 'AFTER'
	begin
		Set @vfil_order_end_date  = @vfil_order_end_date+1
		Set @vfil_order_end_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_end_date_type) = 1
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
		SEt @vfil_order_end_date  = @vfil_order_end_date_type
	end





	SELECT @vfil_hold_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_hold_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_hold_date%';
	IF @vfil_hold_date_type = 'ON'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date+1
	end

	Else if @vfil_hold_date_type = 'BEFORE'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date
		Set @vfil_hold_date = '1900-01-01'
	end

	Else if @vfil_hold_date_type = 'AFTER'
	begin
		Set @vfil_hold_date  = @vfil_hold_date+1
		Set @vfil_hold_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_hold_date_type) = 1
	begin
		Set @vfil_hold_date2 = @vfil_order_end_date+1
		SEt @vfil_hold_date  = @vfil_hold_date_type
	End




	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'custom_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SEt @vfil_order_date  = @vfil_order_date_type
	End




	SELECT @vfil_order_start_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_start_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_start_date%';

	IF @vfil_order_start_date_type = 'ON'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
	end

	Else if @vfil_order_start_date_type = 'BEFORE'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_order_start_date_type = 'AFTER'
	begin
		Set @vfil_order_start_date  = @vfil_order_start_date+1
		Set @vfil_order_start_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_start_date_type) = 1
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
		SEt @vfil_order_start_date  = @vfil_order_start_date_type
	END



	SELECT @vfil_asof_order = filter_value	from #PRP_Filters where filter_name like  'pho_admin_order_asof_date%';

	if @vfil_asof_order is not null
	begin
		set @vfil_asof_order_date_d1 = @vfil_asof_order
		set @vfil_asof_order_date_d2 = @vfil_asof_order_date_d1 + 1

	end

	if @debug_me='Y' select  @vfil_asof_order_date_d1 asof_date1, @vfil_asof_order_date_d2 asof_date2


	SET @vOrderSummary = '1'
	----Special filters date range for med review report


	;with tb
		as
		(
			select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
			cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
			where a.filter_name = 'pho_start_end_date_range_review'

		)
	select
		 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
		,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
		,@vfil_start_end_date_range_review  = '1'
	from tb

--		where row_num < 3

	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' startdate ' + cast(@vfil_start_end_date_range_d1  as varchar(30)) + ' end date ' + cast(@vfil_start_end_date_range_d2  as varchar(30))

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' order_startdate ' + cast(@vfil_order_date  as varchar(30)) + ' order end date ' + cast(@vfil_order_date2  as varchar(30))


	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_med_prof'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 39
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)
	Create Clustered Index _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;
	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 40
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_admin_record%')		SET @vfil_administration_record= '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_administered_by')		SET @vfil_administered_by_id = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_med_prof')				SET @vfil_physician  = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_type')				SET @vfil_order_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_permanent_source')		SET @vfil_permanent_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like  'pho_source%')			SET @vfil_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_route_of_admin')			SET @vfil_route_of_admin = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_schedule_template')		SET @vfil_schedule_template = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_type')				SET @vfil_diet_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_texture')			SET @vfil_diet_texture = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_fluid_consistency')		SET @vfil_fluid_consistency = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_supplement')		SET @vfil_diet_supplement = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_phys_order_id')			SET @vfil_physOrderId = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_std_order')				SET @vfil_pho_std_order = '1';




	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END




	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, 101),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, 101),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, 101),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, 101),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select client_id, mpi_id, client_id_number
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		inner join ( Select * from
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, 101),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, 101),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, 101),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end +
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, 101),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender



		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id


		WHERE 	c.fac_id =  @vFacID
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 52
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)
	CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

	if @debug_me='Y'  select * from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 53
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;



	-- need to reverse the logic if include admin order was checked


	if 	@vIncludeAdminOrder = 1

	begin
		-- get all the admin order first
		;With tb1
		  as
		  (
		  Select

				pro.related_phys_order_id Original_phys_order_id
				, pro.order_related_id
				, pro.phys_order_id as admin_phys_order_id
				, pro.order_relationship_id
				, pao.effective_date
				, pao.ineffective_date
				, pao.physician_id
				, pao.reason
				, pao.created_date as admin_order_created_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock )
				on pro.phys_order_id = pao.phys_order_id
					  and  isnull(pro.deleted,'N')='N'
					  and isnull(pao.deleted,'N')='N'
					  and pao.exclude_eom_status_calculation=0
				inner join dbo.pho_phys_order  po WITH (NOLOCK) on  pro.related_phys_order_id = po.phys_order_id
				INNER join #clients c with (NOLOCK)  on po.client_id = c.client_id
		  )
		  , tb2 as
		  (
			Select tb1.original_phys_order_id
				, tb1.order_related_id
				, tb1.admin_phys_order_id
				, tb1.order_relationship_id
				, tb1.effective_date
				, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
				, tb1.physician_id
				, tb1.reason
				, tb1.admin_order_created_date
				, nextrow.admin_phys_order_id as next_admin_phys_order_id
				From tb1
					  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		  )

		  Insert into #prp_admin_orders(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

		  Select  tb2.original_phys_order_id
				, tb2.effective_date
				, tb2.ineffective_date
				, tb2.order_relationship_id
				, Case tb2.order_relationship_id
							when 1 then 'hold'
							when 2 then 'resume'
							when 3 then 'discontinue'
							else 'unknown'
						end as relationship
				, tb2.reason
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
		  From tb2
				left OUTER JOIN dbo.contact ct WITH (NOLOCK )
							on ct.contact_id = tb2.physician_id

			where

				 ((isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))

					)


			if @debug_me='Y' select @vfil_asof_order_date_d1 as asof_d1, @vfil_asof_order_date_d2 as asof_d2, @vfil_order_date orderdate1, @vfil_order_date2 orderdate2
			if @debug_me='Y' select 'Admin Order' as admin_order,* from #prp_admin_orders


			select @vStep = 158
			if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);

			if  @vScheduleLevel = '1' or @vfil_pho_unsched_order = '1' or isnull(@vfil_pho_fac_time_code,'0')<>'0' --@vScheduleDetailLevel = '1'  or
			BEGIN
				if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'

			;
			with tb
			as (


			select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, null      as confirmed_by
						, null  	as confirmed_by_long_username
						, null	    as confirmed_date
						,po.created_by as [created_by]
						,null as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
						, null as order_status --OrderStatus.order_status as order_status
						, null as order_relationship --OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by as [revision_by]
						,null as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin
                        , po.controlled_substance_code
						--, po.order_verified
						--, po.active_flag
			from view_prp_pho_phys_order_schedule po
					inner join #clients clients  with (nolock)
							on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
									AND po.fac_id = @vFacId

			 where po.draft='0'
				and	po.order_category_id  <> 3030  ----exclude administrative orders


			union all

			select   null as administered_by_id
				, ppo.alter_med_src
				, ppo.client_id
				, ppo.communication_method
				, ppo.completed_by
				, ppo.max_end_date
				, ppo.confirmed_by
				, ppo.confirmed_by_long_username
				, ppo.confirmed_date
				, ppo.created_by
				, ppo.created_by_long_username
				, ppo.created_date
				, ppo.diet_type
				, ppo.diet_texture
				, ppo.diet_supplement
				, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
				, ppo.discontinued_date
				, ppo.end_date
				, ppo.fac_id
				, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, ppo.hold_date
				, ppo.hold_date_end
				, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
				, ppo.order_category_id
				, ppo.order_date
				,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
				, ppo.order_status
				, null as order_relationship
				, ppo.order_type_id
				, ppo.pharmacy_id
				, ppo.phys_order_id
				, ppo.physician_id
				, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
				, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
				, ppo.resume_date
				, ppo.revision_by
				, ppo.revision_by as revision_long_username
				, ppo.revision_date
				, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
				, null schedule_template
				, ppo.[start_date]
				, ppo.std_order_id
				, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
				, ppo.date_ordered as supply_order_date
				, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
				, ppo.last_reorder_date as supply_last_reorder_date
				, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
				, ppo.fluid_consistency
				, ppo.active_flag
				, ppo.order_verified
				, ppo.draft
				, ppo.std_freq_id
				, ppo.description
				, null as order_schedule_id
				, ppo.last_reorder_date
				, ppo.date_ordered
				, ppo.diagnoses
				, ppo.route_of_admin as route_of_admin
                , null as controlled_substance_code
			 from dbo.view_prp_pho_phys_order_strike_out ppo
					inner join #clients clients  with (nolock)
							on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND ppo.fac_id = @vFacId
							and @vfil_order_status_strikeout = 1
					where ppo.order_category_id  not in ( -1, 3030)
			)


				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code


				)

				Select
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From tb po with (nolock)
					inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id
				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id



				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

				left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

				left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
						and adminrec_fil.filter_value = adminrec.administration_record_id

				left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
				left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
				left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

				left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
				left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
				left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

				left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
				left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
				left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
				left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

				left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
				left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
					AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
					AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


					AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

					AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
					AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

					AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
					AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
					AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

					AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
					AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
					AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
					AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

					AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
					AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

					---SINGLE VALUE FILTERS
					AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

					AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
					AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

					AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)



					------DATE FILTERS
					AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
								 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
								 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
							else 0 end
					AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
								 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
							else 0 end
					AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
								 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
							else 0 end

					-- order date range
		--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
		--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
		--					else 0 end


					-- new order date range

					AND 1 = Case when @vfil_order_date_type is null then 1
							else
							---show all orders
							case when
								( po.order_date < @vfil_order_date2 or ((po.start_date is not null and po.start_date < @vfil_order_date2  )
										or (po.start_date is null and po.order_date < @vfil_order_date2) )

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end


		--			-- asof date filter
					AND 1 = case when (@vfil_asof_order is NULL) then 1
								when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
									  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
										or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
									 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
									and (po.active_flag = 'Y' or po.active_flag is null)
									and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
									then 1
							else 0 end

					AND 1 = case when (@vfil_order_start_date_type  is NULL ) then 1
								WHEN (@vfil_order_start_date_type = 'nodate'
										and po.start_date is NULL) THEN 1
								when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
								else 0 end

					AND 1  = case when (@vfil_order_end_date_type  is NULL  ) then 1
								when (@vfil_order_end_date_type = 'nodate' AND po.end_date IS NULL) THEN 1
								when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
								 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
								else 0 end



					AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
								 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
								else 0 end

					AND 1 = Case when @vfil_start_end_date_range_review is null then 1
							else
							---show all orders
							case when
								((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
										or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end

			END

			ELSE -- no schedule level or schedule detail level
			BEGIN

			;
			with tb1
			as (

			select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, null  	as confirmed_by
						, null  	as confirmed_by_long_username
						, null		as confirmed_date
						, po.created_by      as [created_by]
						, null      as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
						, NULL as order_status--OrderStatus.order_status
						, null as order_relationship--OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by       as [revision_by]
						,null       as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin

				from view_prp_pho_phys_order_schedule po
						inner join #clients clients  with (nolock)
								on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients
										AND po.fac_id = @vFacId

				where  po.draft='0'
					and po.order_category_id  <> 3030


				union all

				select   null as administered_by_id
					, ppo.alter_med_src
					, ppo.client_id
					, ppo.communication_method
					, ppo.completed_by
					, ppo.max_end_date
					, ppo.confirmed_by
					, ppo.confirmed_by_long_username
					, ppo.confirmed_date
					, ppo.created_by
					, ppo.created_by_long_username
					, ppo.created_date
					, ppo.diet_type
					, ppo.diet_texture
					, ppo.diet_supplement
					, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
					, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
					, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_descf
					, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
					, ppo.discontinued_date
					, ppo.end_date
					, ppo.fac_id
					, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
					, ppo.hold_date
					, ppo.hold_date_end
					, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
					, ppo.order_category_id
					, ppo.order_date
					,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
					, ppo.order_status
					, null as order_relationship
					, ppo.order_type_id
					, ppo.pharmacy_id
					, ppo.phys_order_id
					, ppo.physician_id
					, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
					, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
					, ppo.resume_date
					, ppo.revision_by
					, ppo.revision_by as revision_long_username
					, ppo.revision_date
					, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
					, null schedule_template
					, ppo.[start_date]
					, ppo.std_order_id
					, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
					, ppo.date_ordered as supply_order_date
					, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
					, ppo.last_reorder_date as supply_last_reorder_date
					, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
					, ppo.fluid_consistency
					, ppo.active_flag
					, ppo.order_verified
					, ppo.draft
					, ppo.std_freq_id
					, ppo.description
					, null as order_schedule_id
					, ppo.last_reorder_date
					, ppo.date_ordered
					, ppo.diagnoses
					, ppo.route_of_admin as route_of_admin

				 from dbo.view_prp_pho_phys_order_strike_out ppo
						inner join #clients clients  with (nolock)
								on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
								AND ppo.fac_id = @vFacId
								and @vfil_order_status_strikeout = 1
				where ppo.order_category_id  not in ( -1, 3030)
				)

				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id

				)
				Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<style isBold="true" pdfFontName="Helvetica-Bold">'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</style>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id

				From tb1 po with (nolock)
				inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id
				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock) on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

				left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

				left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
						and adminrec_fil.filter_value = adminrec.administration_record_id

				left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
				left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
				left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

				left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
				left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
				left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

				left join #PRP_Multi_Filters dt	 on dt.filter_name = 'pho_diet_type'				and dt.filter_value = po.diet_type
				left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
				left join #PRP_Multi_Filters dsup	 on dsup.filter_name	= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
				left join #PRP_Multi_Filters fc	 on fc.filter_name	= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

				left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
				left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id

				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND	((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
					AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
					AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )
					AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
					AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

					AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
					AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )

					AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

					AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
					AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
					AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
					AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )
					AND ((@vfil_physOrderId  = '1'			and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
					AND ((@vfil_pho_std_order  = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

					---SINGLE VALUE FILTERS
					AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

					AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)



					------DATE FILTERS
					AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
								 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
							else 0 end

					AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
								 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
							else 0 end

					AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
								 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
							else 0 end
					AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
								 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
							else 0 end

		--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
		--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
		--					else 0 end

					-- new order date range

					AND 1 = Case when @vfil_order_date_type is null then 1
							else
							---show all orders
							case when
								(po.order_date < @vfil_order_date2 or((po.start_date is not null and po.start_date < @vfil_order_date2  )
										or (po.start_date is null and po.order_date < @vfil_order_date2))

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end

					-- asof date filter
					AND 1 = case when (@vfil_asof_order is NULL) then 1
								when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
									  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
										or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
									 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
									and (po.active_flag = 'Y' or po.active_flag is null)
									and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
									then 1
							else 0 end

					AND 1 = case when (@vfil_order_start_date_type  is NULL ) then 1
								WHEN (@vfil_order_start_date_type = 'nodate'
										and po.start_date is NULL) THEN 1
								when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
								else 0 end

					AND 1  = case when (@vfil_order_end_date_type  is NULL  ) then 1
								when (@vfil_order_end_date_type = 'nodate' AND po.end_date IS NULL) THEN 1
								when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
								 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
								else 0 end


					AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
								 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
								else 0 end


					AND 1 = Case when @vfil_start_end_date_range_review is null then 1
							else
							---show all orders
							case when
								((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
										or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date>= @vfil_start_end_date_range_d1)
								and (po.discontinued_date is null or po.discontinued_date >=@vfil_start_end_date_range_d1)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
								and po.order_verified = 'Y'   -----no pending

								then 1 else 0 end
						   end

			END





	end

	else
			-- all orders

	begin

			------Getting filtered orders from view_pho_phys_order
			select @vStep = 258
			if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);

			if  @vScheduleLevel = '1' or @vfil_pho_unsched_order = '1' or isnull(@vfil_pho_fac_time_code,'0')<>'0' --@vScheduleDetailLevel = '1'  or
			BEGIN
				if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'

			;
			with tb
			as (


			select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, null      as confirmed_by
						, null  	as confirmed_by_long_username
						, null	    as confirmed_date
						,po.created_by as [created_by]
						,null as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
						, null as order_status --OrderStatus.order_status as order_status
						, null as order_relationship --OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by as [revision_by]
						,null as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin
						--, po.order_verified
						--, po.active_flag
			from view_prp_pho_phys_order_schedule po
					inner join #clients clients  with (nolock)
							on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
									AND po.fac_id = @vFacId

			 where po.draft='0'
				and	po.order_category_id  <> 3030  ----exclude administrative orders


			union all

			select   null as administered_by_id
				, ppo.alter_med_src
				, ppo.client_id
				, ppo.communication_method
				, ppo.completed_by
				, ppo.max_end_date
				, ppo.confirmed_by
				, ppo.confirmed_by_long_username
				, ppo.confirmed_date
				, ppo.created_by
				, ppo.created_by_long_username
				, ppo.created_date
				, ppo.diet_type
				, ppo.diet_texture
				, ppo.diet_supplement
				, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
				, ppo.discontinued_date
				, ppo.end_date
				, ppo.fac_id
				, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, ppo.hold_date
				, ppo.hold_date_end
				, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
				, ppo.order_category_id
				, ppo.order_date
				,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
				, ppo.order_status
				, null as order_relationship
				, ppo.order_type_id
				, ppo.pharmacy_id
				, ppo.phys_order_id
				, ppo.physician_id
				, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
				, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
				, ppo.resume_date
				, ppo.revision_by
				, ppo.revision_by as revision_long_username
				, ppo.revision_date
				, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
				, null schedule_template
				, ppo.[start_date]
				, ppo.std_order_id
				, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
				, ppo.date_ordered as supply_order_date
				, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
				, ppo.last_reorder_date as supply_last_reorder_date
				, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
				, ppo.fluid_consistency
				, ppo.active_flag
				, ppo.order_verified
				, ppo.draft
				, ppo.std_freq_id
				, ppo.description
				, null as order_schedule_id
				, ppo.last_reorder_date
				, ppo.date_ordered
				, ppo.diagnoses
				, ppo.route_of_admin as route_of_admin
			 from dbo.view_prp_pho_phys_order_strike_out ppo
					inner join #clients clients  with (nolock)
							on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND ppo.fac_id = @vFacId
							and @vfil_order_status_strikeout = 1
					where ppo.order_category_id  not in ( -1, 3030)
			)


				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id


				)

				Select
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id

				From tb po with (nolock)

				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id



				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

				left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

				left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
						and adminrec_fil.filter_value = adminrec.administration_record_id

				left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
				left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
				left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

				left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
				left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
				left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

				left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
				left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
				left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
				left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

				left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
				left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
					AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
					AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


					AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

					AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
					AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

					AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
					AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
					AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

					AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
					AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
					AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
					AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

					AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
					AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

					---SINGLE VALUE FILTERS
					AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

					AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
					AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

					AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)



					------DATE FILTERS
					AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
								 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
								 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
							else 0 end
					AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
								 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
							else 0 end
					AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
								 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
							else 0 end

					-- order date range
		--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
		--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
		--					else 0 end


					-- new order date range

					AND 1 = Case when @vfil_order_date_type is null then 1
							else
							---show all orders
							case when
								(po.order_date < @vfil_order_date2 or ((po.start_date is not null and po.start_date < @vfil_order_date2  )
										or (po.start_date is null and po.order_date < @vfil_order_date2))

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end


		--			-- asof date filter
					AND 1 = case when (@vfil_asof_order is NULL) then 1
								when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
									  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
										or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
									 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
									and (po.active_flag = 'Y' or po.active_flag is null)
									and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
									then 1
							else 0 end

					AND 1 = case when (@vfil_order_start_date_type  is NULL ) then 1
								WHEN (@vfil_order_start_date_type = 'nodate'
										and po.start_date is NULL) THEN 1
								when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
								else 0 end

					AND 1  = case when (@vfil_order_end_date_type  is NULL  ) then 1
								when (@vfil_order_end_date_type = 'nodate' AND po.end_date IS NULL) THEN 1
								when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
								 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
								else 0 end



					AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
								 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
								else 0 end

					AND 1 = Case when @vfil_start_end_date_range_review is null then 1
							else
							---show all orders
							case when
								((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
										or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end

			END

			ELSE -- no schedule level or schedule detail level
			BEGIN

			;
			with tb1
			as (

			select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, null  	as confirmed_by
						, null  	as confirmed_by_long_username
						, null		as confirmed_date
						, po.created_by      as [created_by]
						, null      as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
						, NULL as order_status--OrderStatus.order_status
						, null as order_relationship--OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by       as [revision_by]
						,null       as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin

				from view_prp_pho_phys_order_schedule po
						inner join #clients clients  with (nolock)
								on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients
										AND po.fac_id = @vFacId

				where  po.draft='0'
					and po.order_category_id  <> 3030


				union all

				select   null as administered_by_id
					, ppo.alter_med_src
					, ppo.client_id
					, ppo.communication_method
					, ppo.completed_by
					, ppo.max_end_date
					, ppo.confirmed_by
					, ppo.confirmed_by_long_username
					, ppo.confirmed_date
					, ppo.created_by
					, ppo.created_by_long_username
					, ppo.created_date
					, ppo.diet_type
					, ppo.diet_texture
					, ppo.diet_supplement
					, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
					, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
					, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_descf
					, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
					, ppo.discontinued_date
					, ppo.end_date
					, ppo.fac_id
					, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
					, ppo.hold_date
					, ppo.hold_date_end
					, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
					, ppo.order_category_id
					, ppo.order_date
					,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
					, ppo.order_status
					, null as order_relationship
					, ppo.order_type_id
					, ppo.pharmacy_id
					, ppo.phys_order_id
					, ppo.physician_id
					, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
					, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
					, ppo.resume_date
					, ppo.revision_by
					, ppo.revision_by as revision_long_username
					, ppo.revision_date
					, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
					, null schedule_template
					, ppo.[start_date]
					, ppo.std_order_id
					, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
					, ppo.date_ordered as supply_order_date
					, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
					, ppo.last_reorder_date as supply_last_reorder_date
					, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
					, ppo.fluid_consistency
					, ppo.active_flag
					, ppo.order_verified
					, ppo.draft
					, ppo.std_freq_id
					, ppo.description
					, null as order_schedule_id
					, ppo.last_reorder_date
					, ppo.date_ordered
					, ppo.diagnoses
					, ppo.route_of_admin as route_of_admin

				 from dbo.view_prp_pho_phys_order_strike_out ppo
						inner join #clients clients  with (nolock)
								on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
								AND ppo.fac_id = @vFacId
								and @vfil_order_status_strikeout = 1
				where ppo.order_category_id  not in ( -1, 3030)
				)

				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id

				)
				Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<style isBold="true" pdfFontName="Helvetica-Bold">'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</style>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id

				From tb1 po with (nolock)

				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock) on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

				left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

				left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
						and adminrec_fil.filter_value = adminrec.administration_record_id

				left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
				left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
				left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

				left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
				left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
				left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

				left join #PRP_Multi_Filters dt	 on dt.filter_name = 'pho_diet_type'				and dt.filter_value = po.diet_type
				left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
				left join #PRP_Multi_Filters dsup	 on dsup.filter_name	= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
				left join #PRP_Multi_Filters fc	 on fc.filter_name	= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

				left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
				left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id

				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND	((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
					AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
					AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )
					AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
					AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

					AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
					AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )

					AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

					AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
					AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
					AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
					AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )
					AND ((@vfil_physOrderId  = '1'			and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
					AND ((@vfil_pho_std_order  = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

					---SINGLE VALUE FILTERS
					AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

					AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)



					------DATE FILTERS
					AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
								 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
							else 0 end

					AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
								 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
							else 0 end

					AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
								 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
							else 0 end
					AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
								 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
							else 0 end


					-- new order date range


					AND 1 = Case when @vfil_order_date_type is null then 1
							else
							---show all orders
							case when
								(po.order_date < @vfil_order_date2 or((po.start_date is not null and po.start_date < @vfil_order_date2  )
										or (po.start_date is null and po.order_date < @vfil_order_date2))

								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

								then 1 else

								0 end
						   end



					-- asof date filter
					AND 1 = case when (@vfil_asof_order is NULL) then 1
								when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
									  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
										or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
									 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
									and (po.active_flag = 'Y' or po.active_flag is null)
									and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
									then 1
							else 0 end

					AND 1 = case when (@vfil_order_start_date_type  is NULL ) then 1
								WHEN (@vfil_order_start_date_type = 'nodate'
										and po.start_date is NULL) THEN 1
								when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
								else 0 end

					AND 1  = case when (@vfil_order_end_date_type  is NULL  ) then 1
								when (@vfil_order_end_date_type = 'nodate' AND po.end_date IS NULL) THEN 1
								when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
							else 0 end


					AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
								 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
								else 0 end


					AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
								 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
								else 0 end


					AND 1 = Case when @vfil_start_end_date_range_review is null then 1
							else
							---show all orders
							case when
								((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
										or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
								) ---handling with or without schedules
								and (po.end_date is null  or po.end_date>= @vfil_start_end_date_range_d1)
								and (po.discontinued_date is null or po.discontinued_date >=@vfil_start_end_date_range_d1)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
								and po.order_verified = 'Y'   -----no pending

								then 1 else 0 end
						   end

			END

	end -- end of retrieving the order list

	if @debug_me = 'y'  select 'all Orders' Orders, * From #prp_orders


	if isnull(@vIncludeAdminOrder ,0) = 0
	begin
		;WITH
		adminAction
		as
		(

			SELECT admin_order.*,po.phys_order_id as po1 FROM #prp_orders po
			INNER join
			(select ro.related_phys_order_id,pao.phys_order_id, pao.effective_date, pao.ineffective_date, order_relationship_id  from dbo.pho_related_order ro
			inner join pho_admin_order pao
			on ro.phys_order_id = pao.phys_order_id
			--and order_relationship_id = 1
			 ) admin_order

			on po.phys_order_id = admin_order.related_phys_order_id

			where
				(admin_order.effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
				AND (admin_order.ineffective_Date > isnull(@vfil_asof_order_date_d2,@vfil_order_date2)))
				or (admin_order.ineffective_Date IS null and admin_order.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2) )

			--and order_relationship_id < 3

		)
		,holdcte1
		as
		(SELECT * FROM adminAction where order_relationship_id in ( 1)
			AND ((ineffective_date IS null and (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)))
					OR (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
						AND (ineffective_Date >isnull(@vfil_asof_order_date_d2,@vfil_order_date2))
						))
		)
		,resumecte
		as (select *  FROM adminaction where order_relationship_id IN( 2))
		,holdcte
		as(
		select h.* FROM holdcte1 h
		LEFT OUTER join resumecte r
		on r.related_phys_order_id = h.related_phys_order_id
			and r.effective_date >= h.effective_date
		WHERE r.related_phys_order_id IS NULL

		)

		--SELECT * from adminAction

		delete #prp_orders
		from #prp_orders p, holdcte h
		where p.phys_order_id  =  h.related_phys_order_id

	end


	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)

	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            ,controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status


-- get all orders for that facility/client

if @client_id <> '-1' set @vSP_ClientId = @client_id

DECLARE @vSelectedDate datetime
set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vSelectedDate
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );

	Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;

	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


	-- delete orders if they are not part of the filter
--		delete  pr
--		from #prp_orders pr
--			left join #PRP_Multi_Filters os			on os.filter_name		= 'pho_order_status'		and os.filter_value = pr.order_status
--			where (@vfil_order_status = '1'  and os.filter_value is null)
--			or ((@vfil_view_all_orders is not null AND
--					((pr.order_status = 2/*Discontinued*/ and pr.discontinued_date < @vfil_view_all_orders_lookback_date)
--					 or (pr.order_status = 3/*Completed*/ and pr.completed_date < @vfil_view_all_orders_lookback_date)
--					)))
--
--
--
--	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )

			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by



	end

	if  @vfil_created_by is not null or @vfil_confirmed_by is not null
	begin
		delete #PRP_Orders
			from #PRP_Orders po
			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
							)



	end
	if @debug_me = 'y' Select * from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retrieving administrative orders ' + convert(varchar(26),getdate(),109)

--	 get all administrative orders instead of just hold orders

-- eliminated usage of view_prp_pho_administrative_order

	TRUNCATE table #prp_admin_orders

	;With tb1
	as
	(
	Select

		 pro.related_phys_order_id Original_phys_order_id
		, pro.order_related_id
		, pro.phys_order_id as admin_phys_order_id
		, pro.order_relationship_id
		, pao.effective_date
		, pao.ineffective_date
		, pao.physician_id
		, pao.reason
		, pao.created_date as admin_order_created_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
		from dbo.pho_related_order  pro with (nolock )
		inner Join dbo.pho_admin_order pao  with (nolock )
		on pro.phys_order_id = pao.phys_order_id
			and  isnull(pro.deleted,'N')='N'
			and isnull(pao.deleted,'N')='N'
			and pao.exclude_eom_status_calculation=0
		inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
	)
	, tb2 as
	(
	  Select tb1.original_phys_order_id
		, tb1.order_related_id
		, tb1.admin_phys_order_id
		, tb1.order_relationship_id
		, tb1.effective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
		, tb1.physician_id
		, tb1.reason
		, tb1.admin_order_created_date
		, nextrow.admin_phys_order_id as next_admin_phys_order_id
		From tb1
			left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
	)

	Insert into #prp_admin_orders(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

	Select  tb2.original_phys_order_id
		, tb2.effective_date
		, tb2.ineffective_date
		, tb2.order_relationship_id
		, Case tb2.order_relationship_id
				when 1 then 'hold'
				when 2 then 'resume'
				when 3 then 'discontinue'
				else 'unknown'
			  end as relationship
		, tb2.reason
		, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
	 From tb2
		left OUTER JOIN dbo.contact ct WITH (NOLOCK )
				on ct.contact_id = tb2.physician_id

where
			( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))



	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 finished retrieving administrative orders ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #prp_admin_orders

	if @debug_me='Y' select  @vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end

	if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
									+ replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
			from #PRP_Orders o
			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
							(
								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.start_date
									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

			update #PRP_Orders
				set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
				where order_status = 4

	END


	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	if @debug_me = 'y' Select * from #PRP_Orders;

	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,101)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,101)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,101)			as created_date

--		, po.directions									as directions
		, replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,101) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,101)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,101)			 as order_date
		, convert(char(10),po.order_date,101) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'')
		, isnull(po.order_desc,'') + isnull((replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '&', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')),'')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,101) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,101)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,101)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,101)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,101)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,101)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,101 )				as schedule_date
		, convert(char(10),po.schedule_date,101) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,101) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,101) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		, po.order_schedule_id

		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join dbo.common_code cc with (nolock ) on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,101) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,101) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,101) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #prp_admin_orders ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								convert(char(10),effective_date,101) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								isnull(convert(char(10),ineffective_date,101) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								reason + char(9) +
								ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #prp_admin_orders ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

--			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
--							(
--								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
--									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
--									where po.phys_order_id = o.phys_order_id
--									order by po.start_date
--									FOR XML PATH (''), TYPE
--							) a ( order_summary )
--				) OrderSumm

	)
	, tbWithGroupSet
	as
	(
		Select *
	      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date


			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date




			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			, order_schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id,G1,G2,G3, G_set_id
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+ 'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id) ,'')

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	, order_schedule_id
   	from tbWithSort
	Order by row_num
	)
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code
		, (case when row_num = 1 then status_text else null end )status_text
		, phys_order_id
		, order_schedule_id
		, row_num
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics
	begin
		insert into [dbo].[prp_execution_statistics]
				   ([program_name]
				   ,[start_time]
				   ,[fill_end_time]
				   ,[full_end_time]
				   ,[rows_processed]
				   ,[estimated_row_count]
				   ,[estimate_method]
				   ,[fac_count]
				   ,[client_count]
				   ,[payer_count]
				   ,[account_count]
				   ,[month_count]
				   ,[who_done_it]
				   ,[return_code]
				   ,[fac_id]
				   ,[client_id]
				   ,[account_id]
				   ,[payer_id]
				   ,[parm1_name]
				   ,[parm1_value]
				   ,[parm2_name]
				   ,[parm2_value]
				   ,[parm3_name]
				   ,[parm3_value]
				   ,[parm4_name]
				   ,[parm4_value]

				   )
				values (@vgs_program_name
					,@vgs_start_time
					,@vgs_fill_end_time
					,getDate()
					,@rows_returned
					,NULL ----estimated row count NULL because we do not have governor logic
					,NULL ----estimated method NULL because we do not have governor logic
					,@vgsFacCount
					,@vgsClientCount
					,@vgsPayerCount
					,@vgsAccountCount
					,@vgsMonthCount
					,@vgs_execution_user
					,@status_code
					,@vgsFacId
					,@vgsClientId
					,@vgsAccountId
					,@vgsPayerId
					,@vgsParamName1
					,@vgsParamValue1
					,@vgsParamName2
					,@vgsParamValue2
					,@vgsParamName3
					,@vgsParamValue3
					,@vgsParamName4
					,@vgsParamValue4
			   )

	end

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY

BEGIN CATCH
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END


	Select
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text
		, NULL as phys_order_id
		, NULL as order_schedule_id
		, NULL as row_num
END CATCH
END
RETURN

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_active_order_report   to PUBLIC
GO
--

GO

print 'C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report_active_order.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report_active_order.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-42829       :   script to create sproc_prp_order_based_review_report Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_review_report for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:
2013-06-14  Rolly Sanchez       Initial creation of this stored proc
2013-06-27  Rolly Sanchez		PCC-44173 display correct start date and end date on the report
2013-07-03	Rolly Sanchez		PCC-44190 (3.7.0.3) Add group header on order review report
2013-07-05	Rolly Sanchez		PCC-44443 (3.7.0.3) when include admin order is check it will get admin orders first before physician order
2013-07-11  Rolly Sanchez		PCC-44692 (3.7.0.3)	Skip admin order deletion when it's selected
2013-08-09	Rolly Sanchez		PCC-45617 (3.7.1) handle multiple hold and indefinite hold
2013-12-11  Rolly Sanchez		PCC-50905 (3.7.2.1.3) replace style with b-tag formatting
2014-10-01  H Ehghaghi          PCC-64988 (3.7.5)   Added the logic for StatusCode 9 to print Pending Clinical Review
2014-12-19  H Ehghaghi 		    PCC-68305 (3.7.6)	Adding  Orders Pending Signature Status
2015-04-09  Dom Christie	    PCC-72489 (3.7.7)	Added logic to pring the ICD 10 codes for the dates passed from the report set up page, if no date passed as per the requirement
                                                    the current date will be used to pass to the fucntion. If "Active Order As of" is selected then that date will be the end date, as
													per the requirement. 
													This check in will also include the store proc change by Henny that was meant to remove the generic metadata.

2015-04-10  H Ehghaghi	    PCC-74340 (3.7.7)	  fixed Terminology
2015-05-04  Dom Christie    PCC-75399 (3.7.7)  Removed the logic of Using the end date from the date range for the Order Review Report
                                               and started using the system date to check the ICD codes to display.
2015-11-23 Dom Christie 	PCC-85634(3.7.8.2) Fitlering out the Discharge orders using classid=2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2017-09-06  Hemanth Reddy	PCC-102383 (3.7.14)	Changes to support UK Date Format.
-- ================================================================================= */


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_review_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_review_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_order_based_review_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************


Sample Execution Script:
---Select * from prp_report_column


Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_review_report
 @report_id =  '-1007'--'-13'
,@fac_id =  '1'
,@field_list =  ''
,@filter_list =  'client_id=360357;client_unit=-1;client_floor=-1;client_status=-1;pho_order_date_range=06/01/2001,11/30/2011'

,@sort_list =  '0=-1'
,@execution_user_login =  'PCC-chrisd'
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int
		,@ICDDate datetime
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint;

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @vSP_ClientId varchar(50)
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)

-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	, @term_admission varchar(50)
    , @term_client varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)





-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit


----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime


	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_type varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime

	,@vfil_asof_order varchar(100)  ---as of date setting for order review report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime

	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'

	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime
	, @authorization_date varchar(50)
	, @vfil_dur_between_reviews varchar(10)
	, @vfil_dur_units int


	set @vfil_dur_between_reviews = (select top 1 value from configuration_parameter where name='pho_dur_between_review' and fac_id = @fac_id)
	set @vfil_dur_units = (select top 1 value from configuration_parameter where name='pho_dur_units' and fac_id = @fac_id)


Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary varchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
			, order_schedule_id int
            , controlled_substance_code int
);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #PRP_Holds
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
		, next_review_date1 datetime
		, next_review_date2 datetime
		, special_instruction VARCHAR(500)
);
CREATE CLUSTERED INDEX _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;
CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

CREATE CLUSTERED INDEX _orderreview_prp_pho_phys_order_phys_order_startdate_idx on #prp_orders (phys_order_id, [start_date]);
CREATE CLUSTERED INDEX _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;

  declare  @vParentReportId int

		, @vWV_transfer int
		, @vFac_Id int
		, @footer varchar(50)
        , @header varchar(50)

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	SET @ICDDate=getdate()
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list+ ';pho_order_status=1';
	SET @visemc		  = @is_emc
	SET @vSortList	  = @sort_list;


	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	/*---------Code to select the date format based on the country for the default facility of executing user--------------------*/
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	/*---------------------------------------------------------***********---------------------------------------------------------*/

	------------------------------


	--set @vFac_Id =@VfacId

    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9
    /* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */
     Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	 from [dbo].fn_prp_get_terminology(@vFacID,@visemc) ;

	 SET @vTermClient=@term_client
     SET @vTermAdmission=@term_admission;

-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;

	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN
					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---



SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission


	-------------------------




	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';

	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');


	select @vStep = 18
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;
	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		   +  isnull(@vCol2,'')
		   + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END


	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;

	set @vOrderSummary = '1'

	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 25
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 35
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	SELECT @vfil_supply_reorder = filter_value from #PRP_Filters where filter_name = 'pho_supply_reorder';

	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_created_by = filter_value from #PRP_Filters where filter_name = 'pho_created_by' ;

	SELECT @vfil_confirmed_by = filter_value from #PRP_Filters where filter_name = 'pho_confirmed_by' ;

	SELECT @vfil_pho_fac_time_code = filter_value from #PRP_Filters where filter_name = 'pho_facility_time_code' ;

	SELECT @vfil_pho_std_freq = filter_value from #PRP_Filters where filter_name = 'pho_std_frequency' ;

	SELECT	@vfil_consolidated_order  = filter_value from #PRP_Filters where filter_name = 'pho_order_type_consolidated' ;

	SELECT @vfil_pho_unsched_order = filter_value from #PRP_Filters where filter_name = 'pho_unsched_order' ;
	if @vfil_pho_unsched_order is null Set @vfil_pho_unsched_order  = '0';

	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter

	--administrative order selected
	SELECT @vIncludeAdminOrder = filter_value from #PRP_Filters where filter_name like '%include_admin_order%' ;



	SELECT @vfil_view_all_orders = filter_value from #PRP_Filters where filter_name = 'pho_view_all_orders'
	if @vfil_view_all_orders  is not null Set @vfil_view_all_orders_lookback_date = convert(varchar, @vReportDate-@vfil_view_all_orders,101 );

	if @debug_me = 'y' Select @vfil_view_all_orders_lookback_date  as vfil_view_all_orders_lookback_date

	if @debug_me = 'y' Select @vfil_consolidated_order  as vfil_consolidated_order


	-----DATE TIME

	SELECT @vfil_confirmed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_confirmed_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_confirmed_date%'; -- range
	IF @vfil_confirmed_date_type = 'ON'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
	end

	Else if @vfil_confirmed_date_type = 'BEFORE'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date
		Set @vfil_confirmed_date = '1900-01-01'
	end

	Else if @vfil_confirmed_date_type = 'AFTER'
	begin
		Set @vfil_confirmed_date  = @vfil_confirmed_date+1
		Set @vfil_confirmed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_confirmed_date_type) = 1
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
		SEt @vfil_confirmed_date  = @vfil_confirmed_date_type
	end


	SELECT @vfil_created_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_created_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_created_date%';
	IF @vfil_created_date_type = 'ON'
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
	end

	Else if @vfil_created_date_type = 'BEFORE'
	begin
		Set @vfil_created_date2 = @vfil_created_date
		Set @vfil_created_date = '1900-01-01'
	end

	Else if @vfil_created_date_type = 'AFTER'
	begin
		Set @vfil_created_date  = @vfil_created_date+1
		Set @vfil_created_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_created_date_type) = 1
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
		SEt @vfil_created_date  = @vfil_created_date_type
	end



	SELECT @vfil_supply_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_order_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_order_date%';

	IF @vfil_supply_order_date_type = 'ON'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
	end

	Else if @vfil_supply_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date
		Set @vfil_supply_order_date = '1900-01-01'
	end

	Else if @vfil_supply_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_order_date  = @vfil_supply_order_date+1
		Set @vfil_supply_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_supply_order_date_type) = 1
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
		SEt @vfil_supply_order_date  = @vfil_supply_order_date_type
	end



	SELECT @vfil_supply_last_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_last_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_last_order_date%';

	IF @vfil_supply_last_order_date_type = 'ON'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
	end

	Else if @vfil_supply_last_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date
		Set @vfil_supply_last_order_date = '1900-01-01'
	end

	Else if @vfil_supply_last_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_last_order_date  = @vfil_supply_last_order_date+1
		Set @vfil_supply_last_order_date2 = '9999-12-31'
	end

	Else if isDate(@vfil_supply_last_order_date_type) = 1
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
		SEt @vfil_supply_last_order_date  = @vfil_supply_last_order_date_type
	end


	SELECT @vfil_discontinued_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_discontinued_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_discontinued_date%';
	IF @vfil_discontinued_date_type = 'ON'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
	end
	Else if @vfil_discontinued_date_type = 'BEFORE'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date
		Set @vfil_discontinued_date = '1900-01-01'
	end

	Else if @vfil_discontinued_date_type = 'AFTER'
	begin
		Set @vfil_discontinued_date  = @vfil_discontinued_date+1
		Set @vfil_discontinued_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_discontinued_date_type) = 1
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
		SEt @vfil_discontinued_date  = @vfil_discontinued_date_type
	end


	SELECT @vfil_order_end_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_end_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_end_date%';
	IF @vfil_order_end_date_type = 'ON'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
	end

	Else if @vfil_order_end_date_type = 'BEFORE'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date
		Set @vfil_order_end_date = '1900-01-01'
	end

	Else if @vfil_order_end_date_type = 'AFTER'
	begin
		Set @vfil_order_end_date  = @vfil_order_end_date+1
		Set @vfil_order_end_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_end_date_type) = 1
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
		SEt @vfil_order_end_date  = @vfil_order_end_date_type
	end





	SELECT @vfil_hold_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_hold_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_hold_date%';
	IF @vfil_hold_date_type = 'ON'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date+1
	end

	Else if @vfil_hold_date_type = 'BEFORE'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date
		Set @vfil_hold_date = '1900-01-01'
	end

	Else if @vfil_hold_date_type = 'AFTER'
	begin
		Set @vfil_hold_date  = @vfil_hold_date+1
		Set @vfil_hold_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_hold_date_type) = 1
	begin
		Set @vfil_hold_date2 = @vfil_order_end_date+1
		SEt @vfil_hold_date  = @vfil_hold_date_type
	End




	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'custom_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1

		SEt @vfil_order_date  = @vfil_order_date_type
	End




	SELECT @vfil_order_start_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_start_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_start_date%';

	IF @vfil_order_start_date_type = 'ON'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
	end

	Else if @vfil_order_start_date_type = 'BEFORE'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_order_start_date_type = 'AFTER'
	begin
		Set @vfil_order_start_date  = @vfil_order_start_date+1
		Set @vfil_order_start_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_start_date_type) = 1
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
		SEt @vfil_order_start_date  = @vfil_order_start_date_type
	END


	SELECT @vfil_asof_order = filter_value	from #PRP_Filters where filter_name like  'pho_admin_order_asof_date%';

	if @vfil_asof_order is not null
	begin
		set @vfil_asof_order_date_d1 = @vfil_asof_order

		set @vfil_asof_order_date_d2 = @vfil_asof_order_date_d1 + 1

	end


SELECT @vfil_admin_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_admin_order_date_range_d1		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  '%pho_admin_order_date_range%';

	IF @vfil_admin_order_date_type = 'ON'
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1+1
	end

	Else if @vfil_admin_order_date_type = 'BEFORE'
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_admin_order_date_type = 'AFTER'
	begin
		Set @vfil_admin_order_date_range_d1  = @vfil_admin_order_date_range_d1+1
		Set @vfil_admin_order_date_range_d2 = '9999-12-31'
	end

	Else if isdate(@vfil_admin_order_date_type) = 1
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1+1
		SEt @vfil_admin_order_date_range_d1  = @vfil_admin_order_date_type
	END

	-- Set the Authorization date for the header
	set @authorization_date = case when @vfil_asof_order is not null then 'As of ' + CONVERT(varchar, @vfil_asof_order_date_d1 , 101)
	when @vfil_order_date is not null then CONVERT(varchar, @vfil_order_date , 101) + ' - ' + CONVERT(varchar, dateadd(dd, -1 , @vfil_order_date2) , 101)
	else null
	end


	----Special filters date range for med review report


	;with tb
		as
		(
			select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
			cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
			where a.filter_name = 'pho_start_end_date_range_review'

		)
	select
		 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
		,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
		,@vfil_start_end_date_range_review  = '1'
	from tb

--		where row_num < 3

	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' startdate ' + cast(@vfil_start_end_date_range_d1  as varchar(30)) + ' end date ' + cast(@vfil_start_end_date_range_d2  as varchar(30))

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' order_startdate ' + cast(@vfil_order_date  as varchar(30)) + ' order end date ' + cast(@vfil_order_date2  as varchar(30))


	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin','pho_order_status') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_med_prof'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 39
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 40
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_admin_record%')		SET @vfil_administration_record= '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_administered_by')		SET @vfil_administered_by_id = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_med_prof')				SET @vfil_physician  = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_type')				SET @vfil_order_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_permanent_source')		SET @vfil_permanent_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like  'pho_source%')			SET @vfil_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_route_of_admin')			SET @vfil_route_of_admin = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_schedule_template')		SET @vfil_schedule_template = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_type')				SET @vfil_diet_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_texture')			SET @vfil_diet_texture = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_fluid_consistency')		SET @vfil_fluid_consistency = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_supplement')		SET @vfil_diet_supplement = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_phys_order_id')			SET @vfil_physOrderId = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_std_order')				SET @vfil_pho_std_order = '1';




	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END




	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
			, next_review_date1
			, next_review_date2
			, special_instruction
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender
			, CASE WHEN (c.next_review_date is null) then getdate() else c.next_review_date end next_review_date1
			, CASE WHEN (c.next_review_date is null) then
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, getdate())
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, getdate())
			else
				dateadd(dd, @vfil_dur_units + 1, getdate())
			end

			else
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, c.next_review_date)
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, c.next_review_date)
			else
				dateadd(dd, @vfil_dur_units + 1, c.next_review_date)
			end

			end next_review_date2
			,null



			from ( Select client_id, mpi_id, client_id_number
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, next_review_date

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		inner join (  Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
			, next_review_date1
			, next_review_date2
			, special_instruction
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end +
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender
			, CASE WHEN (c.next_review_date is null) then getdate() else c.next_review_date end next_review_date1
			, CASE WHEN (c.next_review_date is null) then
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, getdate())
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, getdate())
			else
				dateadd(dd, @vfil_dur_units + 1, getdate())
			end

			else
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, c.next_review_date)
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, c.next_review_date)
			else
				dateadd(dd, @vfil_dur_units + 1, c.next_review_date)
			end

			end next_review_date2
			,null


		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id


		WHERE 	c.fac_id =  @vFacID
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	--select @vStep = 52
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select * from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 53
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	-- Update clients to have special instructions from care proile
	UPDATE #clients
	SET special_instruction=value FROM  #clients c
	INNER JOIN care_profile_value_single single
	ON single.client_id=c.client_id
	INNER JOIN  wesreference.dbo.care_profile_question que
    on single.question_id = que.question_id
    and question_text= 'Special Instructions'

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;


	------Getting filtered orders from view_pho_phys_order
	select @vStep = 58
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);


		if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'
		-- Please keep commented line of codes as we might need it as the scope of the SP grows


	if @vIncludeAdminOrder = 1
	begin

	--	 get all administrative orders instead of just hold orders
		;With tb1
		  as
		  (
		  Select

				pro.related_phys_order_id Original_phys_order_id
				, pro.order_related_id
				, pro.phys_order_id as admin_phys_order_id
				, pro.order_relationship_id
				, pao.effective_date
				, pao.ineffective_date
				, pao.physician_id
				, pao.reason
				, pao.created_date as admin_order_created_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock )
				on pro.phys_order_id = pao.phys_order_id
					  and  isnull(pro.deleted,'N')='N'
					  and isnull(pao.deleted,'N')='N'
					  and pao.exclude_eom_status_calculation=0
				inner join dbo.pho_phys_order  po WITH (NOLOCK) on  pro.related_phys_order_id = po.phys_order_id ---AND po.order_class_id=1
				INNER join #clients c with (NOLOCK)  on po.client_id = c.client_id
		  )
		  , tb2 as
		  (
			Select tb1.original_phys_order_id
				, tb1.order_related_id
				, tb1.admin_phys_order_id
				, tb1.order_relationship_id
				, tb1.effective_date
				, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
				, tb1.physician_id
				, tb1.reason
				, tb1.admin_order_created_date
				, nextrow.admin_phys_order_id as next_admin_phys_order_id
				From tb1
					  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		  )

		  Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

		  Select  tb2.original_phys_order_id
				, tb2.effective_date
				, tb2.ineffective_date
				, tb2.order_relationship_id
				, Case tb2.order_relationship_id
							when 1 then 'hold'
							when 2 then 'resume'
							when 3 then 'discontinue'
							else 'unknown'
						end as relationship
				, tb2.reason
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
		  From tb2
				left OUTER JOIN dbo.contact ct WITH (NOLOCK )
							on ct.contact_id = tb2.physician_id

			where

				( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))


		--select 'myholds' myholds,* from #PRP_Holds
		;
		with tb
		as (


		select
			NULL administered_by_id
				--po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.end_date as max_end_date
				--, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
--				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
--				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
--				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc

				, NULL  as diet_supplement_desc
				, NULL  as diet_texture_desc
				, null as  diet_type_desc



				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then



				po.directions


				else NULL end as directions
				, po.discontinued_date
				, isnull(po.discontinued_date, po.end_date  ) end_date
				, po.fac_id
				--, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, NULL fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				--, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, NULL indications_for_use
				, po.order_category_id
				, po.order_date
				--, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc

				 ,Case

						when  order_category_id =  3031 then -----diet
							rtrim(ltrim(diet_type.item_description)) + ' diet '
						when  order_category_id = 3032 then --- supplement
							supp.item_description
						else
							po.[description]
						end
					as order_desc


				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
--				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
--				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, NULL related_diagnoses
				, NULL related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				--, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, NULL route_of_admin_desc
				--, po.schedule_template
				, NULL schedule_template
				, po.[start_date]
				, po.std_order_id
				--, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, NULL as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				--, po.order_schedule_id
				, NULL order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
				, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				, clients.next_review_date1
				, clients.next_review_date2
	from dbo.pho_phys_order po

			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId

			Left outer join dbo.common_code supp with (nolock)
				on supp.item_id = po.diet_supplement and supp.item_code = 'phosup'
				and po.order_category_id = 3032  -- supplement
			Left Outer Join  dbo.common_code diet_type with (nolock)
				on diet_type.item_id = po.diet_type and diet_type.item_code = 'phodyt'
				and po.order_category_id = 3031 -- diet  --- texture and consistency are stored in the directions...


	 where po.draft='0'
	 AND po.order_class_id=1
		 AND po.order_verified = 'Y'
		and	po.order_category_id  <> 3030  ----exclude administrative orders


--	union all
--
--	select   null as administered_by_id
--		, ppo.alter_med_src
--		, ppo.client_id
--		, ppo.communication_method
--		, ppo.completed_by
--		, ppo.max_end_date
--		, ppo.confirmed_by
--		, ppo.confirmed_by_long_username
--		, ppo.confirmed_date
--		, ppo.created_by
--		, ppo.created_by_long_username
--		, ppo.created_date
--		, ppo.diet_type
--		, ppo.diet_texture
--		, ppo.diet_supplement
--		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
--		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
--		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
--		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
--		, ppo.discontinued_date
--		, ppo.end_date
--		, ppo.fac_id
--		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
--		, ppo.hold_date
--		, ppo.hold_date_end
--		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
--		, ppo.order_category_id
--		, ppo.order_date
--		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
--		, ppo.order_status
--		, null as order_relationship
--		, ppo.order_type_id
--		, ppo.pharmacy_id
--		, ppo.phys_order_id
--		, ppo.physician_id
--		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
--		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
--		, ppo.resume_date
--		, ppo.revision_by
--		, ppo.revision_by as revision_long_username
--		, ppo.revision_date
--		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
--		, null schedule_template
--		, ppo.[start_date]
--		, ppo.std_order_id
--		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
--		, ppo.date_ordered as supply_order_date
--		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
--		, ppo.last_reorder_date as supply_last_reorder_date
--		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
--		, ppo.fluid_consistency
--		, ppo.active_flag
--		, ppo.order_verified
--		, ppo.draft
--		, ppo.std_freq_id
--		, ppo.description
--		, null as order_schedule_id
--		, ppo.last_reorder_date
--		, ppo.date_ordered
--		, ppo.diagnoses
--		, ppo.route_of_admin as route_of_admin
--		, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
--	 from dbo.view_prp_pho_phys_order_strike_out ppo
--			inner join #clients clients  with (nolock)
--					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
--					AND ppo.fac_id = @vFacId
--					and @vfil_order_status_strikeout = 1
--			where ppo.order_category_id  not in ( -1, 3030)

	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				--, order_schedule_id


		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				,	'<b>'+

							--po.[description]
							replace(
										replace (
										replace (
										replace(
											replace( isnull(' ' + 	po.order_desc  ,'') , '& ', '&amp;')
											, '<', '&lt;')
											, '>', '&gt;')
											, '"', '&quot;')
											, '''', '&apos;')

							+ '</b>'
				--, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				--, po_sch.std_freq_id
				, NULL std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				--, po.order_schedule_id

		From tb po with (nolock)
			inner JOIN #prp_holds ho
			ON po.phys_order_id = ho.phys_order_id
		--left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		--left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		--left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
		--left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		--left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		--left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


		where  (po.active_flag = 'Y' or po.active_flag is null)
			and row_num = 1
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
--			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
--			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

--			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
--			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
--			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
--			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			--AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			--AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			--AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)

			-- date filters
			and 1 = CASE WHEN @vfil_order_date2 IS NULL THEN 1
				when
				(po.discontinued_date >= @vfil_order_date  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < @vfil_order_date2 OR  po.order_date < @vfil_order_date2 ) )
								or (po.start_date is null and po.order_date < @vfil_order_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= @vfil_order_date )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
				else 0 end


		AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							 --and (po.resume_date IS NULL or po.resume_date < @vfil_asof_order_date_d2)
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d1 )
							then 1
					else 0 end
		-- this is the case of authorization date
		AND 1 = case when(@vfil_order_date2 is not NULL or @vfil_asof_order is not NULL) then 1
			when 	(po.discontinued_date >= po.next_review_date1  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < po.next_review_date2 OR  po.order_date < po.next_review_date2 ) )
								or (po.start_date is null and po.order_date < po.next_review_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= po.next_review_date1 )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
							  else 0 end
--
--
--			------DATE FILTERS
--			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
--						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
--						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
--					else 0 end
--			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
--						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
--						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
--					else 0 end
--
--			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
--						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
--						else 0 end
--
--			AND 1  = case when (@vfil_order_end_date_type  is NULL) then 1
--						when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
--						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
--						else 0 end
--
--
--
--			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
--						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
--						else 0 end
--
--			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
--					else
--					---show all orders
--					case when
--						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
--								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
--						) ---handling with or without schedules
--						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
--						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
--						and isnull(po.active_flag,'y') = 'y'   --- valid order
--                              and po.order_verified = 'Y'   -----no pending
--
--						then 1 else 0 end
--				   end



	end
	else

	Begin
		;
		with tb
		as (


		select
			NULL administered_by_id
				--po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.end_date as max_end_date
				--, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
--				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
--				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
--				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc

				, NULL  as diet_supplement_desc
				, NULL  as diet_texture_desc
				, null as  diet_type_desc



				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then



				po.directions


				else NULL end as directions
				, po.discontinued_date
				, isnull(po.discontinued_date, po.end_date  ) end_date
				, po.fac_id
				--, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, NULL fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				--, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, NULL indications_for_use
				, po.order_category_id
				, po.order_date
				--, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc

				 ,Case

						when  order_category_id =  3031 then -----diet
							rtrim(ltrim(diet_type.item_description)) + ' diet '
						when  order_category_id = 3032 then --- supplement
							supp.item_description
						else
							po.[description]
						end
					as order_desc


				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
--				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
--				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, NULL related_diagnoses
				, NULL related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				--, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, NULL route_of_admin_desc
				--, po.schedule_template
				, NULL schedule_template
				, po.[start_date]
				, po.std_order_id
				--, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, NULL as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				--, po.order_schedule_id
				, NULL order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
				, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				, clients.next_review_date1
				, clients.next_review_date2

	from dbo.pho_phys_order po

			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId

			Left outer join dbo.common_code supp with (nolock)
				on supp.item_id = po.diet_supplement and supp.item_code = 'phosup'
				and po.order_category_id = 3032  -- supplement
			Left Outer Join  dbo.common_code diet_type with (nolock)
				on diet_type.item_id = po.diet_type and diet_type.item_code = 'phodyt'
				and po.order_category_id = 3031 -- diet  --- texture and consistency are stored in the directions...


	 where po.draft='0'
	 AND po.order_class_id=1
		 AND po.order_verified = 'Y'
		and	po.order_category_id  <> 3030  ----exclude administrative orders


--	union all
--
--	select   null as administered_by_id
--		, ppo.alter_med_src
--		, ppo.client_id
--		, ppo.communication_method
--		, ppo.completed_by
--		, ppo.max_end_date
--		, ppo.confirmed_by
--		, ppo.confirmed_by_long_username
--		, ppo.confirmed_date
--		, ppo.created_by
--		, ppo.created_by_long_username
--		, ppo.created_date
--		, ppo.diet_type
--		, ppo.diet_texture
--		, ppo.diet_supplement
--		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
--		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
--		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
--		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
--		, ppo.discontinued_date
--		, ppo.end_date
--		, ppo.fac_id
--		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
--		, ppo.hold_date
--		, ppo.hold_date_end
--		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
--		, ppo.order_category_id
--		, ppo.order_date
--		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
--		, ppo.order_status
--		, null as order_relationship
--		, ppo.order_type_id
--		, ppo.pharmacy_id
--		, ppo.phys_order_id
--		, ppo.physician_id
--		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
--		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
--		, ppo.resume_date
--		, ppo.revision_by
--		, ppo.revision_by as revision_long_username
--		, ppo.revision_date
--		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
--		, null schedule_template
--		, ppo.[start_date]
--		, ppo.std_order_id
--		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
--		, ppo.date_ordered as supply_order_date
--		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
--		, ppo.last_reorder_date as supply_last_reorder_date
--		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
--		, ppo.fluid_consistency
--		, ppo.active_flag
--		, ppo.order_verified
--		, ppo.draft
--		, ppo.std_freq_id
--		, ppo.description
--		, null as order_schedule_id
--		, ppo.last_reorder_date
--		, ppo.date_ordered
--		, ppo.diagnoses
--		, ppo.route_of_admin as route_of_admin
--		, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
--	 from dbo.view_prp_pho_phys_order_strike_out ppo
--			inner join #clients clients  with (nolock)
--					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
--					AND ppo.fac_id = @vFacId
--					and @vfil_order_status_strikeout = 1
--			where ppo.order_category_id  not in ( -1, 3030)

	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				--, order_schedule_id


		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				,	'<b>'+

							--po.[description]
							replace(
										replace (
										replace (
										replace(
											replace( isnull(' ' + 	po.order_desc  ,'') , '& ', '&amp;')
											, '<', '&lt;')
											, '>', '&gt;')
											, '"', '&quot;')
											, '''', '&apos;')

							+ '</b>'
				--, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				--, po_sch.std_freq_id
				, NULL std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				--, po.order_schedule_id

		From tb po with (nolock)

		--left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		--left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		--left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
		--left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		--left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		--left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


		where  (po.active_flag = 'Y' or po.active_flag is null)
			and row_num = 1
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
--			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
--			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

--			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
--			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
--			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
--			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			--AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			--AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			--AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)

			-- date filters
			and 1 = CASE WHEN @vfil_order_date2 IS NULL THEN 1
				when
				(po.discontinued_date >= @vfil_order_date  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < @vfil_order_date2 OR  po.order_date < @vfil_order_date2 ) )
								or (po.start_date is null and po.order_date < @vfil_order_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= @vfil_order_date )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
				else 0 end


		AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							 --and (po.resume_date IS NULL or po.resume_date < @vfil_asof_order_date_d2)
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d1 )
							then 1
					else 0 end

					-- authorization date
		AND 1 = case when(@vfil_order_date2 is not NULL or @vfil_asof_order is not NULL) then 1
			when 	(po.discontinued_date >= po.next_review_date1  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < po.next_review_date2 OR  po.order_date < po.next_review_date2 ) )
								or (po.start_date is null and po.order_date < po.next_review_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= po.next_review_date1 )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
							  else 0 end
--
--
--			------DATE FILTERS
--			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
--						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
--						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
--					else 0 end
--			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
--						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
--						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
--					else 0 end
--
--			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
--						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
--						else 0 end
--
--			AND 1  = case when (@vfil_order_end_date_type  is NULL) then 1
--						when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
--						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
--						else 0 end
--
--
--
--			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
--						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
--						else 0 end
--
--			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
--					else
--					---show all orders
--					case when
--						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
--								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
--						) ---handling with or without schedules
--						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
--						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
--						and isnull(po.active_flag,'y') = 'y'   --- valid order
--                              and po.order_verified = 'Y'   -----no pending
--
--						then 1 else 0 end
--				   end




	end



if @debug_me='Y' select @vfil_asof_order_date_d1 asof_date1, @vfil_asof_order_date_d2 asof_date2
if @debug_me = 'y'  select * From #prp_orders



if isnull(@vIncludeAdminOrder ,0) = 0
	begin
	;WITH
	adminAction
	as
	(

	SELECT admin_order.*,po.phys_order_id as po1 FROM #prp_orders po
			INNER join
			(select ro.related_phys_order_id,pao.phys_order_id, pao.effective_date, pao.ineffective_date, order_relationship_id  from dbo.pho_related_order ro
			inner join pho_admin_order pao
			on ro.phys_order_id = pao.phys_order_id
			--and order_relationship_id = 1
			 ) admin_order

			on po.phys_order_id = admin_order.related_phys_order_id

			where
				(admin_order.effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
				AND (admin_order.ineffective_Date > isnull(@vfil_asof_order_date_d2,@vfil_order_date2)))
				or (admin_order.ineffective_Date IS null and admin_order.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2) )

			--and order_relationship_id < 3

		)
		,holdcte1
		as
		(SELECT * FROM adminAction where order_relationship_id in ( 1)
			AND ((ineffective_date IS null and (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)))
					OR (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
						AND (ineffective_Date >isnull(@vfil_asof_order_date_d2,@vfil_order_date2))
						))
		)
		,resumecte
		as (select *  FROM adminaction where order_relationship_id IN( 2))
		,holdcte
		as(
		select h.* FROM holdcte1 h
		LEFT OUTER join resumecte r
		on r.related_phys_order_id = h.related_phys_order_id
			and r.effective_date >= h.effective_date
		WHERE r.related_phys_order_id IS NULL

	)


	delete #prp_orders
	from #prp_orders p, holdcte h
	where p.phys_order_id  =  h.related_phys_order_id

end

if @debug_me = 'y'  select 'afterdelete' afterdelete, * From #prp_orders

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)

	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status

if @debug_me = 'y'  select * From #tempResult


-- get all orders for that facility/client

if (@vClientIDs <> '-1' and charindex(',',convert(varchar,@vClientIDs))= 0)
begin
set @vSP_ClientId = @vClientIDs
end
else
begin
set @vSP_ClientId = null
end

--DECLARE @vSelectedDate datetime
--set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vgs_start_time
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


-- if asof date was selected only
--if @vfil_asof_order_date is not null
--begin
--	delete FROM #PRP_PhoOrderStatus
--	where order_status <> 1
--
--end



	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;



	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )

			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by



	end



--	if  @vfil_created_by is not null or @vfil_confirmed_by is not null
--	begin
--		delete #PRP_Orders
--			from #PRP_Orders po
--			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
--							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
--							)
--
--
--
--	end

	if @debug_me = 'y' Select 'add phys' add_phys,* from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retriving hold orders ' + convert(varchar(26),getdate(),109)


--get all administrative orders instead of just hold orders

	TRUNCATE table #PRP_Holds

	;With tb1
      as
      (
      Select

            pro.related_phys_order_id Original_phys_order_id
            , pro.order_related_id
            , pro.phys_order_id as admin_phys_order_id
            , pro.order_relationship_id
            , pao.effective_date
            , pao.ineffective_date
            , pao.physician_id
            , pao.reason
            , pao.created_date as admin_order_created_date
            , row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
            from dbo.pho_related_order  pro with (nolock )
            inner Join dbo.pho_admin_order pao  with (nolock )
            on pro.phys_order_id = pao.phys_order_id
                  and  isnull(pro.deleted,'N')='N'
                  and isnull(pao.deleted,'N')='N'
                  and pao.exclude_eom_status_calculation=0
            inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
      )
      , tb2 as
      (
        Select tb1.original_phys_order_id
            , tb1.order_related_id
            , tb1.admin_phys_order_id
            , tb1.order_relationship_id
            , tb1.effective_date
            , case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
            , tb1.physician_id
            , tb1.reason
            , tb1.admin_order_created_date
            , nextrow.admin_phys_order_id as next_admin_phys_order_id
            From tb1
                  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
      )

      Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

      Select  tb2.original_phys_order_id
            , tb2.effective_date
            , tb2.ineffective_date
            , tb2.order_relationship_id
            , Case tb2.order_relationship_id
                        when 1 then 'hold'
                        when 2 then 'resume'
                        when 3 then 'discontinue'
                        else 'unknown'
                    end as relationship
            , tb2.reason
            , isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
      From tb2
            left OUTER JOIN dbo.contact ct WITH (NOLOCK )
                        on ct.contact_id = tb2.physician_id

		where
			( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))







	if @debug_me='Y' select  'hold'as PRP_Holds, * from #PRP_Holds

	if @debug_me='Y' select  @vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end

	if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' +
				replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')

				--ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
			from #PRP_Orders o
			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
							(
								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.start_date
									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

			update #PRP_Orders
				set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
				where order_status = 4

	END


	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	if @debug_me = 'y' Select 'updteforHold' updteforHold, * from #PRP_Orders;

	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number
		, c.next_review_date1
		, c.next_review_date2
		, c.special_instruction

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vDateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vDateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vDateFormatStyle)			as created_date

		--, po.directions									as directions
				, replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vDateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,@vDateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
			when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status  in (10,11) then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
		, isnull(po.order_desc,'') +
				replace(
				replace (
				replace (
				replace(
					replace( isnull(' ' + po.directions,'') , '& ', '&amp;')
					, '<', '&lt;')
					, '>', '&gt;')
					, '"', '&quot;')
					, '''', '&apos;')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vDateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vDateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vDateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vDateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vDateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vDateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		--, po.order_schedule_id
		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join dbo.common_code cc with (nolock ) on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #PRP_Holds ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								convert(char(10),effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								isnull(convert(char(10),ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								replace(replace(reason,char(13),' '), char(10), ' ') + char(9) +
								ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #PRP_Holds ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details


	)
	, tbWithGroupSet
	as
	(
		Select *
	      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_summary--order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date


			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date




			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			, next_review_date1
			, next_review_date2
			, special_instruction
			--, order_Schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id, G_set_id, order_status, order_summary, G1, G2, G3
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+ 'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,@ICDDate,@vFacId) ,'') + @vSeparator
							+ 'Special Instructions' + @vSeparator +   ISNULL(NULLIF(special_instruction, ''), 'No special instructions to display') + @vSeparator
							+ 'Authorization Date' + @vSeparator + ISNULL(NULLIF(@authorization_date, '' ),  CONVERT(varchar, next_review_date1, 101) + ' - ' + CONVERT(varchar, dateadd(dd, -1, next_review_date2), 101))

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	--, order_schedule_id
   	from tbWithSort
	Order by row_num
	)
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code
		, (case when row_num = 1 then status_text else null end )status_text
		, phys_order_id
		--, order_schedule_id
		, row_num
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics


	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY

BEGIN CATCH
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END


	Select
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text
		, NULL as phys_order_id
		--, NULL as order_schedule_id
		, NULL as row_num
END CATCH
END
RETURN

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_review_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_add_data_assertion_result.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**
* This procedure inserts data assertion results
    @sp_proc_name  : Subject stored procedure that has done Data Assertions
    @env_name : Environment name in which the stored proc is originating
    @org_id : Client Organization Id in which the stored proc is originating,
    @org_code : Client Organization code in which the stored proc is originating,
    @status : status of the current Data Assertion record,
    @message : message of the current Data Assertion record,
    @start_time : starting time of Data Assertion.
    @end_time : Optional, end time of Data Assertion. This is typically null when starting Data Assertion. It's here in case caller already done with Data Assertion and just wants to add a row.
    @team : the name of the team owns data assertion sproc
	@team_email : the email address of the team owns data assertion sproc
	
    Returns: Id of the row that has added.
*/

IF EXISTS (SELECT 1 FROM SYSOBJECTS WHERE NAME = 'sproc_add_data_assertion_result')
    BEGIN
        DROP PROCEDURE sproc_add_data_assertion_result
    END
GO

CREATE PROCEDURE [dbo].[sproc_add_data_assertion_result] (
    @sp_proc_name varchar(255),
    @env_name varchar(255),
    @org_id int,
    @org_code varchar(255),
    @status varchar(20),
    @message varchar(max),
    @start_time datetime2(3),
    @end_time datetime2(3) = null,
	@team  varchar(100),
	@team_email varchar(255)
)

AS
BEGIN
    BEGIN TRY
            DECLARE @SQLString NVARCHAR(4000);
            DECLARE @ParmDefinition NVARCHAR(4000);
            DECLARE @data_assertion_db  NVARCHAR(500);

            SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'true' AND name = 'DATA_ASSERTION'
			IF (@data_assertion_db IS NULL)
				BEGIN
					SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'false'
				END
			ELSE
				BEGIN
					SET @data_assertion_db = 'DATA_ASSERTION'
				END
			
            SET @SQLString =
                        N'INSERT INTO [' +  @data_assertion_db + '].[DataAssertion].[dbo].[da_procedure_results]
					   ([sp_proc_name]
					   ,[env_name]
					   ,[org_id]
					   ,[org_code]
					   ,[status]
					   ,[message]
					   ,[start_time]
					   ,[end_time]
					   ,[team]
					   ,[team_email])
				 VALUES
				 (@sp_proc_name,
				@env_name,
				@org_id,
				@org_code,
				@status,
				@message,
				@start_time,
				@end_time,
				@team,
				@team_email)
				'
			
            SET @ParmDefinition = N'
			@sp_proc_name varchar(255),
			@env_name varchar(255),
			@org_id int,
			@org_code varchar(255),
			@status varchar(20),
			@message varchar(max),
			@start_time datetime2(3),
			@end_time datetime2(3),
			@team varchar(100),
			@team_email varchar(255)';
            EXECUTE sp_executesql @SQLString, @ParmDefinition,
                    @sp_proc_name = @sp_proc_name,
                    @env_name = @env_name,
                    @org_id = @org_id,
                    @org_code = @org_code,
                    @status = @status,
                    @message = @message,
                    @start_time = @start_time,
                    @end_time = @end_time,
					@team = @team,
					@team_email = @team_email
        RETURN 0
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_STATE() AS ErrorState,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
grant execute on [dbo].[sproc_add_data_assertion_result] to public
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_add_data_assertion_result.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_add_data_assertion_result.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
================================================================================= 
Purpose:             
                     
Target ENVIRONMENT:  BOTH
Target DB Type:      Client Database
Re-Runable:          YES 

Return:              

Sample executions:   
DECLARE @status_code int, @status_text varchar(3000) 
EXEC dbo.sproc_ar_getTransactionsByInvoice 
  @invoiceId = 46391317 
  , @trialFlag = 'Y' 
  , @facId = 97 
  , @debugFlag = 'N' 
  , @statusCode = @status_code 
  , @statusText = @status_text
=================================================================================
*/

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT 1 FROM sysobjects WHERE name = 'sproc_ar_getTransactionsByInvoice')
    DROP procedure sproc_ar_getTransactionsByInvoice
GO

CREATE PROCEDURE dbo.sproc_ar_getTransactionsByInvoice
(
  @invoiceId          INT,
  @trialFlag          VARCHAR(1),
  @facId              INT,
  @debug              CHAR(1) = 'N',
  @status_code        INT = 0       OUT,
  @status_text        VARCHAR(3000) OUT
)
AS

BEGIN
  SET NOCOUNT ON
  
  DECLARE @vInvoiceId          INT,
          @vTrialFlag          VARCHAR(1),
          @vFacId              INT,
          @step                CHAR(1),
          @errorCode           INT

  SET @vInvoiceId = @invoiceId
  SET @vTrialFlag = @trialFlag
  SET @vFacId = @facId
  SET @step = '1' 
  
  CREATE TABLE #tmpTrans 
  (
    transaction_id int
  )  
  
  BEGIN TRY     
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': get all trainsation_id and store into temp table ' + CONVERT(varchar(26), getdate(), 109) 
    END

    INSERT INTO #tmpTrans
    (transaction_id)
    SELECT t.transaction_id
    FROM ar_transactions t
    WHERE (
           (@vTrialFlag <> 'Y' AND t.invoice_id = @vInvoiceId) 
    	 OR
           (@vTrialFlag = 'Y' AND t.invoice_id IS NULL AND t.trial_invoice_id = @vInvoiceId)
          ) 
      AND case 
            when exists (select 1
                         from ar_batch_errors 
                         where ar_batch_errors.transaction_id=t.transaction_id
                           and ((warning_flag='N' and field_code like 'IE%') 
                                 or 
                                (warning_flag='Y' and field_code like 'IW%'))
                         ) 
              then 1 
            else 0 
          end = 0
      AND (@vFacId = -1 OR t.fac_id = @vFacId) 
      AND t.deleted = 'N'
      
    SET @step = '2'   
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': select all required columns and return the result ' + CONVERT(varchar(26), getdate(), 109) 
    END
      
    SELECT isnull(t.distribution_tx_id, t.transaction_id) AS distribution_tx_id,
           t.transaction_id,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.hipps_code
             ELSE t.care_level
           END AS care_level,
           CASE 
             WHEN ISNULL(txnAssess2.pdpm_flag, 0) = 0 OR arConfig.financial_only = 'Y' OR txnAssess2.hipps_code = 'ZZZZZ' or assess.status IN ('Accepted', 'Completed') 
               THEN 1 
             ELSE 0 
           END AS is_billable,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN 1
             ELSE 0
           END AS is_pdpm,
           t.transaction_type,
           t.revenue_code,
           recurRef.recurring_tx_id,
           t.reduce_deductible_type,
           t.effective_date,
           t.fac_id,
           t.hcpcs_code,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN ''
             ELSE t.rugs_modifier
           END AS rugs_modifier,
           t.therapy_modifier,
           t.therapy_modifier2,
           t.therapy_modifier3,
           t.daily_rate,
           t.days_amount,
           t.days_pay_amount,
           t.amount,
           t.mppr_flag,
           convert(BIT, CASE WHEN mppr_bumpup.bumpup_transaction_id IS NULL THEN 0 ELSE 1 END) AS mppr_bumpup_flag,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.pps_assessment_id
             ELSE NULL
           END AS invoice_assessment_id,
           t.assess_ref_date,
           txnAssess2.hipps_code,
           txnAssess.assessment_rug_id,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.hipps_code
             ELSE assessRug.code
           END AS rug_code,
           t.payer_id,
           range.reimbursement_type,
           stat.action_type AS status_type,
           t.parent_tx_type,
		   recurringtx.charge_frequency,
		   recurringtx.days_amount AS recurring_days_amount,
		   recurringtx.prorate,
		   recurringtx.daily_rate as recurring_tx_daily_rate	
    FROM #tmpTrans tt
    JOIN ar_transactions t
      ON tt.transaction_id = t.transaction_id
    LEFT JOIN census_codes stat 
      ON t.status_code_id = stat.item_id
    INNER JOIN ar_date_range range 
      ON t.payer_id = range.payer_id
     AND t.fac_id = range.fac_id
     AND t.effective_date >= range.eff_date_from 
     AND (range.eff_date_to IS NULL OR t.effective_date <= range.eff_date_to)
     AND range.deleted = 'N'
    LEFT JOIN ar_mppr_bumpup mppr_bumpup 
      ON t.distribution_tx_id = mppr_bumpup.bumpup_transaction_id
    LEFT JOIN ar_transaction_assessment_info txnAssess 
      ON t.transaction_id=txnAssess.transaction_id
    LEFT JOIN as_std_rug_code assessRug 
      ON txnAssess.assessment_rug_id=assessRug.rug_code_id
    LEFT JOIN ar_transaction_assessment_info txnAssess2 
      ON t.distribution_tx_id=txnAssess2.transaction_id
    LEFT JOIN as_assessment assess 
      ON assess.assess_id = txnAssess2.pps_assessment_id 
     AND assess.deleted = 'N' AND assess.std_assess_id = 11
    LEFT JOIN ar_configuration arConfig 
      ON arConfig.fac_id = t.fac_id
    LEFT JOIN ar_transaction_recurring_tx_refs recurRef
      ON t.transaction_id = recurRef.transaction_id
	LEFT JOIN ar_recurring_transactions recurringtx 
	  ON recurRef.recurring_tx_id = recurringtx.transaction_id
	 AND recurringtx.deleted = 'N'
    ORDER BY t.effective_date, t.distribution_tx_id, t.transaction_id  
  END TRY    
    
  BEGIN CATCH
    SELECT @errorCode = @@error, @status_text = ERROR_MESSAGE()
    SELECT @status_code = 1
    PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
    PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    GOTO PgmAbend
  END CATCH

  SET @status_code = 0

  --program success return
  PgmSuccess:
  BEGIN
    IF @status_code = 0 AND @debug='Y' 
      PRINT 'Successfull execution of stored procedure'    
  END
  
  --program failure return
  PgmAbend:
  BEGIN
    IF @status_code = 1 AND @debug='Y'
    BEGIN
      PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
      PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    END 
  END

END
GO

GRANT EXECUTE ON sproc_ar_getTransactionsByInvoice TO PUBLIC
GO

SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
================================================================================= 
Purpose:             
                     
Target ENVIRONMENT:  BOTH
Target DB Type:      Client Database
Re-Runable:          YES 

Return:              

Sample executions:   
DECLARE @status_code int, @status_text varchar(3000) 
EXEC dbo.sproc_ar_getTransactionsByInvoice_adjustment 
  @invoiceId = 46391317 
  , @trialFlag = 'Y' 
  , @facId = 97 
  , @debugFlag = 'N' 
  , @statusCode = @status_code 
  , @statusText = @status_text
=================================================================================
*/

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT 1 FROM sysobjects WHERE name = 'sproc_ar_getTransactionsByInvoice_adjustment')
    DROP procedure sproc_ar_getTransactionsByInvoice_adjustment
GO

CREATE PROCEDURE dbo.sproc_ar_getTransactionsByInvoice_adjustment
(
  @invoiceId          INT,
  @trialFlag          VARCHAR(1),
  @facId              INT,
  @debug              CHAR(1) = 'N',
  @status_code        INT = 0       OUT,
  @status_text        VARCHAR(3000) OUT
)
AS

BEGIN
  SET NOCOUNT ON
  
  DECLARE @vInvoiceId          INT,
          @vTrialFlag          VARCHAR(1),
          @vFacId              INT,
          @step                CHAR(1),
          @errorCode           INT          

  SET @vInvoiceId = @invoiceId
  SET @vTrialFlag = @trialFlag
  SET @vFacId = @facId
  SET @step = '1'   
  
  CREATE TABLE #tmpTrans 
  (
    transaction_id int
  )  
  
  BEGIN TRY     
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': get all trainsation_id and store into temp table ' + CONVERT(varchar(26), getdate(), 109) 
    END  

    INSERT INTO #tmpTrans
    (transaction_id)
    SELECT t.transaction_id
    FROM ar_transactions t
    WHERE t.reversing_tx_id IS NULL 
      AND (
           (@vTrialFlag <> 'Y' AND t.invoice_id = @vInvoiceId) 
    	 OR
           (@vTrialFlag = 'Y' AND t.invoice_id IS NULL AND t.trial_invoice_id = @vInvoiceId)
    	)
      AND case 
            when exists (select 1
                         from ar_batch_errors 
                         where ar_batch_errors.transaction_id=t.transaction_id
                           and ((warning_flag='N' and field_code like 'IE%') 
                                 or 
                                (warning_flag='Y' and field_code like 'IW%'))
                         ) 
              then 1 
            else 0 
          end = 0 
      AND (@vFacId = -1 OR t.fac_id = @vFacId) 
      AND t.deleted = 'N'
      
    SET @step = '2'   
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': select all required columns and return the result ' + CONVERT(varchar(26), getdate(), 109) 
    END  
    
    SELECT isnull(t.distribution_tx_id, t.transaction_id) AS distribution_tx_id,
             t.transaction_id,
             CASE 
               WHEN txnAssess2.pdpm_flag = 1 
                 THEN txnAssess2.hipps_code
               ELSE t.care_level
             END AS care_level,
             CASE 
               WHEN ISNULL(txnAssess2.pdpm_flag, 0) = 0 OR arConfig.financial_only = 'Y' OR txnAssess2.hipps_code = 'ZZZZZ' or assess.status IN ('Accepted', 'Completed') 
                 THEN 1 
               ELSE 0 
             END AS is_billable,
             CASE 
               WHEN txnAssess2.pdpm_flag = 1 
                 THEN 1
               ELSE 0
             END AS is_pdpm,
             t.transaction_type,
             t.revenue_code,
             recurRef.recurring_tx_id,
             t.reduce_deductible_type,
             t.effective_date,
             t.fac_id,
             t.hcpcs_code,
             CASE 
               WHEN txnAssess2.pdpm_flag = 1 
                 THEN ''
               ELSE t.rugs_modifier
             END AS rugs_modifier,
             t.therapy_modifier,
             t.therapy_modifier2,
             t.therapy_modifier3,
             t.daily_rate,
             t.days_amount,
             t.days_pay_amount,
             t.amount,
             t.mppr_flag,
             convert(BIT, CASE WHEN mppr_bumpup.bumpup_transaction_id IS NULL THEN 0 ELSE 1 END) AS mppr_bumpup_flag,
             CASE 
               WHEN txnAssess2.pdpm_flag = 1 
                 THEN txnAssess2.pps_assessment_id
               ELSE NULL
             END AS invoice_assessment_id,
             t.assess_ref_date,
             txnAssess2.hipps_code,
             txnAssess.assessment_rug_id,
             CASE 
               WHEN txnAssess2.pdpm_flag = 1 
                 THEN txnAssess2.hipps_code
               ELSE assessRug.code
             END AS rug_code,
             t.payer_id,
             range.reimbursement_type,
             stat.action_type AS status_type,
             t.parent_tx_type,
			 recurringtx.charge_frequency,
		     recurringtx.days_amount AS recurring_days_amount,
		     recurringtx.prorate,
		     recurringtx.daily_rate as recurring_tx_daily_rate
      FROM #tmpTrans tt
      JOIN ar_transactions t
        ON tt.transaction_id = t.transaction_id
      LEFT JOIN census_codes stat 
        ON t.status_code_id = stat.item_id
      INNER JOIN ar_date_range range 
        ON t.payer_id = range.payer_id
       AND t.fac_id = range.fac_id
       AND t.effective_date >= range.eff_date_from 
       AND (range.eff_date_to IS NULL OR t.effective_date <= range.eff_date_to)
       AND range.deleted = 'N'
      LEFT JOIN ar_mppr_bumpup mppr_bumpup 
        ON t.distribution_tx_id = mppr_bumpup.bumpup_transaction_id
      LEFT JOIN ar_transaction_assessment_info txnAssess 
        ON t.transaction_id=txnAssess.transaction_id
      LEFT JOIN as_std_rug_code assessRug 
        ON txnAssess.assessment_rug_id=assessRug.rug_code_id
      LEFT JOIN ar_transaction_assessment_info txnAssess2 
        ON t.distribution_tx_id=txnAssess2.transaction_id
      LEFT JOIN as_assessment assess 
        ON assess.assess_id = txnAssess2.pps_assessment_id 
       AND assess.deleted = 'N' AND assess.std_assess_id = 11
      LEFT JOIN ar_configuration arConfig 
        ON arConfig.fac_id = t.fac_id
      LEFT JOIN ar_transaction_recurring_tx_refs recurRef
        ON t.transaction_id = recurRef.transaction_id
	  LEFT JOIN ar_recurring_transactions recurringtx 
	    ON recurRef.recurring_tx_id = recurringtx.transaction_id
	   AND recurringtx.deleted = 'N'	
    ORDER BY t.effective_date, t.distribution_tx_id, t.transaction_id
    
  END TRY    
    
  BEGIN CATCH
    SELECT @errorCode = @@error, @status_text = ERROR_MESSAGE()
    SELECT @status_code = 1
    PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
    PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    GOTO PgmAbend
  END CATCH

  SET @status_code = 0

  --program success return
  PgmSuccess:
  BEGIN
    IF @status_code = 0 AND @debug='Y' 
      PRINT 'Successfull execution of stored procedure'    
  END
  
  --program failure return
  PgmAbend:
  BEGIN
    IF @status_code = 1 AND @debug='Y'
    BEGIN
      PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
      PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    END 
  END
  
END
GO

GRANT EXECUTE ON sproc_ar_getTransactionsByInvoice_adjustment TO PUBLIC
GO

SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment_combined.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
================================================================================= 
Purpose:             
                     
Target ENVIRONMENT:  BOTH
Target DB Type:      Client Database
Re-Runable:          YES 

Return:              

Sample executions:   
DECLARE @status_code int, @status_text varchar(3000) 
EXEC dbo.sproc_ar_getTransactionsByInvoice_adjustment_combined 
  @invoiceId = 46391317 
  , @originalInvoiceId = 45727783 
  , @trialFlag = 'Y' 
  , @facId = 97 
  , @debugFlag = 'N' 
  , @statusCode = @status_code 
  , @statusText = @status_text
=================================================================================
*/

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT 1 FROM sysobjects WHERE name = 'sproc_ar_getTransactionsByInvoice_adjustment_combined')
    DROP procedure sproc_ar_getTransactionsByInvoice_adjustment_combined
GO

CREATE PROCEDURE dbo.sproc_ar_getTransactionsByInvoice_adjustment_combined
(
  @invoiceId          INT,
  @originalInvoiceId INT,
  @trialFlag          VARCHAR(1),
  @facId              INT,
  @debug              CHAR(1) = 'N',
  @status_code        INT = 0       OUT,
  @status_text        VARCHAR(3000) OUT
)
AS

BEGIN
  SET NOCOUNT ON
  
  DECLARE @vInvoiceId          INT,
          @vOriginalInvoiceId INT,
          @vTrialFlag          VARCHAR(1),
          @vFacId              INT,
          @step                CHAR(1),
          @errorCode           INT    

  SET @vInvoiceId = @invoiceId
  SET @vOriginalInvoiceId = @originalInvoiceId
  SET @vTrialFlag = @trialFlag
  SET @vFacId = @facId
  SET @step = '1'    
  
  CREATE TABLE #tmpTrans 
  (
    transaction_id int
  )  

  BEGIN TRY     
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': get all trainsation_id and store into temp table ' + CONVERT(varchar(26), getdate(), 109) 
    END  
    
    INSERT INTO #tmpTrans
    (transaction_id)
    SELECT t.transaction_id
    FROM ar_transactions t
    WHERE t.reversing_tx_id IS NULL 
      AND (
           (@vTrialFlag <> 'Y' AND t.invoice_id = @vInvoiceId) 
    	 OR
           (@vTrialFlag = 'Y' AND t.invoice_id IS NULL AND t.trial_invoice_id = @vInvoiceId) 
    	 OR 
    	 t.invoice_id = @vOriginalInvoiceId
    	)
      AND case 
            when exists (select 1
                         from ar_batch_errors 
                         where ar_batch_errors.transaction_id=t.transaction_id
                           and ((warning_flag='N' and field_code like 'IE%') 
                                 or 
                                (warning_flag='Y' and field_code like 'IW%'))
                         ) 
              then 1 
            else 0 
          end = 0
      AND (@vFacId = -1 OR t.fac_id = @vFacId) 
      AND t.deleted = 'N'
    UNION
    SELECT t1.transaction_id
    FROM ar_transactions t1
    LEFT JOIN ar_invoice invoice 
      ON t1.invoice_id = invoice.invoice_id
    WHERE t1.REVERSING_TX_ID IS NULL 
      AND invoice.original_invoice_id = @vOriginalInvoiceId
      AND case 
            when exists (select 1
                         from ar_batch_errors 
                         where ar_batch_errors.transaction_id=t1.transaction_id
                           and ((warning_flag='N' and field_code like 'IE%') 
                                 or 
                                (warning_flag='Y' and field_code like 'IW%'))
                         ) 
              then 1 
            else 0 
          end = 0 
      AND (@vFacId = -1 OR t1.fac_id = @vFacId) 
      AND t1.deleted = 'N'
      
    SET @step = '2'   
    IF(@debug='Y') 
    BEGIN 
      PRINT 'BEGIN STEP ' + @step + ': select all required columns and return the result ' + CONVERT(varchar(26), getdate(), 109) 
    END        
    SELECT isnull(t.distribution_tx_id, t.transaction_id) AS distribution_tx_id,
           t.transaction_id,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.hipps_code
             ELSE t.care_level
           END AS care_level,
           CASE 
             WHEN ISNULL(txnAssess2.pdpm_flag, 0) = 0 OR arConfig.financial_only = 'Y' OR txnAssess2.hipps_code = 'ZZZZZ' or assess.status IN ('Accepted', 'Completed') 
               THEN 1 
             ELSE 0 
           END AS is_billable,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN 1
             ELSE 0
           END AS is_pdpm,
           t.transaction_type,
           t.revenue_code,
           recurRef.recurring_tx_id,
           t.reduce_deductible_type,
           t.effective_date,
           t.fac_id,
           t.hcpcs_code,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN ''
             ELSE t.rugs_modifier
           END AS rugs_modifier,
           t.therapy_modifier,
           t.therapy_modifier2,
           t.therapy_modifier3,
           t.daily_rate,
           t.days_amount,
           t.days_pay_amount,
           t.amount,
           t.mppr_flag,
           convert(BIT, CASE WHEN mppr_bumpup.bumpup_transaction_id IS NULL THEN 0 ELSE 1 END) AS mppr_bumpup_flag,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.pps_assessment_id
             ELSE NULL
           END AS invoice_assessment_id,
           t.assess_ref_date,
           txnAssess2.hipps_code,
           txnAssess.assessment_rug_id,
           CASE 
             WHEN txnAssess2.pdpm_flag = 1 
               THEN txnAssess2.hipps_code
             ELSE assessRug.code
           END AS rug_code,
           t.payer_id,
           range.reimbursement_type,
           stat.action_type AS status_type,
           t.parent_tx_type,
		   recurringtx.charge_frequency,
		   recurringtx.days_amount AS recurring_days_amount,
		   recurringtx.prorate,
		   recurringtx.daily_rate as recurring_tx_daily_rate
    FROM #tmpTrans tt
    JOIN ar_transactions t
      ON tt.transaction_id = t.transaction_id
    LEFT JOIN census_codes stat 
      ON t.status_code_id = stat.item_id
    INNER JOIN ar_date_range range 
      ON t.payer_id = range.payer_id
     AND t.fac_id = range.fac_id
     AND t.effective_date >= range.eff_date_from 
     AND (range.eff_date_to IS NULL OR t.effective_date <= range.eff_date_to)
     AND range.deleted = 'N'
    LEFT JOIN ar_mppr_bumpup mppr_bumpup 
      ON t.distribution_tx_id = mppr_bumpup.bumpup_transaction_id
    LEFT JOIN ar_transaction_assessment_info txnAssess 
      ON t.transaction_id=txnAssess.transaction_id
    LEFT JOIN as_std_rug_code assessRug 
      ON txnAssess.assessment_rug_id=assessRug.rug_code_id
    LEFT JOIN ar_transaction_assessment_info txnAssess2 
      ON t.distribution_tx_id=txnAssess2.transaction_id
    LEFT JOIN as_assessment assess 
      ON assess.assess_id = txnAssess2.pps_assessment_id 
     AND assess.deleted = 'N' AND assess.std_assess_id = 11
    LEFT JOIN ar_configuration arConfig 
      ON arConfig.fac_id = t.fac_id
    LEFT JOIN ar_transaction_recurring_tx_refs recurRef
      ON t.transaction_id = recurRef.transaction_id
	LEFT JOIN ar_recurring_transactions recurringtx 
	  ON recurRef.recurring_tx_id = recurringtx.transaction_id
	 AND recurringtx.deleted = 'N'
    ORDER BY t.effective_date, t.distribution_tx_id, t.transaction_id 
    
  END TRY    
    
  BEGIN CATCH
    SELECT @errorCode = @@error, @status_text = ERROR_MESSAGE()
    SELECT @status_code = 1
    PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
    PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    GOTO PgmAbend
  END CATCH

  SET @status_code = 0

  --program success return
  PgmSuccess:
  BEGIN
    IF @status_code = 0 AND @debug='Y' 
      PRINT 'Successfull execution of stored procedure'    
  END
  
  --program failure return
  PgmAbend:
  BEGIN
    IF @status_code = 1 AND @debug='Y'
    BEGIN
      PRINT 'Stored procedure failure in step: '+ @step + '    ' + convert(varchar(26),getdate())
      PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
    END 
  END    
END
GO

GRANT EXECUTE ON sproc_ar_getTransactionsByInvoice_adjustment_combined TO PUBLIC
GO

SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment_combined.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_getTransactionsByInvoice_adjustment_combined.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- Jira #:                CORE-94230             
--                           
-- Written By:            Daniel Chen
-- Reviewed By:         
-- 
-- Script Type:           DDL 
-- Target DB Type:        Client
-- Target Environment:    Both
-- 
-- 
-- Re-Runable:            YES 
-- 
-- Description of Script: get unbilled UB clients list
-- 
-- Special Instruction:   None
--
--Sample Execution 
--EXEC dbo.sproc_ar_list_getUnbilledUBClients
--  @facId = 1       
-- ,@payerId = 3    
-- ,@payerType = 'medicaid'  
-- ,@startDate = '2014-02-28'
-- ,@toDate = '2021-08-01'   
-- ,@excludeTrialFlag = 1
-- =================================================================================
IF EXISTS
(
    SELECT 1
    FROM INFORMATION_SCHEMA.ROUTINES
    WHERE ROUTINE_SCHEMA = 'dbo'
          AND ROUTINE_NAME = 'sproc_ar_list_getUnbilledUBClients'
          AND ROUTINE_TYPE = 'PROCEDURE'
)
BEGIN
    DROP PROCEDURE dbo.sproc_ar_list_getUnbilledUBClients;
END;
GO
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE dbo.sproc_ar_list_getUnbilledUBClients 

  @facId       INT 
 ,@payerId     INT 
 ,@payerType    VARCHAR(20)
 ,@startDate    DATETIME
 ,@toDate       DATETIME
 ,@excludeTrialFlag BIT
 
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @vFacId INT = @facId
    DECLARE @vPayerId INT = @payerId
    DECLARE @vPayerType VARCHAR(20) = @payerType
    DECLARE @vStartDate DATETIME = @startDate
    DECLARE @vToDate DATETIME = @toDate
    DECLARE @vExcludeTrialFlag BIT = @excludeTrialFlag
           
  --create temp tables
    CREATE TABLE #temp_unbilled_tx
    (
      transaction_id int,
      effective_date datetime,
      client_id int,
      payer_id int
    )

    CREATE TABLE #temp_qualified_unbilled_tx
    (
      transaction_id int,
      effective_date datetime,
      client_id int,
      payer_id int
    )

    -- get all unbilled UB clients
    INSERT INTO #temp_unbilled_tx
    (
        transaction_id,
        effective_date,
        payer_id, 
        client_id
    )
    SELECT
         tx.transaction_Id,
         tx.effective_date,
         tx.payer_id,
         tx.client_id
      FROM AR_TRANSACTIONS tx
           LEFT JOIN AR_INVOICE trialinvoice ON tx.trial_invoice_id = trialinvoice.invoice_id
                                                AND trialinvoice.deleted = 'N'
           LEFT JOIN AR_PAYERS arpayer ON tx.payer_id = arpayer.payer_id
                                          AND tx.fac_id = arpayer.fac_id
           LEFT JOIN AR_INVOICE invoice ON tx.invoice_id = invoice.invoice_id
           JOIN AR_LIB_PAYERS libpayer ON tx.payer_id = libpayer.payer_id
                                               AND libpayer.deleted = 'N'
      WHERE ((@vPayerId IS NULL AND @vPayerType IS NULL)
              OR (@vPayerId IS NOT NULL AND tx.PAYER_ID = @vPayerId) 
              OR (@vPayerId IS NULL AND libpayer.payer_type = @vPayerType ))
           AND (@vExcludeTrialFlag = 0 OR (@vExcludeTrialFlag = 1 and (tx.trial_invoice_id IS NULL
                  OR tx.revision_date > trialinvoice.revision_date)))
             AND libpayer.bill_form = 'UB92'
             AND tx.INVOICE_ID IS NULL
             AND tx.transaction_type NOT IN('X', 'C')
      AND tx.TRANSACTION_DATE IS NOT NULL
      AND (tx.distribution_tx_id IS NULL
           OR tx.distribution_tx_id = tx.transaction_id)
      AND tx.REVERSING_TX_ID IS NULL
      AND tx.EFFECTIVE_DATE < @vToDate
      AND tx.EFFECTIVE_DATE > @vStartDate
      AND (CASE
        WHEN EXISTS
        (
            SELECT *
            FROM ar_batch_errors
            WHERE ar_batch_errors.transaction_id = tx.transaction_id
                  AND ((warning_flag = 'N'
                        AND field_code LIKE 'IE%')
                       OR (warning_flag = 'Y'
                           AND field_code LIKE 'IW%'))
        )
             THEN 1
             ELSE 0
             END) = '0'
      AND tx.FAC_ID = @vFacId
           AND tx.DELETED = 'N'
    order by tx.client_id,tx.payer_id,tx.effective_date

    -- filter out tx in real bill period
    INSERT INTO #temp_qualified_unbilled_tx
    (
        transaction_id,
        effective_date,
        client_id,
        payer_id
    )
    SELECT 
        tx.transaction_id,
        tx.effective_date,
        tx.client_id, 
        tx.payer_id
    FROM #temp_unbilled_tx tx
    WHERE NOT EXISTS
     (
        SELECT 1
        FROM ar_invoice
           JOIN ar_invoice_claim ON ar_invoice.invoice_id = ar_invoice_claim.invoice_id
        WHERE ar_invoice.deleted = 'N'
           AND ar_invoice.trial_flag = 'N'
           AND ar_invoice.manual_flag = 'N'
           AND ar_invoice.original_invoice_id IS NULL
           AND ar_invoice.transaction_flag = 'Y'
           and ar_invoice.fac_id = @vFacId
           AND ar_invoice.client_id = tx.client_id
           AND ar_invoice.payer_id = tx.payer_id
           AND tx.effective_date >= ar_invoice_claim.effective_from_date
           AND tx.effective_date < DATEADD(day, 1, ar_invoice_claim.effective_to_date)
     )
    ORDER BY tx.transaction_id  
    
    DROP TABLE  #temp_unbilled_tx

    -- get client sum list
    SELECT SUM(tx.AMOUNT) AS claim_total, 
             MIN(qtx.EFFECTIVE_DATE) AS min_effective_date, 
             MAX(qtx.EFFECTIVE_DATE) AS max_effective_date, 
             billable_flag = CONVERT(BIT, 
             MIN(CASE
                 WHEN ISNULL(parentTransactionAssessmentInfo.pdpm_flag, 0) = 0
                      OR parentTransactionAssessmentInfo.hipps_code = 'ZZZZZ'
                      OR assess.STATUS IN('Accepted', 'Completed')
                 THEN 1
                 ELSE 0
                 END)),            
             mpi.last_name patient_last_name, 
             mpi.first_name patient_first_name, 
             client.client_id_number, 
             qtx.client_id, 
             libpayer.description AS payer_desc, 
             libpayer.payer_code, 
             libpayer.payer_type, 
             pps_flag = CONVERT(BIT, IIF(libpayer.pps_flag = 'Y', 1, 0)),
             libpayer.assessment_notifications_rates_flag, 
             libpayer.enforce_pps_updates_flag, 
             qtx.payer_id, 
             arpayer.bill_unk_flag AS payer_bill_unk_flag, 
             tx.care_level, 
             tx.transaction_type
      FROM AR_TRANSACTIONS tx
       JOIN #temp_qualified_unbilled_tx qtx on tx.transaction_id = qtx.transaction_id
           JOIN CLIENTS client ON qtx.client_id = client.client_id
           LEFT JOIN AR_PAYERS arpayer ON qtx.payer_id = arpayer.payer_id
                                          AND tx.fac_id = arpayer.fac_id
           LEFT JOIN MPI mpi ON client.mpi_id = mpi.mpi_id
                                AND (mpi.deleted = 'N')
           JOIN AR_LIB_PAYERS libpayer ON qtx.payer_id = libpayer.payer_id
                                               AND (libpayer.deleted = 'N')
           LEFT JOIN AR_TRANSACTION_ASSESSMENT_INFO transactionAssessmentInfo ON tx.transaction_id = transactionAssessmentInfo.transaction_id
           LEFT JOIN AR_TRANSACTION_ASSESSMENT_INFO parentTransactionAssessmentInfo ON tx.distribution_tx_id = parentTransactionAssessmentInfo.transaction_id
           LEFT JOIN AS_ASSESSMENT assess ON parentTransactionAssessmentInfo.pps_assessment_id = assess.assess_id
                                             AND (assess.deleted = 'N')
      GROUP BY mpi.last_name, 
              mpi.first_name, 
              client.client_id_number, 
              qtx.client_id, 
              libpayer.DESCRIPTION, 
              libpayer.payer_code, 
              libpayer.payer_type, 
              libpayer.pps_flag, 
              libpayer.assessment_notifications_rates_flag, 
              libpayer.enforce_pps_updates_flag, 
              qtx.PAYER_ID, 
              arpayer.bill_unk_flag, 
              tx.care_level, 
              tx.transaction_type
      ORDER BY mpi.last_name, 
               mpi.first_name, 
               client.client_id_number, 
               qtx.client_id, 
               libpayer.description, 
               libpayer.payer_code, 
               libpayer.payer_type, 
               libpayer.pps_flag, 
               libpayer.assessment_notifications_rates_flag, 
               libpayer.enforce_pps_updates_flag, 
               qtx.PAYER_ID, 
               arpayer.bill_unk_flag, 
               tx.care_level, 
               tx.transaction_type
END
GO
GRANT EXECUTE ON dbo.sproc_ar_list_getUnbilledUBClients TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =================================================================================
-- Jira #:              CORE-75857            
--
-- Written By:          Jimmy Zhang
-- Reviewed By:         
--  
-- Target DB Type:      CLIENT
-- Target ENVIRONMENT:  BOTH (US/CA) 
--
-- Re-Runable:          YES 
-- 
-- Description of Script Function: 
-- list all unbilled transactions by passed in client ids and payer ids
--  Special Instructions: 
-- ==================================================================
-- Sample execution: 
-- DECLARE @status_code int 
-- DECLARE @status_text varchar(3000) 
-- EXEC dbo.sproc_ar_list_unbilledTransactionsByClientsAndPayers 
-- @clientIdCSV = '1,2,3',
-- @payerIdCSV = '1,2,3',
-- @facId = 1,
-- @isHCR = 0,
-- @isRecalc = 0, 
-- @effFromDate = '2020-01-01',
-- @effToDate = '2020-01-31', 
-- @isUB = 1,
-- @isDeductable = 0
-- ================================================================== 

IF EXISTS (SELECT 1 FROM sysobjects WHERE name = 'sproc_ar_list_unbilledTransactionsByClientsAndPayers') 
BEGIN
  DROP PROCEDURE sproc_ar_list_unbilledTransactionsByClientsAndPayers
END
GO

CREATE PROCEDURE sproc_ar_list_unbilledTransactionsByClientsAndPayers
(
  @clientIdCSV varchar(max),
  @payerIdCSV varchar(max),
  @facId int,
  @isHCR bit,
  @isRecalc bit,  
  @effFromDate datetime, 
  @effToDate datetime, 
  @isUB bit,
  @isDeductable bit
)
AS
BEGIN
  declare @vFacId int = @facId
  declare @vClientIdCSV varchar(max) = @clientIdCSV
  declare @vPayerIdCSV varchar(max) = @payerIdCSV
  declare @vIsHCR bit = @isHCR
  declare @vEffFromDate datetime = @effFromDate
  declare @vEffToDate datetime = (SELECT DATEADD(s, -1, DATEADD(Day, DATEDIFF(Day, 0, @effToDate), 1)))
  declare @vEffToDateInTwoMonth datetime = (select DATEADD(m, DATEDIFF(m, 0, @effToDate) + 2, 0))
  declare @vIsRecalc bit = @isRecalc
  declare @vIsDeductable bit = @isDeductable
  
  declare @client_id table 
  (
    client_id int
  )
  
  declare @payer_id table 
  (
    payer_id int
  )
  
  INSERT INTO @client_id
  (
    client_id
  )
  SELECT VALUE 
  FROM pcc__csvToTableOfIntMax(@vClientIdCSV) sel 
  
  INSERT INTO @payer_id
  (
    payer_id
  )
  SELECT VALUE 
  FROM pcc__csvToTableOfIntMax(@vPayerIdCSV) sel 
  
  if (@isUB = 1)
  BEGIN
    if (@vIsDeductable = 1)
    BEGIN
      SELECT    
        SUM(t.AMOUNT) AS amount 
      FROM AR_TRANSACTIONS t
      JOIN @client_id clients
        ON t.client_id = clients.client_id
      JOIN @payer_id payers
        ON t.payer_id = payers.payer_id
      LEFT JOIN AR_PAYERS arpayer 
        ON t.payer_id = arpayer.payer_id 
       AND t.fac_id = arpayer.fac_id 
      LEFT JOIN AR_INVOICE invoice 
        ON t.invoice_id = invoice.invoice_id 
      LEFT JOIN AR_LIB_PAYERS libpayer 
        ON t.payer_id = libpayer.payer_id 
       AND (libpayer.deleted = 'N') 
      LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
        ON t.transaction_id = recurtrans.transaction_id 
      LEFT JOIN ar_recurring_transactions recurringtx 
        ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
       AND (recurringtx.deleted = 'N') 
      WHERE t.INVOICE_ID IS NULL 
        AND t.TRANSACTION_DATE IS NOT NULL 
        AND t.transaction_type = 'D'
        AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
        AND (@vEffToDate is null OR (t.EFFECTIVE_DATE <= @vEffToDate
            OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                AND libpayer.bill_in_advance = 'Y' 
      	      AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
            OR (@vIsHCR = 1 AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
      	      AND recurringtx.bill_in_advance = 'Y' 
      	      AND t.AUTO_GENERATED = 'R' 
      	      AND libpayer.bill_in_advance = 'Y')))) 
        AND not exists (SELECT 1
      	              FROM ar_invoice i 
      	              JOIN @client_id c
      	                ON c.client_id = i.client_id
      	              JOIN @payer_id p
      	                ON i.payer_id = p.payer_id
      	              JOIN ar_invoice_claim claim
      	              	ON i.invoice_id = claim.invoice_id
                        WHERE i.deleted = 'N'
                    	AND i.trial_flag = 'N'
                    	AND i.manual_flag = 'N'
                    	AND i.original_invoice_id IS NULL
                    	AND i.transaction_flag = 'Y'
                    	AND i.fac_id = t.fac_id
                    	AND i.client_id = t.client_id
                    	AND i.payer_id = t.payer_id
                    	AND t.effective_date >= CONVERT(DATE, claim.effective_from_date)
                    	AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, claim.effective_to_date))) 
        AND (@vIsRecalc = 1 
             OR (arpayer.allow_span_multiple_months = 'Y' 
                 OR (arpayer.allow_span_multiple_months = 'N' 
      		   AND t.trial_invoice_id IS NULL )))
        AND (isNull((SELECT TOP 1 1
      	           FROM ar_batch_errors
      	           WHERE ar_batch_errors.transaction_id = t.transaction_id
      	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
      	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
        AND t.FAC_ID = @vFacId
        AND t.DELETED = 'N'     
    END
    ELSE
    BEGIN
      SELECT      
        libpayer.recurring_ancillary_charges_type
        ,libpayer.pri_sec_payer AS payer_pri_sec
        ,libpayer.break_in_stay
        ,libpayer.payer_type
        ,libpayer.bill_form
        ,libpayer.outpatient_payer_type AS payer_outpatient_payer_type
        ,libpayer.outpatient_payer_state AS payer_outpatient_payer_state
        ,recurtrans.recurring_tx_id
        ,recurringtx.bill_in_advance AS recurring_bill_in_advance
        ,arpayer.bill_unk_flag AS payer_bill_unk_flag
        ,arpayer.group_txs_by
        ,arpayer.daily_rate_field
        ,arpayer.anc_rate_field
        ,arpayer.submitter_id
        ,arpayer.allow_span_multiple_months
        ,t.care_level
        ,t.parent_tx_type
        ,t.CLIENT_ID
        ,t.PAYER_ID
        ,t.EFFECTIVE_DATE
        ,t.TRANSACTION_ID
        ,t.AMOUNT
        ,t.transaction_type
        ,t.DAYS_AMOUNT
        ,t.FAC_ID
        ,t.REVERSING_TX_ID
        ,t.trial_invoice_id
		,recurringtx.charge_frequency as recurring_charge_frequency
		,recurringtx.days_amount AS recurring_days_amount
		,recurringtx.prorate
		,recurringtx.daily_rate as recurring_tx_daily_rate
      FROM AR_TRANSACTIONS t
      JOIN @client_id clients
        ON t.client_id = clients.client_id
      JOIN @payer_id payers
        ON t.payer_id = payers.payer_id
      LEFT JOIN AR_PAYERS arpayer 
        ON t.payer_id = arpayer.payer_id 
       AND t.fac_id = arpayer.fac_id 
      LEFT JOIN AR_INVOICE invoice 
        ON t.invoice_id = invoice.invoice_id 
      LEFT JOIN AR_LIB_PAYERS libpayer 
        ON t.payer_id = libpayer.payer_id 
       AND (libpayer.deleted = 'N') 
      LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
        ON t.transaction_id = recurtrans.transaction_id 
      LEFT JOIN ar_recurring_transactions recurringtx 
        ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
       AND (recurringtx.deleted = 'N') 
      WHERE t.INVOICE_ID IS NULL 
        AND t.TRANSACTION_DATE IS NOT NULL 
        AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
        AND (@vEffToDate is null OR (t.EFFECTIVE_DATE <= @vEffToDate
            OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                AND libpayer.bill_in_advance = 'Y' 
      	      AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
            OR (@vIsHCR = 1 AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
      	      AND recurringtx.bill_in_advance = 'Y' 
      	      AND t.AUTO_GENERATED = 'R' 
      	      AND libpayer.bill_in_advance = 'Y')))) 
        AND not exists (SELECT 1
      	              FROM ar_invoice i 
      	              JOIN @client_id c
      	                ON c.client_id = i.client_id
      	              JOIN @payer_id p
      	                ON i.payer_id = p.payer_id
      	              JOIN ar_invoice_claim claim
      	              	ON i.invoice_id = claim.invoice_id
                        WHERE i.deleted = 'N'
                    	AND i.trial_flag = 'N'
                    	AND i.manual_flag = 'N'
                    	AND i.original_invoice_id IS NULL
                    	AND i.transaction_flag = 'Y'
                    	AND i.fac_id = t.fac_id
                    	AND i.client_id = t.client_id
                    	AND i.payer_id = t.payer_id
                    	AND t.effective_date >= CONVERT(DATE, claim.effective_from_date)
                    	AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, claim.effective_to_date))) 
        AND (@vIsRecalc = 1 
             OR (arpayer.allow_span_multiple_months = 'Y' 
                 OR (arpayer.allow_span_multiple_months = 'N' 
      		   AND t.trial_invoice_id IS NULL )))
        AND (isNull((SELECT TOP 1 1
      	           FROM ar_batch_errors
      	           WHERE ar_batch_errors.transaction_id = t.transaction_id
      	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
      	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
        AND t.FAC_ID = @vFacId
        AND t.DELETED = 'N' 
      ORDER BY t.CLIENT_ID, t.PAYER_ID, t.EFFECTIVE_DATE, t.distribution_tx_id, t.TRANSACTION_ID
    END
  END
  ELSE
  BEGIN
    SELECT      
      libpayer.recurring_ancillary_charges_type
      ,libpayer.pri_sec_payer AS payer_pri_sec
      ,libpayer.break_in_stay
      ,libpayer.payer_type
      ,libpayer.bill_form
      ,libpayer.outpatient_payer_type AS payer_outpatient_payer_type
      ,libpayer.outpatient_payer_state AS payer_outpatient_payer_state
      ,recurtrans.recurring_tx_id
      ,recurringtx.bill_in_advance AS recurring_bill_in_advance
      ,arpayer.bill_unk_flag AS payer_bill_unk_flag
      ,arpayer.group_txs_by
      ,arpayer.daily_rate_field
      ,arpayer.anc_rate_field
      ,arpayer.submitter_id
      ,arpayer.allow_span_multiple_months
      ,t.care_level
      ,t.parent_tx_type
      ,t.CLIENT_ID
      ,t.PAYER_ID
      ,t.EFFECTIVE_DATE
      ,t.TRANSACTION_ID
      ,t.AMOUNT
      ,t.transaction_type
      ,t.DAYS_AMOUNT
      ,t.FAC_ID
      ,t.REVERSING_TX_ID
      ,t.trial_invoice_id
	  ,recurringtx.charge_frequency as recurring_charge_frequency
	  ,recurringtx.days_amount AS recurring_days_amount
	  ,recurringtx.prorate
	  ,recurringtx.daily_rate as recurring_tx_daily_rate
    FROM AR_TRANSACTIONS t
    JOIN @client_id clients
      ON t.client_id = clients.client_id
    JOIN @payer_id payers
      ON t.payer_id = payers.payer_id
    LEFT JOIN AR_PAYERS arpayer 
      ON t.payer_id = arpayer.payer_id 
     AND t.fac_id = arpayer.fac_id 
    LEFT JOIN AR_INVOICE invoice 
      ON t.invoice_id = invoice.invoice_id 
    LEFT JOIN AR_LIB_PAYERS libpayer 
      ON t.payer_id = libpayer.payer_id 
     AND (libpayer.deleted = 'N') 
    LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
      ON t.transaction_id = recurtrans.transaction_id 
    LEFT JOIN ar_recurring_transactions recurringtx 
      ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
     AND (recurringtx.deleted = 'N') 
    WHERE t.INVOICE_ID IS NULL 
      AND t.TRANSACTION_DATE IS NOT NULL 
      AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
      AND (@vEffToDate is null 
           OR (t.EFFECTIVE_DATE <= @vEffToDate
               OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                   AND libpayer.bill_in_advance = 'Y' 
    	           AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
               OR (@vIsHCR = 1 
                   AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
    	                AND recurringtx.bill_in_advance = 'Y' 
    	                AND t.AUTO_GENERATED = 'R' 
    	                AND libpayer.bill_in_advance = 'Y')))) 
      AND not exists (SELECT 1
    	              FROM ar_invoice i 
    	              JOIN @client_id c
    	                ON c.client_id = i.client_id
    	              JOIN @payer_id p
    	                ON i.payer_id = p.payer_id
    	              WHERE i.deleted = 'N'
    	                AND i.trial_flag = 'N'
    	                AND i.manual_flag = 'N'
    	                AND i.original_invoice_id IS NULL
    	                AND i.transaction_flag = 'Y'
    	                AND i.fac_id = t.fac_id
    	                AND i.client_id = t.client_id
    	                AND i.payer_id = t.payer_id
    	                AND t.effective_date >= CONVERT(DATE, i.eff_date_from)
    	                AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, i.eff_date_to))) 
      AND (isNull((SELECT TOP 1 1
    	           FROM ar_batch_errors
    	           WHERE ar_batch_errors.transaction_id = t.transaction_id
    	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
    	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
      AND t.FAC_ID = @vFacId
      AND t.DELETED = 'N' 
    ORDER BY t.CLIENT_ID, t.PAYER_ID, t.EFFECTIVE_DATE, t.distribution_tx_id, t.TRANSACTION_ID
  END

END
GO

GRANT EXECUTE ON sproc_ar_list_unbilledTransactionsByClientsAndPayers TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_delete_records.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_delete_records] Procedure  in Client Database
--						-- f
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both

-- Re-Runable:          YES #

-- Description of Script : After the parquet file is generated and the data is return to the file the same data will be deleted from the on premise table in the same execution. 

-- Special Instruction: 
-- 
/*

exec sproc_azure_data_archive_delete_records 
'pcc-chrisd',
'y',
83,
51,
'gss',
5



Revision History:

2021-01-19 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================
*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_delete_records' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_delete_records
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO
CREATE PROCEDURE dbo.sproc_azure_data_archive_delete_records
@execution_by VARCHAR(65),
@debug_me CHAR(1)='N',
@file_Id INT,
@audit_id INT,
@orgcode VARCHAR(500),
@detail_id INT,
@delete_batch_size INT=1000000



AS



BEGIN

SET XACT_ABORT ON

BEGIN TRY

DECLARE @vauditId INT,
        @deletecount INT,
		@vmasterControllerId TINYINT,
		@vcontrollerId SMALLINT,
		@vdetailId INT,
		@vfileId INT,
		@errorCode VARCHAR(150),
		@errorEntry VARCHAR(4),
		@vErr VARCHAR(3500),
@debugId INT

SELECT @vauditId=@audit_id 


INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_delete_records', @vauditId, 'D','Started',GETDATE(),NULL, 'Running for the fileId: '+' '+ CAST(@file_Id AS VARCHAR(15))+'  ',GETUTCDATE(),NULL



SET @debugId=SCOPE_IDENTITY()
   
   
   DECLARE 
				@sql VARCHAR(3500),		
				@root VARCHAR(1500),
				@folder VARCHAR(150),
				@subfolder VARCHAR(150),
				@rows INT,
				@vfileName VARCHAR(400),
				@source_table VARCHAR(150),
				@rowscopied INT,
				@yeartoarchive SMALLINT ,
				@textyeartoarchive CHAR(4),
				@counter INT,		
				@existingView BIT,							
				@rowsDeleted INT


SET @vfileId=@file_Id	
SET @vdetailId=@detail_id




SELECT @vmasterControllerId=c.master_controller_id,
@vcontrollerId=c.controller_id
FROM azure_data_archive_pipeline_controller_detail dl 
INNER JOIN azure_data_archive_pipeline_controller c ON dl.controller_id=c.controller_id
WHERE dl.detail_id=@vdetailId

	 
IF NOT  EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId AND controller_id=@vcontrollerId)

BEGIN

BEGIN TRANSACTION  


		SELECT @folder=transaction_table_name ,
		@source_table=source_table,
		@textyeartoarchive=CONVERT(char(4),year_to_archive),
		@vdetailId=f.detail_id,
		@vfileName=azure_file_name
		FROM   azure_data_archive_pipeline_storage_file_name f 
		INNER JOIN azure_data_archive_pipeline_controller_detail c
		ON f.detail_id=c.detail_id
		INNER JOIN azure_data_archive_pipeline_controller a
		ON a.controller_id=c.controller_id
		WHERE f.azure_file_id=@vfileId
	


	   
		 SELECT @rowscopied= rows_copied FROM azure_data_archive_pipeline_activity_audit 
		 WHERE pipeline_audit_id=@vauditId
		 AND azure_file_id=@vfileId

		SET @root=''
		SET @root=@orgcode+'/'+@folder+'/'+@textyeartoarchive+'/'+@vfileName

		
		
UPDATE azure_data_archive_pipeline_steps_debug
SET additional_comment=ISNULL(additional_comment,'')+'  '+'Started  working on deleting the data from the db' 
WHERE debug_id=@debugId

SET @deletecount=0

--WHILE @rowscopied>0
--BEGIN

SET @sql=''




	SET @sql=
';WITH filechecksum
AS
(
SELECT pho_schedule_detail_id, 
CONVERT(DATETIME,f.schedule_date)schedule_date,
CHECKSUM(f.pho_schedule_detail_id
      ,f.pho_schedule_id
      ,f.created_by
      ,CONVERT(DATETIME,f.created_date)
      ,f.revision_by
      ,CONVERT(DATETIME,f.revision_date)
      ,f.deleted
      ,f.deleted_by
      ,CONVERT(DATETIME,f.deleted_date)
      ,f.perform_by
      ,CONVERT(DATETIME,f.perform_date)
      ,f.chart_code
      ,f.strike_out_id
      ,f.followup_result
   ,CONVERT(DATETIME,f.schedule_date)
      ,f.dose
      ,f.modified_quantity
      ,f.perform_initials
      ,f.followup_by
   ,CONVERT(DATETIME,f.followup_date)
      ,f.followup_initials
      ,f.followup_pn_id
   ,CONVERT(DATETIME,f.schedule_date_end)
      ,f.detail_supply_id
   ,CONVERT(DATETIME,f.effective_date)
      ,CONVERT(DATETIME,f.followup_effective_date)
   ) checkId
FROM  OPENROWSET(
 BULK  '+CHAR(39)+@root+''+CHAR(39)+','
 +'  '+ 'DATA_SOURCE =''ScheduleDetails'''+','
 +'  ' +'FORMAT = ''parquet'')  f' +' 
)

DELETE p
FROM filechecksum f
INNER  JOIN (SELECT MIN(schedule_date)mindate,MAX(schedule_date) maxdate,1 id
FROM filechecksum
)minmax ON  id=1
 INNER JOIN '+@source_table+' p ON
   p.pho_schedule_detail_id=f.pho_schedule_detail_id
 WHERE      checkId =CHECKSUM( p.pho_schedule_detail_id
      ,p.pho_schedule_id
      ,p.created_by
      ,p.created_date
      ,p.revision_by
      ,p.revision_date
      ,p.deleted
      ,p.deleted_by
      ,p.deleted_date
      ,p.perform_by
      ,p.perform_date
      ,p.chart_code
      ,p.strike_out_id
      ,p.followup_result
   ,p.schedule_date
      ,p.dose
      ,p.modified_quantity
      ,p.perform_initials
      ,p.followup_by
   ,p.followup_date
      ,p.followup_initials
      ,p.followup_pn_id
   ,p.schedule_date_end
      ,p.detail_supply_id
   ,p.effective_date
      ,p.followup_effective_date )
	   AND p.schedule_date BETWEEN mindate AND maxdate
	  '

---(p.schedule_date>=f.schedule_date AND p.schedule_date<=f.schedule_date)
IF @debug_me='Y'
BEGIN
PRINT (@sql)
END

EXEC(@sql)



--SET @deletecount=@deletecount+@@ROWCOUNT
SELECT @deletecount=@@ROWCOUNT
		 




		IF @rowscopied<>@deletecount

		BEGIN 

		 UPDATE azure_data_archive_pipeline_storage_file_name
		 SET is_file_table_deleted_rows_mismatch=1
		 WHERE azure_file_id=@vfileId


		 SET @vErr = 'The Deleted Rows' + CONVERT(VARCHAR(25),@deletecount)+ '  '+', does not match to the' + CONVERT(VARCHAR(25),@rowscopied)+  ' rows copied. The unmatched file will be moved to the umatched folder for the org.'
		 SET @errorCode='-2000010'
		 SET @errorEntry='New'
			RAISERROR (@vErr -- Message text
							   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
							   ,1 -- State
								);

		END
		ELSE 

		BEGIN

		UPDATE azure_data_archive_pipeline_steps_debug
		SET additional_comment=ISNULL(additional_comment,'')+'  '+' The Total Number of rows deleted ' + '  '+CONVERT(VARCHAR(25),@deletecount)
		WHERE debug_id=@debugId

		 UPDATE azure_data_archive_pipeline_storage_file_name
		 SET is_rows_from_table_deleted=1
		 WHERe azure_file_id=@vfileId

		 UPDATE  adl
		 SET total_rows_archived_deleted=ISNULL(total_rows_archived_deleted,0) + @deletecount
		 FROM azure_data_archive_pipeline_controller_detail adl 
		 WHERE detail_id=@vdetailId

 				
		END
	


		



COMMIT


						   IF EXISTS (SELECT 1 FROM  azure_data_archive_pipeline_storage_file_name f
									  INNER JOIN azure_data_archive_pipeline_controller_detail dl ON dl.detail_id=f.detail_id				  
									  WHERE is_rows_from_table_deleted=1 and is_file_generated=1
									  AND dl.controller_id=@vcontrollerId
									  )
						   BEGIN

						   IF EXISTS ( SELECT 1 FROM azure_data_archive_pipeline_controller WHERE 
                                      controller_id=@vcontrollerId AND ISNULL(is_existing_view_updated,1)=0)

							BEGIN

								UPDATE azure_data_archive_pipeline_steps_debug
							set additional_comment=ISNULL(additional_comment,'')+ ' Updating the view after deleting the data' 
							WHERE debug_id=@debugId	

							EXEC  sproc_azure_data_archive_retreival_view
							@execution_by,
							@debug_me ,
							@audit_id ,
							@orgcode ,							
							@vmasterControllerId ,
							@vcontrollerId 
							END

			               END

UPDATE a
SET is_archiving_completed=CASE WHEN ISNULL(total_rows_archived,-1)=total_rows_to_archive THEN 1 ELSE 0 END 
FROM azure_data_archive_pipeline_controller_detail a 
WHERE detail_id=@vdetailId


IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller a
INNER JOIN azure_data_archive_pipeline_controller_detail dl
ON dl.controller_id=a.controller_id
WHERE dl.is_source_history_table=1
AND  is_archiving_completed=0)
BEGIN
UPDATE a
SET is_history_archive_completed=1
FROM azure_data_archive_pipeline_controller a
INNER JOIN azure_data_archive_pipeline_controller_detail dl
ON dl.controller_id=a.controller_id
END


SELECT NULL err_message, 'N' iserror


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId


END

ELSE
BEGIN


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed',
additional_comment=ISNULL(additional_comment,'')+'  '+' The step was skipped as there was an error prior to this sproc execution'
WHERE debug_id=@debugId
END

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId


END TRY

BEGIN CATCH



IF (XACT_STATE()) = -1  
    BEGIN  
         
        ROLLBACK TRANSACTION;  
    END; 
IF @@TRANCOUNT > 0
ROLLBACK

DECLARE  @errorId INT,
         @Error BIT,
		 @logId INT


IF @vErr IS NULL
BEGIN 

		SELECT @vErr=RTRIM( LEFT( 'Store Procedure failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
		SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))
END
		EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						@vdetailid,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_FilenRow_Validation: StoredProcedure_Delete Archived Records',
						'sproc_azure_data_archive_delete_records',
						'New',
						@isError =@Error OUTPUT


		IF @Error=0 OR @Error IS NULL

			BEGIN

			SELECT  
	    
	    
					 'RE' actual_action_code,
					 'Y' isError,					 
					 'New' error_entry
					 
			END	   




UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment='Step Ended into the Catch block',
step_status='Error'
WHERE debug_id=@debugId

	


END CATCH


RETURN
END

GO






GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_delete_records.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_delete_records.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_filename_generator.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_filename_generator] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : Returns  All the detail of the each controller -table

-- Special Instruction: 
-- 

/*
Revision History:


2021-03-24 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT

exec sproc_azure_data_archive_filename_generator 4,45,'RA','gss26207_996CE94B-1623-43BA-AC42-A979278B94CD', 'chrisd','y'

*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_filename_generator' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_filename_generator
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_filename_generator

@detail_id INT,
@audit_id INT,
@actual_action_code VARCHAR(4),
@orgcode VARCHAR(100),
@execution_by VARCHAR(65),
@debug_me CHAR(1)='N'
AS


BEGIN

DECLARE 	@vauditId INT,
            @vdetailid INT,
			@vcontrollerId SMALLINT,
			@vmasterControllerId TINYINT,
			@transactionTable VARCHAR(100),
			@vtextyear VARCHAR(4),
			@rowsperfile INT,
			@id INT,
			@text_detail_id VARCHAR(15),
		    @vactualActioncode VARCHAR(4),
			@table_name VARCHAR(150),
			@vErr VARCHAR(5000) ,
			@sql VARCHAR(2500),
			@errorEntry VARCHAR(4),
			@rwcnt TINYINT,
			@errorCode VARCHAR(150),
			@debugId INT
			

BEGIN TRY 

	   DECLARE @file TABLE
	   (detail_id INT,
	    [file_id] INT,
		[file_name] VARCHAR(150),
		controller_id SMALLINT,
		source_table  VARCHAR(100),
		folder VARCHAR(60),
		subfolder CHAR(4),
		date_filter DATETIME
	   )

	   DECLARE @Output TABLE ( detail_id INT,
                        [file_id]  INT,
						[file_name] VARCHAR(150),
						controller_id SMALLINT,
						source_Table VARCHAR(150),
						folder VARCHAR(150),
						subfolder SMALLINT,
						date_filter DATE,
						isError CHAR(1),
						actual_action_code VARCHAR(4),
						debugId INT,
						ErrorType  VARCHAR(4)
)
SELECT @vauditId=@audit_id 

INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_filename_generator', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()


SET @vdetailid=@detail_id 
SET @vactualActioncode=@actual_action_code
SELECT @text_detail_id=CAST(@detail_id AS varchar(5))


SELECT @vmasterControllerId=c.master_controller_id,
@vcontrollerId=c.controller_id,
@table_name=source_table
FROM azure_data_archive_pipeline_controller_detail dl
INNER JOIN azure_data_archive_pipeline_controller c ON 
dl.controller_id=c.controller_id
WHERE dl.detail_id=@vdetailid



IF @vactualActioncode IN ('CHRA','ECHA')

BEGIN
       IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller_detail WHERE detail_id=@vdetailid AND count_completed=0)
	   BEGIN



		UPDATE azure_data_archive_pipeline_steps_debug
		set additional_comment=ISNULL(additional_comment,'')+ ' Started counting the rows for the  detailid: '+'  '+ CAST(@vdetailId AS VARCHAR(15))
		WHERE debug_id=@debugId	   


								IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME=@table_name)
								BEGIN
						      
							   


								SET @sql='
								IF EXISTS  (SELECT 1 FROM '+@table_name+')	
								BEGIN 
								UPDATE a
								SET total_rows_to_archive=ISNULL(cnt,0),
								count_completed=CASE WHEN ISNULL(cnt,0)>0 THEN 1 ELSE 0 END
								FROM azure_data_archive_pipeline_controller_detail a
								INNER JOIN (SELECT COUNT(*) cnt       
											FROM  '+@table_name+' 
											)t ON
								1=1
								WHERE detail_id='+@text_detail_id+'							
								END
								ELSE
								BEGIN 
								  UPDATE azure_data_archive_pipeline_controller_detail
									SET count_completed=1,
									is_archiving_completed=1 ,
									total_rows_to_archive=0
									WHERE is_source_history_table=1
									AND ISNULL(total_rows_to_archive,0)<1
									AND detail_id='+@text_detail_id+'	
								END
								'

								IF @debug_me='Y'
								BEGIN
								print(@sql)
								END 


								exec (@sql)	
		
								END

						IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller_detail WHERE is_source_history_table=1 AND count_completed=0)
						BEGIN

						IF @debug_me='Y'
						BEGIN
						Select 'entered into if not exists pho_schedule_details is_source_history_table=1 AND count_completed=0'
						END 



						UPDATE azure_data_archive_pipeline_controller 
						SET is_history_rows_counted=1
						WHERE is_history_exists=1		
						AND controller_id=@vcontrollerId

						END


 


		UPDATE azure_data_archive_pipeline_steps_debug
		set additional_comment=ISNULL(additional_comment,'')+ ' The Counting was completed at'+CONVERT(VARCHAR(20),GETDATE())+  'for the  detailid:'+'  '+ CAST(@vdetailId AS VARCHAR(15))+'  '
		WHERE debug_id=@debugId	   



			 END
END





IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_storage_file_name WHERE detail_id=@vdetailId AND is_file_generated=0)


BEGIN


	UPDATE azure_data_archive_pipeline_steps_debug
	set additional_comment=ISNULL(additional_comment,' ')+ ' Existing file will be used for detailid:'+'  '+ CAST(@vdetailId AS VARCHAR(15))+' '
	WHERE debug_id=@debugId

	INSERT INTO @Output		
	SELECT   d.detail_id,
			azure_file_id [file_id],
			azure_file_name [file_name],
			@vcontrollerId controller_id,
			d.source_Table,
			transaction_table_name folder,
			year_to_archive subfolder,
			d.date_filter,
			CASE WHEN e.controller_id IS NOT NULL THEN 'Y' ELSE 'N'  END isError,
			@actual_action_code actual_action_code,
			@debugId debugId,
			CASE WHEN e.controller_id IS NOT NULL THEN 'PREV' ELSE 'NEW'  END ErrorType
	FROM azure_data_archive_pipeline_controller_detail d 
	INNER JOIN  azure_data_archive_pipeline_controller c 
	ON c.controller_id=d.controller_id
	INNER JOIN azure_data_archive_pipeline_storage_file_name f
	ON f.detail_id=d.detail_id
	LEFT JOIN(SELECT DISTINCT pipeline_audit_id,controller_id FROM  azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId AND controller_id=@vcontrollerId) e
	ON e.controller_id=c.controller_id
	WHERE d.detail_id=@vdetailId
	AND is_file_generated=0 
	AND is_archiving_completed=0
	AND d.controller_id=@vcontrollerId




	SET @rwcnt=@@ROWCOUNT




	END
	ELSE
	BEGIN

		IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_storage_file_name WHERE detail_id=@vdetailId AND is_file_generated=1  AND is_rows_from_table_deleted=0
		               AND ISNULL(is_file_table_deleted_rows_mismatch,0)=0)
		BEGIN

		     

			SELECT  @transactionTable=transaction_table_name,
			@vtextyear=CONVERT(VARCHAR(4),year_to_archive)
			FROM azure_data_archive_pipeline_controller_detail d 
			INNER JOIN  azure_data_archive_pipeline_controller c 
			ON c.controller_id=d.controller_id
			WHERE detail_id=@vdetailId
			AND c.controller_id=@vcontrollerId
			AND (
			( is_archiving_completed=0 AND is_source_history_table=1 AND ISNULL(total_rows_to_archive,0)>0)
			OR ( is_archiving_completed=0 AND is_source_history_table=0)
			)

			IF @@ROWCOUNT>0
			BEGIN
			
				
			INSERT INTO azure_data_archive_pipeline_storage_file_name
			(azure_file_name,detail_id)
			SELECT @orgcode+'_'+@transactionTable+ '_'+ @vtextyear+'_'+CONVERT(VARCHAR,getdate(),121)+'.parquet',
				   @vdetailId
				   

			SELECT @id=SCOPE_IDENTITY()


			INSERT INTO @Output

			SELECT   @vdetailid detail_id,
					 azure_file_id as [file_id],
					 azure_file_name [file_name] ,
					 @vcontrollerId controller_id,
					 source_table ,		
					 @transactionTable folder, 
					 @vtextyear subfolder,
					 date_filter,
					 CASE WHEN e.controller_id IS NOT NULL THEN 'Y' ELSE 'N'  END isError,
					 @actual_action_code actual_action_code,
					 @debugId debugId,
					 CASE WHEN e.controller_id IS NOT NULL THEN 'PREV' ELSE 'NEW'  END ErrorType
			FROM azure_data_archive_pipeline_controller_detail c
			INNER JOIN azure_data_archive_pipeline_storage_file_name n
			ON c.detail_id=n.detail_id
			LEFT JOIN(SELECT DISTINCT pipeline_audit_id,controller_id FROM  azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId AND controller_id=@vcontrollerId) e
            ON e.controller_id=c.controller_id
			WHERE is_file_generated=0
			AND n.detail_id=@vdetailid
			AND azure_file_id=@id
			AND is_archiving_completed=0
			AND c.controller_id=@vcontrollerId




			SET @rwcnt=@@ROWCOUNT

			
			END

				UPDATE azure_data_archive_pipeline_steps_debug
				set additional_comment=ISNULL(additional_comment,' ')+ ' New file was created for detailid:'+'  '+ CAST(@vdetailId AS VARCHAR(15))+'  '
				WHERE debug_id=@debugId

		    END

    END

IF ISNULL(@rwcnt,0)<1
BEGIN

			SELECT  
	    
	    
					 NULL actual_action_code,
					 'Y' isError,					
					 NULL error_entry,
					 @debugId debugId,
					 'NEw' ErrorType


UPDATE azure_data_archive_pipeline_steps_debug
SET additional_comment= ISNULL(additional_comment,'')+ 'The Copy Activity will not start since the file was not available for the detailId: '+ CAST(@vdetailid AS VARCHAR(15))+'  '
WHERE debug_id=@debugId
					 

END
ELSE
BEGIN

UPDATE a
SET additional_comment= ISNULL(additional_comment,'')+ 'The Copy Activity will not start since there was a previous error for the controller Id: '+ CAST(@vcontrollerId AS VARCHAR(15))+'  '
FROM azure_data_archive_pipeline_steps_debug  a
INNER JOIN @Output o 
ON o.debugId=a.debug_id 
AND o.isError='Y'



SELECT * FROM @Output
END






UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId



END TRY

BEGIN CATCH

IF (XACT_STATE()) = -1  
    BEGIN  
         
        ROLLBACK TRANSACTION;  
    END; 
IF @@TRANCOUNT > 0
ROLLBACK




DECLARE  @errorId INT,
         @Error BIT,
		 @logId INT


IF @vErr IS NULL
BEGIN 

		SELECT @vErr=RTRIM( LEFT( 'Store Procedure failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
		SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))
END
		EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						@vdetailid,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_FilenRow_Validation: Store Procedure Delete Archived Records',
						'sproc_azure_data_archive_filename_generator',
						'New',
						@isError =@Error OUTPUT


		IF @Error=0 OR @Error IS NULL

			BEGIN

			SELECT  
	    
	    
					 'RE' actual_action_code,
					 'Y' isError,					
					 'New' error_entry
					 
			END	   




UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block and error is: ' + ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId

	


END CATCH

END








GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_filename_generator.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_filename_generator.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_generate_parquet_files.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_generate_parquet_files] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : This store procedure will return the data that will be available in the parquet files
-- 
-- Special Instruction: 
-- 

/*
Revision History:


2021-03-24 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT:

exec sproc_azure_data_archive_generate_parquet_files 1,1,'RA',3,81,'pcc-chrisd','n'


*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_generate_parquet_files' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_generate_parquet_files
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_generate_parquet_files

(@controller_id SMALLINT,
@master_controller_id TINYINT,
@actual_action_code VARCHAR(4),
@detail_id INT,
@audit_id INT,
@execution_by VARCHAR(65),
@debug_me CHAR(1)='N'

)
AS


BEGIN




DECLARE @sql VARCHAR(2500),
       @vErr VARCHAR(3500),	 
        @vrowsperfile VARCHAR(12),
		@vtabletoarchive VARCHAR(150),
		@vcontrollerId SMALLINT,
		@vtransaction_table VARCHAR(100),		
        @vpipeline_end DATETIME,			
		@vstartdatetime DATETIME,
		@venddatetime DATETIME,
		@vtextyear VARCHAR(4),
		@vauditId INT,
		@vmasterControllerId SMALLINT,
		@vdetailId INT,
		@table_name VARCHAR(150),
		@vmaxrow INT,	
		@text_detail_id VARCHAR(15),
		@vactualActioncode VARCHAR(4),
		@sqlSelect  VARCHAR(2500),
		@debugId INT

SELECT @vauditId=@audit_id
SET @vcontrollerId =@controller_id
SET @vmasterControllerId=@master_controller_id
SET @vdetailId=@detail_id 
SET @vactualActioncode=@actual_action_code
SET @text_detail_id=@detail_id

INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_generate_parquet_files', @vauditId, 'D','Started',GETDATE(),NULL, 'Running for the controllerid: '+' '+ CAST(@vcontrollerId AS VARCHAR(15))+'  ' + 'and detailId: '+  CAST(@detail_id AS VARCHAR(15))+'  ',GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()


--IF  NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId AND controller_id=@vcontrollerId)

--BEGIN 		


UPDATE azure_data_archive_pipeline_steps_debug
SET additional_comment=ISNULL(additional_comment,'')+'  '+'Started working on generating the data for parquet files' 
WHERE debug_id=@debugId



SELECT @vpipeline_end=pipeline_to_end_time_utc,
@vrowsperfile=CONVERT(VARCHAR(12),rows_per_file),	 
@vmaxrow=rows_per_file
FROM azure_data_archive_pipeline_master_controller m
WHERE m.master_controller_id=@vmasterControllerId





IF @vpipeline_end>GETUTCDATE()
			BEGIN

UPDATE azure_data_archive_pipeline_steps_debug
SET additional_comment=ISNULL(additional_comment,'')+'  '+'The present time is still less than the pipeline to end and so will continue' 
WHERE debug_id=@debugId

			SELECT  @vtransaction_table=transaction_table_name,
			@vtextyear=CONVERT(VARCHAR(4),year_to_archive),
			@vtabletoarchive=source_table,
			@sqlSelect=sql_query_select
			FROM azure_data_archive_pipeline_controller_detail d 
			INNER JOIN  azure_data_archive_pipeline_controller c 
			ON c.controller_id=d.controller_id
			WHERE detail_id=@vdetailId

			        IF @debug_me='Y'
					BEGIN
					Select 'still not end datetime',@vpipeline_end,@vrowsperfile,@vmaxrow,@vtransaction_table,@vtextyear
					END 

				        IF @vtransaction_table='pho_schedule_details'
						BEGIN
		

			
					
										SET @sql=  'IF EXISTS (SELECT 1 FROM '+@vtabletoarchive+''

			

										SET @sql=@sql+' '+')'
										SET @sql=@sql+' '+
													' BEGIN
													SELECT TOP  '+@vrowsperfile+'   '+@sqlSelect+'
								
								
													FROM '+@vtabletoarchive+' p
								
													  END 
									
									
											 '     
                    
				 
							IF @debug_me='Y'
							BEGIN
							print  (@sql)
							END 
										exec (@sql)
						

				         


									--ELSE

									--BEGIN
									--SELECT @venddatetime=CASE WHEN LEN(@date)>1  THEN @date
									--ELSE CONVERT(DATETIME,CONVERT(varchar(4),@year_to_archive+1) +'-01-01 00:00:00.000',121) END
				
									--SET @sql='SELECT TOP  '+@vrowsperfile+' * FROM '+@vtabletoarchive+' 
									--				WHERE schedule_date>='''+CONVERT(VARCHAR(20),@vstartdatetime, 20)+'''
									--				AND schedule_date<'''+CONVERT(VARCHAR(20),@venddatetime, 20)+'''
									--				'
									--exec (@sql)
									--END


						END

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId


			END




 
END




GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_generate_parquet_files.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_generate_parquet_files.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_get_controller_detail.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_get_controller_detail] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : Returns  All the detail of the each controller - table

-- Special Instruction: 
-- 

/*
Revision History:


2021-03-24 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT
 
exec sproc_azure_data_archive_get_controller_detail 'chrisd','dominic.christie@pointclickcare.com',1,16,'n','y'

*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_get_controller_detail' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_get_controller_detail
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_get_controller_detail
@execution_by VARCHAR(65),
@primary_contact_email VARCHAR(150),
@master_controller_id TINYINT,
@audit_id INT,
@debug_me CHAR(1)='N',
@overrideError CHAR(1)



AS


BEGIN

DECLARE  @vauditId INT,      
         @vErr VARCHAR(5000) , 	
		 @errorEntry VARCHAR(4),
		 @vmasterControllerId TINYINT,
		 @vcontrollerId SMALLINT,
		 @errorCode VARCHAR(150),
		 @errorDetailId VARCHAR(100),
		 @vpipeLineToEnd DATETIME,
		 @debugId INT

BEGIN TRY

SET @vauditId=@audit_id 
SET @vmasterControllerId=@master_controller_id

INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_get_controller_detail', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()

SET @overrideError=ISNULL(NULLIF(@overrideError,''),'N')


IF @overrideError='Y'
BEGIN
INSERT INTO azure_data_archive_pipeline_log
SELECT GETDATE(), 'The value of the OverRideError param was set to override the error previous error handling by user '+ @execution_by , 'Warning Entry','Data_Archival_Controller'
END


--Error Tapping for any manual or unexpected parameter

IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_audit WHERE pipeline_audit_id=@vauditId )---AND pipeline_actual_end IS NULL) 
BEGIN 

SET @vErr = 'Something went wrong, audit id: ' +CAST(@vauditId AS VARCHAR(15)) +' passed to the procedure does not match to the audit id in the azure_data_archive_pipeline_audit for the existing pipeline execution.'
SET @errorEntry='New'
SET @vcontrollerId=-1
SET @errorCode ='-2000004'

	RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);


END 



DECLARE 
		@id INT,
		@monthintrax SMALLINT,
		@transaction_table VARCHAR(150),
		@rowsperfile INT,
		@vtodate DATETIME,		
		@vdatefilter DATETIME,
		@outputrow SMALLINT,
		@maxyeararchived SMALLINT,
		@minyear SMALLINT,
		@textminyear CHAR(4),
		@historyBIT BIT,
		@ControllerId TINYINT
			   		


DECLARE @outputTableToArchive TABLE
(
detail_id INT,
controller_id SMALLINT,
master_controller_id TINYINT,	
folder VARCHAR(100),
subfolder VARCHAR(100),
action_today VARCHAR(1),		
actual_action_code VARCHAR(4)

)


DECLARE @Controller TABLE
( id TINYINT IDENTITY(1,1), 
 controller_id SMALLINT,
 master_controller_id TINYINT,		
 transaction_table_name VARCHAR(150),	
 number_of_months_in_transaction_table TINYINT,
 min_year_to_start_archive SMALLINT,
 is_rows_count BIT,
 is_error_run BIT,
 ishistoryComp BIT 


 
)

DECLARE @existingError TABLE 
(audit_id INT, 
 controller_id SMALLINT,
 errorEntry VARCHAR(4),
 errorDetailId VARCHAR(20)
 )

 --Error capturing from previous execution that had unexpected parameters or values or manual intervention



IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors e INNER JOIN  
           azure_data_archive_pipeline_controller c ON c.pipeline_audit_id=e.pipeline_audit_id WHERE 
		   c.master_controller_id=@vmasterControllerId AND  e.controller_id IS NULL AND is_job_fix=0
		   AND @overrideError='N'
)
BEGIN



SET @errorEntry='PREV'
SELECT @errorDetailId= 'error:' + CAST(e.error_id AS VARCHAR(10)) 
FROM azure_data_archive_pipeline_errors e 
INNER JOIN  azure_data_archive_pipeline_controller c 
ON c.pipeline_audit_id=e.pipeline_audit_id WHERE e.controller_id IS NULL AND is_job_fix=0
AND c.master_controller_id=@vmasterControllerId

	RAISERROR (@vErr-- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);



END





IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller c WHERE pipeline_audit_id IS NOT NULL
            AND  last_execution_end_time IS NULL AND c.master_controller_id=@vmasterControllerId AND @overrideError='N')
BEGIN



INSERT INTO azure_data_archive_pipeline_errors
SELECT c.pipeline_audit_id,
       -1,
	   -1,
       c.controller_id,
	   'Something went wrong in the previous pipeline execution and the (column: last_execution_end_time) for the table:'+'  '+transaction_table_name+'  '+ 'was NULL. The successful completion of the pipeline for the table will update the column with datetime.',
	   '-2000005',
	   GETDATE(),
	   'Unkown',
	   'Unkown',
	   'sproc_azure_data_archive_get_controller_detail',
	   '',
	   GETUTCDATE()

FROM azure_data_archive_pipeline_controller c 
LEFT JOIN  azure_data_archive_pipeline_errors e ON 
e.controller_id=c.controller_id AND e.pipeline_audit_id=c.pipeline_audit_id AND error_code='-2000005'
WHERE e.controller_id IS NULL AND e.pipeline_audit_id IS NULL
AND c.last_execution_end_time IS NULL
AND c.master_controller_id=@vmasterControllerId
END





INSERT INTO @existingError
SELECT c.pipeline_audit_id,
       c.controller_id,
	   CASE WHEN CONVERT(DATE,error_logged_time,1)=CONVERT(DATE,GETDATE(),1) THEN 'New' ELSE 'PREV' END,
	   'error:' + CAST(e.error_id AS VARCHAR(10))
	 
	 
FROM azure_data_archive_pipeline_errors  e 
INNER JOIN azure_data_archive_pipeline_controller c
ON c.controller_id=e.controller_id AND c.pipeline_audit_id=e.pipeline_audit_id
AND is_job_fix=0
AND c.master_controller_id=@vmasterControllerId
AND @overrideError='N'




IF @debug_me='Y'
BEGIN
SELECT '@existingError', * from @existingError 
END	 	



INSERT INTO @Controller

SELECT c.controller_id,

       c.master_controller_id,
       c.transaction_table_name,
       number_of_months_in_transaction_table,
	  ISNULL(min_year_to_start_archive,2007)min_year_to_start_archive,
	  CASE WHEN is_history_exists=1 AND is_history_rows_counted=0 THEN 1 ELSE 0 END,
	  CASE WHEN  is_last_job_error=1 AND is_job_fix=1 THEN 1 ELSE 0 END,
	  CASE WHEN is_history_exists=1 AND is_history_archive_completed=0 THEN 0 ELSE 1 END
	  

FROM azure_data_archive_pipeline_controller c
INNER JOIN azure_data_archive_pipeline_master_controller m ON  m.master_controller_id=c.master_controller_id
LEFT JOIN (SELECT DISTINCT controller_id
FROM @existingError) e  ON e.controller_id=c.controller_id
WHERE (e.controller_id IS NULL)
AND is_pipeline_enabled=1
AND 
(

(ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101))=CONVERT(DATE,GETDATE(),101) AND is_last_job_error=0)
OR
(is_last_job_error=1 AND is_job_fix=1)
OR 
@overrideError='Y'
)

AND m.master_controller_id=@vmasterControllerId


SELECT @id=SCOPE_IDENTITY()



IF @debug_me='Y'
BEGIN
SELECT '@Controller', * from @Controller 
END	 


WHILE @id>0

BEGIN 

			SELECT @vcontrollerId=controller_id,
			@monthintrax=number_of_months_in_transaction_table,
			@minyear=min_year_to_start_archive,
			@textminyear=CAST (min_year_to_start_archive AS CHAR(4)),
			@transaction_table=transaction_table_name,		
			@historyBIT=ishistoryComp
			FROM @Controller
			WHERE id=@id

 
			IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller_detail WHERE is_archiving_completed=0  AND controller_id=@vcontrollerId)
				   
			BEGIN 

            SELECT @vtodate=GETDATE()
			
			       IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller_detail WHERE controller_id=@vcontrollerId)	
				  
						   BEGIN 

									SELECT @maxyeararchived=MAX(year_to_archive)+1
									FROM azure_data_archive_pipeline_controller_detail  dl 
									WHERE controller_id=@vcontrollerId
									AND is_archiving_completed=1
									AND @historyBIT=1

									SELECT @vdatefilter=DATEADD(mm,-@monthintrax,@vtodate)

									WHILE @maxyeararchived<=DATEPART(yyyy,@vdatefilter)

									BEGIN
			                
											INSERT INTO azure_data_archive_pipeline_controller_detail
											(controller_id,
												source_table,
												is_archiving_completed,		
												is_source_history_table,
												year_to_archive,														
												date_filter
											)
											SELECT @vcontrollerId,
													@transaction_table,
													0,				
													0,
													@maxyeararchived,															
													CASE WHEN @maxyeararchived=DATEPART(yyyy,@vdatefilter) THEN @vdatefilter ELSE NULL END

											SET @maxyeararchived=@maxyeararchived+1


									END

										INSERT INTO @outputTableToArchive
											SELECT detail_id, 			      
													dl.controller_id,	
													@vmasterControllerId,
													@transaction_table,
													year_to_archive,	 
													'R',
													CASE WHEN is_error_run=1 THEN 'ERA' ELSE 'RA' END
				                
											FROM azure_data_archive_pipeline_controller_detail 	dl
											INNER JOIN @Controller m
											ON dl.controller_id= m.controller_id																										
											WHERE is_source_history_table=0
											AND  m.id=@id
											AND is_archiving_completed=0
											AND dl.controller_id=@vcontrollerId


							END
					        ELSE
							BEGIN
								    SELECT @maxyeararchived=@minyear+1
									

									SELECT @vdatefilter=DATEADD(mm,-@monthintrax,@vtodate)

									WHILE @maxyeararchived<=DATEPART(yyyy,@vdatefilter)

									BEGIN
			                
											INSERT INTO azure_data_archive_pipeline_controller_detail
											(controller_id,
												source_table,
												is_archiving_completed,		
												is_source_history_table,
												year_to_archive,														
												date_filter
											)
											SELECT @vcontrollerId,
													@transaction_table,
													0,				
													0,
													@maxyeararchived,															
													CASE WHEN @maxyeararchived=DATEPART(yyyy,@vdatefilter) THEN @vdatefilter ELSE NULL END

											SET @maxyeararchived=@maxyeararchived+1

											

									END

										INSERT INTO @outputTableToArchive
											SELECT detail_id, 			      
													dl.controller_id,	
													
													@vmasterControllerId,
													@transaction_table,
													year_to_archive,	 
													'R',
													CASE WHEN is_error_run=1 THEN 'ERA' ELSE 'RA' END
				                
											FROM azure_data_archive_pipeline_controller_detail 	dl
											INNER JOIN @Controller m
											ON dl.controller_id= m.controller_id																										
											WHERE is_source_history_table=0
											AND  m.id=@id
											AND is_archiving_completed=0
											AND dl.controller_id=@vcontrollerId

							END     	
			
																			
					IF @debug_me='Y'
					BEGIN
					SELECT 'if outputTableToArchive', * from @outputTableToArchive 
					END	 
                                               
			END

			ELSE
			BEGIN

			INSERT INTO @outputTableToArchive
			SELECT detail_id, 			      
				dl.controller_id,	
				master_controller_id,
				@transaction_table,
				year_to_archive,	 
				 'R',
				CASE WHEN is_error_run=1 THEN CASE WHEN  is_rows_count=1 THEN 'ECHA'
																		  ELSE 'ERA' 
													END
						  ELSE CASE WHEN is_rows_count=1 THEN 'CHRA' 
														 ELSE 'RA'
								END
				END

				   
			FROM azure_data_archive_pipeline_controller_detail 	dl
			INNER JOIN @Controller m
			ON dl.controller_id= m.controller_id	
			WHERE  m.id=@id
			AND is_archiving_completed=0
			AND dl.controller_id=@vcontrollerId

		

					IF @debug_me='Y'
					BEGIN
					SELECT 'else outputTableToArchive', * from @outputTableToArchive 
					END	 

END





SET @id=@id-1


END

IF @overrideError='N'
BEGIN
INSERT INTO azure_data_archive_pipeline_errors_report_detailId 
SELECT errorDetailId,
       errorEntry
FROM @existingError
END


IF @debug_me='Y'
BEGIN
SELECT 'final outputTableToArchive', * from @outputTableToArchive 
SELECT 'detailId', * from azure_data_archive_pipeline_errors_report_detailId 
SELECT '@existingError', * from @existingError 
END	 




UPDATE a
SET last_execution_end_time=NULL
,pipeline_audit_id=@vauditId 			
FROM azure_data_archive_pipeline_controller a
INNER JOIN @outputTableToArchive o
ON a.controller_id=o.controller_id


UPDATE a
SET is_last_job_error=0,
is_job_fix=0
FROM azure_data_archive_pipeline_controller a INNER JOIN @outputTableToArchive m
ON m.controller_id=a.controller_id		
WHERE (a.is_job_fix=1 OR @overrideError='Y')



UPDATE c
SET is_last_job_error=1,
last_action_code=CASE WHEN errorEntry='PREV' THEN 'RENR' ELSE 'RE' END
FROM azure_data_archive_pipeline_controller c
INNER JOIN @existingError e
ON c.controller_id=e.controller_id
AND c.master_controller_id=@vmasterControllerId
AND @overrideError='N'

UPDATE a
SET pipeline_audit_id=@vauditId,
pipeline_to_end_time_utc=DATEADD(HOUR,pipeline_max_hours_to_run,GETUTCDATE())
FROM azure_data_archive_pipeline_master_controller a 
INNER JOIN @outputTableToArchive  m ON m.master_controller_id=a.master_controller_id
WHERE a.master_controller_id=@vmasterControllerId

SELECT @vpipeLineToEnd=pipeline_to_end_time_utc
FROM azure_data_archive_pipeline_master_controller
WHERE master_controller_id=@vmasterControllerId

UPDATE a
SET next_etl_schedule_date=CASE WHEN CONVERT(DATE,GETDATE(),101) =ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101))
                                THEN DATEADD(DD,days_schedule,ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101))) 
								ELSE next_etl_schedule_date END
FROM azure_data_archive_pipeline_adf_schedule s 
INNER JOIN azure_data_archive_pipeline_master_controller a ON s.schedule_id=a.pipeline_schedule




SELECT @vauditId audit_id,
       controller_id,	   
       detail_id,    
	   folder,
	   subfolder,	  
	   action_today,
	   actual_action_code,
	   'N'   isError,		 
	   NULL  errorEntry,	  
	   @vpipeLineToEnd pipelineToEnd
	   
FROM @outputTableToArchive




UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId


END TRY

BEGIN CATCH

DECLARE  @errorId INT,
         @Error BIT,
		 @logId INT

SELECT  @errorEntry=ISNULL(@errorEntry,'New')

IF @vErr IS NULL AND @errorEntry='New'
BEGIN 

		SELECT @vErr=RTRIM( LEFT( 'Store Procedure  failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
		SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))
END

IF @errorEntry='New'
BEGIN
		EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						-1,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_Controller: LookUp_Tables to Archive',
						'sproc_azure_data_archive_get_controller_detail',
						'New',						
						@isError =@Error OUTPUT


		IF @Error=0 OR @Error IS NULL

			BEGIN

			SELECT  
	    
	    
					 'RE' actual_action_code,
					 'Y' isError,					 
					 'New' error_entry
					 
			END	   

END

IF @errorEntry='PREV'
BEGIN
SELECT  'RE' actual_action_code,
        'Y' isError,		
		@errorEntry
END


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block and error is: ' + ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId

	


END CATCH

END








GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_get_controller_detail.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_get_controller_detail.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_complete.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_pipeline_complete] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : This sproc will update the tables after the pipeline has been excuted compeltely
--

-- Special Instruction: 
-- 

/*
Revision History:


2021-03-24 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT:

exec sproc_azure_data_archive_pipeline_complete 0,0,1,'T','T'

*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_pipeline_complete' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_pipeline_complete
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_pipeline_complete

@master_controller_id TINYINT,
@controller_id SMALLINT,
@audit_id VARCHAR(15),
@action_today CHAR(1),
@actual_action_today VARCHAR(4),
@overrideError CHAR(1)=N

AS

BEGIN


BEGIN TRY

DECLARE @vauditId INT  ,
        @vcontrollerId SMALLINT,
		@vmasterControllerId TINYINT,
		@debugId INT,
		@vErr VARCHAR(5000) , 	
		@errorCode VARCHAR(150)

SElECT @vauditId=CAST(@audit_id AS INT)

SELECT @overrideError=ISNULL(NULLIF(@overrideError,''),'N')

INSERT INTO azure_data_archive_pipeline_steps_debug
SELECT 'Executing sproc_azure_data_archive_pipeline_complete', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()


SElECT @vcontrollerId=@controller_id
SElECT @vmasterControllerId=@master_controller_id 


IF  @actual_action_today='PC' 
BEGIN     
UPDATE azure_data_archive_pipeline_audit
SET	pipeline_actual_end=GETDATE(),
pipeline_actual_end_utc=GETUTCDATE(),
pipeline_last_action_code='C'
WHERE pipeline_audit_id=@vauditId


UPDATE  a
SET next_etl_schedule_date=CASE WHEN CONVERT(DATE,GETDATE(),101) =ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101))
                                THEN DATEADD(DD,days_schedule,ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101)))
								WHEN @overrideError='Y' AND (next_etl_schedule_date IS NULL OR next_etl_schedule_date<GETDATE()) 
								THEN  DATEADD(DD,pipeline_schedule,ISNULL(next_etl_schedule_date,CONVERT(DATE,GETDATE(),101)))
								ELSE next_etl_schedule_date END
FROM azure_data_archive_pipeline_master_controller a
INNER JOIN azure_data_archive_pipeline_adf_schedule s 
ON s.schedule_id=a.pipeline_schedule

END


IF @action_today='C' AND @vcontrollerId>0 AND @vauditId>0
BEGIN     	 
UPDATE azure_data_archive_pipeline_controller
SET last_execution_end_time= GETDATE(),
last_execution_end_time_utc=GETUTCDATE(),
last_action_code=@actual_action_today
WHERE controller_id=@vcontrollerId AND pipeline_audit_id=@vauditId 
END



IF  EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId)
BEGIN

UPDATE azure_data_archive_pipeline_controller
SET is_job_fix=0,
is_last_job_error=1,
last_execution_end_time= GETDATE(),
last_execution_end_time_utc=GETUTCDATE(),
last_action_code=CASE WHEN @action_today='E' THEN ISNULL(@actual_action_today,'RE') ELSE 'C' END
WHERE pipeline_audit_id=@vauditId
AND @vcontrollerId<0 

END


IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors_report_detailId WHERE error_detail_id IS NOT NULL)
BEGIN 
SELECT 'Y' AS isErrorDetail
END
ELSE
BEGIN 

SELECT 'N' AS isErrorDetail
END


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed',
additional_comment=ISNULL(@actual_action_today,'') + '  '+ CASE WHEN @actual_action_today='PC' THEN 'The entire pipeline execution was completed ' ELSE 'The execution for the controller:'+'  '+ CONVERT(VARCHAR(15),@vcontrollerId)+'  '+ 'has been completed' END
WHERE debug_id=@debugId

END TRY
BEGIN CATCH 

DECLARE  @errorId INT,
         @Error BIT

SELECT @vErr=RTRIM( LEFT( 'Store Procedure  failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))

EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						-1,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Complete the Pipeline Execution: LookUp_Complete the_Pipeline Execution',
						'sproc_azure_data_archive_pipeline_complete',
						'New',						
						@isError =@Error OUTPUT

SELECT 'Y' AS isErrorDetail

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block. This is new error and the error is '+ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId


END CATCH


END









		
	


GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_complete.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_complete.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_errors.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_pipeline_errors] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : This store procedure will insert the error detail for the pipeline execution  

-- Special Instruction: 
-- 

/*
Revision History:


2021-03-24 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT:
declare 
@isError BIT 
exec sproc_azure_data_archive_pipeline_errors 
44,
1,
1,
NULL,
56,
'Cannot create Sql Source. Please double check the connection string, stored procedure are set with correct format. Error: The value of the property Value is invalid for the store.',
'2200',
'Activity/SQL Script',
'UserError',
'Data_Archival_File_Generator: Copy Data_Generate Parquet Files',
'sproc_azure_data_archive_generate_parquet_files',
'New',
@isError =@isError  OUTPUT
*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_pipeline_errors' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_pipeline_errors
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_pipeline_errors

@audit_id INT,
@controller_id SMALLINT=NULL,
@master_controller_id TINYINT=NULL,
@detail_id INT =NULL,
@file_id INT =NULL,
@errorDescription VARCHAR(max)= NULL,
@errorCode VARCHAR(150)=NULL,
@error_source VARCHAR(30)=NULL,
@failureType VARCHAR(500)= NULL,
@activityName VARCHAR(200)= NULL,
@sproc_name VARCHAR(150)= NULL,
@error_entry VARCHAR(4),
@isError BIT OUTPUT


AS

BEGIN

BEGIN TRY

DECLARE @errorEntry VARCHAR(4),
        @vmasterControllerId TINYINT,
	    @vcontrollerId SMALLINT,
		@logId INT,
		@vauditId INT,
		@error_detailId INT
SET @vmasterControllerId=@master_controller_id
SET @vauditId=ISNULL(@audit_id,-1) 

SET @vcontrollerId=@controller_id 


IF @error_entry='New'
BEGIN

INSERT INTO [dbo].[azure_data_archive_pipeline_errors]
    
   SELECT @vauditId
         ,@detail_id
		 ,@file_id
		 ,@vcontrollerId
         ,@errorDescription
	     ,@errorCode
	     ,GETDATE()
	     ,@failureType
		 ,@error_source
		 ,@sproc_name
		 ,@activityName
		 ,GETUTCDATE()


	SELECT @error_detailId=SCOPE_IDENTITY()	 



IF @vcontrollerId IS NOT NULL
BEGIN
UPDATE azure_data_archive_pipeline_controller
SET is_last_job_error=1,
last_execution_end_time=GETDATE(),
last_execution_end_time_utc=GETUTCDATE()
WHERE pipeline_audit_id=@audit_id 
AND controller_id=@vcontrollerId 
END


IF @vcontrollerId IS  NULL AND @audit_id IS NOT NULL AND @audit_id>0
BEGIN
UPDATE azure_data_archive_pipeline_controller
SET is_last_job_error=1,
last_execution_end_time=GETDATE(),
last_execution_end_time_utc=GETUTCDATE()
WHERE pipeline_audit_id=@audit_id
END




IF @sproc_name<>'sproc_azure_data_archive_pipeline_master'
BEGIN
UPDATE azure_data_archive_pipeline_audit
SET pipeline_actual_end=GETDATE(),
pipeline_actual_end_utc=GETUTCDATE()
WHERE pipeline_audit_id=@audit_id

END


SELECT @isError=0

IF @error_source LIKE '%Activity%'
BEGIN
   SELECT  @audit_id  audit_id, 	        
	       CASE WHEN  @isError=0 THEN 'N' ELSE 'Y' END isError, 
		   'error:'+ CAST(@error_detailId AS VARCHAR(15)) errorDetailId,
		   ISNULL(@error_entry,'NEW') errorEntry
END


INSERT INTO azure_data_archive_pipeline_errors_report_detailId
SELECT 'error:'+ CAST(@error_detailId AS VARCHAR(15)),
         ISNULL(@error_entry,'New')
  

END

END TRY

BEGIN CATCH 

SELECT @isError=1


INSERT INTO azure_data_archive_pipeline_log
	SELECT GETDATE(),
				'This error was logged while inserting the error detail that was encountered for the pipeline execution. For that error, description is'+' '+@errorDescription+ '  '+'The audit id is'+ CAST(@vauditId AS VARCHAR(15))+'  '+ RTRIM( LEFT( ' And the  error handler store procedure sproc_azure_data_archive_pipeline_errors failed at Error Code : , Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) ),
				'Error Entry',
				'Data_Archival_Master'

	SELECT @logId=SCOPE_IDENTITY()


	     SELECT  @audit_id  audit_id, 	        
	            'Y' isError,
				'log:'+CAST(@logId AS VARCHAR(10)) errorDetailId,
				'New'  errorEntry


INSERT INTO azure_data_archive_pipeline_errors_report_detailId
SELECT 'log:'+CAST(@logId AS VARCHAR(10)),
       'New'


END CATCH

END





GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_errors.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_errors.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_handle_unmatched_file.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_pipeline_handle_unmatchedFile] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : This sproc will update the storage table to a value 1 if the file is moved successfully and then will update the table with unmatched ids.
--

-- Special Instruction: 
-- 

/*
Revision History:


2021-10-06 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================


EXEC SCRIPT:

exec sproc_azure_data_archive_pipeline_handle_unmatchedFile 1,1

*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_pipeline_handle_unmatchedFile' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_pipeline_handle_unmatchedFile
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE  PROCEDURE sproc_azure_data_archive_pipeline_handle_unmatchedFile

@azure_file_id INT,
@audit_id VARCHAR(15),
@controller_id TINYINT,
@is_move_delete CHAR(1) ---M---D---E



AS

BEGIN


BEGIN TRY

DECLARE @vfileID INT,
        @vauditId INT  ,
        @debugId INT,
		@error_detailId INT


SET @vfileID=@azure_file_id
SElECT @vauditId=CAST(@audit_id AS INT)
INSERT INTO azure_data_archive_pipeline_steps_debug
SELECT 'Executing sproc_azure_data_archive_pipeline_handle_unmatchedFile', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()



UPDATE azure_data_archive_pipeline_storage_file_name
SET is_unmatched_file_moved=1
WHERE azure_file_id=@azure_file_id
AND is_file_table_deleted_rows_mismatch=1
AND @is_move_delete='M'



UPDATE azure_data_archive_pipeline_storage_file_name
SET is_unmatched_file_deleted=1
WHERE azure_file_id=@azure_file_id
AND is_file_table_deleted_rows_mismatch=1
AND @is_move_delete='D'


IF @is_move_delete='E'
BEGIN

INSERT INTO [dbo].[azure_data_archive_pipeline_errors]
    
   SELECT @vauditId
         ,-1
		 ,@vfileID
		 ,@controller_id
         ,'The file that was supposed to be deleted following to the unmatched row/s was not deleted. Having this file at the original location will lead to the data duplication.'
	     ,'-2000011'
	     ,GETDATE()
	     ,'File'
		 ,'Storage Folder'
		 ,'sproc_azure_data_archive_pipeline_handle_unmatchedFile'
		 ,'Data_Archival_Check_File_Deleted:Get Metadata'
		 ,GETUTCDATE()


		 SELECT @error_detailId=SCOPE_IDENTITY()	 

INSERT INTO azure_data_archive_pipeline_errors_report_detailId
SELECT 'error:'+ CAST(@error_detailId AS VARCHAR(15)),
       'New'

END
UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
---additional_comment=ISNULL(@actual_action_today,'') + '  '+ CASE WHEN @actual_action_today='PC' THEN 'The entire pipeline execution was completed ' ELSE 'The execution for the controller:'+'  '+ CONVERT(VARCHAR(15),@vcontrollerId)+'  '+ 'has been completed' END
WHERE debug_id=@debugId

END TRY
BEGIN CATCH 

DECLARE  @errorId INT,
         @Error BIT,	
         @vErr VARCHAR(5000) , 	
		 @errorCode VARCHAR(150)

SELECT @vErr=RTRIM( LEFT( 'Store Procedure  failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))

EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						-1,
						-1,
						@controller_id,
						@vfileID,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_Check_File_Deleted: Sproc Activity',
						'sproc_azure_data_archive_pipeline_handle_unmatchedFile',
						'New',						
						@isError =@Error OUTPUT


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block. This is new error and the error is '+ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId


END CATCH


END









		
	


GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_handle_unmatched_file.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_pipeline_handle_unmatched_file.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_previous_file_records_delete.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_previous_file_records_delete] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script :  This store procedure will delete the records from the on premise table and will be executed only when the file was generated and the data was not deleted in the same exectuion.

-- Special Instruction: 
-- 

/*

exec sproc_azure_data_archive_previous_file_records_delete 
'pcc-chrisd',
'y',
13,
'gss/gss26207/996CE94B-1623-43BA-AC42-A979278B94CD',
4


Revision History:

2021-01-19 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================
*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_previous_file_records_delete' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_previous_file_records_delete
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO
CREATE PROCEDURE dbo.sproc_azure_data_archive_previous_file_records_delete
@execution_by VARCHAR(65),
@debug_me CHAR(1)='N',
@audit_id INT,
@orgcode VARCHAR(500),
@detail_id INT,
@delete_batch_size INT=1000000


AS



BEGIN

SET XACT_ABORT ON

BEGIN TRY

DECLARE @vauditId INT,
        @deletecount INT,
		@vmasterControllerId TINYINT,
		@vcontrollerId SMALLINT,
		@vdetailId INT,	
		@errorCode VARCHAR(150),
		@errorEntry VARCHAR(4),
		@vErr VARCHAR(3500),
@debugId INT

SELECT @vauditId=@audit_id
SET @vdetailId=@detail_id

SELECT @vmasterControllerId=c.master_controller_id,
@vcontrollerId=c.controller_id
FROM azure_data_archive_pipeline_controller_detail dl 
INNER JOIN azure_data_archive_pipeline_controller c ON dl.controller_id=c.controller_id
WHERE dl.detail_id=@vdetailId
 



INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_previous_file_records_delete', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()



IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId AND controller_id=@vcontrollerId)


BEGIN



	IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_storage_file_name WHERE detail_id=@vdetailId AND is_file_generated=1 AND is_rows_from_table_deleted=0 )
	BEGIN



                       DECLARE 
						@sql VARCHAR(3500),		
						@root VARCHAR(1500),
						@folder VARCHAR(150),
						@subfolder VARCHAR(150),
						@rows INT,
						@vfileName VARCHAR(400),
						@source_table VARCHAR(150),
						@rowscopied INT,
						@yeartoarchive SMALLINT ,
						@textyeartoarchive CHAR(4),
						@counter INT,		
						@existingView BIT,
						@cdfileID INT,
						@textDetailId VARCHAR(10),
						@textFileId VARCHAR(10),
						@fileId INT
											   		
		
		

					DECLARE @pendingdelete  TABLE
						(id TINYINT IDENTITY(1,1),
						 fileId INT, 
						 detailId INT,
						 rowscopied INT,
						 source_table VARCHAR(150),
						 year_to_archive SMALLINT,
						 transaction_table_name VARCHAR(150),
						 azure_file_name  VARCHAR(400)

						)
							   		

	   SELECT @vmasterControllerId=c.master_controller_id,
		@vcontrollerId=c.controller_id
		FROM azure_data_archive_pipeline_controller_detail dl 
		INNER JOIN azure_data_archive_pipeline_controller c ON dl.controller_id=c.controller_id
		WHERE dl.detail_id=@vdetailId
		
		





							 			  			  			 		   					

		IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_storage_file_name  f
					INNER JOIN azure_data_archive_pipeline_activity_audit a ON a.azure_file_id=f.azure_file_id
					INNER JOIN azure_data_archive_pipeline_controller_detail dl ON dl.detail_id=f.detail_id					
					WHERE  f.detail_id=@vdetailId AND is_rows_from_table_deleted=0 AND is_file_generated=1 
					AND a.data_read=a.rows_copied AND execution_status='Succeeded'
					AND ISNULL(dl.total_rows_archived_deleted,0)<total_rows_archived)
					BEGIN 

		UPDATE azure_data_archive_pipeline_steps_debug
		SET additional_comment=ISNULL(additional_comment,'')+'  '+' Started Deleteting the Previous Records for the detail  id:'+'  '+ CAST(@vdetailId AS VARCHAR(15))
		WHERE debug_id=@debugId
	

		BEGIN TRANSACTION  



	


								   INSERT INTO @pendingdelete
		   										SELECT  fl.azure_file_id,
														fl.detail_id,
														rows_copied,
														d.source_table,
														d.year_to_archive,
														c.transaction_table_name,
														fl.azure_file_name


												FROM azure_data_archive_pipeline_storage_file_name fl 
												INNER JOIN azure_data_archive_pipeline_activity_audit z  
												ON z.azure_file_id=fl.azure_file_id
												INNER JOIN  azure_data_archive_pipeline_controller_detail d
												ON d.detail_id=fl.detail_id 
												INNER JOIN azure_data_archive_pipeline_controller c 
												ON c.controller_id=d.controller_id						
												WHERE is_file_generated=1 AND is_rows_from_table_deleted=0 
												AND rows_copied>0
												AND execution_status='Succeeded'
												AND d.detail_id=@vdetailId
												AND c.controller_id=@vcontrollerId 

		SELECT @counter=SCOPE_IDENTITY()

		IF @debug_me='Y'
		BEGIN
		Select '@pendingdelete', @counter cntr,* FROM @pendingdelete
		END

											WHILE @counter>0
											BEGIN

											
												   SELECT   @folder=transaction_table_name ,
															@source_table=source_table,
															@textyeartoarchive=CONVERT(VARCHAR(15),year_to_archive),
															@vdetailId=detailId,
															@vfileName=azure_file_name,
															@rows=rowscopied,
															@cdfileId=fileId,
															@textDetailId=CONVERT(VARCHAR(15),detailId),
															@textFileId=CONVERT(VARCHAR(15),fileId),
															@fileId=fileId

															FROM  @pendingdelete pd 								
															WHERE pd.id=@counter

                           									SET @root=''
															SET @root=@orgcode+'/'+@folder+'/'+@textyeartoarchive+'/'+@vfileName

       
		UPDATE azure_data_archive_pipeline_steps_debug
		SET additional_comment=ISNULL(additional_comment,'')+'  '+' The file path to delete is :'+'  '+ @root
		WHERE debug_id=@debugId
                                      
															
															SET @sql=
';WITH filechecksum
AS
(
SELECT pho_schedule_detail_id, 
CONVERT(DATETIME,f.schedule_date)schedule_date,
CHECKSUM(f.pho_schedule_detail_id
      ,f.pho_schedule_id
      ,f.created_by
      ,CONVERT(DATETIME,f.created_date)
      ,f.revision_by
      ,CONVERT(DATETIME,f.revision_date)
      ,f.deleted
      ,f.deleted_by
      ,CONVERT(DATETIME,f.deleted_date)
      ,f.perform_by
      ,CONVERT(DATETIME,f.perform_date)
      ,f.chart_code
      ,f.strike_out_id
      ,f.followup_result
   ,CONVERT(DATETIME,f.schedule_date)
      ,f.dose
      ,f.modified_quantity
      ,f.perform_initials
      ,f.followup_by
   ,CONVERT(DATETIME,f.followup_date)
      ,f.followup_initials
      ,f.followup_pn_id
   ,CONVERT(DATETIME,f.schedule_date_end)
      ,f.detail_supply_id
   ,CONVERT(DATETIME,f.effective_date)
      ,CONVERT(DATETIME,f.followup_effective_date)
   ) checkId
FROM  OPENROWSET(
 BULK  '+CHAR(39)+@root+''+CHAR(39)+','
 +'  '+ 'DATA_SOURCE =''ScheduleDetails'''+','
 +'  ' +'FORMAT = ''parquet'')  f' +' 
)
DELETE p
FROM filechecksum f
INNER  JOIN (SELECT MIN(schedule_date)mindate,MAX(schedule_date) maxdate,1 id
FROM filechecksum
)minmax ON  id=1
INNER JOIN '+@source_table+' p ON p.pho_schedule_detail_id=f.pho_schedule_detail_id  
INNER JOIN azure_data_archive_pipeline_controller_detail dl on dl.source_Table='''+@source_table+'''
INNER JOIN azure_data_archive_pipeline_storage_file_name fl on fl.detail_id=dl.detail_id
WHERE fl.detail_id='+@textDetailId+'
AND is_file_generated=1 AND is_rows_from_table_deleted=0 
AND azure_file_id='+@textFileId+'
AND p.schedule_date BETWEEN mindate AND maxdate 
															 '

															IF @debug_me='Y'
															BEGIN									
															PRINT (@sql)
															END

															EXEC(@sql)
									

															SELECT @deletecount=@@ROWCOUNT

															IF @rows<>@deletecount

															BEGIN 

															 UPDATE azure_data_archive_pipeline_storage_file_name
		                                                     SET is_file_table_deleted_rows_mismatch=1
		                                                     WHERE azure_file_id=@fileId

															 SET @vErr = 'The Deleted Rows' + CONVERT(VARCHAR(25),@deletecount)+ '  '+', does not match to the' + CONVERT(VARCHAR(25),@rows)+  ' rows copied.The unmatched file will be moved to the umatched folder for the org.'
															 SET @errorCode='-2000010'
															 SET @errorEntry='New'
																RAISERROR (@vErr -- Message text
																				   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
																				   ,1 -- State
																					);
									
															END

															ELSE

															BEGIN
																UPDATE azure_data_archive_pipeline_steps_debug
																SET additional_comment=ISNULL(additional_comment,'')+'  '+' Total rows to delete is:'+'  '+ CAST(@deletecount AS VARCHAR(15))
																WHERE debug_id=@debugId
									
															 UPDATE azure_data_archive_pipeline_storage_file_name
															 SET is_rows_from_table_deleted=1
															 WHERe azure_file_id=@cdfileId

															 UPDATE  adl
															 SET total_rows_archived_deleted=ISNULL(total_rows_archived_deleted,0) + @deletecount
															 FROM azure_data_archive_pipeline_controller_detail adl 
															 WHERE detail_id=@vdetailId

															END


										   SET @counter=@counter-1
										   END

COMMIT
								   END	
		
	
   IF EXISTS (SELECT 1 FROM  azure_data_archive_pipeline_storage_file_name f
									  INNER JOIN azure_data_archive_pipeline_controller_detail dl ON dl.detail_id=f.detail_id				  
									  WHERE is_rows_from_table_deleted=1 and is_file_generated=1
									  AND dl.controller_id=@vcontrollerId
									  )
						   BEGIN

						   IF EXISTS ( SELECT 1 FROM azure_data_archive_pipeline_controller WHERE 
                                      controller_id=@vcontrollerId AND ISNULL(is_existing_view_updated,1)=0)

							BEGIN

								UPDATE azure_data_archive_pipeline_steps_debug
							set additional_comment=ISNULL(additional_comment,'')+ ' Updating the view after deleting the data' 
							WHERE debug_id=@debugId	

							EXEC  sproc_azure_data_archive_retreival_view
							@execution_by,
							@debug_me ,
							@audit_id ,
							@orgcode ,							
							@vmasterControllerId ,
							@vcontrollerId 
							END

			               END
			UPDATE a
			SET is_archiving_completed=CASE WHEN ISNULL(total_rows_archived,-1)=total_rows_to_archive THEN 1 ELSE 0 END 
			FROM azure_data_archive_pipeline_controller_detail a 
			WHERE detail_id=@vdetailId


			IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_controller a
			INNER JOIN azure_data_archive_pipeline_controller_detail dl
			ON dl.controller_id=a.controller_id
			WHERE dl.is_source_history_table=1
			AND  is_archiving_completed=0)
			BEGIN
			UPDATE a
			SET is_history_archive_completed=1
			FROM azure_data_archive_pipeline_controller a
			INNER JOIN azure_data_archive_pipeline_controller_detail dl
			ON dl.controller_id=a.controller_id
			END

END






SELECT NULL err_message, 'N' iserror


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId

SELECT NULL err_message, 'N' iserror


END
ELSE
BEGIN

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed',
additional_comment=ISNULL(additional_comment,'')+'  '+' The step was skipped as there was an error prior to this sproc execution'
WHERE debug_id=@debugId
END


UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId

END TRY

BEGIN CATCH



IF (XACT_STATE()) = -1  
    BEGIN  
         
        ROLLBACK TRANSACTION;  
    END; 

IF @@TRANCOUNT > 0
ROLLBACK

DECLARE  @errorId INT,
         @Error BIT,
		 @logId INT


IF @vErr IS NULL
BEGIN 

		SELECT @vErr=RTRIM( LEFT( 'Store Procedure failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
		SELECT @errorCode=CAST(ERROR_NUMBER() AS VARCHAR(15))
END
		EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						@vdetailid,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_FilenRow_Validation: StoredProcedure_Delete Archived Records',
						'sproc_azure_data_archive_previous_file_records_delete',
						'New',						
						@isError =@Error OUTPUT


		IF @Error=0 OR @Error IS NULL

			BEGIN

			SELECT  
	    
	    
					 'RE' actual_action_code,
					 'Y' isError,					
					 'New' error_entry
					 
			END	   
					   			 		  		  		 	
UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block and error is: ' + ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId

END CATCH


RETURN
END

GO






GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_previous_file_records_delete.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_previous_file_records_delete.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_retreival_view.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_retreival_view] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : This script will update the view for the existig aging process

-- Special Instruction: 
-- 


/*


exec sproc_azure_data_archive_retreival_view 
'pcc-chrisd',
'y',
2,
'hcr',
1,
1


Revision History:


2021-01-19 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================
*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_retreival_view' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_retreival_view
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO
CREATE PROCEDURE dbo.sproc_azure_data_archive_retreival_view


@execution_by VARCHAR(65),
@debug_me CHAR(1)='N',
@audit_id INT,
@orgcode VARCHAR(500),
@master_controller_id VARCHAR(25),
@controller_id VARCHAR(25)

AS

BEGIN




   
     DECLARE @vErr VARCHAR(3500),
		     @errorCode INT,
			 @vauditId INT,
			 @vmasterControllerId SMALLINT,
		     @vcontrollerId SMALLINT,
			 @folder VARCHAR(150),
			 @root VARCHAR(1500),
			 @sql VARCHAR(5000),	
			 @errorEntry VARCHAR(4),
			 @debugId INT
			  



BEGIN TRY

	  SET @vmasterControllerId=CAST(@master_controller_id AS INT)
	  SET @vcontrollerId=CAST(@controller_id AS INT)
	  SELECT @vauditId=@audit_id

INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_retreival_view', @vauditId, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()



IF @vauditId IS NULL OR @vauditId=''
BEGIN
SET @vErr = 'Something went wrong, audit id cannot be blank.For a Job to continue azure_data_archive_pipeline_audit should have the recent audit id for the existing pipeline execution.'
SET @errorCode='-2000028'
SET @errorEntry='New'
	RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);

END

IF NOT EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors WHERE pipeline_audit_id=@vauditId)

BEGIN


IF @debug_me='Y'
BEGIN
SELECT @vauditId auditId
END

select @folder=transaction_table_name from azure_data_archive_pipeline_controller
WHERE controller_id=@vcontrollerId

IF @folder ='pho_schedule_details'
BEGIN
SET @root=''
SET @root=@orgcode+'/'+@folder+'/'+'*'+'/*.parquet'

		
SET @sql=''
SET @sql='
ALTER VIEW [dbo].[view_pho_schedule_details_aging] AS

select * from pho_schedule_details_2017
union all
select * from pho_schedule_details_2016
union all
select * from pho_schedule_details_2015
union all
select * from pho_schedule_details_2014
union all
select * from pho_schedule_details_2013
union all
select * from pho_schedule_details_2012
union all
select * from pho_schedule_details_2011
union all
select * from pho_schedule_details_2010
union all
select * from pho_schedule_details_2009
union all
select * from pho_schedule_details_2008

UNION ALL 

 SELECT  [pho_schedule_detail_id]
      ,[pho_schedule_id]
      ,[created_by] COLLATE DATABASE_DEFAULT
      ,[created_date]
      ,[revision_by] COLLATE DATABASE_DEFAULT
      ,[revision_date] 
      ,[deleted] COLLATE DATABASE_DEFAULT
      ,[deleted_by] COLLATE DATABASE_DEFAULT
      ,[deleted_date]
      ,[perform_by] COLLATE DATABASE_DEFAULT
      ,[perform_date]
      ,[chart_code] COLLATE DATABASE_DEFAULT
      ,[strike_out_id]
      ,[followup_result] COLLATE DATABASE_DEFAULT
      ,[schedule_date]
      ,[dose] COLLATE DATABASE_DEFAULT
      ,[modified_quantity] COLLATE DATABASE_DEFAULT
      ,[perform_initials] COLLATE DATABASE_DEFAULT
      ,[followup_by] COLLATE DATABASE_DEFAULT
      ,[followup_date]
      ,[followup_initials] COLLATE DATABASE_DEFAULT
      ,[followup_pn_id]
      ,[schedule_date_end]
      ,[detail_supply_id]
      ,[effective_date]
      ,[followup_effective_date]  FROM  OPENROWSET(
 BULK  '+CHAR(39)+@root+''+CHAR(39)+','
 +'  '+ 'DATA_SOURCE =''ScheduleDetails'''+','
 +'  ' +'FORMAT = ''parquet'') AS f'




				

END

EXEC (@sql)


 UPDATE azure_data_archive_pipeline_controller
 set is_existing_view_updated=1
 WHERE controller_id=@vcontrollerId

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId

END

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed',
additional_comment=ISNULL(additional_comment,'')+'  '+' The step was skipped as there was an error prior to this sproc execution'
WHERE debug_id=@debugId



END TRY 

BEGIN CATCH




DECLARE  @errorId INT,
         @Error BIT,
		 @logId INT

SELECT  @errorEntry=ISNULL(@errorEntry,'New')

IF @vErr IS NULL AND @errorEntry='New'
BEGIN 

		SELECT @vErr=RTRIM( LEFT( 'Store Procedure  failed at Line Number : ' +  CASt(ERROR_LINE() as VARCHAR(10)) + ', Description : ' +  ERROR_MESSAGE(), 5000 ) )
		SELECT @errorCode=CAST(ERROR_NUMBER() as VARCHAR(15))

END

IF @errorEntry='New'
BEGIN
		EXEC sproc_azure_data_archive_pipeline_errors
						@vauditId,
						@vcontrollerId,
						@vmasterControllerId,
						-1,
						-1,
						@vErr,
						@errorCode,
						'Sproc Proc',
						'SQL Script',
						'Data_Archival_FilenRow_Validation: StoredProcedure_Delete Archived Records',
						'sproc_azure_data_archive_retreival_view',
						'New',
						@isError =@Error OUTPUT


		IF @Error=0 OR @Error IS NULL

			BEGIN

			SELECT  
	    
	    
					 'RE' actual_action_code,
					 'Y' isError,					
					 'New' error_entry
					 
			END	   

END
	  	
UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
additional_comment=ISNULL(additional_comment,'')+'  '+'Step Ended into the Catch block and error is: ' + ISNULL(@vErr,''),
step_status='Error'
WHERE debug_id=@debugId


END CATCH





	  	

END



GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_retreival_view.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_retreival_view.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_return_error_detail.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE	- 86645	  :   script to create [sproc_azure_data_archive_return_error_detail] Procedure  in Client Database
--						-- 
-- Written By:          Dominic Christie
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  Both
-- 
-- Re-Runable:          YES #
-- 
-- Description of Script : 
-- This Sproc will return the error detail id- for the errors
-- Special Instruction: 
-- 



/*

exec sproc_azure_data_archive_return_error_detail 

'dominic.christie@pointclickcare.com',
'S'


Revision History: 



2021-01-19 Dom Christie  		CORE-86645 4.4.2	 	- Initial Creation of the store proc.
-- =================================================================================
*/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_azure_data_archive_return_error_detail' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].sproc_azure_data_archive_return_error_detail
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO
CREATE PROCEDURE dbo.sproc_azure_data_archive_return_error_detail


@primary_contact_email VARCHAR(250),
@error_report_type CHAR(1)=NULL---On Error E, On Schedule S-- Both B




AS

BEGIN

DECLARE @Id INT ,
        @type VARCHAR(8),		
        @revErrorDetailId VARCHAR(17),
		@debugId INT,
		@emailNote VARCHAR(520),
		@prevText VARCHAR(120),
		@newText VARCHAR(120),
		@rwcnt TINYINT

		



INSERT INTO azure_data_archive_pipeline_steps_debug

SELECT 'Executing sproc_azure_data_archive_return_error_detail', -1, 'D','Started',GETDATE(),NULL, NULL,GETUTCDATE(),NULL

SET @debugId=SCOPE_IDENTITY()

IF EXISTS (SELECT 1 FROM azure_data_archive_pipeline_errors_report_detailId WHERE error_detail_id IS NOT NULL)
BEGIN


SET @emailNote='After any failure, if the error/s are not fixed the subsequent pipeline execution will terminate without any action. After a fix, it is required to update the is_job_fix flag to 1 for the table azure_data_archive_pipeline_controller,and pipeline_actual_end with the date time if the error left the column null. Failing to do so would not re-run the pipeline with the fixes. For more information on the Archiving framework,refer https://confluence.pointclickcare.com/confluence/display/POM/Azure+Data+Archiving'
SET @prevText= 'Notification for the previous error encountered during Pipeline Execution which requires an immediate attention.'
SET @newText='Recent Pipeline Execution Resulted in an error and requires an immediate attention.'


DECLARE @retrieveError TABLE
(
 email SMALLINT,
 error_entry VARCHAR(4),
 error_type VARCHAR(6),
 error_id VARCHAR(150)

)


    ;WITH errorId
	AS 
	(
	SELECT 
          REVERSE(LEFT(REVERSE(error_detail_id), CHARINDEX(':',REVERSE(error_detail_id))-1)) id,
		  LEFT(error_detail_id, CHARINDEX(':',error_detail_id)-1) errType,
		  error_entry
	FROM  azure_data_archive_pipeline_errors_report_detailId 

	),controllerId
	AS
	(
	SELECT id, errType, error_entry, ISNULL(err.controller_id,-1) controller_id
	FROM errorId e 
	LEFT JOIN azure_data_archive_pipeline_errors err ON ( (err.error_id=e.id AND errType LIKE 'error%') OR (err.pipeline_audit_id=e.id AND errType LIKE 'audit%'))
	LEFT JOIN azure_data_archive_pipeline_log lg ON lg.log_id=e.id AND  errType LIKE 'log%'	
	)

	SELECT     'Y' isErrorData,CASE WHEN re.error_entry='PREV' THEN  @prevText
	                                        ELSE @newText
			   END emailHeader,    
			  'For further investigation and error detail please refer the '+
			   CASE WHEN error_type LIKE 'log%' THEN 'azure_data_archive_pipeline_log' +' ' 
			        ELSE 'azure_data_archive_pipeline_errors'
					END+' '+' table with the'+'  ' +
			   CASE WHEN error_type LIKE 'log%' THEN 'log id/s:' +' ' 
			        ELSE 'error id/s:'
					END +' '+ '[ '  +error_id+ ' ]' 
			   +'  '+  CASE WHEN c.controller_id IS NOT NULL THEN 'This error is for the transaction table'+' '+c.transaction_table_name+'.' ELSE '' END errorMessage,
	            CASE WHEN  @error_report_type='S' THEN @primary_contact_email 
				     WHEN  @error_report_type='E' THEN ISNULL(c.notify_email_to,@primary_contact_email)
				     WHEN  @error_report_type='B' THEN CASE WHEN c.notify_email_to IS NULL THEN @primary_contact_email
					                                        ELSE c.notify_email_to+';'+@primary_contact_email
															END
					 
					 END emailList,
				CASE WHEN @error_report_type='E' THEN ISNULL(c.notify_email_cc,@primary_contact_email)
				
				     END emailCc,
				@emailNote emailNote
	FROM (	SELECT DISTINCT c.controller_id,
	                        c.error_entry,
							c.errType error_type,
				    STUFF((SELECT ';' + t.id
					FROM controllerId t
					WHERE (c.controller_id = t.controller_id)
					AND c.error_entry=t.error_entry
					AND c.errType=t.errType
					ORDER BY c.id
					FOR XML PATH('')),1,1,'') error_id									

	                FROM controllerId c) re 
	LEFT JOIN	azure_data_archive_pipeline_controller c  ON c.controller_id=re.controller_id
	
	SET @rwcnt=@@ROWCOUNT
	IF @rwcnt<0
	BEGIN
	SELECT 'N' isErrorData
	END

END
ELSE
BEGIN

	
	SELECT 'E' isErrorData

END

UPDATE azure_data_archive_pipeline_steps_debug
SET step_end_date=GETDATE(),
step_end_time_utc=GETUTCDATE(),
step_status='Completed'
WHERE debug_id=@debugId

END



GO

print 'C_Branch/04_StoredProcedures/sproc_azure_data_archive_return_error_detail.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_azure_data_archive_return_error_detail.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_clinical_dml_update_retired_assessment_version_info.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**************************************************************************************************
-- ================================================================================= 
-- CORE-85300		  :   CMS: Catcher creation for template version. 
--						-- 
-- Written By:          Elena Horozanskaya	
-- Reviewed By:         
-- 
-- Script Type:         DDL
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  All/Both
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create [sproc_clinical_dml_update_retired_assessment_version_info] Procedure 
--						 : It will 
--                       create/update record in as_std_assess_version_group for template;
--                       update  status and description fields in as_std_assessment  table to retire previous version of template.
-- 
-- 
-- ================================================================================= */

if exists (select * from dbo.sysobjects where id = object_id('dbo.sproc_clinical_dml_update_retired_assessment_version_info') and OBJECTPROPERTY(id, 'IsProcedure') = 1)
   drop procedure dbo.sproc_clinical_dml_update_retired_assessment_version_info
GO

/*
Sample execution Script

declare @original_std_assess_id int
declare @new_std_assess_id int
declare @assess_desc varchar(600)
declare @status char(1)
declare @version_number_incr char(1)
DECLARE @debug char(1)
DECLARE @status_code int
DECLARE @status_text varchar(3000)
set @original_std_assess_id = 6601973
set @new_std_assess_id = 6602006
set @assess_desc = '01 - UDA CONVERSION TEST - 01 - MULTI TRIG - 04 CONV 01 V1'
set @status = 'A'
set @version_number_incr = 'I'
exec sproc_clinical_dml_update_retired_assessment_version_info @assess_desc, @original_std_assess_id, @new_std_assess_id, @version_number_incr, @debug, @status_code, @status_text
*/


CREATE
proc dbo.sproc_clinical_dml_update_retired_assessment_version_info
(
 	@description VARCHAR(600),
	@original_std_assess_id INT,
	@new_std_assess_id INT,
	@version_number_incr char(1),
    @debug              char(1)  = 'N',
    @status_code        int  = 0 out,
    @status_text        varchar(3000) out
)
AS
BEGIN

SET NOCOUNT ON
	
BEGIN TRY
	
	if (not exists (select 1 from as_std_assess_version_group_item WHERE std_assess_id = @new_std_assess_id))
	begin
	DECLARE
		  @error_code int  
	    , @version_group_id INT
		, @version_number_increment DECIMAL(10,1)
		, @default_version_number DECIMAL(10,1)
		, @new_group bit
		, @version_number DECIMAL(10,1)
		, @new_version_number DECIMAL(10, 1)
		, @assess_desc_with_version VARCHAR(600)
		,@retire_template_description VARCHAR(600)
	;

	SET @version_group_id = -1;
	
	SET @default_version_number = 1.0;
	SET @new_group = 0;
	
	SELECT @version_group_id = versionGroup.std_assess_version_group_id
	FROM as_std_assess_version_group versionGroup
	JOIN as_std_assess_version_group_item versionItem on versionItem.std_assess_version_group_id = versionGroup.std_assess_version_group_id
	WHERE versionItem.std_assess_id = @original_std_assess_id;
	
	-- insert new version group if there is no
	IF(@version_group_id = -1)
	BEGIN
		INSERT INTO as_std_assess_version_group ([description]) VALUES (@description);
		
		SELECT @version_group_id = versionGroup.std_assess_version_group_id
		FROM as_std_assess_version_group versionGroup
		LEFT JOIN as_std_assess_version_group_item versionItem on versionItem.std_assess_version_group_id = versionGroup.std_assess_version_group_id
		WHERE [description] = @description
		AND versionItem.std_assess_version_group_id IS NULL;
		
		SET @new_group = 1;
		SET @version_number = @default_version_number;	
		
		INSERT INTO as_std_assess_version_group_item(std_assess_version_group_id, std_assess_id, effective_date, ineffective_date, version_number)
		VALUES (@version_group_id, @original_std_assess_id, getdate(), NULL, @version_number);
		
			
	END
	ELSE
	BEGIN
		SELECT TOP 1  
			@version_number = version_number
		FROM as_std_assess_version_group_item 
		WHERE std_assess_version_group_id = @version_group_id
		ORDER BY version_number DESC
		;
	END
	
	
	IF(@version_number_incr = 'I')
	BEGIN
		IF(FLOOR(@version_number)<>CEILING(@version_number))
			SET @new_version_number = CEILING(@version_number);
		ELSE
			SET @new_version_number = @version_number + 1;
	END
	ELSE
		SET @new_version_number = @version_number + 0.1;

	INSERT INTO as_std_assess_version_group_item(std_assess_version_group_id, std_assess_id, effective_date, ineffective_date, version_number)
	VALUES (@version_group_id, @new_std_assess_id, getdate(), NULL, @new_version_number);
	
	-- Update as_std_assess_version_group
	UPDATE as_std_assess_version_group SET description = @description
		FROM as_std_assess_version_group as versionGroup 
		JOIN as_std_assess_version_group_item as item 
		ON  versionGroup.std_assess_version_group_id = item.std_assess_version_group_id 
		WHERE std_assess_id  = @new_std_assess_id;	
	
		-- Update as_std_assessment
	SET @retire_template_description = ''
	SELECT @retire_template_description = description 
	FROM as_std_assessment 
	WHERE std_assess_id  = @original_std_assess_id;
	
	SET @retire_template_description = @retire_template_description + ' - V ' + CAST(FLOOR(@version_number) AS VARCHAR);
	UPDATE as_std_assessment
	SET [description] = @retire_template_description
	WHERE std_assess_id  = @original_std_assess_id;	
	
	end
	
END TRY

--error trapping
BEGIN CATCH

  SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()

  SET @status_code = 1

  GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
  IF @debug='Y' PRINT 'Successfull execution of stored procedure'
  RETURN @status_code
END


--program failure return
PgmAbend:
RETURN @status_code 
	
	
END
GO

GRANT EXECUTE ON dbo.sproc_clinical_dml_update_retired_assessment_version_info TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_clinical_dml_update_retired_assessment_version_info.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_clinical_dml_update_retired_assessment_version_info.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_cp_poc_getFollowUpQuestionResponses.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**  Description  	Gets lists of follow up question responses
**  Script Type 	List
**  Target DB Type	CLIENT
**  Target ENVIRONMENT  Both
**  Re-Runable		YES
**  Parameters:
**			@isTask					- is the intervention a task
**			@strikeoutFlag			- what strikeout flag value is needed
**			@interventionId			- std intervention id
**          @vfacId					- Facility Id
**			@clientId				- id of specified client
**			@statusId				- status of client (discharged or current)
**			@unitId					- unit id to include
**			@floorId				- floor id to include
**			@startDate				- Start date boundary
**			@endDate				- End date boundary
**			@startShiftDate			- Start date boundary for shift date
**			@endShiftDate			- End date boundary for shift date
**			@stdQuestionId			- std questionId
**			@sortBy					- sort by resident name or location
**          @debug              	- Flag to print debug statements.
**          @status_code        	- Return value if the procedure ran correctly, 1 if error, 0 if success.
**          @status_text        	- Error message if status_code is 1.
**  


--	Revision History:
--   2016-05-04  H. ehghaghi 			PCC-94268	3.7.10 Display corresponding units of measure on report
--   2016-08-11  H.Ehghaghi	          PCC-99300   3.7.10.2    User Needs To Be Able To Specify Proper Units Of Measure For Blood Sugar
--	 2017-04-11	 K. Niakhai			PCC-113567	3.7.12.2	Daily Notes: Hide Daily Notes from Follow Up Question Report
--	 2017-04-20	 T. Jiang			PCC-113575	3.7.12.2	Second Signature: Display Second Signature on Follow up question report	
--  2017-06-07	 R. Sanchez		PCC-118686		3.7.14	enable narrative text 'ntv'
-- 2017-07-31	 R. Sanchez		PCC-119968		3.7.13.2 Performance enhancement
-- 2017-11-03	 R. Sanchez		CORE-5472		3.7.14.1	Force recompile
-- 2018-02-08	 R. Sanchez		CORE-3255		3.7.15.2	increase intervention_description size Follow Up Question Report Generates Blank Page/No result
-- 2019-04-29	 Mustafa Behrainwala	CORE-35134 Handle Multiple select in Follow-up Question Report
*****************************************************************************************************/

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_cp_poc_getFollowUpQuestionResponses]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_cp_poc_getFollowUpQuestionResponses]
GO

create PROCEDURE [dbo].[sproc_cp_poc_getFollowUpQuestionResponses]  (
    @isTask char(1),
    @strikeoutFlag char(1),
	@interventionId int,
    @facId int,
    @clientId int,
    @statusId int,
    @unitId int,
    @floorId int,
    @startDate datetime,
    @endDate datetime,
    @startShiftDate datetime,
    @endShiftDate datetime,
    @stdQuestionId int,
    @sortBy char(1),
	@debug			char(1)  = 'N',
	@status_code		int out,
	@status_text		varchar(3000) out
) WITH RECOMPILE

as
BEGIN
SET NOCOUNT ON
BEGIN TRY

-- declare local variables
DECLARE
	@isIntNotSet int,
    @discharged int,
    @current int,
	@step     int,
	@current_history_end_date datetime,
	@error_code   int;

	-- for parameter sniffing
	declare  @visTask char(1),
    @vstrikeoutFlag char(1),
	@vinterventionId int,
    @vfacId int,
    @vclientId int,
    @vstatusId int,
    @vunitId int,
    @vfloorId int,
    @vstartDate datetime,
    @vendDate datetime,
    @vstartShiftDate datetime,
    @vendShiftDate datetime,
    @vstdQuestionId int,
    @vsortBy char(1);


	select  @visTask =@isTask ,
    @vstrikeoutFlag = @strikeoutFlag ,
	@vinterventionId = @interventionId ,
    @vfacId = @facId ,
    @vclientId = @clientId ,
    @vstatusId = @statusId ,
    @vunitId = @unitId ,
    @vfloorId = @floorId ,
    @vstartDate = @startDate ,
    @vendDate = @endDate ,
    @vstartShiftDate = @startShiftDate ,
    @vendShiftDate = @endShiftDate ,
    @vstdQuestionId = @stdQuestionId ,
    @vsortBy = @sortBy


DECLARE @vUnit_of_mesure varchar(3);
DECLARE @vBs_unit_of_measure varchar(2);

SET @isIntNotSet = -1;
SET @discharged = 1;
SET @current = 0;

CREATE TABLE #PRP_ClientList
		(client_id           INT,
		 client_id_number    VARCHAR(35),
		 bedDescription  varchar(1000),
		 discharge_date      datetime,
		 floorId int,
		 roomDescription varchar(1000),
		 unitDescription varchar(1000),
		 unitId int,
		 firstName varchar(1000),
		 lastName varchar(1000),
		 fac_id int   );


CREATE TABLE #documentationDetails (
	clientId int,
    clientIdNumber VARCHAR(1000),
	bedDescription varchar(1000),
	dischargeDate datetime,
	floorId int,
	roomDescription varchar(1000),
	unitDescription varchar(1000),
	unitId int,
	completedDate datetime,
	documentationId varchar(1000),
	firstName varchar(1000),
	interventionDescription varchar(1000),
	interventionId int,
	isTask varchar(1000),
	lastName varchar(1000),
	responseCompletedDate datetime,
	responseCreatedDate datetime,
	responseStrikeoutFlag varchar(10),
	createdByLongname varchar(1000),
	scheduleDate datetime,
	shiftDate datetime,
	scheduleDetailId varchar(1000),
	scheduleId int,
	scheduleType varchar(100),
	stdInterventionId int,
	responseClientId int,
	facId int,
	strikeoutFlag varchar(10),
	itemValue varchar(1000),
	itemValueId int,
	stdQuestionId int,
	shiftId int,
	scheduleGenInterventionId int,
	controlType varchar(100),
	questionText varchar(1000),
	sequence int
)


Create table #prp_doc_responses
							( client_id int, schedule_detail_id varchar(50), fac_id int, schedule_id int, std_shift_id int, shift_date datetime, schedule_date datetime
								  , documentation_id varchar(50), completed_date datetime, entered_date datetime, strikeout_flag char(1)
								  , std_question_id int, item_value_id int, item_value varchar(max), cp_sec_user_audit_id int, sequence int
								  , schedule_type varchar(100), gen_intervention_id bigint,intervention_description varchar(2500)
								  , intervention_id int, std_intervention_id int)


								  create nonclustered index doc_rep_ffll on #prp_doc_responses (client_id, schedule_id, fac_id, std_question_id, gen_intervention_id)
								 -- create nonclustered index prp_client_ffll on #PRP_ClientList (client_id, fac_id)




--cp_std_question
CREATE TABLE #stdQuestionIdTable
(
	stdInterventionId int,
	stdQuestionId int,
	sequence	int,
	client_id int,
	controlType varchar(10),
	questionText varchar(500),
	gen_intervention_id INT
)

insert into #PRP_ClientList
select  c.client_id
			, c.client_id_number
			, b.bed_desc
			, c.discharge_date
			, r.floor_id
			, r.room_desc
			, u.unit_desc
			, u.unit_id
			, m.first_name
			, m.last_name
			, c.fac_id

		from  dbo.mpi m with (nolock)

		inner join dbo.clients c with (nolock)	   on m.mpi_id = c.mpi_id
				and (c.client_id  = @vclientId OR (
					@vclientId = @isIntNotSet   ))
				AND ( --1 is Discharged, 0 is Current, -1 is All
					@vstatusId = @isIntNotSet OR (
					@vstatusId = @discharged AND c.discharge_date IS NOT NULL
					)
					OR (@vstatusId = @current AND c.discharge_date IS NULL)
					)
  		inner join dbo.census_item loc on c.client_id = loc.client_id
					and loc.census_id = c.current_census_id
					and c.fac_id = loc.fac_id
					and (loc.record_type = 'C' or loc.record_type is null)
		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id
WHERE
c.fac_id  = @vfacId

AND (u.unit_id = @vunitId OR @vunitId = @isIntNotSet)
AND (r.floor_id = @vfloorId OR @vfloorId = @isIntNotSet)



IF (@vclientId > 0)
	INSERT INTO #stdQuestionIdTable
			SELECT  quest.std_intervention_id, quest.std_question_id, quest.sequence, @vclientId
			, stdQues.control_type, stdQues.question_text, rev.gen_intervention_id
			FROM dbo.cp_std_intervention_question quest with (nolock)
			INNER JOIN dbo.cp_Rev_intervention rev  with (nolock) ON quest.std_intervention_id = rev.std_intervention_id
			INNER JOIN dbo.cp_std_question stdQues with (nolock) ON stdQues.std_question_id = quest.std_question_id
			WHERE rev.clientid = @vclientId and rev.fac_id = @vfacId
			AND (quest.std_question_id = @vstdQuestionId OR @vstdQuestionId = @isIntNotSet)
			AND (quest.std_intervention_id = @vinterventionId OR @vinterventionId = @isIntNotSet)
			AND rev.current_row = 'Y'
			AND rev.deleted = 'N'



ELSE IF (@vinterventionId > 0)		-- Should have at least intervention Id passed
	INSERT INTO #stdQuestionIdTable
			SELECT quest.std_intervention_id, quest.std_question_id, quest.sequence , c.client_id
			, stdQues.control_type, stdQues.question_text, rev.gen_intervention_id

			FROM  dbo.cp_std_question stdQues with (nolock)

			INNER JOIN dbo.cp_std_intervention_question quest   with (nolock)
					ON stdQues.std_question_id = quest.std_question_id
					and (quest.std_intervention_id = @vinterventionId)

			inner join dbo.cp_rev_intervention rev with (nolock)
					on rev.std_intervention_id = quest.std_intervention_id
					and rev.fac_id = @vfacId
			inner join #PRP_ClientList c on
					c.client_id = rev.clientID
					and c.fac_id = rev.fac_id

			where
			  (quest.std_question_id = @vstdQuestionId OR @vstdQuestionId = @isIntNotSet)
			AND rev.current_row = 'Y'
			AND rev.deleted = 'N'


IF @debug='Y'
	SELECT '#stdQuestionIdTable', * from #stdQuestionIdTable

--00. GEt Unit Of Mesure From Configuration
	SELECT @vUnit_of_mesure=arc.unit_of_measure
	  FROM dbo.ar_configuration  arc WITH (NOLOCK)
	  WHERE arc.fac_id=@vfacId ;

	select @vBs_unit_of_measure=  value
	  from dbo.configuration_parameter where fac_id=@vfacId and name='bs_unit_of_measure';

	  if @vBs_unit_of_measure is null  SET @vBs_unit_of_measure = @vUnit_of_mesure;

--01. Getting last archived date and based on date selection, we want to use different view.
SELECT @current_history_end_date = current_history_end_date from dbo.process_configuration where process_name = 'poc_qshift_history_load';


--02. Depending on the last archived date, do a query
IF (@vstartDate <= @current_history_end_date)
BEGIN
	IF @debug='Y' PRINT 'Query history responses' +  ' startDate : ' + convert(varchar(26),@vstartDate)
						+  ', current_history_end_date : ' + convert(varchar(26),@current_history_end_date)


	insert into #prp_doc_responses
	select
	stdqid.client_id,
	'-1_P_H' as schedule_detail_id,
	schedules.fac_id,
	shift.schedule_id as schedule_id,
	shift.std_shift_id as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	doc.effective_date as schedule_date,
	case
		when doc.cp_prn_documentation_history_id is null THEN
			null
		else
			convert(varchar,doc.cp_prn_documentation_history_id)+'_P'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id  is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	schedules.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id


from
	dbo.cp_schedule schedules with (nolock)
	INNER JOIN dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = schedules.intervention_id
		and schedules.fac_id = rev.fac_id
	INNER JOIN #stdQuestionIdTable stdQId  with (nolock)
				ON  rev.std_intervention_id = stdQId.stdinterventionid
				and (stdqid.client_id = rev.clientID )
				and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_schedule_shift shift  with (nolock) on
			shift.schedule_id = schedules.schedule_id
	INNER JOIN dbo.cp_prn_documentation_history doc  with (nolock) on -- needs to be inner so we don't get dups from active view.
			doc.schedule_id = shift.schedule_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate
			and doc.std_shift_id = shift.std_shift_id
	INNER JOIN dbo.cp_prn_response_history resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				AND resp.cp_prn_documentation_history_id = doc.cp_prn_documentation_history_id
	LEFT JOIN dbo.cp_prn_documentation_strikeout_history strike  with (nolock) on
			doc.cp_prn_documentation_history_id = strike.cp_prn_documentation_history_id


where
	schedules.schedule_Type = 8 and schedules.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))

IF @debug='Y' SELECT 'history_PRN', * from #prp_doc_responses


-------------------------------------------------------------------
--QShift details
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_qshift_detail_history_id)+'_Q_H' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id as schedule_id,
	detail.std_shift_id as std_shift_id,
	detail.shift_date as shift_date,
	dates.s_date as schedule_date,
	case
		when doc.cp_qshift_documentation_history_id is null THEN
			null
		else
			convert(varchar,doc.cp_qshift_documentation_history_id)+'_Q'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id  is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_qshift_detail_history detail with (nolock)
	INNER JOIN dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
			and detail.fac_id = sched.fac_id
	INNER JOIN dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
			and sched.fac_id = rev.fac_id
INNER JOIN #stdQuestionIdTable stdQId on
			rev.std_intervention_id = stdqid.stdinterventionid
			and (rev.clientID = stdQId.client_id )
			and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_qshift_documentation_history doc  with (nolock) on
				doc.cp_qshift_detail_history_id = detail.cp_qshift_detail_history_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_qshift_response_history resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and  resp.cp_qshift_documentation_history_id = doc.cp_qshift_documentation_history_id

	INNER JOIN dbo.view_cp_shift_dates dates  with (nolock) on

				dates.day_date = detail.shift_date
				and detail.std_shift_id=dates.std_shift_id
				and dates.fac_id=detail.fac_id
	LEFT JOIN dbo.cp_qshift_documentation_strikeout_history strike  with (nolock) on
				doc.cp_qshift_documentation_history_id = strike.cp_qshift_documentation_history_id

	WHERE detail.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))
	 and (isnull(detail.shift_date,@vstartShiftDate)>= @vstartShiftDate and isnull(detail.shift_date,@vendShiftDate) <= @vendShiftDate)


IF @debug='Y' SELECT 'history_Qshift', * from #prp_doc_responses
-------------------------------------------------------------------
--Scheduled details
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_scheduled_detail_history_id)+'_S_H' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id ,
	null as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	detail.schedule_date as schedule_date,
	case
		when doc.cp_scheduled_documentation_history_id is null THEN
			null
		else
			convert(varchar,doc.cp_scheduled_documentation_history_id)+'_S'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id  is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_scheduled_detail_history detail with (nolock)
	INNER JOIN dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
			and detail.fac_id = sched.fac_id
	INNER JOIN dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
			and rev.fac_id = sched.fac_id
	INNER JOIN #stdQuestionIdTable stdQId on
			rev.std_intervention_id = stdqid.stdinterventionid
			and (stdqid.client_id = rev.clientID )
			and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_scheduled_documentation_history doc  with (nolock) on
				doc.cp_scheduled_detail_history_id = detail.cp_scheduled_detail_history_id
				and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate
	LEFT JOIN dbo.cp_scheduled_documentation_strikeout_history strike  with (nolock) on
				doc.cp_scheduled_documentation_history_id = strike.cp_scheduled_documentation_history_id
	LEFT JOIN dbo.cp_scheduled_response_history resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and resp.cp_scheduled_documentation_history_id = doc.cp_scheduled_documentation_history_id

	WHERE detail.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))


IF @debug='Y' SELECT 'history_Scheduled', * from #prp_doc_responses


-------------------------------------------------------------------
--Schedule Duration
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_duration_detail_history_id)+'_D_H' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id ,
	null as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	detail.schedule_start_date as schedule_date,
	case
		when doc.cp_duration_documentation_history_id is null THEN
			null
		else
			convert(varchar,doc.cp_duration_documentation_history_id)+'_D'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id  is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_duration_detail_history detail  with (nolock)
	INNER JOIN dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
			and detail.fac_id = sched.fac_id
	INNER JOIN dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
			and rev.fac_id = sched.fac_id
INNER JOIN #stdQuestionIdTable stdQId on
			rev.std_intervention_id = stdqid.stdinterventionid
			and (stdQId.client_id = rev.clientID )
			and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_duration_documentation_history doc  with (nolock) on
				doc.cp_duration_detail_history_id = detail.cp_duration_detail_history_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_duration_response_history resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and resp.cp_duration_documentation_history_id = doc.cp_duration_documentation_history_id

	LEFT JOIN dbo.cp_duration_documentation_strikeout_history strike  with (nolock) on
				doc.cp_duration_documentation_history_id = strike.cp_duration_documentation_history_id

	WHERE detail.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))

IF @debug='Y' SELECT 'history_Duration', * from #prp_doc_responses



INSERT INTO #documentationDetails
SELECT
      cl.client_id as clientId,
      cl.client_id_number as clientIdNumber,
      cl.bedDescription,
      cl.discharge_date as dischargeDate,
      cl.floorId,
      cl.roomDescription,
     cl.unitDescription,
      cl.unitId,
      responses.completed_date as completedDate,
	  responses.documentation_id as documentationId,
      cl.firstName,
      responses.intervention_description AS interventionDescription,
      responses.intervention_id as interventionId,
      @visTask as isTask,
      cl.lastName,
      responses.completed_date as responseCompletedDate,
	  responses.entered_date as responseCreatedDate,
      responses.strikeout_flag as responseStrikeoutFlag,
      adt.long_username AS createdByLongname,
      responses.schedule_date as scheduleDate,
      responses.shift_date as shiftDate,
      responses.schedule_detail_id as scheduleDetailId,
      responses.schedule_id as scheduleId,
      responses.schedule_type as scheduleType,
      responses.std_intervention_id as stdInterventionId,
      cl.client_id as responseClientId,
      responses.fac_id as  facId,
	  responses.strikeout_flag as strikeoutFlag,
	  responses.item_value as itemValue,
	  responses.item_value_id as itemValueId,
	  responses.std_question_id as stdQuestionId,
	  responses.std_shift_id as shiftId,
	  responses.gen_intervention_id AS scheduleGenInterventionId,
	  stdQues.controlType,
	  stdQues.questionText,
	  responses.sequence
FROM #prp_doc_responses responses

INNER JOIN #stdQuestionIdTable stdQues  with (nolock) ON stdQues.stdquestionid = responses.std_question_id
	and responses.client_id = stdQues.client_id
	and responses.std_intervention_id  = stdQues.stdInterventionId
inner join #PRP_ClientList cl
	on cl.client_id = responses.client_ID
	and cl.fac_id = responses.fac_id
LEFT JOIN dbo.cp_sec_user_audit adt  with (nolock) on
			responses.cp_sec_user_audit_id = adt.cp_sec_user_audit_id

WHERE

		(@vstrikeoutFlag = 'Y' OR (responses.strikeout_flag IS NULL  OR responses.strikeout_flag  = 'N' ))
		AND (
					isnull(responses.shift_date, @vstartShiftDate) >= @vstartShiftDate
					AND isnull(responses.shift_date, @vendShiftDate)  <= @vendShiftDate
		)

END

IF @debug='Y'
	SELECT '#documentationDetails-history', count(*) from #documentationDetails

IF (@vendDate > @current_history_end_date)
BEGIN
	IF @debug='Y' PRINT 'Query active responses' +  ' endDate : ' + convert(varchar(26),@vendDate)
						+  ', current_history_end_date : ' + convert(varchar(26),@current_history_end_date)


-------------------------------------------------------------------
--PRN Calculation
-------------------------------------------------------------------

insert into #prp_doc_responses

select
	stdqid.client_id,
	'-1_P_A' as schedule_detail_id,
	schedules.fac_id,
	shift.schedule_id as schedule_id,
	shift.std_shift_id as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	doc.effective_date as schedule_date,
	case
		when doc.cp_prn_documentation_id is null THEN
			null
		else
			convert(varchar,doc.cp_prn_documentation_id)+'_P'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	schedules.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from

		#stdQuestionIdTable stdQId

		INNER JOIN dbo.cp_rev_intervention rev  with (nolock) on
				rev.std_intervention_id = stdqid.stdinterventionid
				and (stdqid.client_id = rev.clientid )
				AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))
				and rev.fac_id=@vfacId
				and stdQId.gen_intervention_id = rev.gen_intervention_id

	inner join dbo.cp_schedule schedules with (nolock) ON
				rev.gen_intervention_id = schedules.intervention_id
				and rev.fac_id = schedules.fac_id

	INNER JOIN dbo.cp_schedule_shift shift  with (nolock) on
			shift.schedule_id = schedules.schedule_id
	INNER JOIN dbo.cp_prn_documentation doc  with (nolock) on
			doc.schedule_id = shift.schedule_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate
			and doc.std_shift_id = shift.std_shift_id

	INNER JOIN dbo.cp_prn_response resp  with (nolock) on
				resp.cp_prn_documentation_id = doc.cp_prn_documentation_id
				and stdQId.stdquestionid = resp.std_question_id

	LEFT JOIN dbo.cp_prn_documentation_strikeout strike  with (nolock) on
			doc.cp_prn_documentation_id = strike.cp_prn_documentation_id

where
	schedules.schedule_Type = 8


IF @debug='Y' SELECT 'Current_PRN', * from #prp_doc_responses

-------------------------------------------------------------------
--QShift details
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_qshift_detail_id)+'_Q_A' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id as schedule_id,
	detail.std_shift_id as std_shift_id,
	detail.shift_date as shift_date,
	dates.s_date as schedule_date,
	case
		when doc.cp_qshift_documentation_id is null THEN
			null
		else
			convert(varchar,doc.cp_qshift_documentation_id)+'_Q'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_qshift_detail detail with (nolock)
	inner join dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
					and detail.fac_id = sched.fac_id
	inner join dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
					and rev.fac_id = sched.fac_id
	INNER JOIN #stdQuestionIdTable stdQId on
			rev.std_intervention_id = stdqid.stdinterventionid
			and (stdqid.client_id = rev.clientID )
			and stdQId.gen_intervention_id = rev.gen_intervention_id

	INNER JOIN dbo.view_cp_shift_dates dates  with (nolock) on
			dates.day_date = detail.shift_date
			and detail.std_shift_id=dates.std_shift_id
			and dates.fac_id=detail.fac_id

	INNER JOIN dbo.cp_qshift_documentation doc  with (nolock) on
				doc.cp_qshift_detail_id = detail.cp_qshift_detail_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_qshift_response resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and resp.cp_qshift_documentation_id = doc.cp_qshift_documentation_id

	LEFT JOIN dbo.cp_qshift_documentation_strikeout strike  with (nolock) on
				doc.cp_qshift_documentation_id = strike.cp_qshift_documentation_id

	where detail.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))
	 and (isnull(detail.shift_date,@vstartShiftDate)>= @vstartShiftDate and isnull(detail.shift_date,@vendShiftDate) <= @vendShiftDate)


IF @debug='Y' SELECT 'Current_Qshift', * from #prp_doc_responses --where schedule_id = 116154
IF @debug='Y' SELECT @vstartShiftDate, @vendShiftDate

-------------------------------------------------------------------
--Scheduled details
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_scheduled_detail_id)+'_S_A' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id ,
	null as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	detail.schedule_date as schedule_date,
	case
		when doc.cp_scheduled_documentation_id is null THEN
			null
		else
			convert(varchar,doc.cp_scheduled_documentation_id)+'_S'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_scheduled_detail detail with (nolock)
	inner join dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
					and detail.fac_id = sched.fac_id
	inner join dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
					and rev.fac_id = sched.fac_id
					AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))
	INNER JOIN #stdQuestionIdTable stdQId on
				 rev.std_intervention_id = stdqid.stdinterventionid
				 and (rev.clientID = stdqid.client_id )
				 and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_scheduled_documentation doc  with (nolock) on
				doc.cp_scheduled_detail_id = detail.cp_scheduled_detail_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_scheduled_response resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and	resp.cp_scheduled_documentation_id = doc.cp_scheduled_documentation_id

	LEFT JOIN dbo.cp_scheduled_documentation_strikeout strike  with (nolock) on
				doc.cp_scheduled_documentation_id = strike.cp_scheduled_documentation_id
	where detail.fac_id=@vfacId


IF @debug='Y' SELECT 'Current_Scheduled', * from #prp_doc_responses
-------------------------------------------------------------------
--Schedule Duration
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	convert(varchar,detail.cp_duration_detail_id)+'_D_A' as schedule_detail_id,
	detail.fac_id,
	detail.schedule_id ,
	null as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	detail.schedule_start_date as schedule_date,
	case
		when doc.cp_duration_documentation_id is null THEN
			null
		else
			convert(varchar,doc.cp_duration_documentation_id)+'_D'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	sched.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_duration_detail detail with (nolock)
	inner join dbo.cp_schedule sched  with (nolock) on sched.schedule_id = detail.schedule_id
			and detail.fac_id = sched.fac_id
	inner join dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = sched.intervention_id
			and rev.fac_id = sched.fac_id
	INNER JOIN #stdQuestionIdTable stdQId on
				rev.std_intervention_id = stdqid.stdinterventionid
				and (rev.clientID = stdqid.client_id )
				and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_duration_documentation doc  with (nolock) on
				doc.cp_duration_detail_id = detail.cp_duration_detail_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_duration_response resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and resp.cp_duration_documentation_id = doc.cp_duration_documentation_id

	LEFT JOIN dbo.cp_duration_documentation_strikeout strike  with (nolock) on
				doc.cp_duration_documentation_id = strike.cp_duration_documentation_id


	where detail.fac_id=@vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))


IF @debug='Y' SELECT 'Current_Duration', * from #prp_doc_responses
-------------------------------------------------------------------
--Unscheduled Calculation
-------------------------------------------------------------------
insert into #prp_doc_responses
select
	stdqid.client_id,
	'-1_U_A' as schedule_detail_id,
	schedules.fac_id,
	schedules.schedule_id as schedule_id,
	null as std_shift_id,
	convert(smalldatetime,null) as shift_date,
	doc.effective_date as schedule_date,
	case
		when doc.cp_unscheduled_documentation_id is null THEN
			null
		else
			convert(varchar,doc.cp_unscheduled_documentation_id)+'_U'
	end	as documentation_id	,
	doc.effective_date as completed_date,
	doc.entered_date as entered_date,
	CASE
		WHEN (strike.cp_strikeout_reason_audit_id is not null) THEN
			'Y'
		ELSE
			'N'
	END	as strikeout_flag,
	resp.std_question_id,
	resp.item_value_id,
	resp.item_value,
	doc.cp_sec_user_audit_id,
	stdQid.sequence,
	schedules.schedule_type,
	rev.gen_intervention_id,
	rev.text1,
	rev.intervention_id,
	rev.std_intervention_id
from
	dbo.cp_schedule schedules with (nolock)
	inner join dbo.cp_rev_intervention rev  with (nolock) on rev.gen_intervention_id = schedules.intervention_id
			and schedules.fac_id = rev.fac_id
	INNER JOIN #stdQuestionIdTable stdQId on
				rev.std_intervention_id = stdqid.stdinterventionid
				and (stdQId.client_id = rev.clientID )
				and stdQId.gen_intervention_id = rev.gen_intervention_id
	INNER JOIN dbo.cp_unscheduled_documentation doc  with (nolock) on
			doc.schedule_id = schedules.schedule_id and doc.effective_date >= @vstartDate AND doc.effective_date <= @vendDate

	INNER JOIN dbo.cp_unscheduled_response resp  with (nolock) on
				stdQId.stdquestionid = resp.std_question_id
				and resp.cp_unscheduled_documentation_id = doc.cp_unscheduled_documentation_id

	LEFT JOIN dbo.cp_unscheduled_documentation_strikeout strike  with (nolock) on
			doc.cp_unscheduled_documentation_id = strike.cp_unscheduled_documentation_id


where
	schedules.schedule_Type = 40 and schedules.fac_id = @vfacId
	 AND (rev.is_task  = @visTask OR (@visTask = 'N' AND rev.is_task IS NULL))

IF @debug='Y' SELECT 'Current_Unsched', * from #prp_doc_responses

UPDATE r SET r.item_value =  dbo.fn_poc_get_Multiselect_DocumentDescriptionAsStringNew(r.item_value,r.documentation_id, r.std_question_id, ',<br/>', '~')
	   FROM #prp_doc_responses r
		  where r.item_value_id = '-901'

IF @debug='Y' SELECT 'All', * from #prp_doc_responses

INSERT INTO #documentationDetails
SELECT
      cl.client_id as clientId,
      cl.client_id_number as clientIdNumber,
      cl.bedDescription,
      cl.discharge_date as dischargeDate,
      cl.floorId ,
      cl.roomDescription,
      cl.unitDescription,
      cl.unitId,
      responses.completed_date as completedDate,
	  responses.documentation_id as documentationId,
      cl.firstName,
      responses.intervention_description AS interventionDescription,
      responses.intervention_id as interventionId,
      @visTask as isTask,
      cl.lastName,
      responses.completed_date as responseCompletedDate,
	  responses.entered_date as responseCreatedDate,
      responses.strikeout_flag as responseStrikeoutFlag ,
      adt.long_username AS createdByLongname,
      responses.schedule_date as scheduleDate,
      responses.shift_date as shiftDate,
      responses.schedule_detail_id as scheduleDetailId,
      responses.schedule_id as scheduleId,
      responses.schedule_type as scheduleType,
      responses.std_intervention_id as stdInterventionId,
      responses.client_id as responseClientId,
      responses.fac_id as  facId,
	  responses.strikeout_flag as strikeoutFlag,
	  responses.item_value as itemValue,
	  responses.item_value_id as itemValueId,
	  responses.std_question_id as stdQuestionId,
	  responses.std_shift_id as shiftId,
	  responses.intervention_id AS scheduleGenInterventionId,
	  stdQues.controlType,
	  stdQues.questionText,
	  responses.sequence
FROM   #prp_doc_responses responses

	INNER JOIN #stdQuestionIdTable stdQues ON stdQues.stdquestionid = responses.std_question_id
		and responses.client_id = stdQues.client_id
		and responses.std_intervention_id  = stdQues.stdInterventionId
	inner join #PRP_ClientList cl
	on cl.client_id = responses.client_ID
	and cl.fac_id = responses.fac_id

	LEFT OUTER JOIN dbo.cp_sec_user_audit adt  with (nolock)
		on responses.cp_sec_user_audit_id = adt.cp_sec_user_audit_id

WHERE

(@vstrikeoutFlag = 'Y' OR (responses.strikeout_flag IS NULL  OR responses.strikeout_flag  = 'N' ))
AND (
            isnull(responses.shift_date, @vstartShiftDate) >= @vstartShiftDate
            AND isnull(responses.shift_date, @vendShiftDate)  <= @vendShiftDate
)

END

IF @debug='Y'
    SELECT '#documentationDetails-All', count(*) from #documentationDetails

--03. Sortying data using temporary table
IF (@vsortBy = 'L')
BEGIN
	SELECT clientId ,clientIdNumber ,bedDescription ,dischargeDate ,floorId ,roomDescription ,unitDescription ,unitId , completedDate ,	documentationId ,firstName,interventionDescription ,  interventionId ,
            isTask,lastName ,responseCompletedDate,responseCreatedDate,responseStrikeoutFlag ,
			CASE
			WHEN d.controlType='sgn' THEN a.long_username
			ELSE d.createdByLongname
			END AS createdByLongname ,
			scheduleDate ,shiftDate ,scheduleDetailId ,scheduleId ,scheduleType ,stdInterventionId ,	responseClientId ,
            facId ,strikeoutFlag,itemValue ,itemValueId ,stdQuestionId ,shiftId ,	scheduleGenInterventionId ,controlType ,
		  questionText+  CASE WHEN @vUnit_of_mesure='M' THEN CASE WHEN   controlType in ('Weight','wt','we','wgt') THEN ' (Kg)'
			                                                      WHEN   controlType in ( 'Height','he','ht') THEN ' (Cm)'
													    WHEN   controlType in ( 'BP','BPr','Blood Pressure','wvpobp') THEN ' (mmHg)'
													    WHEN   controlType in ( 'Temperature','temp','tmp','wvrout') THEN +' ('+char(176)+'C'+')'
													    WHEN   controlType in ( 'Pulse','pls','wvpuls') THEN ' (bpm)'
													    WHEN   controlType in ( 'Respiration','rsp','resp') THEN ' (Breaths/min)'
													    WHEN   controlType in ( 'Blood Sugar','bs') then case when @vBs_unit_of_measure='M' THEN ' (mmol/L)' else ' (mg/dL)' end
													    WHEN   controlType in ( 'O2 sats','o2') THEN ' (%)'
												     ELSE ''
													END
					    ELSE
													 CASE WHEN   controlType in ('Weight','wt','we','wgt') THEN ' (Lbs)'
			                                                        WHEN   controlType in ( 'Height','he','ht') THEN ' (Inches)'
													      WHEN   controlType in ( 'BP','BPr','Blood Pressure','wvpobp') THEN ' (mmHg)'
													      WHEN   controlType in ( 'Temperature','temp','tmp','wvrout') THEN +' ('+char(176)+'F'+')'
													      WHEN   controlType in ( 'Pulse','pls','wvpuls') THEN ' (bpm)'
													      WHEN   controlType in ( 'Respiration','rsp','resp') THEN ' (Breaths/min)'
														 WHEN   controlType in ( 'Blood Sugar','bs') then case when @vBs_unit_of_measure='M' THEN ' (mmol/L)' else ' (mg/dL)' end
													      WHEN   controlType in ( 'O2 sats','o2') THEN ' (%)'
												     ELSE ''
									                    END
			 END	questionText,

	       sequence

	 FROM #documentationDetails d
	 LEFT JOIN dbo.sec_user a ON a.userid = d.itemValueId
	ORDER BY unitDescription, roomDescription, bedDescription, lastName,firstName,clientIdNumber,interventionDescription,completedDate,documentationId,sequence

END
ELSE IF (@vsortBy = 'R')
BEGIN
	SELECT clientId ,clientIdNumber ,bedDescription ,dischargeDate ,floorId ,roomDescription ,unitDescription ,unitId , completedDate ,	documentationId ,firstName,interventionDescription ,  interventionId ,
            isTask,lastName ,responseCompletedDate,responseCreatedDate,responseStrikeoutFlag ,
			CASE
			WHEN d.controlType='sgn' THEN a.long_username
			ELSE d.createdByLongname
			END AS createdByLongname ,
			scheduleDate ,shiftDate ,scheduleDetailId ,scheduleId ,scheduleType ,stdInterventionId ,	responseClientId ,
            facId ,strikeoutFlag,itemValue ,itemValueId ,stdQuestionId ,shiftId ,	scheduleGenInterventionId ,controlType ,
		  questionText+  CASE WHEN @vUnit_of_mesure='M' THEN CASE WHEN   controlType in ('Weight','wt','we','wgt') THEN '  (Kg)'
			                                                      WHEN   controlType in ( 'Height','he','ht') THEN '  (Cm)'
													    WHEN   controlType in ( 'BP','BPr','Blood Pressure','wvpobp') THEN '  (mmHg)'
													    WHEN   controlType in ( 'Temperature','temp','tmp','wvrout') THEN +'  ('+char(176)+'C)'
													    WHEN   controlType in ( 'Pulse','pls','wvpuls') THEN '  (bpm)'
													    WHEN   controlType in ( 'Respiration','rsp','resp') THEN '  (Breaths/min)'
														WHEN   controlType in ( 'Blood Sugar','bs') then case when @vBs_unit_of_measure='M' THEN ' (mmol/L)' else ' (mg/dL)' end
													    WHEN   controlType in ( 'O2 sats','o2') THEN '  (%)'
												     ELSE ''
													END
					    ELSE
													 CASE WHEN   controlType in ('Weight','wt','we','wgt') THEN '  (Lbs)'
			                                                        WHEN   controlType in ( 'Height','he','ht') THEN '  (Inches)'
													      WHEN   controlType in ( 'BP','BPr','Blood Pressure','wvpobp') THEN '  (mmHg)'
													      WHEN   controlType in ( 'Temperature','temp','tmp','wvrout') THEN +'  ('+char(176)+'F)'
													      WHEN   controlType in ( 'Pulse','pls','wvpuls') THEN '  (bpm)'
													      WHEN   controlType in ( 'Respiration','rsp','resp') THEN '  (Breaths/min)'
														  WHEN   controlType in ( 'Blood Sugar','bs') then case when @vBs_unit_of_measure='M' THEN ' (mmol/L)' else ' (mg/dL)' end
													      WHEN   controlType in ( 'O2 sats','o2') THEN '  (%)'
												     ELSE ''
									                    END
			 END	questionText ,
	       sequence
      FROM #documentationDetails d
	 LEFT JOIN dbo.sec_user a ON a.userid = d.itemValueId
	ORDER BY lastName,firstName,clientIdNumber,interventionDescription,completedDate,documentationId,sequence
END



SET @status_code = 0

END TRY

--error trapping
BEGIN CATCH

  SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()

  DROP TABLE #stdQuestionIdTable
  DROP TABLE #documentationDetails
  SET @status_code = 1

  GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
  IF @debug='Y' PRINT 'Successfull execution of stored procedure'
  DROP TABLE #stdQuestionIdTable
  DROP TABLE #documentationDetails

  RETURN @status_code
END


--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '  ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:  ' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON sproc_cp_poc_getFollowUpQuestionResponses TO PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_cp_poc_getFollowUpQuestionResponses.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_cp_poc_getFollowUpQuestionResponses.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_data_assert_add_data_facility.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =================================================================================
-- CORE-92301          Create stored procs to insert facility data in target data assertion table
--
-- Script Type:         DML
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH
--
--
-- Re-Runable:          YES
--
-- Description of Script:  Data insertion for facility data in target data assertion table
--
-- Special Instruction:
--
-- =================================================================================

IF EXISTS (SELECT 1 FROM SYSOBJECTS WHERE NAME = 'sproc_data_assert_add_data_facility')
    BEGIN
        DROP PROCEDURE sproc_data_assert_add_data_facility
    END
GO

CREATE PROCEDURE [dbo].[sproc_data_assert_add_data_facility] (
    @env_name varchar(500),
    @org_id int,
    @org_code varchar(500)
)

AS
BEGIN
	DECLARE @team  varchar(100) = 'Team Pixels',
			@email varchar(100) = 'TeamPixels@pointclickcare.com',
			@description varchar(500)  = 'Data assertion sproc for inserting facility data in target data assertion table';

    BEGIN TRY
            DECLARE @SQLString NVARCHAR(4000);
            DECLARE @ParmDefinition NVARCHAR(4000);
            DECLARE @data_assertion_db  NVARCHAR(500);

            SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'true' AND name = 'DATA_ASSERTION'
			IF (@data_assertion_db IS NULL)
				BEGIN
					SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'false'
				END
			ELSE
				BEGIN
					SET @data_assertion_db = 'DATA_ASSERTION'
				END
				
            SET @SQLString =
                        N'INSERT INTO [' +  @data_assertion_db + '].[DataAssertion].[dbo].[da_facility_data]
				 SELECT 
					fac_id, 
					fac_uuid, 
					name AS fac_name, 
					org_id, 
					@org_code AS org_code, 
					@env_name AS env_name from facility
				 WITH (NOLOCK)
				 WHERE fac_uuid IS NOT NULL
					AND deleted = ''N'' 
				'
			SET @ParmDefinition = N'
			@env_name varchar(255),
			@org_code varchar(255)
			';
			
            EXECUTE sp_executesql @SQLString, @ParmDefinition,
					@env_name = @env_name,
					@org_code = @org_code

        RETURN @@identity
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_STATE() AS ErrorState,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO

GRANT EXECUTE ON [dbo].[sproc_data_assert_add_data_facility] TO PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_data_assert_add_data_facility.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_data_assert_add_data_facility.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_mds_dml_retrieveMDS3POCResponses.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**  Created By: Michael Iakovlev
**  Created Date: 05/18/10
**
**  Purpose:  The purpose of this procedure is to retrieve POC responses for auto population of an MDS 3.0 assessment
**
**
**  Parameters:
**      @facId        - Facility id
**      @assessDate     - This is the assess date the user enters.
**      @clientId     - Client id
**      @debug        - Flag to print debug statements.
**      @status_code    - Return value if the procedure ran correctly, 1 if error, 0 if success.
**      @status_text    - Error message if status_code is 1.
**  Temporary tables (must be created before this procedure executed):
**      #sproc_mds_dml_retrieveMDS3POCResponses_temp_table  - Used internally by this procedure, all content is deleted after execution
**      #sproc_mds_dml_retrieveMDS3POCResponses_table       - Used read-only by this procedure, must contain at least all POC responses required by this procedure (can contain more)
**
*****************************************************************************************************/
IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
        FROM INFORMATION_SCHEMA.ROUTINES
        WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_mds_dml_retrieveMDS3POCResponses' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
  DROP PROCEDURE dbo.sproc_mds_dml_retrieveMDS3POCResponses
END
GO


CREATE PROC [dbo].[sproc_mds_dml_retrieveMDS3POCResponses]
(
  @facId      int,
  @assessDate   datetime,
  @clientId   int,
  @debug      char(1)  = 'N',
  @status_code  int  out,
  @status_text  varchar(3000) out
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@step        varchar(120)
		,@error_code int = 0
	;

	SELECT
		@status_code = 0
		,@status_text = ''
	;

BEGIN TRY
  
  DECLARE @LOOKBACK_START_DATE_14 datetime, @LOOKBACK_START_DATE_7 datetime, @LOOKBACK_START_DATE_5 datetime;
  DECLARE @LOOKBACK_END_DATE datetime, @START_OF_ARD_DAY datetime;
  SELECT @START_OF_ARD_DAY= CAST(FLOOR(CAST(@assessDate AS FLOAT))AS DATETIME);   -- start of ARD day
  SELECT @LOOKBACK_END_DATE=  DATEADD(second,-1, DATEADD(day,1,@START_OF_ARD_DAY) );  -- end of ARD day
  SELECT @LOOKBACK_START_DATE_5 =DATEADD(day,-4, @START_OF_ARD_DAY);          -- start of  5-day look back
  SELECT @LOOKBACK_START_DATE_7 =DATEADD(day,-6, @START_OF_ARD_DAY);          -- start of  7-day look back
  SELECT @LOOKBACK_START_DATE_14=DATEADD(day,-13,@START_OF_ARD_DAY);          -- start of 14-day look back

  --- autopopulated MDS responses ---
  DECLARE @autopopulation_temp_table table
  (    -- TODO: add client_id
    client_id   int,
    question_key varchar(16),
    mds_value varchar(128)
  )

  --- frequencies from POC responses ---
  --DECLARE #frequencies_temp_table table

  CREATE TABLE #frequencies_temp_table 
  (   -- TODO: add client_id
    client_id   int,
    question_key varchar(16),
    days int,         --- for how many days we have at least one 'yes' for the day
    numof_0 int,      --- total number of '0' responses
    numof_1 int,      --- total number of '1' responses
    numof_2 int,      --- total number of '2' responses
    numof_3 int,      --- total number of '3' responses
    numof_4 int,      --- total number of '4' responses
    numof_5 int,      --- total number of '5' responses
    numof_neg99 int,     --- total number of '-99' responses
    numof_neg98 int,     --- total number of '-98' responses
    numof_neg97 int,     --- total number of '-97' responses
  )

  

  -- All MDS 3.0 questions with answers --
  DECLARE @mds3_questions_temp_table table
  (
    std_question_id int,
    mds_question_key varchar(10),
    std_question_to_multi_mds_questions bit
  )

  SET @step='Load all MDS 3.0 questions'; IF @debug='Y' PRINT @step;

  -- Load all MDS 3.0 questions --
  INSERT INTO @mds3_questions_temp_table SELECT std_question_id, mds_question_key, 0 FROM cp_std_question_mds WHERE std_assess_id=11;
  UPDATE @mds3_questions_temp_table  SET  std_question_to_multi_mds_questions = 1 
  where std_question_id in (
	SELECT std_question_id FROM cp_std_question_mds WHERE std_assess_id=11 group BY std_question_id HAVING count(*) > 1 )

  SET @step='Load responses from POC'; IF @debug='Y' PRINT @step;

  --- This table created outside the sp, clear it before use ---
  TRUNCATE table #sproc_mds_dml_retrieveMDS3POCResponses_temp_table

  --- All MDS 3.0 responses from POC for the client ---
  INSERT INTO #sproc_mds_dml_retrieveMDS3POCResponses_temp_table
  SELECT response.client_id,  m.mds_question_key
  -- the following questions are mapped to one poc question, and mds questions are depends on the response of the poc question 
  , case 
	  when m.mds_question_key = 'E0100A' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id = 928 then 1 else 0 END  -- Behavior Hallucinations
	  when m.mds_question_key = 'E0100B' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id = 926 then 1 else 0 END  -- Bevahior Delusions
	  when m.mds_question_key = 'E0200A' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id IN( 4, 5, 6, 10, 13, 14, 901, 902, 903, 904, 905, 906, 907 ) then 1 else 0 END 
	  when m.mds_question_key = 'E0200B' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id IN( 3, 8, 9, 908, 909, 910, 911, 912, 913 ) then 1 else 0 END 
	  when m.mds_question_key = 'E0200C' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id IN( 0, 1, 2, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 929, 930, 933, 935, 938, 939, 942, 943) then 1 else 0 END 
	  when m.mds_question_key = 'E0800'  and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id IN( 11, 936 ) then 1 else 0 END 
	  when m.mds_question_key = 'E0900'  and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id IN( 7, 940 ) then 1 else 0 END 
	  when m.mds_question_key = 'H0100A' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id = 3 then 1 else 0 END 
	  when m.mds_question_key = 'H0100B' and std_question_to_multi_mds_questions = 1 THEN  case when response.item_value_id = 4 then 1 else 0 END 
      else response.item_value_id
    end 
  , response.item_value, response.completed_date -- TODO:, select client_id as wel
  FROM #sproc_mds_dml_retrieveMDS3POCResponses_table response
  INNER JOIN @mds3_questions_temp_table m ON m.std_question_id = response.std_question_id and m.mds_question_key = response.mds_key 
  AND response.completed_date BETWEEN (
    case 
      when m.mds_question_key IN ('D0500A1','D0500B1','D0500C1','D0500D1','D0500E1','D0500F1','D0500G1','D0500H1','D0500I1','D0500J1') then @LOOKBACK_START_DATE_14
      when m.mds_question_key IN ('D0500A2','D0500B2','D0500C2','D0500D2','D0500E2','D0500F2','D0500G2','D0500H2','D0500I2','D0500J2') then @LOOKBACK_START_DATE_14
      when m.mds_question_key IN ('J0800A','J0800B','J0800C','J0800D', 'J0300') then @LOOKBACK_START_DATE_5
      else @LOOKBACK_START_DATE_7
    end
  ) AND @LOOKBACK_END_DATE
  --AND response.client_id=@clientId; -- TODO: remove condition

  -- Will only autopopulate questions which have at least one answer --
  DELETE FROM @mds3_questions_temp_table WHERE NOT EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table att WHERE att.question_key=mds_question_key);
  --TODO: Do a join to delete instead of not exists


  SET @step='Calculate frequencies'; IF @debug='Y' PRINT @step;

  -- Populate frequencies
  INSERT INTO #frequencies_temp_table 
/*  SELECT distinct(m.mds_question_key) as question_key, days= -- TODO: add client_id in select
    (SELECT count(*) FROM (SELECT count(*) as cnt FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1' GROUP BY (FLOOR(CAST(completed_date AS FLOAT))) having count(*) > 0) as x)
    , numof_0 = (SELECT count(*) FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0') -- TODO: for each one select here, group by client_id
    , numof_1 = (SELECT count(*) FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')
    , numof_2 = (SELECT count(*) FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')
    , numof_3 = (SELECT count(*) FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='3')
    , numof_4 = (SELECT count(*) FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='4')
  FROM @mds3_questions_temp_table m;*/
  Select mainTb.Client_id , mainTb.mds_question_key
      ,ISNULL(d.days,0) as days 
      ,d0.numof_0
      ,d0.numof_1
      ,d0.numof_2
      ,d0.numof_3
      ,d0.numof_4
      ,d0.numof_5
      ,d0.numof_neg99
      ,d0.numof_neg98
      ,d0.numof_neg97
  From( Select distinct  m.mds_question_key, a.Client_id
      from  #sproc_mds_dml_retrieveMDS3POCResponses_temp_table a
    Inner Join @mds3_questions_temp_table m 
    on a.question_key = m.mds_question_key
    ) mainTb

  Left Outer Join (SELECT Client_Id,question_key, count(*) as days FROM 
            (SELECT Client_Id,question_key, count(*) as cnt 
                FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
                WHERE item_value='1' 
          GROUP BY Client_Id, question_Key, (FLOOR(CAST(completed_date AS FLOAT))) having count(*) > 0) as x
        Group by Client_Id,question_key ) d
  on d.Client_Id = maintb.Client_Id
  and d.question_key=mainTb.mds_question_key 

  Left Outer Join (SELECT Client_Id,question_key
            , Sum( Case When item_value = '0' then 1 else 0 end ) as numof_0
            , Sum( Case When item_value = '1' then 1 else 0 end ) as numof_1
            , Sum( Case When item_value = '2' then 1 else 0 end ) as numof_2
            , Sum( Case When item_value = '3' then 1 else 0 end ) as numof_3
            , Sum( Case When item_value = '4' then 1 else 0 end ) as numof_4
            , Sum( Case When item_value = '5' then 1 else 0 end ) as numof_5
            , Sum( Case When item_value = '-99' then 1 else 0 end ) as numof_neg99
            , Sum( Case When item_value = '-98' then 1 else 0 end ) as numof_neg98
            , Sum( Case When item_value = '-97' then 1 else 0 end ) as numof_neg97
          FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
        Group by Client_Id,question_key ) d0
  on d0.Client_Id = maintb.Client_Id
  and d0.question_key=mainTb.mds_question_key 


  create clustered index frequencies_temp_table_Index on #frequencies_temp_table(question_key,client_id) with (fillfactor=99);

  /*  
  DECLARE @MDS_KEY VARCHAR(16);       -- current MDS key
  DECLARE @AUTOPOPULATE_VALUE VARCHAR(16);  -- autopopulated value for the current MDS key
  DECLARE @NUMOF_0 INT, @NUMOF_1 INT, @NUMOF_2 INT, @NUMOF_3 INT, @NUMOF_4 INT;  -- number of times the answer occurs
  */
  SET @step='Autopopulate G0110*1'; IF @debug='Y' PRINT @step;

  -- Autopopulate G0110*1 MDS questions
  INSERT INTO @autopopulation_temp_table 
  --TODO : Client_Id
  SELECT Client_id ,question_key=m.question_key, mds_value=
    CASE
      WHEN (numof_0 + numof_1 + numof_2 + numof_3 + numof_4 = 0)        -- not occurred at all
        THEN '8'
      WHEN (numof_0 + numof_1 + numof_2 + numof_3 + numof_4 < 3)        -- occurred 1 or 2 times
        THEN '7'
      WHEN (numof_0 > 0 and numof_1 + numof_2 + numof_3 + numof_4 = 0)  -- '0' all the time
        THEN '0'
      WHEN (numof_0 + numof_1 + numof_2 + numof_3 = 0 and numof_4 > 0)  -- '4' all the time
        THEN '4'
      WHEN (numof_3 >= 3)    -- '3' at least 3 times
        THEN '3'
      WHEN (numof_4 >= 3)    -- '4' at least 3 times
        THEN '3'
      WHEN (numof_2 >= 3)    -- '2' at least 3 times
        THEN '2'
	  WHEN (numof_1 >= 3)    -- '1' at least 3 times
        THEN '1'        
-- Rule of 3 Various Levels	
      WHEN ((numof_3 + numof_4 >= 3) and               -- '3' or '4' at least 3 times and less than 3 at any one level
			((numof_0 < 3) and (numof_1 < 3) and (numof_2 < 3) and (numof_3 < 3) and (numof_4 < 3)))
        THEN '3'  -- Extensive
      WHEN ((numof_2 + numof_3 + numof_4 >= 3) and     -- '2, 3, 4' at least 3 times and less than 3 at any one level
			((numof_0 < 3) and (numof_1 < 3) and (numof_2 < 3) and (numof_3 < 3) and (numof_4 < 3)))
        THEN '2'  -- Limited
-- default		
      ELSE '1'    -- Supervision
    END
  FROM #frequencies_temp_table m
  WHERE m.question_key IN ('G0110A1','G0110B1','G0110C1','G0110D1','G0110E1','G0110F1','G0110G1','G0110H1','G0110I1','G0110J1');

  SET @step='Autopopulate G0110*2'; IF @debug='Y' PRINT @step;

  -- Autopopulate G0110*2 and G0120B questions (maximum answer from range {0,1,2,3}, '8' if no such answers)
  INSERT INTO @autopopulation_temp_table 
  --TODO :Client_Id
  /*
  SELECT Client_id , question_key=m.mds_question_key, mds_value=
    CASE
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='3')) THEN '3'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      ELSE '8'  -- did not occur
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('G0110A2','G0110B2','G0110C2','G0110D2','G0110E2','G0110F2','G0110G2','G0110H2','G0110I2','G0110J2', 'G0120B');
  */
  Select Client_Id, Question_key
  ,CASE
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='3')) THEN '3'
      WHEN numof_3 > 0 THEN '3' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN numof_2 > 0 THEN '2' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN numof_1 > 0 THEN '1' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      WHEN numof_0 > 0 THEN '0' 
      ELSE '8'  -- did not occur
    END as mds_value
  From #frequencies_temp_table m
  WHERE m.question_key IN ('G0110A2','G0110B2','G0110C2','G0110D2','G0110E2','G0110F2','G0110G2','G0110H2','G0110I2','G0110J2', 'G0120B');






  SET @step='Autopopulate G0120A'; IF @debug='Y' PRINT @step;

  -- Autopopulate G0120A (maximum answer from range {0,1,2,3,4}, '8' if no such answers)
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='4')) THEN '4'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='3')) THEN '3'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      ELSE '8'  -- did not occur
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('G0120A');
  */
  Select Client_Id, Question_key
  ,CASE
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='4')) THEN '4'
      WHEN numof_4 > 0 THEN '4' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='3')) THEN '3'
      WHEN numof_3 > 0 THEN '3' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN numof_2 > 0 THEN '2' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN numof_1 > 0 THEN '1' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      WHEN numof_0 > 0 THEN '0' 
      ELSE '8'  -- did not occur
    END as mds_value
  From #frequencies_temp_table m
  WHERE m.question_key IN ('G0120A');



  SET @step='Autopopulate G0300'; IF @debug='Y' PRINT @step;

  -- Autopopulate G0300 questions (maximum answer from range {0,1,2}, '8' if no such answers)
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      ELSE '8'  -- did not occur
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('G0300A','G0300B','G0300C','G0300D','G0300E');
  */
  Select Client_Id, Question_key
  ,CASE
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='2')) THEN '2'
      WHEN numof_2 > 0 THEN '2' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN numof_1 > 0 THEN '1' 
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='0')) THEN '0'
      WHEN numof_0 > 0 THEN '0' 
      ELSE '8'  -- did not occur
    END as mds_value
  From #frequencies_temp_table m
  WHERE m.question_key IN ('G0300A','G0300B','G0300C','G0300D','G0300E');




  SET @step='Autopopulate B0300 and other'; IF @debug='Y' PRINT @step;

  -- Autopopulate questions (maximum answer from range {0,1}, '0' if no such answers)
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE
      WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      ELSE '0'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('B0300','B1200',
  'D0500A1','D0500B1','D0500C1','D0500D1','D0500E1','D0500F1','D0500G1','D0500H1','D0500I1','D0500J1',
  'E0100A','E0100B','E0500A','E0500B','E0500C','E0600A','E0600B','E0600C','E1000A','E1000B',
  'H0100A',
  'J0800A','J0800B','J0800C','J0800D',
  'J1100A','J1100B','J1100C',
  'K0100A','K0100B','K0100C','K0100D',
  'L0200A','L0200B','L0200C','L0200D','L0200E','L0200F','L0200G',
  'M1200A','M1200B','M1200C');              
  */
  Select Client_Id, Question_key
  ,CASE
      
      --WHEN (EXISTS (SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key AND item_value='1')) THEN '1'
      WHEN numof_1 > 0 THEN '1' 
      ELSE '0'  -- did not occur
    END as mds_value
  From #frequencies_temp_table m
  WHERE m.question_key IN ('B0300','B1200',
  'D0500A1','D0500B1','D0500C1','D0500D1','D0500E1','D0500F1','D0500G1','D0500H1','D0500I1','D0500J1',
  'E0100A','E0100B','E0500A','E0500B','E0500C','E0600A','E0600B','E0600C','E1000A','E1000B',
  'J0800A','J0800B','J0800C','J0800D',
  'J1100A','J1100B','J1100C',
  'K0100A','K0100B','K0100C','K0100D',
  'L0200A','L0200B','L0200C','L0200D','L0200E','L0200F','L0200G',
  'M1200A','M1200B','M1200C');  


  SET @step='Autopopulate J0300'; IF @debug='Y' PRINT @step;
 
     INSERT INTO @autopopulation_temp_table
     Select Client_Id, Question_key
      ,CASE
        WHEN numof_1 > 0 THEN '1'
        WHEN numof_neg97 = numof_0+numof_1+numof_2+numof_3+numof_4+numof_neg99+numof_neg98+numof_neg97 THEN '-'
        WHEN numof_0 = numof_0+numof_1+numof_2+numof_3+numof_4+numof_neg99+numof_neg98+numof_neg97 THEN '0' 
        ELSE ''  -- do not autopopulate
    END as mds_value
  From #frequencies_temp_table m
  WHERE m.question_key = 'J0300';  

    --autopopulate 'None of the above" for 'E0100Z'; 2 is the number of Psychosis fields being checked for auto-population
  /*
    IF (2 = (SELECT COUNT(*) FROM @autopopulation_temp_table WHERE question_key IN ('E0100A','E0100B') AND mds_value='0'))
        BEGIN
            INSERT INTO @autopopulation_temp_table 
            SELECT question_key='E0100Z', mds_value='1'
        END
    */
        INSERT INTO @autopopulation_temp_table 
        Select t.Client_Id, question_key='E0100Z', mds_value='1'
        from ( Select Client_Id, Count(*) as Cnt from @autopopulation_temp_table 
              WHERE question_key IN ('E0100A','E0100B') AND mds_value='0'
            Group by client_Id ) t
        WHERE t.Cnt = 2


    --autopopulate 'None of the above" for 'J0800Z'; 4 is the number of pain indicator fields being checked for auto-population

    /*
    IF (4 = (SELECT COUNT(*) FROM @autopopulation_temp_table WHERE question_key IN ('J0800A','J0800B','J0800C','J0800D') AND mds_value='0'))
        BEGIN
            INSERT INTO @autopopulation_temp_table 
            SELECT question_key='J0800Z', mds_value='1'
        END
    */

        INSERT INTO @autopopulation_temp_table 
        Select t.Client_Id, question_key='J0800Z', mds_value='1'
        from ( Select Client_Id, Count(*) as Cnt from @autopopulation_temp_table 
              WHERE question_key IN ('J0800A','J0800B','J0800C','J0800D') AND mds_value='0'
                Group by client_Id ) t
        WHERE t.Cnt = 4



    --autopopulate 'None of the above" for 'J1100Z'; 3 is the number of breathing indicator fields being checked for auto-population
  /*
    IF (3 = (SELECT COUNT(*) FROM @autopopulation_temp_table WHERE question_key IN ('J1100A','J1100B','J1100C') AND mds_value='0'))
        BEGIN
            INSERT INTO @autopopulation_temp_table 
            SELECT question_key='J1100Z', mds_value='1'
        END
    */
        INSERT INTO @autopopulation_temp_table 
        Select t.Client_Id,question_key='J1100Z', mds_value='1'
        from ( Select Client_Id, Count(*) as Cnt from @autopopulation_temp_table 
              WHERE question_key IN ('J1100A','J1100B','J1100C')  AND mds_value='0'
                Group by client_Id ) t
        WHERE t.Cnt = 3


    
    --autopopulate 'None of the above" for 'K0100Z'; 4 is the number of swallowing disorder fields being checked for auto-population
  /*
    IF (4 = (SELECT COUNT(*) FROM @autopopulation_temp_table WHERE question_key IN ('K0100A','K0100B','K0100C','K0100D') AND mds_value='0'))
        BEGIN
            INSERT INTO @autopopulation_temp_table 
            SELECT question_key='K0100Z', mds_value='1'
        END
     */

        INSERT INTO @autopopulation_temp_table 
        Select t.Client_Id,question_key='K0100Z', mds_value='1'
        from ( Select Client_Id, Count(*) as Cnt from @autopopulation_temp_table 
              WHERE question_key IN ('K0100A','K0100B','K0100C','K0100D')  AND mds_value='0'
                Group by client_Id ) t
        WHERE t.Cnt = 4
   
    --autopopulate 'None of the above" for 'L0200Z'; 7 is the number of dental disorder fields being checked for auto-population
  /*
    IF (7 = (SELECT COUNT(*) FROM @autopopulation_temp_table WHERE question_key IN ('L0200A','L0200B','L0200C','L0200D','L0200E','L0200F','L0200G') AND mds_value='0'))
        BEGIN
            INSERT INTO @autopopulation_temp_table 
            SELECT question_key='L0200Z', mds_value='1'
        END        
  */
        INSERT INTO @autopopulation_temp_table 
        Select t.Client_Id,question_key='L0200Z', mds_value='1'
        from ( Select Client_Id, Count(*) as Cnt from @autopopulation_temp_table 
              WHERE question_key IN ('L0200A','L0200B','L0200C','L0200D','L0200E','L0200F','L0200G')  AND mds_value='0'
                Group by client_Id ) t
        WHERE t.Cnt = 7




  SET @step='Autopopulate C1300'; IF @debug='Y' PRINT @step;

  -- Autopopulate C1300A, C1300B, C1300C, C1300D questions
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE (SELECT days FROM #frequencies_temp_table WHERE question_key=m.mds_question_key)  -- number of days we have at least one 'yes'
      WHEN 0 THEN '0'
      WHEN 7 THEN '1'
      ELSE '2'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('C1300A','C1300B','C1300C','C1300D');
  */
  SELECT Client_id, question_key
    , mds_value= 
      CASE days  -- number of days we have at least one 'yes'
        WHEN 0 THEN '0'
        WHEN 7 THEN '1'
        ELSE '2'
      END
  FROM #frequencies_temp_table m
  WHERE m.question_key IN ('C1300A','C1300B','C1300C','C1300D');


  SET @step='Autopopulate D0500*2'; IF @debug='Y' PRINT @step;

  -- Autopopulate D0500*2 questions
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE (SELECT days FROM #frequencies_temp_table WHERE question_key=m.mds_question_key)
      WHEN 0 THEN '0'
      WHEN 1 THEN '0'
      WHEN 2 THEN '1'
      WHEN 3 THEN '1'
      WHEN 4 THEN '1'
      WHEN 5 THEN '1'
      WHEN 6 THEN '1'
      WHEN 7 THEN '2'
      WHEN 8 THEN '2'
      WHEN 9 THEN '2'
      WHEN 10 THEN '2'
      WHEN 11 THEN '2'
      ELSE '3'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('D0500A2','D0500B2','D0500C2','D0500D2','D0500E2','D0500F2','D0500G2','D0500H2','D0500I2','D0500J2');
  */
  SELECT Client_Id, question_key
    , mds_value=
    CASE days 
      WHEN 0 THEN '0'
      WHEN 1 THEN '0'
      WHEN 2 THEN '1'
      WHEN 3 THEN '1'
      WHEN 4 THEN '1'
      WHEN 5 THEN '1'
      WHEN 6 THEN '1'
      WHEN 7 THEN '2'
      WHEN 8 THEN '2'
      WHEN 9 THEN '2'
      WHEN 10 THEN '2'
      WHEN 11 THEN '2'
      ELSE '3'
    END
  FROM  #frequencies_temp_table m
  WHERE m.question_key IN ('D0500A2','D0500B2','D0500C2','D0500D2','D0500E2','D0500F2','D0500G2','D0500H2','D0500I2','D0500J2');





  SET @step='Autopopulate E0200A and others'; IF @debug='Y' PRINT @step;

   -- Autopopulate E0200A, E0200B, E0200
  INSERT INTO @autopopulation_temp_table 
  
  /*SELECT distinct(m.mds_question_key) as question_key, mds_value=
    CASE (SELECT days FROM #frequencies_temp_table WHERE question_key=m.mds_question_key)
      WHEN 0 THEN '0'
      WHEN 1 THEN '1'
      WHEN 2 THEN '1'
      WHEN 3 THEN '1'
      WHEN 4 THEN '2'
      WHEN 5 THEN '2'
      WHEN 6 THEN '2'
      ELSE '3'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('E0200A','E0200B','E0200C','E0800', 'E0900');
  */

  SELECT client_id, question_key
    ,mds_value=
    CASE days 
      WHEN 0 THEN '0'
      WHEN 1 THEN '1'
      WHEN 2 THEN '1'
      WHEN 3 THEN '1'
      WHEN 4 THEN '2'
      WHEN 5 THEN '2'
      WHEN 6 THEN '2'
      ELSE '3'
    END
  FROM #frequencies_temp_table m
  WHERE m.question_key IN ('E0200A','E0200B','E0200C','E0800', 'E0900');





  SET @step='Autopopulate E0300'; IF @debug='Y' PRINT @step;

  -- E0300: Overall Presence of Behavioral Symptoms
  -- Code 0, no: if E0200A, E0200B, and E0200C all are coded 0, not present.
  -- Code 1, yes: if any of E0200A, E0200B, or E0200C were coded 1, 2, or 3. 

  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE (SELECT sum(days) FROM #frequencies_temp_table WHERE question_key in ('E0200A','E0200B','E0200C'))
      WHEN 0 THEN '0'
      ELSE '1'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key = 'E0300';
  */
    SELECT client_id, question_key = 'E0300'
    , mds_value=
      CASE m.Cnt
      WHEN 0 THEN '0'
      ELSE '1'
    END
  FROM ( Select Client_Id,  sum(days) as Cnt
         From #frequencies_temp_table WHERE question_key in ('E0200A','E0200B','E0200C')
        Group by Client_Id ) m



  SET @step='Autopopulate P0100'; IF @debug='Y' PRINT @step;

  -- Autopopulate P0100*
  INSERT INTO @autopopulation_temp_table 
  /*
  SELECT question_key=m.mds_question_key, mds_value=
    CASE (SELECT days FROM #frequencies_temp_table WHERE question_key=m.mds_question_key )
      WHEN 0 THEN '0'
      WHEN 1 THEN '1'
      WHEN 2 THEN '1'
      WHEN 3 THEN '1'
      WHEN 4 THEN '1'
      WHEN 5 THEN '1'
      WHEN 6 THEN '1'
      ELSE '2'
    END
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('P0100A','P0100B','P0100C','P0100D','P0100E','P0100F','P0100G','P0100H');
  */
  SELECT Client_Id , question_key
    , mds_value=
    CASE days 
      WHEN 0 THEN '0'
      WHEN (case numof_1 when numof_0+numof_1+numof_neg99+numof_neg98+numof_neg97 then days else '-1' end) THEN '2'      
      ELSE '1'
    END
  FROM #frequencies_temp_table m
  WHERE question_key IN ('P0100A','P0100B','P0100C','P0100D','P0100E','P0100F','P0100G','P0100H');


  SET @step='Autopopulate O0500'; IF @debug='Y' PRINT @step;

  -- Autopopulate O0500*
  /*
  SELECT question_key=m.mds_question_key, mds_value=(SELECT count(*) FROM (
  SELECT SUM(CAST(item_value_char AS FLOAT)) as cnt FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table WHERE question_key=m.mds_question_key and isnumeric(item_value_char) = 1 GROUP BY (FLOOR(CAST(completed_date AS FLOAT))) having SUM(CAST(item_value_char AS FLOAT)) >= 15
  ) as x)
  FROM @mds3_questions_temp_table m
  WHERE m.mds_question_key IN ('O0500A','O0500B','O0500C','O0500D','O0500E','O0500F','O0500G','O0500H','O0500I','O0500J');
*/
  IF (@clientId is NULL)
  BEGIN
  /* Process O0500 data for MDS3 ARD Planner */
    INSERT INTO @autopopulation_temp_table 
	SELECT Client_Id, question_key, mds_value=CNT 
	FROM 
	(
		Select Client_Id, Question_Key, Count(*) as CNT 
		From
			( select Client_Id, Question_Key 
			  from #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
			  where question_key in ('O0500A','O0500B','O0500C','O0500D','O0500E','O0500F','O0500G','O0500H','O0500I','O0500J' )
				and isnumeric(item_value_char) = 1 
			  group by Client_Id, Question_key, (FLOOR(CAST(completed_date AS FLOAT))) 
			  having SUM(CAST(item_value_char AS FLOAT)) >= 15
			) x
		Group By  Client_Id, Question_Key
	) x1;
  END
  ELSE
  BEGIN
  /* Process O0500 data for specific client MDS3 assessment */
    INSERT INTO @autopopulation_temp_table 
    SELECT DISTINCT Client_Id=@clientId, Question_Key=q.mds_question_key,
		   Mds_Value =
				( Select 
						case 
							when x.question_key is null then ''
							else count(*)
						end
					From
						( select SUM(CAST(item_value_char AS FLOAT)) as cnt, tt.question_key
						  from #sproc_mds_dml_retrieveMDS3POCResponses_temp_table tt
						  where tt.client_id = @clientId
							and tt.question_key = q.mds_question_key
							and isnumeric(tt.item_value_char) = 1
						  group by tt.question_key, (FLOOR(CAST(tt.completed_date AS FLOAT)))
						  having SUM(CAST(tt.item_value_char AS FLOAT)) >= 15 ) as x 
					Group By x.question_key
				)
    FROM cp_std_question_mds q
	JOIN cp_std_question cq on cq.std_question_id = q.std_question_id
    WHERE q.mds_question_key IN ('O0500A','O0500B','O0500C','O0500D','O0500E','O0500F','O0500G','O0500H','O0500I','O0500J')
	  and cq.deleted = 'N'
	;
  END	
 	
  SET @step='Autopopulate H0300 and H0400'; IF @debug='Y' PRINT @step;

  With H0300
  as
  (
    Select Client_Id
      , Sum( Case when item_value='0' then 1 else 0 end ) as T_NUMOF_0 -- Count where Item_Value = '0'
      , Sum( Case when item_value='1' then 1 else 0 end ) as T_NUMOF_1 -- Count where Item_Value = '1'
      , Sum( Case when item_value IN ('2','3','4','5') then 1 else 0 end ) as T_NUMOF_2 -- Count where Item_Value = '2','3','4','5'
    From #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
    WHERE question_key='H0300'
    Group By Client_Id
  )
  Insert into @autopopulation_temp_table
  Select Client_Id
    , 'H0300'
    , AUTOPOPULATE_VALUE
  From (
      Select Client_id
        , CASE 
            WHEN (T_NUMOF_0 + T_NUMOF_1 = 0) THEN
                  CASE WHEN (T_NUMOF_2 = 7) THEN '9' ELSE '' END
            WHEN (T_NUMOF_1 = 0)   THEN '0'
            WHEN (T_NUMOF_0 = 0)   THEN '3'
            WHEN (T_NUMOF_1 < 7)   THEN '1'
            ELSE '2'
          END as AUTOPOPULATE_VALUE
      FROM H0300
    ) t
  WHERE t.AUTOPOPULATE_VALUE <> ''; 

  With H0400
  as
  (
    Select Client_Id
      , Sum( Case when item_value='0' then 1 else 0 end ) as T_NUMOF_0 -- Count where Item_Value = '0' Continent
      , Sum( Case when item_value='1' then 1 else 0 end ) as T_NUMOF_1 -- Count where Item_Value = '1' Incontinent
      , Sum( Case when item_value IN('2','3','-97','-98','-99') or item_value is null then 1 else 0 end ) as T_NUMOF_2 -- Count all others including response not required
	  , count(*) as T_NUMOF_RESP
    From #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
    WHERE question_key='H0400'
    Group By Client_Id
  )
  Insert into @autopopulation_temp_table
  Select Client_Id
    , 'H0400'
    , AUTOPOPULATE_VALUE
  From (
      Select Client_id
		, CASE 
            WHEN (T_NUMOF_2 = T_NUMOF_RESP) THEN '9'
            WHEN ((T_NUMOF_0 = T_NUMOF_RESP) OR (T_NUMOF_0 > 0 AND (T_NUMOF_0+T_NUMOF_2=T_NUMOF_RESP)) ) THEN '0'
            WHEN ((T_NUMOF_1 = T_NUMOF_RESP) OR(T_NUMOF_1>0 AND(T_NUMOF_1+T_NUMOF_2 = T_NUMOF_RESP))) THEN '3'
            WHEN ((T_NUMOF_1 = 1 AND T_NUMOF_0 > 0)) THEN '1'
            WHEN (T_NUMOF_RESP > 0) THEN '2'
            ELSE ''
          END as AUTOPOPULATE_VALUE
      FROM H0400
    ) t
  WHERE t.AUTOPOPULATE_VALUE <> ''

  -- Autopopulate H0100A	
  SET @step='Autopopulate H0100A'; IF @debug='Y' PRINT @step;
 
  Insert into @autopopulation_temp_table
  Select Client_Id
    , question_key = 'H0100A'
    , mds_value =  AUTOPOPULATE_VALUE
  FROM (
	SELECT
		Client_Id,
		CASE 
			WHEN numof_1 > 0 THEN '1'
			WHEN numof_0 >= 7 THEN '0'
			ELSE '' 
		END as AUTOPOPULATE_VALUE
    FROM #frequencies_temp_table m
	WHERE (m.question_key = 'H0100A')
 ) t 
 WHERE AUTOPOPULATE_VALUE <> '';

  -- Autopopulate H0100B	
  SET @step='Autopopulate H0100B'; IF @debug='Y' PRINT @step;
 
  INSERT INTO @autopopulation_temp_table
  Select Client_Id
	, question_key = 'H0100B'
    , mds_value =  AUTOPOPULATE_VALUE
  FROM (
	SELECT
		Client_Id,
		CASE 
			WHEN numof_1 > 0 THEN '1'
			WHEN numof_0 >= 7 THEN '0'
			ELSE ''
		END as AUTOPOPULATE_VALUE
    FROM #frequencies_temp_table m
    WHERE (m.question_key = 'H0100B')
 ) t 
 WHERE AUTOPOPULATE_VALUE <> '';
  
  -- Autopopulate H0100C based on H0300 and H0400 --	
  SET @step='Autopopulate H0100C'; IF @debug='Y' PRINT @step;
 
  Insert into @autopopulation_temp_table
  Select Client_Id
    , question_key = 'H0100C'
    , mds_value = AUTOPOPULATE_VALUE
  FROM (
	SELECT
		Client_Id,
		CASE 
			WHEN SUM (NUM_OF_OSTOMY) > 0 THEN '1'
			WHEN COUNT(*) >= 14 THEN '0'
			ELSE ''
		END as AUTOPOPULATE_VALUE
    FROM (
		SELECT 
		  Client_Id,
		  SUM(CASE WHEN (question_key = 'H0300' AND item_value='5') OR (question_key = 'H0400' AND item_value='3') THEN 1 ELSE 0 END) as NUM_OF_OSTOMY
		FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table 
		WHERE question_key IN  ('H0300', 'H0400')
		GROUP BY Client_Id, (FLOOR(CAST(completed_date AS FLOAT))), question_key
	) t
	GROUP BY Client_Id
 ) t 
 WHERE AUTOPOPULATE_VALUE <> '';

  SET @step='Do not autopopulate E1000A and E1000B if E0900 is 0'; IF @debug='Y' PRINT @step;

  IF (EXISTS (SELECT * FROM @autopopulation_temp_table WHERE question_key='E0900' and mds_value='0'))
  BEGIN
    DELETE FROM @autopopulation_temp_table WHERE question_key IN ('E1000A','E1000B');
  END
  
  
  --IF @debug='Y' SELECT * FROM #frequencies_temp_table order by question_key;
  --IF @debug='Y' SELECT * FROM #sproc_mds_dml_retrieveMDS3POCResponses_temp_table order by question_key;

  IF(@clientId is null)
    SELECT *,'System Populated - POC' FROM @autopopulation_temp_table order by question_key
  ELSE
    SELECT question_key,mds_value,'System Populated - POC' FROM @autopopulation_temp_table order by question_key
  
  Drop Table #frequencies_temp_table
END TRY

--error trapping
BEGIN CATCH
	SELECT
		@error_code   = ERROR_NUMBER()
		,@status_text = ERROR_MESSAGE()
		,@status_code = 1
	;

	GOTO PgmAbend;
END CATCH

-- success return
PgmSuccess:
IF (@status_code = 0)
BEGIN
	IF (@debug = 'Y') PRINT 'Successful execution of stored procedure';

	RETURN @status_code;
END

-- failure return
PgmAbend:
IF (@debug = 'Y')
BEGIN
	PRINT 'Stored procedure failure in step:' + @step + '  ' + convert(varchar(26),getdate());
	PRINT 'Error code: ' + convert(varchar(10), @error_code) + '; Error description: ' + @status_text;
END

RETURN @status_code;
END
GO

GRANT EXECUTE ON  dbo.sproc_mds_dml_retrieveMDS3POCResponses TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_mds_dml_retrieveMDS3POCResponses.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_mds_dml_retrieveMDS3POCResponses.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_getOrderStatus.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =========================================================================================================================
--
--  Script Type: user defined store procedure
--  Target DB Type:  Client
--  Target Database:  Both
--
--  Re-Runable:  Yes
--
--  Description :  Modify Existing Order Status stored procedure to look for Pending Confirmation Statuses from Table
--
-- Change History:
--   Author			    Date		Comment
-- --------------------------------------------------------------------------------------------------------------------------
--   Maciek Sliwa                   Created.
--   Alireza Mandegar	10/15/2012	Updated due to PCC-33677 to take advantage of the input physOrderId + localizing the params
--									Also added the Change History section to it to keep track of changes.
--   Alireza Mandegar	12/19/2012	Updated due to PCC-32538 to consider the number of administered doses for duration by dose
--   Alireza Mandegar	01/16/2013	Updated due to PCC-32538 Reverted changes
--	 Mustafa Behrainwala 16/06/2014 PCC-58908
--	 Mustafa Behrainwala 23/02/2016 PCC-83826

--	 Dom Christie       05/01/2021 CORE-82764  Applied the solution to fix the compliation issue
--	 Elias Ghanem       10/13/2021 CORE-95608  Add creation of index #adminOrder__orderVerified_IX on #adminOrder as suggested by Radu Bogdan
-- =========================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_getOrderStatus]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_pho_getOrderStatus]
GO

create
proc [dbo].[sproc_pho_getOrderStatus]
(
    @facId int,
    @clientId int,
    @physOrderId int,
    @date datetime,
    @fromPortal char(1) = 'N',
    @debug          char(1)  = 'N',
    @status_code    int  out,
    @status_text    varchar(3000) out

)
as
begin

SET NOCOUNT ON

DECLARE @step           int,
        @error_code     int,
        @date_day  tinyint,
        @date_month tinyint,
        @date_year smallint,
        @day_date datetime
        -- Localize input parameters
       ,@vFacId     int
       ,@vClientId  int
	   


select  @date_day = datepart(dd,@date)  ,
        @date_month = datepart(mm,@date),
        @date_year = datepart(yy,@date),
        @day_date = CAST(FLOOR(CAST(@date AS FLOAT))AS DATETIME)


   
	create table #tempResult_local
    (
        phys_order_id int
        ,fac_id int
        ,client_id int
        ,order_verified varchar(1)
		,active_flag char(1)
		,draft bit
        ,hold_date datetime
        ,hold_date_end datetime
        ,end_date datetime
        ,discontinued_date datetime
        ,order_category_id int
        ,controlled_substance_code int
		,created_date datetime
		,order_class_id tinyint
    )


create table #adminOrder
(
    admin_order_id int,
    created_date datetime,
    effective_date datetime,
    ineffective_date datetime,
    related_phys_order_id int ,
    order_verified char,
    order_relationship_id int
)

create clustered index #adminOrder_IX on #adminOrder (    
    related_phys_order_id,
    effective_date,
    created_date,
	admin_order_id,
    ineffective_date,
    order_verified,
    order_relationship_id)

BEGIN TRY

SET @vClientId = @clientId
SET @vFacId = @facId
SET @status_code = 0

 -- PCC33677: Take advantage of input physOrderId if specified
IF (@physOrderId is not null)
BEGIN
    IF (@vClientId is null)
    BEGIN
        SET @vClientId = (SELECT po.client_id FROM dbo.pho_phys_order po WHERE po.phys_order_id = @physOrderId);
    END
END


DECLARE @IsDischargeEnabled  BIT = ISNULL((select 1 from configuration_parameter cp where cp.fac_id=@vFacId and name='discharge_order_enable' and value='Y'), 0);


IF(@fromPortal = 'N')
BEGIN

	SET @step = 2
	SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Begin non portal operations: insert client information'
	IF @debug='Y' PRINT @status_text

  IF ( @vClientId is not null and @physOrderId is not null and @physOrderId <> -1)
  BEGIN

    

    SET @step = 3
    SET @status_text = convert(VARCHAR(26), getdate(), 13) + 'Insert #tmpResult(clientId not null, physOrder Id not null): inserts phys order information '
    IF @debug='Y' PRINT @status_text

    insert into #tempResult_local (phys_order_id,fac_id,client_id,order_verified,active_flag,
    draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code, created_date, order_class_id)
    select ppo.phys_order_id, ppo.fac_id, ppo.client_id, ppo.order_verified, ppo.active_flag, ppo.draft,
      ppo.hold_date, ppo.hold_date_end, ppo.end_date, ppo.discontinued_date, ppo.order_category_id, controlled_substance_code,
	  ppo.created_date, ppo.order_class_id
    from dbo.pho_phys_order ppo
    where ppo.phys_order_id=@physOrderId

		SET @step = 4
    SET @status_text = convert(VARCHAR(26), getdate(), 13) + 'Insert #adminOrder (clientId not null, physOrder Id not null): inserts administrative order information '
    IF @debug='Y' PRINT @status_text

		INSERT into #adminOrder(admin_order_id,created_date,effective_date,ineffective_date,related_phys_order_id,order_verified,order_relationship_id)
		select
			pao.admin_order_id,pao.created_date,pao.effective_date,pao.ineffective_date, pro.related_phys_order_id,ppo.order_verified,pro.order_relationship_id
		from
			dbo.pho_related_order pro
			inner join dbo.pho_admin_order pao on pao.phys_order_id = pro.phys_order_id
			inner join dbo.pho_phys_order ppo on ppo.phys_order_id = pao.phys_order_id
			
		where
			pro.related_phys_order_id = @physOrderId
			and isnull(pro.deleted,'N')='N'
			and pao.deleted='N'
			and pao.exclude_eom_status_calculation=0


	END
	ELSE IF ( @vClientId is not null)
    BEGIN

    	 
    SET @step = 3
    SET @status_text = convert(VARCHAR(26), getdate(), 13) + 'Insert #tmpResult(clientId not null, physOrder Id null): inserts phys order information '
    IF @debug='Y' PRINT @status_text

	  insert into #tempResult_local (phys_order_id,fac_id,client_id,order_verified,active_flag,
	    draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code, created_date, order_class_id)
	  select ppo.phys_order_id, ppo.fac_id, ppo.client_id, ppo.order_verified, ppo.active_flag, ppo.draft,
	    ppo.hold_date, ppo.hold_date_end, ppo.end_date, ppo.discontinued_date, ppo.order_category_id, controlled_substance_code,
		ppo.created_date, ppo.order_class_id
	  from dbo.pho_phys_order ppo
	  where
	    ppo.fac_id = @vFacId
	    and ppo.order_category_id <> 1
	    and ppo.order_category_id <> 3030
	    and ppo.client_id=@vClientId


	  SET @step = 4
	  SET @status_text = convert(VARCHAR(26), getdate(), 13) + 'Insert #adminOrder (clientId not null, physOrder Id null): inserts administrative order information '
	  IF @debug='Y' PRINT @status_text

	  INSERT into #adminOrder(admin_order_id,created_date,effective_date,ineffective_date,related_phys_order_id,order_verified,order_relationship_id)
	  select
	    pao.admin_order_id,pao.created_date,pao.effective_date,pao.ineffective_date, pro.related_phys_order_id,ppo.order_verified,pro.order_relationship_id
	  from
	    dbo.pho_related_order pro
	    inner join dbo.pho_admin_order pao on pao.phys_order_id = pro.phys_order_id
	    inner join dbo.pho_phys_order ppo on ppo.phys_order_id = pao.phys_order_id  and ppo.fac_id=@vFacId and ppo.client_id=@vClientId
	    
	  where
	    pro.fac_id=@vFacId
	    and isnull(pro.deleted,'N')='N'
	    and pao.deleted='N'
	    and pao.exclude_eom_status_calculation=0

    END
    ELSE -- Client Id is null
    BEGIN
	    raiserror ('Null Client Id is not allowed for Portal No.', 16, 1)
	END
--------------------------------------------------
END
ELSE -- case for from portal
BEGIN
	
	insert into #tempResult_local (phys_order_id,fac_id,client_id,order_verified,active_flag,
	    draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code)
		select phys_order_id,fac_id,client_id,order_verified,active_flag,
	    draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code from #tempresult
		
	IF @IsDischargeEnabled = 1
	BEGIN
		update tl 
			set tl.created_date = p.created_date, tl.order_class_id = p.order_class_id
		from #tempResult_local tl
			inner join pho_phys_order p on p.phys_order_id = tl.phys_order_id and p.order_class_id = 2
	END	

	  SET @step = 2
    SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Begin portal operations: insert admin orders'
    IF @debug='Y' PRINT @status_text

	  INSERT into #adminOrder(admin_order_id,created_date,effective_date,ineffective_date,related_phys_order_id,order_verified,order_relationship_id)
		select
			pao.admin_order_id,pao.created_date,pao.effective_date,pao.ineffective_date, pro.related_phys_order_id,po.order_verified,pro.order_relationship_id
		from
			dbo.pho_related_order pro
			inner join dbo.pho_admin_order pao on pao.phys_order_id = pro.phys_order_id
			inner join #tempResult_local ppo on ppo.phys_order_id = pro.related_phys_order_id
			--inner join #clients c on ppo.client_id = c.client_id
			inner join pho_phys_order po on po.phys_order_id = pao.phys_order_id
		where
			(pro.fac_id=@vFacId)
			and isnull(pro.deleted,'N')='N'
			and pao.deleted='N'
			and pao.exclude_eom_status_calculation=0
END
--------------------------------------------------
  SET @step = 5
  SET @status_text = convert(VARCHAR(26), getdate(), 13) + 'select order statuses'
  IF @debug='Y' PRINT @status_text

  create index #adminOrder__orderVerified_IX on #adminOrder (order_verified)
  
  DECLARE @facility_time datetime=dbo.fn_facility_getCurrentTimeForDate(@vFacId, @date);

    select
    --data.relationship_code,
    ppo.phys_order_id,
    ppo.fac_id,
    CASE
		WHEN
			@IsDischargeEnabled = 1
            AND ppo.order_class_id is not null AND ppo.order_class_id=2
			AND ppo.created_date < (select c.admission_date from clients c where c.client_id = ppo.client_id)
        THEN 12 -- historical completed

		WHEN 
			isnull(ppo.active_flag, 'Y') = 'Y' 
			AND esign.phys_order_id IS NOT NULL
		THEN (case when ppo.controlled_substance_code in (2,3,4,5,6) and esign.marked_to_sign_contact_id is null then 10 -- Pending Mark To Sign
              else 11 -- Pending Order Signature
              end) 
             
        WHEN
            (
                (
                    data.relationship_code = 'DC' --admin order is Discontinue
                    and isnull(data.adminOrderVerified,'Y') = 'Y' --admin order is verified.
                )
                or
                ( ppo.discontinued_date is not null and ppo.discontinued_date < @facility_time )
            )
            AND isnull(ppo.active_flag, 'Y') = 'Y'
        THEN 2 -- discontinued
        
    	WHEN
            (
                ppo.order_verified = 'N'
                or
                (data.adminOrderVerified = 'N' or isnull(unverifiedOrders.oneOrderVerified,'N') = 'Y')
            )
            AND isnull(ppo.active_flag, 'Y') = 'Y'
        THEN 8 -- unconfirmed

		WHEN 
			isnull(ppo.order_verified,'Y') = 'Y' AND
			isnull(ppo.active_flag, 'Y') = 'Y' AND
			clinrev.created_date IS NOT NULL
			
		THEN 9 -- order verified, pending clinical review.

        WHEN
            ppo.draft = 0 -- not draft
            AND isnull(ppo.order_verified,'Y') = 'Y'  -- order is verified
            AND
                (
                    (data.relationship_code is null or data.relationship_code not in ('H','DC')) -- no admin orders
                    and
                    isnull(data.adminOrderVerified, 'Y') = 'Y' --admin order is verified or doesn't exist.
                )
            and
            (
                ppo.hold_date IS NULL
                OR (ppo.hold_date > @facility_time AND ppo.hold_date_end IS NULL)
                OR (@facility_time NOT BETWEEN  ppo.hold_date and ppo.hold_date_end)
            )
            AND (ppo.end_date IS NULL OR (ppo.end_date > @facility_time or poes.phys_order_id is not null))-- not completed
            and ( ppo.discontinued_date is null or ppo.discontinued_date > @facility_time )
            AND isnull(ppo.active_flag, 'Y') = 'Y'
        THEN 1 --active

        WHEN
            ppo.draft = 0 -- not draft
            AND isnull(ppo.order_verified,'Y') = 'Y'-- order is verified
            and
                (
                    (
                        ((ppo.hold_date <= @facility_time AND ppo.hold_date_end IS NULL)
                        OR (@facility_time BETWEEN  ppo.hold_date and ppo.hold_date_end))
                        and isnull(data.adminOrderVerified,'Y') = 'Y'
                    )
                    or
                    (
                        data.relationship_code = 'H' --admin order is hold
                        and isnull(data.adminOrderVerified,'Y') = 'Y' --admin order is verified.
                    )
                )
            AND (ppo.end_date IS NULL OR (ppo.end_date > @facility_time or poes.phys_order_id is not null))--not completed
            and ( ppo.discontinued_date is null or ppo.discontinued_date > @facility_time )
            AND isnull(ppo.active_flag, 'Y') = 'Y'
        THEN 5 -- onhold

		WHEN
            ppo.end_date IS NOT NULL AND ppo.end_date <= @facility_time
            AND isnull(ppo.active_flag, 'Y') = 'Y'
        THEN 3 -- completed

        WHEN
            ppo.active_flag = 'N' -- should only by queued orders.
        THEN -1
        ELSE -1
    END
    as order_status,
    (
        case
            when isnull(unverifiedOrders.oneOrderVerified,'N') = 'Y'
            then
                unverifiedOrders.order_relationship_id
            else
                data.order_relationship_id
        end
    ) as  order_relationship,
    --data.order_relationship_id as order_relationship,
    (case  -- for  unconfirmed pharmacy orders return extra order status reason
        when ((ppo.order_verified = 'N' or (isnull(unverifiedOrders.oneOrderVerified,'N') = 'Y' or data.adminOrderVerified = 'N' ) ) AND isnull(ppo.active_flag, 'Y') = 'Y' )
        then
            case
        
             when isnull(unverifiedOrders.oneOrderVerified,'N') = 'Y'
                    then
                        case
                            when (unverifiedOrders.relationship_code = 'H')  then -1
                            when (unverifiedOrders.relationship_code = 'R') then -2
                            when (unverifiedOrders.relationship_code = 'DC') then -3
                            when  ppo.order_category_id = 3022 and  posp.reason_binary_code is not null then posp.reason_binary_code
                         end
                    else
                        case

                            when (data.relationship_code = 'H' or unverifiedOrders.relationship_code = 'H')  then -1
                            when (data.relationship_code = 'R' or unverifiedOrders.relationship_code = 'R') then -2
                            when (data.relationship_code = 'DC' or unverifiedOrders.relationship_code = 'DC') then -3
                            when  ppo.order_category_id = 3022 and  posp.reason_binary_code is not null then posp.reason_binary_code
                            else null
                        end   
            end
        else null
    end) as status_reason

from
    #tempResult_local ppo
    left join
    (
        --done as an sub select because of performance.
        select
            por.relationship_code,
            adm.order_verified as adminOrderVerified,
            maxAdminOrder.related_phys_order_id,
            por.order_relationship_id
        from
        (
            --this query returns the max created date for the max effective date before the specific date.
            select
                adm.related_phys_order_id,
                adm.effective_date,
                max(adm.created_date) created_date
            from
            (
                --this query returns the max effective date before the specific date.
                select
                    related_phys_order_id,
                    max(effective_date) effective_date
                from
                    #adminOrder
                where
                    effective_date<=@date
                group by
                    related_phys_order_id
            )as maxAdminEffDate
            inner join #adminOrder adm on
                maxAdminEffDate.related_phys_order_id = adm.related_phys_order_id
                and maxAdminEffDate.effective_date = adm.effective_date
            group by adm.related_phys_order_id, adm.effective_date
        )as maxAdminOrder
        inner join #adminOrder adm ON
                 maxAdminOrder.related_phys_order_id = adm.related_phys_order_id
                and maxAdminOrder.effective_date = adm.effective_date
                and maxAdminOrder.created_date = adm.created_date
        inner join dbo.pho_order_relationship por on
                por.order_relationship_id = adm.order_relationship_id
        where
             (isnull(adm.ineffective_date,@date)>=@date OR isnull(adm.order_verified, 'Y')='N')
    )as data on data.related_phys_order_id = ppo.phys_order_id

    left join
    (
                --This query returns and Pending administrative order for a given Phys order.
                --If any order has an associated Pending Confirmation Admin order, the status of that
                -- Order will be Pending Confirmation. Incase there are more then 1 pending confirmation Admin orders
                -- we will take the later of the two (max effective_date, then admin_order_id if there are multiple admin orders with the same effective_date).
                select adm.related_phys_order_id, por.order_relationship_id,por.relationship_code,'Y' as oneOrderVerified
                 from
                    #adminOrder adm
                    INNER JOIN (
                        SELECT max(admin_order_id) admin_order_id, ao.related_phys_order_id FROM (
                            SELECT related_phys_order_id, max(effective_date) effective_date FROM
                            #adminOrder
                            WHERE order_verified = 'N'
                            GROUP BY related_phys_order_id
                        ) maxDate
                        INNER JOIN #adminOrder ao
                            ON maxDate.related_phys_order_id = ao.related_phys_order_id
                            AND maxDate.effective_date = ao.effective_date
                        GROUP BY ao.related_phys_order_id
                    ) maxId ON maxId.admin_order_id = adm.admin_order_id
                    inner join dbo.pho_order_relationship por on por.order_relationship_id = adm.order_relationship_id

        )as unverifiedOrders on unverifiedOrders.related_phys_order_id = ppo.phys_order_id
		
        -- join to the clinical review table
        LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=ppo.phys_order_id AND clinrev.reviewed_date is NULL
        LEFT JOIN pho_phys_order_esignature esign ON esign.phys_order_id=ppo.phys_order_id AND esign.sign_contact_id IS NULL
    LEFT JOIN pho_order_pending_reason posp ON posp.phys_order_id = ppo.phys_order_id 
    left join pho_phys_order_extended_schedule poes on poes.phys_order_id = ppo.phys_order_id
    where
    ( ppo.fac_id=@vFacId)
    and ppo.order_category_id <> 1
    and ppo.order_category_id <> 3030
	


--drop table #adminOrder


--if(@fromPortal = 'N')
--begin
--    DROP TABLE #tempResult
--END

IF @debug='Y'
print convert(VARCHAR(26), getdate(), 13) + ' Step 6 Done'

SET @status_text = null;

END TRY

--error trapping
BEGIN CATCH



    SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()

    SET @status_code = 1

    GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
    IF @debug='Y' PRINT 'Successfull execution of stored procedure'
    RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '  ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:    ' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON [sproc_pho_getOrderStatus] TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_pho_getOrderStatus.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_getOrderStatus.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ===============================================================================================================================
--
-- Purpose: The purpose of this procedure is to load all phys order with all it's schedule information for given facility
-- given that phys order has overdose in old DIB4
--
-- Target ENVIRONMENT: BOTH
--
--  Special Instructions:
--
--	Params:
--
--			@facId			- Facility Id
--          @orderType      - result scope that handles 3 different cases: D - orders with dose check only, Q - queued orders only, A - all orders that can be processed
--			@debug          - Debug param, 'Y' or 'N'
--			@status_code    - SP execution flag, 0 for success.
--			@status_text    - SP error text if error occurs.
--
-- Change History:
--   Author			Date		Comment
-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	 Rhys Thomas     09/27/2021	 Created.
--   Jarek Zawojski  10/05/2021  Added @order_type parameter to handle 3 different scopes: D - orders with dose check only, Q - queued orders only, A - all orders that can be processed
-- ======================================================================================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening]
GO

create
proc sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening
(
	@facId			int,
    @orderType  char(1),
	@debug char(1)  = 'N',
	@status_code int out,
	@status_text varchar(3000) out
)
as
begin

SET NOCOUNT ON

DECLARE @step			int,
		@error_code		int


BEGIN TRY

    DECLARE
            @vFacId int
    -- Set the local variables
    select
      @vFacId       = @facId
     ,@status_code 	= 0;

    DECLARE
    @include_DC_only TINYINT,
        @include_Q_only TINYINT;

    if @orderType='D'
    begin
      SET @include_DC_only = 1;
      SET @include_Q_only = 0;
    end
    if @orderType='Q'
    begin
        SET @include_Q_only = 1;
        SET @include_DC_only = 0;
    end
    --if all orders are to be processed ignore criteria for:
    --  - previous values of dose check and
    --  - queued orders
    if @orderType='A'
    begin
        SET @include_DC_only = 0;
        SET @include_Q_only = 0;
    end

    if(@debug='Y') begin Print 'BEGIN STEP select 100 unique clients with criteria for phys orders overdose' + ' ' + convert(varchar(26),getdate(),109) end
-- Table variable to store the result of getting unique clients that meet criteria
    declare @TMP_UniqueClients table (client_id int)

INSERT INTO @TMP_UniqueClients
SELECT TOP(100) *
FROM (
         SELECT DISTINCT(c.client_id)
         FROM pho_phys_order ppo
                  INNER JOIN clients c ON ppo.client_id = c.client_id AND c.fac_id = @vFacID
                  INNER JOIN mpi m ON m.mpi_id = c.mpi_id
                  INNER JOIN census_item ci ON ci.census_id = c.current_census_id AND ci.fac_id = @vFacID
                  INNER JOIN pho_order_ext_lib_med_ref medref ON ppo.phys_order_id = medref.phys_order_id AND medref.pho_ext_lib_id = 2
                  LEFT JOIN pho_phys_order_dose_check_acknowledgement pa ON ppo.phys_order_id = pa.phys_order_id
                  LEFT JOIN pho_phys_order_dose_check_warning dcw ON ppo.phys_order_id = dcw.phys_order_id
                  LEFT JOIN pho_order_queue poq ON ppo.phys_order_id = poq.phys_order_id
         WHERE m.deceased_date IS NULL
           AND m.date_of_birth IS NOT NULL
           AND ppo.order_class_id = 1
           AND ppo.order_category_id = 3022
           --if orders with dose check only
           AND ((@include_DC_only = 0) OR pa.over_dose IN (1, 2)) -- Include \"overdose\" (1) AND \"was not performed\" (2)
           AND NOT (medref.pho_ext_lib_med_ddid IS NULL OR medref.pho_ext_lib_med_ddid <= 0)
           AND dcw.phys_order_id IS NULL
           AND ppo.fac_id = @vFacId
           AND ((@include_Q_only = 0) OR (poq.deleted = 'N' AND poq.promoted_date IS NULL))
           --orders must be verified and active, unless queued
           AND ( ( (poq.phys_order_id is NULL
             OR
                    poq.phys_order_id is not null and poq.deleted = 'N' and poq.promoted_date is not null) --order is not queued, check for active and verified
             AND ppo.order_verified = 'Y'
             AND (ISNULL(ppo.active_flag, 'Y') = 'Y'))
             OR ( poq.phys_order_id is not null -- order is queued, don't check for active and verified
                 AND poq.deleted = 'N'
                 AND poq.promoted_date IS NULL))
     ) unique_client

    if(@debug='Y') begin Print 'END STEP select 100 unique clients with criteria for phys orders overdose' + ' ' + convert(varchar(26),getdate(),109) end
    if(@debug='Y') begin Print 'BEGIN STEP filtering unique clients into phys order ids	' + ' ' + convert(varchar(26),getdate(),109) end
    declare @TMP_FilteredOrders table (client_id    int,
                                    phys_order_id int,
                                    is_queued_order int
                                  );
    INSERT into @TMP_FilteredOrders
    select uc.client_id, ppo.phys_order_id,
           case when poq.phys_order_id is not null and poq.deleted = 'N' and poq.promoted_date is null then 1 else 0 end as is_queued_order
    from @TMP_UniqueClients uc
             left join pho_phys_order ppo on ppo.client_id = uc.client_id
             left JOIN pho_order_ext_lib_med_ref medref ON ppo.phys_order_id = medref.phys_order_id AND medref.pho_ext_lib_id = 2
             left JOIN pho_phys_order_dose_check_acknowledgement pa ON ppo.phys_order_id = pa.phys_order_id
             left JOIN pho_phys_order_dose_check_warning dcw ON ppo.phys_order_id = dcw.phys_order_id
             LEFT JOIN pho_order_queue poq ON ppo.phys_order_id = poq.phys_order_id
    WHERE ppo.order_class_id = 1
      AND ppo.order_category_id = 3022
      AND ((@include_DC_only = 0) OR (pa.over_dose IN (1, 2)))  -- Include \"overdose\" (1) AND \"was not performed\" (2)
      AND NOT (medref.pho_ext_lib_med_ddid IS NULL OR medref.pho_ext_lib_med_ddid <= 0)
      AND dcw.phys_order_id IS NULL
      AND ppo.fac_id = @vFacId
      AND ((@include_Q_only = 0) OR (poq.deleted = 'N' AND poq.promoted_date IS NULL))
      --orders must be verified and active, unless queued
      AND ( ( (poq.phys_order_id is NULL
        OR
               poq.phys_order_id is not null and poq.deleted = 'N' and poq.promoted_date is not null) --order is not queued, check for active and verified
        AND ppo.order_verified = 'Y'
        AND (ISNULL(ppo.active_flag, 'Y') = 'Y'))
        OR ( poq.phys_order_id is not null -- order is queued, don't check for active and verified
            AND poq.deleted = 'N'
            AND poq.promoted_date IS NULL))

    if(@debug='Y') begin Print 'END STEP filtering unique clients into phys order ids' + ' ' + convert(varchar(26),getdate(),109) end
	if(@debug='Y') begin Print 'BEGIN STEP select enhanced phys order	' + ' ' + convert(varchar(26),getdate(),109) end

    SELECT
        DISTINCT (o.phys_order_id)
         , o.order_type_id
         , o.physician_id
         , o.pharmacy_id
         , o.fac_id
         , o.std_freq_id
         , o.client_id
         , o.drug_code
         , o.created_by
         , o.created_date
         , o.revision_by
         , o.revision_date
         , o.reorder
         , o.date_ordered
         , o.start_date
         , o.end_date
         , o.strength
         , o.form
         , o.route_of_admin
         , o.diagnoses
         , o.description
         , o.directions
         , o.related_generic
         , o.supplementary_notes
         , o.communication_method
         , o.diet_type
         , o.diet_texture
         , o.stat
         , o.packaging
         , o.disc_with_pharm
         , o.quantity_to_administer
         , o.std_order_id
         , o.discontinued_date
         , o.fluid_consistency
         , o.diet_supplement
         , o.hold_date
         , o.nurse_admin_notes
         , o.nurse_pharm_notes
         , o.delivery_notes
         , o.delivery_type
         , o.self_admin
         , o.administered_by_id
         , o.prn_flag
         , o.label_name
         , o.reorder_count
         , o.last_reorder_date
         , o.quantity_received
         , o.tran_id
         , o.prescription
         , o.start_date_type
         , o.end_date_type
         , o.end_date_duration_type
         , o.end_date_duration
         , o.schedule_dose_duration -- PCC-32538
         , o.alter_med_src
         , o.alter_med_src_name
         , o.sent_date
         , o.status_change_by
         , o.status_change_date
         , o.hold_physician_id
         , o.discontinue_physician_id
         , o.pharm_nurse_notes
         , o.first_admin
         , o.drug_manufacturer
         , o.drug_class_number
         , o.resume_physician_id
         , o.event_driven_flag
         , o.auto_fill_flag
         , o.controlled_substance_code
         , o.related_phys_order_id
         , o.relationship
         , o.auto_created_flag
         , o.active_flag
         , o.new_supply_flag
         , o.resume_date
         , o.last_received_date
         , o.orig_phys_order_id
         , o.disp_package_identifier
         , o.hold_date_end
         , o.vendor_phys_order_id
         , o.order_date
         , o.sliding_scale_id
         , o.order_verified
         , o.dispense_as_written
         , o.next_refill_date
         , o.do_not_fill
         , o.cur_supply_id
         , o.first_documented
         , o.substitution_indicator
         , o.reassessment_required
         , o.completed_date
         , o.completed_by
         , o.verify_copied_order
         , o.original_route_of_admin
         , o.indications_for_use
         , o.draft
         , o.origin_id
         , o.order_category_id
         , o.order_revision_date
         , o.order_revision_by
         , o.drug_strength
         , o.drug_strength_uom
         , o.drug_name
         , o.is_new_order
         , o.order_schedule_id
         , o.start_date as schedule_start_date
         , o.end_date as schedule_end_date
         , o.last_pharmacy_end_date
         , o.physician_name_in_msg
         , s.schedule_id
         , s.schedule_type
         , s.pho_std_time_id
         , s.xxdays as xx_days
         , s.xxhours as xx_hours
         , s.xxmonths as xx_months
         , s.sun
         , s.mon
         , s.tues as tue
         , s.wed
         , s.thurs as thu
         , s.fri
         , s.sat
         , s.days_on
         , s.days_off
         , s.std_freq_id
         , s.dose AS dose_value
         , s.dose_low
         , s.alternate_dose
         , s.start_time
         , s.end_time
         , s.nurse_action_notes
         , s.date_start
         , s.date_stop
         , s.repeat_week
         , s.apply_to
         , s.prn_admin
         , s.prn_admin_value
         , s.prn_admin_units
         , s.std_freq_time_label
         , s.until_finished
         , s.quantity_uom_id
         , s.dose_uom_id
         , o.order_directions as order_directions
         , s.schedule_template
         , s.xxMonths
         , s.date_of_month
         , s.std_shift_id
         , s.schedule_sliding_scale_id
         , s.apply_remove_flag
         , s.remove_time
         , s.remove_duration
         , s.behavior_lookback
         , v.vital
         , p.prompt_id
         , p.value_type
         , p.description as prompt_description
         , p.long_description
         , p.notes
         , p.no_of_values
         , p.current_value2
         , p.current_value
         , p.specify_initial_value
         , p.value_data_type
         , p.prompt_frequency_type
         , p.prompt_frequency
         , p.value_date
         , pt.short_desc
         , c.first_name AS physician_first_name
         , c.last_name AS physician_last_name
         , c.title + ' ' + c.first_name + ' ' + c.last_name AS physician_fullname
         , cb.long_username AS created_by_long
         , rb.long_username AS revision_by_long
         , poua.edited_by_audit_id
         , poua.edited_date
         , poua.created_by_audit_id
         , edituser.long_username AS edited_by_long
         , edituser.position_description AS edited_by_position
         , edituser.designation_desc AS edited_by_designation
         , createuser.long_username AS created_by_audit_long
         , createuser.position_description AS created_by_position
         , createuser.designation_desc AS created_by_designation
         , poua.confirmed_by_audit_id
         , poua.confirmed_date
         , confuser.long_username AS confirmed_by_long
         , confuser.position_description AS confirmed_by_position
         , confuser.designation_desc AS confirmed_by_designation
         , lib.pho_ext_lib_id
         , lib.pho_ext_lib_med_id
         , lib.pho_ext_lib_med_ddid
         , lib.pho_ext_lib_generic_id
         , lib.pho_ext_lib_generic_desc
         , lib.ext_lib_rxnorm_id
         , o.min_start_date
         , o.max_end_date
         , o.emergency_pharmacy_flag
         , o.need_location_of_admin
         , signuser.long_username as signed_by_long
         , ppos.signature_date
         , o.extended_end_date
         , o.extended_count
         , custmed.cust_med_id
         , ti.orig_phys_order_id as original_ti_phys_order_id
         , lsi.linked_set_id as linked_set_id
         , ls.set_description as linked_set_description
         , nctrlsc.new_controlled_substance_code as new_controlled_substance_code
         , esign.marked_to_sign_user_id
         , case when marked_to_sign_user_id is not null then dbo.fn_get_username(marked_to_sign_user_id) else null end as marked_to_sign_user_longname
         , esign.marked_to_sign_date
         , esign.marked_to_sign_contact_id
         , esign.marked_to_sign_authentication_type_id
         , esign.marked_to_sign_source_type_id
         , rstype.description as marked_to_sign_source_type_description
         , esign.sign_user_id
         , case when sign_user_id is not null then dbo.fn_get_username(sign_user_id) else null end as sign_user_longname
         , esign.sign_date
         , esign.sign_contact_id
         , esign.sign_authentication_type_id
         , atype.description as sign_authentication_type_description
         , esign.sign_source_type_id
         , stype.description as sign_source_type_description
         , popr.reason_binary_code
         , clinrev.reviewed_date
         , clinrev.phys_order_id as review_order_id
         , clinrev.reviewed_by
         , oq.quantity as prescription_quantity
         , oq.unit_of_measure as prescription_quantity_uom
         , oq.no_of_refills as prescription_no_of_refills
         , o.order_class_id
         , o.linked_order_id
         , o.linked_reason_id
         , filtered_orders.is_queued_order
    FROM @TMP_FilteredOrders filtered_orders
        LEFT JOIN view_pho_phys_order o ON o.phys_order_id = filtered_orders.phys_order_id
        LEFT JOIN view_pho_schedule s
                  ON o.order_schedule_id = s.order_schedule_id AND o.phys_order_id = s.phys_order_id
                      AND s.deleted = 'N'
        LEFT JOIN pho_schedule_vitals v
                  ON s.schedule_id = v.schedule_id and v.deleted = 'N'
        LEFT JOIN pho_order_related_prompt p
                  ON s.schedule_id = p.schedule_id and p.deleted ='N'
        LEFT JOIN pho_order_related_value_type pt
                  ON p.value_type = pt.type_id
        LEFT JOIN contact c
                  ON c.contact_id = o.physician_id
        LEFT JOIN sec_user cb
                  ON cb.loginname = o.created_by
        LEFT JOIN sec_user rb
                  ON rb.loginname = o.revision_by
        LEFT JOIN pho_phys_order_useraudit poua
                  ON poua.phys_order_id = o.phys_order_id
        LEFT JOIN cp_sec_user_audit createuser
                  ON createuser.cp_sec_user_audit_id = poua.created_by_audit_id
        LEFT JOIN cp_sec_user_audit edituser
                  ON edituser.cp_sec_user_audit_id = poua.edited_by_audit_id
        LEFT JOIN cp_sec_user_audit confuser
                  ON confuser.cp_sec_user_audit_id = poua.confirmed_by_audit_id
        LEFT JOIN pho_order_ext_lib_med_ref lib
                  ON o.order_category_id=3022 and lib.phys_order_id = o.phys_order_id -- only need for pharmacy order
        LEFT JOIN pho_phys_order_sign ppos
                  ON o.phys_order_id = ppos.phys_order_id
        LEFT JOIN cp_sec_user_audit signuser
                  ON signuser.cp_sec_user_audit_id = ppos.cp_sec_user_audit_id
        LEFT JOIN pho_phys_order_cust_med custmed
                  ON o.order_category_id=3022 and custmed.phys_order_id = o.phys_order_id -- only need for pharmacy order
        LEFT JOIN pho_phys_order_ti ti
                  ON ti.phys_order_id = o.phys_order_id
        LEFT JOIN pho_linked_set_item lsi
                  ON lsi.phys_order_id = o.phys_order_id
        LEFT JOIN pho_linked_set ls on ls.linked_set_id = lsi.linked_set_id
        LEFT JOIN pho_phys_order_new_ctrlsubstancecode nctrlsc ON o.order_category_id=3022 and nctrlsc.phys_order_id=o.phys_order_id -- only need for pharmacy order
        LEFT JOIN pho_phys_order_esignature esign  ON o.phys_order_id = esign.phys_order_id
        LEFT JOIN order_sign_source_type stype ON esign.sign_source_type_id = stype.source_type_id
        LEFT JOIN order_sign_source_type rstype ON esign.marked_to_sign_source_type_id = rstype.source_type_id
        LEFT JOIN order_sign_authentication_type atype ON esign.sign_authentication_type_id = atype.authentication_type_id
        LEFT JOIN pho_order_pending_reason popr ON popr.phys_order_id = o.phys_order_id
        LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=o.phys_order_id
        LEFT JOIN pho_phys_order_quantity_info oq on o.order_category_id=3022 and oq.phys_order_id=o.phys_order_id -- only need for pharmacy order
        LEFT JOIN pho_phys_order_dose_check_warning dcw ON o.phys_order_id = dcw.phys_order_id

    WHERE o.fac_id = @vFacId
    AND dcw.phys_order_id IS NULL
    ORDER BY o.order_schedule_id, s.schedule_id

	if(@debug='Y') begin Print 'END STEP select enhanced phys order		' + ' ' + convert(varchar(26),getdate(),109) end

END TRY

--error trapping
BEGIN CATCH

SELECT @error_code = @@error
     , @status_text = ERROR_MESSAGE()

    SET @status_code = 1

	GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
	IF @debug='Y' PRINT 'Successful execution of stored procedure'
	RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '	' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:	' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening TO PUBLIC
GO



GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getBatchDib4EnhancedOrdersForMSCRescreening.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEmarAllergyWarning.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


------------------------------------------------------------------------------------------------------------------
--  Created By: Bhanu Singh
--  Target DB Type:  Client
--  Target Database:  Both
--  Purpose:    stored procedure used to get list of Allergies for a client
--
--  Parameters:
--          @physOrderId 		- physOrderId to search Allergy information 
--          @debug              - Flag to print debug statements.
--          @status_code        - Return value if the procedure ran correctly, 1 if error, 0 if success.
--          @status_text        - Error message if status_code is 1.
--

-- Change History:
--   Author			Date		Comment
-- -------------------------------------------------------------------------------------------------------------------------------
--   Elias Ghanem 09/03/2020 CORE-71858 return allergy alerts for supplies even even if the supplies are in Processed By Pharmacy status (3) not only if they are On Hand
------------------------------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id('dbo.sproc_pho_list_getEmarAllergyWarning') and OBJECTPROPERTY(id, 'IsProcedure') = 1)
   drop procedure dbo.sproc_pho_list_getEmarAllergyWarning
GO


CREATE
proc dbo.sproc_pho_list_getEmarAllergyWarning
(
  	@physOrderId	      int,
    @debug              char(1)  = 'N',
    @status_code        int  = 0 out,
    @status_text        varchar(3000) out
)
AS
BEGIN

SET NOCOUNT ON

DECLARE 
	@step     int, 
	@error_code   int;

SET @status_code = 0;

BEGIN TRY
SET @step = 1

  SELECT distinct a.allergy_id, allergen,allergy_type,reaction_note,reaction_type,severity,a.status,subreaction_type,a.status_id,u.long_username,
		ISNULL((case when u.designation_desc = '' THEN NULL ELSE u.designation_desc end),u.position_description) as acknowledgement_by_credential,
		pa.acknowledgement_date, pa.pn_id,a.onset_date,a.resolved_date,ppo.description, ppo.directions, -1 order_supply_id, 0 forsupply
  FROM  pho_phys_order_allergy_acknowledgement pa WITH(NOLOCK)
    INNER JOIN pho_phys_order ppo WITH(NOLOCK) on ppo.phys_order_id = @physOrderId and ppo.phys_order_id = pa.phys_order_id
    INNER JOIN 
    (
     SELECT 
      distinct a.allergy_id
      , a.client_id
      , a.onset_date
      , a.resolved_date
      , a.lib_allergy_id as allergen_id
        , case 
            WHEN a.allergy_category_id in (3,4,5) THEN stdal.allergen 
            WHEN a.allergy_category_id = 6 then cusalle.allergen
          WHEN a.allergy_category_id = 2 then cusmed.[description]
          WHEN a.allergy_category_id in (1,7,8,9) then a.mmdb_allergen_audit
          END as allergen
        , rnote.reaction_note
        , ac.category as category
      , ac.allergy_category_id as category_id
      , ac.[order]	as category_order
      , art.description as reaction_type
      , a.allergy_reaction_type_id as reaction_type_id
      , asrt.description as subreaction_type
      , a.allergy_subreaction_type_id as subreaction_type_id
      , ast.description as status
      , a.status_id
      , at.description as allergy_type
      , a.allergy_type_id
      , asv.description as severity
      , a.severity_id
      , a.created_user_audit_id 
      , a.created_date
      , a.revision_user_audit_id
	  , a.revision_date  

	FROM allergy a WITH(NOLOCK)
	join allergy_severity asv WITH(NOLOCK) ON asv.severity_id = a.severity_id
	join allergy_category ac WITH(NOLOCK) on a.allergy_category_id = ac.allergy_category_id	
	join allergy_status ast WITH(NOLOCK) ON a.status_id = ast.status_id
	join allergy_type at WITH(NOLOCK) ON a.allergy_type_id = at.allergy_type_id
    LEFT join allergy_reaction_type art WITH(NOLOCK) ON a.allergy_reaction_type_id = art.allergy_reaction_type_id
	LEFT join allergy_subreaction_type asrt WITH(NOLOCK) ON a.allergy_subreaction_type_id = asrt.allergy_subreaction_type_id
    LEFT join allergy_reaction_note rnote WITH(NOLOCK) ON a.allergy_id = rnote.allergy_id
    left join allergy_lib_std stdal WITH(NOLOCK) ON stdal.std_allergy_id = TRY_CONVERT(int,a.lib_allergy_id)
        and a.allergy_category_id = stdal.allergy_category_id -- std allergy
    left JOIN allergy_lib_custom cusalle WITH(NOLOCK) ON cusalle.custom_allergy_id = TRY_CONVERT(int,a.lib_allergy_id)
        and a.allergy_category_id = cusalle.allergy_category_id -- custom allergy
    left join cr_cust_med_audit cusmed WITH(NOLOCK) on TRY_CONVERT(int,a.lib_allergy_id) = cusmed.custom_drug_id
        and a.created_date >= cusmed.effective_date
        and (a.created_date <= cusmed.ineffective_date or cusmed.ineffective_date is null)
        and a.allergy_category_id = 2
    )
as a 
on a.allergy_id = pa.allergy_id AND (a.status_id=1 or a.status_id=3)
    LEFT JOIN cp_sec_user_audit u WITH(NOLOCK) on u.cp_sec_user_audit_id = pa.cp_sec_user_audit_id
  WHERE pa.phys_order_id=@physOrderId 
  UNION ALL
  SELECT distinct a.allergy_id, allergen,allergy_type,reaction_note,reaction_type,severity,a.status,subreaction_type,a.status_id,null, null, null, null,a.onset_date,a.resolved_date,pos.description,pos.directions, pos.order_supply_id , 1 forsupply
  FROM pho_order_supply pos  WITH(NOLOCK)
    INNER JOIN pho_order_supply_allergy posa WITH(NOLOCK) on posa.order_supply_id = pos.order_supply_id and pos.phys_order_id=@physOrderId  and pos.active = 'Y' AND pos.status IN (3, 4) AND pos.deleted = 'N' 
    LEFT JOIN pho_phys_order_allergy_acknowledgement poaa WITH(NOLOCK) on poaa.phys_order_id=pos.phys_order_id and posa.allergy_id=poaa.allergy_id
    INNER JOIN 
    (
     SELECT 
      distinct a.allergy_id
      , a.client_id
      , a.onset_date
      , a.resolved_date
      , a.lib_allergy_id as allergen_id
        , case 
            WHEN a.allergy_category_id in (3,4,5) THEN stdal.allergen 
            WHEN a.allergy_category_id = 6 then cusalle.allergen
          WHEN a.allergy_category_id = 2 then cusmed.[description]
          WHEN a.allergy_category_id in (1,7,8,9) then a.mmdb_allergen_audit
          END as allergen
        , rnote.reaction_note
        , ac.category as category
      , ac.allergy_category_id as category_id
      , ac.[order]	as category_order
      , art.description as reaction_type
      , a.allergy_reaction_type_id as reaction_type_id
      , asrt.description as subreaction_type
      , a.allergy_subreaction_type_id as subreaction_type_id
      , ast.description as status
      , a.status_id
      , at.description as allergy_type
      , a.allergy_type_id
      , asv.description as severity
      , a.severity_id
      , a.created_user_audit_id 
      , a.created_date
      , a.revision_user_audit_id
	  , a.revision_date  

	FROM allergy a WITH(NOLOCK)
	join allergy_severity asv WITH(NOLOCK) ON asv.severity_id = a.severity_id
	join allergy_category ac WITH(NOLOCK) on a.allergy_category_id = ac.allergy_category_id	
	join allergy_status ast WITH(NOLOCK) ON a.status_id = ast.status_id
	join allergy_type at WITH(NOLOCK) ON a.allergy_type_id = at.allergy_type_id
    LEFT join allergy_reaction_type art WITH(NOLOCK) ON a.allergy_reaction_type_id = art.allergy_reaction_type_id
	LEFT join allergy_subreaction_type asrt WITH(NOLOCK) ON a.allergy_subreaction_type_id = asrt.allergy_subreaction_type_id
	LEFT join allergy_reaction_note rnote WITH(NOLOCK) ON a.allergy_id = rnote.allergy_id
    left join allergy_lib_std stdal WITH(NOLOCK) ON stdal.std_allergy_id = TRY_CONVERT(int,a.lib_allergy_id)
        and a.allergy_category_id = stdal.allergy_category_id -- std allergy
    left JOIN allergy_lib_custom cusalle WITH(NOLOCK) ON cusalle.custom_allergy_id = TRY_CONVERT(int,a.lib_allergy_id)
        and a.allergy_category_id = cusalle.allergy_category_id -- custom allergy
    left join cr_cust_med_audit cusmed WITH(NOLOCK) on TRY_CONVERT(int,a.lib_allergy_id) = cusmed.custom_drug_id
        and a.created_date >= cusmed.effective_date
        and (a.created_date <= cusmed.ineffective_date or cusmed.ineffective_date is null)
        and a.allergy_category_id = 2
    )
as a 
on  a.allergy_id=posa.allergy_id AND (a.status_id=1 or a.status_id=3)    
  WHERE pos.phys_order_id=@physOrderId  and pos.active = 'Y' AND pos.status IN (3, 4) AND pos.deleted = 'N' 
      AND poaa.phys_order_id is null -- this ensures that if an allergy entry already exists for this phys order, don't display the supply entry
  ORDER BY forsupply,description,resolved_date
    
END TRY

--error trapping
BEGIN CATCH

  SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()

  SET @status_code = 1

  GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
  IF @debug='Y' PRINT 'Successfull execution of stored procedure'
  RETURN @status_code
END


--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '  ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:  ' +@status_text
RETURN @status_code 

END
GO

GRANT EXECUTE ON dbo.sproc_pho_list_getEmarAllergyWarning TO PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getEmarAllergyWarning.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEmarAllergyWarning.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEmarResident_details.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =========================================================================================================================
--
--  Written By: Peter Bellamy
--
--  Script Type: user defined store procedure
--  Target DB Type:  Client
--  Target Database:  Both
--
--  Re-Runable:  Yes
--
--  Description : This procedure is used to get a specific resident data for emar.
--  It was originally created as a single sp for all and specific residents in: sproc_pho_list_getEmarResident_details
--
-- Change History:
--   Author			Date		Comment
-- -------------------------------------------------------------------------------------------------------------------------------
--	 Ramin Shojaei	13/01/2015 Modified due to PCC-68930
--	 Carlos Luz		13/01/2015 Modified due to PCC-69330
--	 Ramin Shojaei	08/02/2016 Modified due to PCC-89154
--	 Gleb Gadyatskiy 12/12/2016 Modified due to PCC-105720
--	 Mustafa Behrainwala 10/17/2017 CORE-44
--	 Mustafa Behrainwala 10/17/2017 CORE-44 Removed Dosecheck from the stored proc due to decoupling.
--   Jose Diaz 10/29/2018 CORE-23397 Return dose_low value.
--   Mustafa Behrainwala 08/01/2019 CORE-29192 Return behavior_lookback flag for schedules
--   Elias Ghanem 09/25/2019 CORE-52137 return different fields to be able to show time range for PI orders having time range as admin time
--   Elias Ghanem 09/03/2020 CORE-71858 return When computing is order has Allergy alerts, include allergy alerts for supplies even even if the supplies are in Processed By Pharmacy status (3) not only if they are On Hand
-- =========================================================================================================================

-- Special instruction
-- this has to run after pho_schedule_details_reminder_view script

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_list_getEmarResident_details]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[sproc_pho_list_getEmarResident_details]

go
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sproc_pho_list_getEmarResident_details]
		@fac_id                   int,
		@assignment_id            int,
		@order_type_id            varchar(1000), -- it's really admin_record__id(s)
		@shift_start              datetime,
		@shift_end                datetime,
		@std_shift_id             int,
		@client_id                int,
		@now                      datetime,
		@actualNowTime            datetime,
		@filteringQshifts         varchar(1000),
		@filteringHOAs            varchar(1000),
		@filteringVitals          varchar(1000),
		@filteringPrompts         varchar(1000),
		@filteringOrderCategories varchar(1000),
		@filterMode               tinyint = 0,
        @doseCheckEnabled		   char,
        @grace_period              int,
        @severity_level_severe     int, -- if severe level is selected to be set to 3 otherwise 0
        @severity_level_moderate   int, -- if moderate level is selected to be set to 2 otherwise 0
        @severity_level_minor      int, -- if minor level is selected to be set to 1 otherwise 0
        @isCDN                     int, -- 1= CDN, 0 = US
        @timeZone                  int, -- Facility timezone
        @discontinueLingerPeriod   int = 0,
		@secondSignatureEnabled		char(1) = 'N',
		@administration_task_list  tinyint = 0, -- 0: called from Web - client_id should be present so details for that client will be returned
												-- 1: called from API - Returns all tasks list (details except supply info and dose check info). Returns only one result set for tasks
												-- 2: called from API - client_id should be present so details for that client will be returned. Returns only one result set for tasks
		@DebugMe                  char(1) = 'N', -- optional,
		@status_code              int  out,
		@status_text              varchar(3000) out
AS
SET NOCOUNT ON;

DECLARE @GET_BASIC tinyint, @GET_ADVANCED tinyint; -- constants - bits for basic/advanced filters
SET @GET_BASIC = 1;
SET @GET_ADVANCED = 2;

DECLARE
	@error_code                int,
	@step                      varchar(300),
	@fac_id_local              int,
	@assignment_id_local       int,
	@order_type_id_local       varchar(1000),
	@shift_start_local         datetime,
	@shift_end_local           datetime,
	@client_id_local           int,
	@std_shift_id_local        int,
	@overdueStatus             tinyint,
	@inprogressStatus          tinyint,
	@scheduledStatus           tinyint,
	@completeStatus            tinyint,
	@dueSoonTime                datetime,
	@now_local                 datetime, -- this is the start of end of the shift to determine the "now" view.
	@status_code_local         int,
	@status_text_local         varchar(3000),
    @shift_end_local_plusOneDay datetime,
    @overDueGracePeriod        datetime,
	@dueNowGracePeriod			int,
    @dc_cutoff_date	           datetime;

if( @actualNowTime < @shift_start_local )
BEGIN
	set @dueSoonTime = dateadd(ss,-1,@shift_start_local)
END
ELSE
BEGIN
	SET @dueNowGracePeriod = (select value from configuration_parameter where fac_id = @fac_id and name = 'due_now_grace_period_on_emar')
	if @dueNowGracePeriod is null
		set @dueNowGracePeriod = @grace_period
	set @dueSoonTime = dateadd(mi,@dueNowGracePeriod,@actualNowTime)
END

select @overdueStatus=3,@inprogressStatus=2,@scheduledStatus=1,@completeStatus=0, @fac_id_local = @fac_id, @assignment_id_local = @assignment_id, @order_type_id_local = @order_type_id
, @shift_start_local = @shift_start, @shift_end_local = @shift_end, @client_id_local = @client_id, @std_shift_id_local = @std_shift_id, @now_local = @now
, @dc_cutoff_date = @shift_start;
SET @overDueGracePeriod=dateadd(mi,-@grace_period,@actualNowTime)
SET @timeZone= -1*@timeZone;

DECLARE @adminRecordIds TABLE
(
	admin_record_id int
)

INSERT INTO @adminRecordIds
SELECT items FROM dbo.Split(@order_type_id_local, ',')

BEGIN TRY
	IF @discontinueLingerPeriod > 0
	BEGIN
		SET @dc_cutoff_date = CONVERT(datetime, CONVERT(int, CONVERT(float, DATEADD(day, -(@discontinueLingerPeriod-1), @dc_cutoff_date))));
	END
	select @step = 'Active clients'
	if @DebugMe='Y' BEGIN Print 'Step 01 '+ ' ' + convert(varchar(26),getdate(),109) end

	---------------------------------------------------------------------------------------------
	-- Show Residents either till the end of the day for CDN or till the end of the shift for US
	---------------------------------------------------------------------------------------------

	-------------------------------------------------------------------
	--Advanced filtering - set filters
	-------------------------------------------------------------------

	IF @GET_ADVANCED = @GET_ADVANCED & @filterMode
	BEGIN
--    	DECLARE @filterScheduleStartTime TABLE (start_time varchar(20))
--        DECLARE @filterScheduleQshift	TABLE (std_shift_id int)
--        DECLARE @filterVital TABLE (std_vitals_id int)
--        DECLARE @filterPrompt TABLE (std_vitals_id varchar(10), no_of_values tinyint not null default(1))
--        DECLARE @filterOrderCategory TABLE (order_category_id int)


		if( len(@filteringHOAs) >0 )
		BEGIN
       	CREATE TABLE #filterScheduleStartTime (start_time varchar(20))

		INSERT INTO #filterScheduleStartTime
			SELECT value FROM pcc__csvToTableOfStrings(@filteringHOAs);
		END
		if( len(@filteringVitals) >0 )
		BEGIN
        CREATE TABLE #filterVital (std_vitals_id int)

		INSERT INTO #filterVital
			SELECT value FROM pcc__csvToTableOfInt(@filteringVitals);

		END
		if( len(@filteringPrompts) >0 )
		BEGIN
        CREATE TABLE #filterPrompt (std_vitals_id varchar(10), no_of_values tinyint not null default(1))
		INSERT INTO #filterPrompt
			SELECT SUBSTRING(value,1,CHARINDEX('_',value)-1), SUBSTRING(value,CHARINDEX('_',value)+1,1)
			FROM pcc__csvToTableOfStrings(@filteringPrompts);
		END
		if( len(@filteringOrderCategories) >0 )
		BEGIN
        CREATE TABLE #filterOrderCategory (order_category_id int)
		INSERT INTO #filterOrderCategory
			SELECT value FROM pcc__csvToTableOfInt(@filteringOrderCategories);

		END

		if ( len(@filteringQshifts) >0 )
        BEGIN
            CREATE TABLE #filterScheduleQshift	(std_shift_id int)

			INSERT INTO #filterScheduleQshift
			SELECT value FROM pcc__csvToTableOfStrings(@filteringQshifts);
        END
	END

	declare @order_sched_info table
	(
		fac_id							int,
		std_time_type_id				int,
		time_code						varchar(32),
		std_shift_id					int,
		std_shift_description			varchar(15),
		schedule_id						int,
		self_admin						int,
		schedule_type					int,
		client_id						int,
		start_time						varchar(15),
		actual_start_time				varchar(15),
		actual_end_time					varchar(15),
		phys_order_id					int,
		description						varchar(500),
		directions						varchar(2000),
		order_directions						varchar(2000),
		hold_date						datetime,
		hold_date_end					datetime,
		discontinued_date				datetime,
		date_ordered					datetime,
		order_verified					varchar(1),
		sliding_scale_id				int,
		nurse_action_notes				varchar(512),
		controlled_substance_code		varchar(50),
		route_of_admin					int,
		need_location_of_admin		    char(1),
		related_generic					varchar(250),
		is_new_order					varchar(1),
		diet_supplement					int,
		form							varchar(50),
		order_category_id				int,
		order_origin_id					int,
		dispense_as_written				varchar(1),
		administered_by_id 				int,
		start_date						datetime,
		until_finished					char,
		prn_admin_value					int,
		prn_admin_units					char(1),
		dose_uom_id						int,
		dose_value						varchar(31),
		doseLow  varchar(31),
		order_date						datetime,
		order_end_date					datetime,
		order_schedule_id				int,  -- PCC-30715
		alternate_dose_value			varchar(31), -- PCC-36934
		end_date_type                   int, -- PCC-32538
		apply_remove_flag               bit, -- PCC-32537
		advanced_srch_sort				int,
		drugname						varchar(500),
        nurse_admin_notes               varchar(512),
        new_phys_order_id               int, -- if null is a legacy order otherwise eom order
		matches_filter                  bit DEFAULT(1),
        requires_second_signature       bit,
	    admin_record_id                 int,
	    behavior_lookback              bit


		primary key (schedule_id)
	)

	-- get order, schedule info into temp table first
    ---------------------------------------------------------------- <REPLACEMENT OF sproc_pho_getOrderScheduleInfo> --------------------------------------

    SET @shift_end_local_plusOneDay = DATEADD(dd, 1, @shift_end_local);
	CREATE TABLE #tmpViewOrderSchedule
	(
		schedule_id          int,
		std_shift_id         int ,
		start_time           varchar(4) ,
		end_time			 varchar(4) ,
		schedule_type        int ,
		dose                 varchar(31) ,
		doseLow varchar(31),
		alternate_dose       varchar(31) ,
		schedule_sliding_scale_id  int,
		apply_remove_flag          bit,
		pho_std_time_id int ,
		nurse_action_notes varchar(512),
		pain_scale_schedule_type_id int ,
		order_schedule_id int NULL,
		prn_admin char(1),
		prn_admin_value int ,
		prn_admin_units char,
		until_finished char(1),
		dose_uom_id int,
		quantity_uom_id int,
		behavior_lookback bit
	)

	CREATE TABLE #tmpPhysOrder
	(
		phys_order_id int,
		order_type_id int,
		fac_id  int,
		std_freq_id int,
		client_id int,
		date_ordered  datetime,
		start_date  datetime,
		end_date  datetime,
		form  varchar(50),
		route_of_admin  int,
		need_location_of_admin char(1),
		description varchar(500),
		directions  varchar(2000),
		related_generic varchar(250),
		order_directions varchar(2000),
		discontinued_date datetime,
		diet_supplement int,
		hold_date datetime,
		nurse_admin_notes varchar(512),
		self_admin  int,
		administered_by_id int,
		end_date_type int,
		controlled_substance_code varchar(50),
		hold_date_end datetime,
		order_date  datetime,
		sliding_scale_id  int,
		order_verified  char(1),
		dispense_as_written char(1),
		order_category_id int,
		order_origin_id int,
		drug_name varchar(500),
		new_phys_order_id int,
		is_new_order char(1),
		order_schedule_id int
	)
	declare @TMPActiveClients table
	(
		fac_id				            int,
		client_id			            int
	)

	declare @TMPActiveClientsDetail table
	(
		fac_id				            int,
		client_id			            int,
		bed_id				            int,
		created_date                    datetime,
		resActionType                   char(5),
		first_name                      varchar(50),
		last_name                       varchar(50),
		bed_desc                        varchar(30),
		room_desc                       varchar(60),
		floor_desc                      varchar(256),
		unit_desc                       varchar(35),
		photo                           varchar(50),
		photo_small                     varchar(55),
		barcode                         varchar(50),
		client_id_number                varchar(35)
	)




      SET @step = 2
      SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Insert @TMPActiveClients or @TMPActiveClientsDetail'
      IF @DebugMe='Y' PRINT @status_text

	  IF (@administration_task_list = 1)
	  BEGIN
		INSERT INTO @TMPActiveClientsDetail
		  SELECT
			client.fac_id,
			client.client_id,
			census.bed_id,
			census.created_date,
			case when ccodes.action_type='H' or ccodes.action_type='T' or ccodes.action_type='U' or ccodes.action_type='P' then 'L' else 'N' end,
			m.first_name first_name,
			m.last_name last_name,
			bed.bed_desc,
			room.room_desc ,
			fl.floor_desc ,
			unit.unit_desc,
			client.photo,
			client.photo_small,
			res_barcode.barcode,
			client.client_id_number
		  FROM
			dbo.CENSUS_ITEM census WITH (NOLOCK)
			LEFT JOIN census_codes ccodes WITH (NOLOCK) ON ccodes.item_id=census.status_code_id
			INNER JOIN dbo.CLIENTS client WITH (NOLOCK) ON client.client_id = census.client_id AND (client.deleted = 'N') AND (census.record_type is null OR census.record_type='C') AND census.deleted = 'N' AND client.original_admission_date <= @shift_end_local AND census.effective_date <= @shift_end_local and (@shift_end_local < census.ineffective_date or census.ineffective_date is null)
			INNER JOIN dbo.mpi m WITH (NOLOCK) ON m.mpi_id=client.mpi_id
			INNER JOIN dbo.PHO_ASSIGNMENT_BEDS assignment WITH (NOLOCK) ON census.bed_id = assignment.bed_id AND assignment.pho_assignment_id = @assignment_id_local
			INNER JOIN dbo.BED bed WITH (NOLOCK) ON census.fac_id = bed.fac_id AND census.bed_id = bed.bed_id
			INNER JOIN dbo.ROOM room WITH (NOLOCK) ON bed.fac_id = room.fac_id AND bed.room_id = room.room_id
			INNER JOIN dbo.UNIT unit WITH (NOLOCK) ON room.fac_id = unit.fac_id AND room.unit_id = unit.unit_id
			INNER JOIN dbo.floor fl WITH (NOLOCK) ON room.fac_id=fl.fac_id AND fl.floor_id=room.floor_id
			LEFT JOIN dbo.pho_resident_barcode res_barcode WITH (NOLOCK) ON client.client_id = res_barcode.client_id AND client.fac_id = res_barcode.fac_id
		  WHERE
			@shift_start_local <= (
						  CASE WHEN ( client.discharge_date IS NULL )
						  THEN (@shift_start_local)
						  ELSE
						  (
							(
							  DATEADD(hh
							  ,@timeZone
							  ,client.discharge_date
							  )
							)
						  ) END
						)

			AND @shift_start_local <= (
						  CASE WHEN ( census.ineffective_date IS NULL )
						  THEN (@shift_start_local)
						  ELSE
						  (
							(
							  DATEADD(hh
							  ,@timeZone
							  ,census.ineffective_date
							  )
							)
						  ) END
						)

		SET @step = 2.2
		SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Delete duplicate client entries in @TMPActiveClientsDetail'
		IF @DebugMe='Y' PRINT @status_text

		delete tmpc
		from @TMPActiveClientsDetail tmpc
		inner join
		(
		select client_id, max(created_date) as created_date
		from @TMPActiveClientsDetail
		group by client_id
		)as data on data.client_id = tmpc.client_id and data.created_date <> tmpc.created_date

		SET @step = 2.3
		SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Insert @TMPActiveClients'
		IF @DebugMe='Y' PRINT @status_text
		INSERT INTO @TMPActiveClients
			SELECT fac_id, client_id FROM @TMPActiveClientsDetail

	  END
	  ELSE
	  BEGIN
		INSERT INTO @TMPActiveClients
		  SELECT
			client.fac_id,
			client.client_id
		  FROM
			dbo.CLIENTS client WITH (NOLOCK)
		  WHERE client.client_id = @client_id_local
	  END




        SET @step = 4
        SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Insert Phys Orders'
        IF @DebugMe='Y' PRINT @status_text

        --insert order information
        insert into #tmpPhysOrder
        select
        ppo.phys_order_id
        ,case when pponew.phys_order_id is not null and pos.phys_order_id is not null then pos.order_type_id else ppo.order_type_id end as order_type_id
        ,ppo.fac_id
        ,case when pponew.phys_order_id is not null then pos.std_freq_id else ppo.std_freq_id end as std_freq_id
        ,ppo.client_id
        ,ppo.date_ordered
        ,case when pponew.phys_order_id is not null then pos.schedule_start_date else ppo.start_date end as start_date
        ,case when pponew.phys_order_id is not null then pos.schedule_end_date else ppo.end_date end as end_date
        ,ppo.form
        ,ppo.route_of_admin
        ,pos.need_location_of_admin
        ,ppo.description
        ,case
        when (ppo.phys_order_id is not null and ppo.order_category_id=3031 ) then
            case
            when pponew.phys_order_id is not null then
                pos.additional_directions +
                case
                    when pos.indications_for_use IS NULL OR pos.indications_for_use = '' then ''
                    else ' for ' + pos.indications_for_use
                end +
                case
                    when pos.related_diagnosis IS NULL OR pos.related_diagnosis = '' then ''
                    else ' related to ' + pos.related_diagnosis
                end +
                case
                    when pos.schedule_end_date_type_id = 2 then ' until ' + convert(varchar(30), pos.schedule_end_date, 100)
                    else ' '
                end
            else ppo.directions
            end
        when (pponew.phys_order_id is not null and isnull(pos.schedule_directions,'') <> '' ) then pos.schedule_directions
        when (pponew.phys_order_id is null and ppo.order_category_id=3022 ) then ppo.legacy_directions
        else ppo.directions
        end as directions
        ,ppo.related_generic
        ,ppo.directions
        ,ppo.discontinued_date
        ,ppo.diet_supplement
        ,ppo.hold_date
        ,ppo.nurse_admin_notes
        ,case when pponew.phys_order_id is not null then CASE WHEN pos.administered_by_id > 1 THEN 1 ELSE 0 END else ppo.self_admin end as self_admin
        ,pos.administered_by_id
        ,case when pponew.phys_order_id is not null then pos.schedule_end_date_type_id else ppo.end_date_type end as end_date_type
        ,ppo.controlled_substance_code
        ,ppo.hold_date_end
        ,ppo.order_date
        ,isnull(pos.sliding_scale_id, ppo.sliding_scale_id) as sliding_scale_id
        ,ppo.order_verified
        ,ppo.dispense_as_written
        ,ppo.order_category_id
		    ,ppo.origin_id
        ,ppo.drug_name
        ,pponew.phys_order_id as new_phys_order_id
        ,case when pponew.phys_order_id is not null then 'Y' else 'N' end as is_new_order
        ,pos.order_schedule_id
        from pho_phys_order ppo
        inner join @TMPActiveClients clients ON clients.client_id=ppo.client_id and ppo.order_category_id <> 3030 -- exclude the admin orders
        LEFT JOIN dbo.pho_phys_order_new_entry pponew ON pponew.phys_order_id=ppo.phys_order_id
        INNER JOIN pho_order_schedule pos ON pos.phys_order_id = ppo.phys_order_id and ppo.draft = 0 and ppo.active_flag='Y'
		where ppo.order_class_id=1 and ppo.fac_id = @fac_id_local

      SET @step = 5
      SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Insert View Order Schedule info'
      IF @DebugMe='Y' PRINT @status_text

      --insert schedule information
        insert into #tmpViewOrderSchedule
        select  s.schedule_id
        ,s.std_shift_id
        ,s.start_time
		,s.end_time
        ,os.schedule_type
        ,os.dose_value as dose
        ,os.dose_low as doseLow
        ,os.alternate_dose_value as alternate_dose
        ,os.sliding_scale_id  as schedule_sliding_scale_id
        ,os.apply_remove_flag
        ,os.pho_std_time_id
        ,s.nurse_action_notes
        ,s.pain_scale_schedule_type_id
        ,os.order_schedule_id
        ,prn_admin
        ,prn_admin_value
        ,prn_admin_units
        ,until_finished
        ,dose_uom_id
        ,quantity_uom_id
        ,s.behavior_lookback
        from #tmpPhysOrder n
        inner join pho_order_schedule os on  n.order_schedule_id = os.order_schedule_id and n.new_phys_order_id = os.phys_order_id AND n.new_phys_order_id is not null
        INNER JOIN pho_schedule s on s.order_schedule_id = os.order_schedule_id
        WHERE
             (os.schedule_type=8 OR n.discontinued_date IS NULL OR @dc_cutoff_date < n.discontinued_date )
             and (os.schedule_type=8 OR os.apply_remove_flag=1 OR (n.end_date is null or n.end_date >= @shift_start_local) or ((os.until_finished='Y' or (n.is_new_order = 'N' and n.end_date_type = 4)) and n.end_date < @shift_start_local) )
             and ((n.start_date <= @shift_end_local_plusOneDay and os.schedule_type<>8) or (n.start_date < @shift_end_local)) --add 1 day for non PRN items to the shift end due to the fact that users can change schedule start time (up to 24 hours) after documenting
             and os.deleted = 'N'

        UNION
        select  s.schedule_id
        ,s.std_shift_id
        ,s.start_time
		,s.end_time
        ,s.schedule_type
        ,s.dose
        ,os.dose_low as doseLow
        ,s.alternate_dose
        ,os.sliding_scale_id  as schedule_sliding_scale_id
        ,os.apply_remove_flag
        ,s.pho_std_time_id
        ,s.nurse_action_notes
        ,s.pain_scale_schedule_type_id
        ,os.order_schedule_id
        ,prn_admin
        ,prn_admin_value
        ,prn_admin_units
        ,until_finished
        ,dose_uom_id
        ,quantity_uom_id
        ,s.behavior_lookback
        from #tmpPhysOrder n
        inner join pho_order_schedule os on  n.order_schedule_id = os.order_schedule_id and n.phys_order_id = os.phys_order_id AND n.new_phys_order_id is null
        INNER JOIN pho_schedule s on s.order_schedule_id = os.order_schedule_id
        WHERE
             (s.schedule_type=8 OR n.discontinued_date IS NULL OR @dc_cutoff_date < n.discontinued_date )
             and (s.schedule_type=8 OR (n.end_date is null or n.end_date >= @shift_start_local) or ((os.until_finished='Y' or (n.is_new_order = 'N' and n.end_date_type = 4)) and n.end_date < @shift_start_local) )
             and ((n.start_date <= @shift_end_local_plusOneDay and s.schedule_type<>8) or (n.start_date < @shift_end_local)) --add 1 day for non PRN items to the shift end due to the fact that users can change schedule start time (up to 24 hours) after documenting
             and s.deleted = 'N'

      SET @step = 6
      SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Insert final order schedules information'
      IF @DebugMe='Y' PRINT @status_text

      INSERT INTO @order_sched_info
      select
        tmpActClients.fac_id fac_id,
        isnull(st.std_time_type_id, 1) as std_time_type_id, -- 1 indicates specific time type of time code
        st.time_code,
		shift.std_shift_id as std_shift_id,
		shift.description,
        ss.schedule_id,
        o.self_admin,
        ss.schedule_type,
        tmpActClients.client_id,
        case
          when ss.schedule_type=8 then 'PRN'
          when ss.schedule_type=9 then 'Complex'
          when ss.schedule_type=24 then 'One Time Only'
          when ss.schedule_type=26 then 'STAT'
          when shift.std_shift_id>0 then shift.description
          else ss.start_time
        end as start_time,
        ss.start_time as actual_start_time,
		ss.end_time,
        o.phys_order_id,
        o.description,
        o.directions,
        o.order_directions,
        o.hold_date,
        o.hold_date_end,
        o.discontinued_date,
        o.date_ordered,
        o.order_verified,
        isnull(o.sliding_scale_id, ss.schedule_sliding_scale_id),
        ss.nurse_action_notes,
        case
        when ( len(o.controlled_substance_code)=1 and convert(int,o.controlled_substance_code)>=2 and convert(int,o.controlled_substance_code)<=6 ) then o.controlled_substance_code
        when convert(int,o.controlled_substance_code)=99 and @isCDN = 1 then o.controlled_substance_code
        else null
        end,
        o.route_of_admin,
        o.need_location_of_admin,
        o.related_generic,
        o.is_new_order,
        o.diet_supplement,
        o.form,
        o.order_category_id,
		o.order_origin_id,
        o.dispense_as_written,
        o.administered_by_id,
        o.start_date,
        ss.until_finished,
        ss.prn_admin_value,
        ss.prn_admin_units,
        CASE WHEN ss.quantity_uom_id is null
			then ss.dose_uom_id
		else
			ss.quantity_uom_id END as uomId,
        ss.dose,
        ss.doseLow,
        o.order_date,
        o.end_date,
        o.order_schedule_id,
        ss.alternate_dose,
        o.end_date_type,
        ss.apply_remove_flag,
        null advanced_srch_sort,
        o.drug_name,
        o.nurse_admin_notes,
        o.new_phys_order_id,
        1,
        0,		 --requires second signature

		ot.administration_record_id,
		ss.behavior_lookback
      from
        @TMPActiveClients tmpActClients
        inner join #tmpPhysOrder as o on tmpActClients.client_id = o.client_id
		inner join #tmpViewOrderSchedule as ss on ss.order_schedule_id = o.order_schedule_id
        INNER JOIN dbo.pho_order_type ot WITH (NOLOCK) ON o.order_type_id=ot.order_type_id and ot.administration_record_id IN (SELECT admin_record_id FROM @adminRecordIds)
        LEFT OUTER JOIN dbo.cp_std_shift shift WITH (NOLOCK) ON shift.std_shift_id = ss.std_shift_id
        LEFT OUTER JOIN dbo.pho_std_time st WITH (NOLOCK) ON ss.pho_std_time_id=st.pho_std_time_id

	--delete old PRN orders
	delete osi
	from @order_sched_info osi
	left join pho_schedule_details_pending_followup fp on fp.schedule_id = osi.schedule_id
	where
		fp.schedule_id IS NULL and osi.schedule_type=8
		and ((osi.discontinued_date IS NOT NULL and osi.discontinued_date < @dc_cutoff_date)
		OR(osi.order_end_date is NOT NULL and osi.order_end_date < @shift_start_local))


  --Only do the work to fill second signature if the feature is on.
  IF @secondSignatureEnabled = 'Y'
  BEGIN
    update osi
    set osi.requires_second_signature = 1
    from @order_sched_info  osi
      inner join pho_phys_order_require_witness orw on orw.phys_order_id = osi.phys_order_id
  END


---------------------------------------------------------------- </REPLACEMENT OF sproc_pho_getOrderScheduleInfo> --------------------------------------

	----------------------------------------------
	-- Apply advanced filters (@order_sched_info)
	----------------------------------------------
	IF @GET_ADVANCED = @GET_ADVANCED & @filterMode
	BEGIN -- todo in this case isn't it better to always do inner join and change the logic of matches_filter
		IF ( len(@filteringVitals) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.01 '+ ' ' + convert(varchar(26),getdate(),109) end
--			DECLARE @filteredVitalSchedId TABLE ( order_schedule_id int )
			CREATE TABLE #filteredVitalSchedId ( order_schedule_id int )
			INSERT INTO #filteredVitalSchedId
				SELECT osi.schedule_id
				FROM @order_sched_info osi
				INNER JOIN pho_schedule_vitals psv ON psv.schedule_id = osi.schedule_id
				INNER JOIN #filterVital vtl ON vtl.std_vitals_id = psv.vital
				WHERE psv.deleted = 'N'
		END

		IF ( len(@filteringPrompts) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.02 '+ ' ' + convert(varchar(26),getdate(),109) end
--			DECLARE @filteredPromptSchedId TABLE ( order_schedule_id int )
			CREATE TABLE #filteredPromptSchedId ( order_schedule_id int )
			INSERT INTO #filteredPromptSchedId
				SELECT osi.schedule_id
				FROM @order_sched_info osi
				INNER JOIN pho_order_related_prompt orp ON orp.schedule_id = osi.schedule_id
				INNER JOIN #filterPrompt fp ON fp.std_vitals_id = orp.value_type AND fp.no_of_values=orp.no_of_values
				WHERE orp.value_type<>15 AND orp.deleted = 'N'
		END
		IF ( len(@filteringVitals) >0 ) AND ( len(@filteringPrompts) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.10 '+ ' ' + convert(varchar(26),getdate(),109) end
			UPDATE osi SET matches_filter = 0
			FROM @order_sched_info osi
			LEFT JOIN #filteredVitalSchedId vsi ON vsi.order_schedule_id = osi.schedule_id
			LEFT JOIN #filteredPromptSchedId psi ON psi.order_schedule_id = osi.schedule_id
			WHERE vsi.order_schedule_id IS NULL AND psi.order_schedule_id IS NULL
		END

		ELSE IF ( len(@filteringVitals) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.11 '+ ' ' + convert(varchar(26),getdate(),109) end
			UPDATE osi SET matches_filter = 0
			FROM @order_sched_info osi
			LEFT JOIN #filteredVitalSchedId vsi ON vsi.order_schedule_id = osi.schedule_id
			WHERE vsi.order_schedule_id IS NULL
		END

		ELSE IF ( len(@filteringPrompts) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.13 '+ ' ' + convert(varchar(26),getdate(),109) end
			UPDATE osi SET matches_filter = 0
			FROM @order_sched_info osi
			LEFT JOIN #filteredPromptSchedId psi ON psi.order_schedule_id = osi.schedule_id
			WHERE psi.order_schedule_id IS NULL
		END

		IF ( len(@filteringOrderCategories) >0 )
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 02.14 '+ ' ' + convert(varchar(26),getdate(),109) end
			UPDATE osi SET matches_filter = 0
			FROM @order_sched_info osi
			LEFT JOIN #filterOrderCategory oc ON oc.order_category_id = osi.order_category_id
			WHERE oc.order_category_id IS NULL
		END


	END

	if @DebugMe='Y' BEGIN Print 'Step 03 '+ ' ' + convert(varchar(26),getdate(),109) end
	-- now get the details

	declare @detail_temp table
	(
		schedule_id               int,
		schedule_date             datetime,
		perform_date              datetime,
		schedule_date_end         datetime,
		pho_schedule_detail_id    bigint,
		chart_code                varchar(31),
		followup_result           char(1),
		progress_note_id          int,
		effective_date            datetime,
		created_date              datetime,
		dose                      varchar(31),
		detail_status             tinyint,
		reminder_status           tinyint,
		reminder_id               int,
		reminder_created_by       varchar(60),  -- add these five columns to bring reminder info to front end
		reminder_created_by_long  varchar(50),
		reminder_created_date     datetime,
		reminder_effective_date   datetime,
		reminder_ineffective_date datetime,
		order_status              tinyint default(1),
		order_relationship        tinyint,
		order_status_reason       varchar(50),
		matches_filter            bit DEFAULT(1),
		dc_order               bit DEFAULT(0)
	)

	insert into @detail_temp
	select
		d.pho_schedule_id,
		d.schedule_date,
		d.perform_date,
		d.schedule_date_end,
		d.pho_schedule_detail_id,
		d.chart_code,
		d.followup_result,
		null as progress_notes_id,
		d.effective_date,
		d.created_date,
		d.dose,
		case
			when h.administered_by_id is null and osi.administered_by_id=3 and osi.self_admin=1 and schedule_type=8 and perform_date is not null and followup_result is null and (chart_code='0' or chart_code='OBI') then @inprogressStatus
			when h.administered_by_id is null and schedule_type=8 and perform_date is not null and followup_result is not null and osi.administered_by_id=3 and osi.self_admin=1 then @scheduledStatus --sss
			when h.administered_by_id is null and osi.administered_by_id=3 and osi.self_admin=1 then @completeStatus --documented, green
			when h.administered_by_id=3 and schedule_type=8 and perform_date is not null and followup_result is null and (chart_code='0' or chart_code='OBI') then @inprogressStatus
			when h.administered_by_id=3 and schedule_type=8 and perform_date is not null and followup_result is not null  then @scheduledStatus --sss
			when h.administered_by_id=3  then @completeStatus --documented, green
			--this is handled below. when osi.order_status <> 1 then @scheduledStatus --if there is any order status, H,DC,Pending then should be white.
			when schedule_type=8 and perform_date is not null and followup_result is null and (chart_code='0' or chart_code='OBI'  or followup.schedule_detail_id is not null) then @inprogressStatus --for PRN if the follow up hasn't been completed, then it's inprogress until they complete the follow up.
			when schedule_type=8 and perform_date is not null and followup_result is not null then @completeStatus
			when schedule_type=8 and chart_code <> '0' then @completeStatus
			when perform_date is not null then @completeStatus --documented, green
			when schedule_date < @overDueGracePeriod and schedule_date_end is null then @overdueStatus --overdue, red
			when schedule_date_end < @overDueGracePeriod then @overdueStatus --overdue, red
			when schedule_date < @dueSoonTime then @inprogressStatus --inprogress, yellow
			else @scheduledStatus --schedules.  white
		end
		as detail_status,
		case
			when r.reminder_id is null then null
			when r.effective_date < @actualNowTime then @overdueStatus --overdue, red
			when r.effective_date < @dueSoonTime then @inprogressStatus --inprogress, yellow
			else @scheduledStatus --schedules.  white
		end  as reminder_status,
		r.reminder_id,
		r.created_by,
		r.reminder_created_by_long  as reminder_created_by_long,
		r.created_date,
		r.effective_date,
		r.ineffective_date,
		null order_status,
		null order_relationship,
		null order_status_reason,
		osi.matches_filter,
		0 as dc_order
	from
		@order_sched_info osi
		INNER JOIN dbo.pho_schedule_details d WITH (NOLOCK)
			ON d.pho_schedule_id=osi.schedule_id
		LEFT JOIN dbo.pho_schedule_details_reminder_view r WITH (NOLOCK)
			ON d.pho_schedule_detail_id = r.pho_schedule_detail_id
		LEFT JOIN pho_schedule_details_pending_followup followup
			ON followup.schedule_detail_id=d.pho_schedule_detail_id
		LEFT JOIN pho_order_schedule_self_admin_history h ON h.order_schedule_id = osi.order_schedule_id and d.schedule_date >= h.effective_date and d.schedule_date < h.ineffective_date

	where
		d.deleted = 'N' and r.cleared_date is null
		and
		(
			(
				--all specific shift, specific time, duration details.
				d.schedule_date	<=	@shift_end_local --scheduled & duration
				and isnull(osi.std_shift_id,@std_shift_id_local) = @std_shift_id_local
				and isnull(d.schedule_date_end, d.schedule_date )	>=	@shift_start_local --scheduled & duration
			)
			or
			(
				--this deals with reminder effective date
				r.reminder_id is not null
				and ( (r.effective_date < @shift_end_local and r.effective_date >= @shift_start_local) or
					  (r.effective_date >= @shift_end_local and isnull(d.schedule_date_end, d.schedule_date ) < @shift_start_local) )
			)
			or
			(--this deals with overlapping shifts.
				osi.std_shift_id is not null
				and osi.std_shift_id <> @std_shift_id_local
				and d.schedule_date	<	@shift_end_local
				and isnull(d.schedule_date_end, d.schedule_date )	>	@shift_start_local
			)
			or
			(--this deals with shifts that are 1500-1500
				osi.std_shift_id is not null
				and osi.std_shift_id <> @std_shift_id_local
				and d.schedule_date = d.schedule_date_end
				and d.schedule_date	<	@shift_end_local
				and isnull(d.schedule_date_end, d.schedule_date )	>=	@shift_start_local
			)
		)

	--need to deal with discontinued orders
	IF @discontinueLingerPeriod > 0
	BEGIN
		insert into @detail_temp
		select --'insert into @detail_temp DC linger', osi.schedule_id,d.pho_schedule_detail_id,d.schedule_date,d.schedule_date_end,osi.discontinued_date,osi.*,
			d.pho_schedule_id,
			d.schedule_date,
			d.perform_date,
			d.schedule_date_end,
			d.pho_schedule_detail_id,
			d.chart_code,
			d.followup_result,
			null as progress_notes_id,
			d.effective_date,
			d.created_date,
			d.dose,
			case
				when h.administered_by_id is null and osi.administered_by_id=3 and osi.self_admin=1 and schedule_type=8 and perform_date is not null and followup_result is null and chart_code='0' then @inprogressStatus
				when h.administered_by_id is null and schedule_type=8 and perform_date is not null and followup_result is not null and osi.administered_by_id=3 and osi.self_admin=1 then @scheduledStatus --sss
				when h.administered_by_id is null and osi.administered_by_id=3 and osi.self_admin=1 then @completeStatus --documented, green
				when h.administered_by_id=3 and schedule_type=8 and perform_date is not null and followup_result is null and chart_code='0' then @inprogressStatus
				when h.administered_by_id=3 and schedule_type=8 and perform_date is not null and followup_result is not null  then @scheduledStatus --sss
				when h.administered_by_id=3  then @completeStatus --documented, green
				--this is handled below. when osi.order_status <> 1 then @scheduledStatus --if there is any order status, H,DC,Pending then should be white.
				when schedule_type=8 and d.perform_date is not null and d.followup_result is null and (d.chart_code='0' or followup.schedule_detail_id is not null) then @inprogressStatus --for PRN if the follow up hasn't been completed, then it's inprogress until they complete the follow up.
				when schedule_type=8 and d.perform_date is not null and d.followup_result is not null then @completeStatus
				when schedule_type=8 and d.chart_code <> '0' then @completeStatus
				when d.perform_date is not null then @completeStatus --documented, green
				when d.schedule_date < @overDueGracePeriod and d.schedule_date_end is null then @overdueStatus --overdue, red
				when d.schedule_date_end < @overDueGracePeriod then @overdueStatus --overdue, red
				when d.schedule_date < @dueSoonTime then @inprogressStatus --inprogress, yellow
				else @scheduledStatus --schedules.  white
			end
			as detail_status,
			case
				when r.reminder_id is null then null
				when r.effective_date < @actualNowTime then @overdueStatus --overdue, red
				when r.effective_date < @dueSoonTime then @inprogressStatus --inprogress, yellow
				else @scheduledStatus --schedules.  white
			end  as reminder_status,
			r.reminder_id,
			r.created_by,
			r.reminder_created_by_long  as reminder_created_by_long,
			r.created_date,
			r.effective_date,
			r.ineffective_date,
			2 order_status,
			null order_relationship,
			null order_status_reason,
			osi.matches_filter,
			1 as dc_order
		from
			@order_sched_info osi
			INNER JOIN dbo.pho_schedule_details d WITH (NOLOCK)
				ON d.pho_schedule_id=osi.schedule_id
			LEFT JOIN dbo.pho_schedule_details_reminder_view r WITH (NOLOCK)
				ON d.pho_schedule_detail_id = r.pho_schedule_detail_id
			LEFT JOIN pho_schedule_details_pending_followup followup
				ON followup.schedule_detail_id=d.pho_schedule_detail_id
			LEFT JOIN pho_order_schedule_self_admin_history h ON h.order_schedule_id = osi.order_schedule_id and d.schedule_date >= h.effective_date and d.schedule_date < h.ineffective_date
		WHERE
			d.deleted = 'Y'
			AND osi.discontinued_date > @dc_cutoff_date
			AND
			(
				(
					--all specific shift, specific time, duration details.
					d.schedule_date	<= @shift_end_local --scheduled & duration
					and isnull(osi.std_shift_id,@std_shift_id_local) = @std_shift_id_local
					and isnull(d.schedule_date_end, d.schedule_date ) >= @shift_start_local --scheduled & duration
				)
				or
				(--this deals with overlapping shifts.
					osi.std_shift_id is not null
					and osi.std_shift_id <> @std_shift_id_local
					and d.schedule_date	< @shift_end_local
					and isnull(d.schedule_date_end, d.schedule_date ) > @shift_start_local
				)
			)
		--delete potential duplicates in pho_schedule_details when striking out a DC order creates new records
		delete tmpdt
        from @detail_temp tmpdt
        inner join
        (
            select schedule_id, max(created_date) as created_date
            from @detail_temp
            group by schedule_id
        )as data on data.schedule_id = tmpdt.schedule_id and data.created_date <> tmpdt.created_date
		where tmpdt.dc_order = 1
	END

	--need to deal with prn that have details and require follow up
	insert into @detail_temp
	select
		osi.schedule_id,
		null as schedule_date,
		null as perform_date,
		null as schedule_date_end,
		f.schedule_detail_id as pho_schedule_detail_id,
		'0' as chart_code,
		null as followup_result,
		null as progress_notes_id,
		sd.effective_date,
		sd.created_date,
		osi.dose_value as dose,
		@inprogressStatus as detail_status,
		null as reminder_status,
		null as reminder_id,
		null as reminder_created_by,
		null as reminder_created_by_long,
		null as reminder_created_date,
		NULL as reminder_effective_date,
		NULL as reminder_ineffective_date,
		null order_status,
		null order_relationship,
		null order_status_reason,
		osi.matches_filter,
		CASE
			WHEN osi.discontinued_date is not null and osi.discontinued_date < @shift_end_local  then 1
			else 0
		END
		 AS dc_order

	from
		@order_sched_info osi
		inner join dbo.pho_schedule_details_pending_followup f WITH (NOLOCK) on osi.schedule_id = f.schedule_id
		inner join dbo.pho_schedule_details sd WITH (NOLOCK) on sd.pho_schedule_detail_id=f.schedule_detail_id
		left join @detail_temp t on f.schedule_detail_id = t.pho_schedule_detail_id
		where osi.schedule_type = 8 and t.pho_schedule_detail_id is null


	if @DebugMe='Y' BEGIN Print 'Step 03.1 '+ ' ' + convert(varchar(26),getdate(),109) end
	--need to deal with complex that don't have details.
	insert into @detail_temp
	select
		osi.schedule_id,
		null as schedule_date,
		null as perform_date,
		null as schedule_date_end,
		null as pho_schedule_detail_id,
		null as chart_code,
		null as followup_result,
		null as progress_notes_id,
		null as effective_date,
		null as created_date,
		null as dose,
		@scheduledStatus as detail_status,
		null as reminder_status,
		null as reminder_id,
		null as reminder_created_by,
		null as reminder_created_by_long,
		null as reminder_created_date,
		NULL as reminder_effective_date,
		NULL as reminder_ineffective_date,
		null order_status,
		null order_relationship,
		null order_status_reason,
		osi.matches_filter,
		CASE
			WHEN osi.discontinued_date is not null and osi.discontinued_date < @shift_end_local  then 1
			else 0
		END
		AS dc_order
	from
		@order_sched_info osi
		left join @detail_temp d on osi.schedule_id = d.schedule_id
	where
		d.schedule_id is null and osi.schedule_type in (8,9)


	if @DebugMe='Y' BEGIN Print 'Step 03.4 '+ ' ' + convert(varchar(26),getdate(),109) end
	--deal with order status for each schedule date.
	declare @status table
	(
		Original_phys_order_id	integer,
		order_relationship_id	integer,
		relationship			varchar(20),
		effective_date			datetime,
		ineffective_date		datetime,
		row_num					integer,
		phys_order_id			integer,
		order_verified			varchar(1)
	)

	insert into @status
	Select
		pro.related_phys_order_id Original_phys_order_id
		, pro.order_relationship_id
		, Case pro.order_relationship_id
			when 1 then 'hold'
			when 2 then 'resume'
			when 3 then 'discontinue'
			else 'unknown'
		end as relationship
		, pao.effective_date
		, pao.ineffective_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date ) as row_num
		, pao.phys_order_id
		, po.order_verified
	from
		@order_sched_info osi
			inner join dbo.pho_related_order  pro with (nolock ) on pro.related_phys_order_id = osi.phys_order_id
			inner Join dbo.pho_admin_order pao  with (nolock ) on pro.phys_order_id = pao.phys_order_id
			inner JOIN 	pho_phys_order po on pro.phys_order_id=po.phys_order_id
	where
		pro.deleted='N'
		and pao.deleted='N'
		and pro.fac_id = @fac_id_local
		and pao.exclude_eom_status_calculation=0


	;with tb2 as
	(
	select tb1.Original_phys_order_id
		, tb1.order_relationship_id
		,tb1. relationship
		, tb1.effective_date
		, tb1.ineffective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then isnull(nextrow.effective_date,'9999-12-31') else isnull(tb1.ineffective_date,'9999-12-31') end as exact_ineffective_date
		, tb1.row_num
		, tb1.order_verified
	from @status as tb1
	left outer join @status as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1

	)
	update d
		set detail_status =
			case
				when schedule_type = 8 and detail_status = @inprogressStatus then --Keep PRN's in progress even if order D/c or on HOLD
					@inprogressStatus
				when isnull(tb2.order_verified,'Y')='N' or isnull(osi.order_verified,'Y')='N' or order_relationship_id not in (2, 7, 8) then
					@scheduledStatus
				else
					detail_status
			end,
		order_status =
				case
					WHEN esign.phys_order_id IS NOT NULL then 11
					when isnull(tb2.order_verified,'Y')='N' or isnull(osi.order_verified,'Y')='N' then 8 --pending
					when osi.order_verified='Y' AND cr.phys_order_id is NOT NULL then 9 -- PCC-60804 pending clinical review
					when order_relationship_id = 1 then 5 --on hold
					when order_relationship_id = 3 then 2 --discontinued
					else 1 --active
				end,
		order_relationship = order_relationship_id,
		order_status_reason =
			case
				when ((isnull(tb2.order_verified,'Y')='N' or isnull(osi.order_verified,'Y')='N') )
				then
					case
						when (relationship = 'hold') then -1
						when (relationship = 'resume') then -2
						when (relationship = 'discontinue') then -3
						--when (osi.order_category_id = 3022 and (osi.date_of_birth is null or osi.sex is null) ) then 'Missing_DOB_Or_Gender'
						when  osi.order_category_id = 3022 and posp.reason_binary_code is not null then posp.reason_binary_code
						else null
					end
				else null
			end
	from
		@order_sched_info osi
		inner join @detail_temp d on osi.schedule_id = d.schedule_id -- FIX if we are going to update d why it is an outer join?
		LEFT JOIN pho_order_pending_reason posp ON posp.phys_order_id = osi.phys_order_id
		left join  tb2 on osi.phys_order_id=tb2.Original_phys_order_id
		left join pho_order_clinical_review cr on osi.phys_order_id=cr.phys_order_id AND cr.reviewed_date is NULL -- PCC-60804 check for pending clinical reviews
		LEFT JOIN pho_phys_order_esignature esign ON esign.phys_order_id=osi.phys_order_id AND esign.sign_contact_id IS NULL
	where
		(
				(d.schedule_date between tb2.effective_date and tb2.exact_ineffective_date and schedule_date_end is null)  --specific times need to be within a range.
				or isnull(osi.order_verified,'Y')='N'
				OR (isnull(tb2.order_verified,'Y')='N' AND d.schedule_date between tb2.effective_date and tb2.exact_ineffective_date)  --order is pending.PCC-29075 added check for admin order verified
				or ( schedule_type in (8,9) and @now between tb2.effective_date and tb2.exact_ineffective_date) --prn and complex, what was it like at current time or end of previous shift, or start of future shift.
				or ( schedule_date_end is not null and @now between tb2.effective_date and tb2.exact_ineffective_date ) --daterange details.
				or ( schedule_date_end is not null and d.schedule_date >= tb2.effective_date and schedule_date_end <= tb2.exact_ineffective_date) -- daterange inside hold range
				or (
						--deal with legacy data.  If there is no admin order but we have a hold date in the order.
						order_relationship_id is null
						and osi.hold_date is not null
						and
						(
							d.schedule_date between osi.hold_date and isnull(osi.hold_date_end,'9999-09-09' )--specific times need to be within a range.
							or ( schedule_type in (8,9) and @now between osi.hold_date and isnull(osi.hold_date_end,'9999-09-09') ) --prn and complex, what was it like at current time or end of previous shift, or start of future shift.
							or ( schedule_date_end is not null and @now between osi.hold_date and isnull(osi.hold_date_end,'9999-09-09') ) --daterange details.
						)
					)
				OR cr.phys_order_id is NOT NULL	-- take pending clinical review items as well
				OR esign.phys_order_id IS NOT NULL

		)

	update @detail_temp set detail_status = null
		where schedule_date > @shift_end_local or isnull(schedule_date_end, schedule_date) < @shift_start_local

	update @detail_temp set order_status = 2
		where dc_order = 1  and order_status is null

	BEGIN
--		declare @medDetails table
		CREATE TABLE #medDetails
		(
			detail_status					tinyint,
			fac_id							int,
			std_time_type_id				int,
			time_code						varchar(32),
			std_shift_id					int,
			std_shift_description			varchar(15),
			schedule_id						int,
			self_admin						int,
			schedule_type					int,
			client_id						int,
			start_time						varchar(15),
			actual_end_time					varchar(15),
			phys_order_id					int,
			description						varchar(500),
			directions						varchar(2000),
			order_directions				varchar(2000),
			hold_date						datetime,
			hold_date_end					datetime,
			discontinued_date				datetime,
			date_ordered					datetime,
			order_verified					varchar(1),
			sliding_scale_id				int,
			nurse_admin_notes				varchar(512),
			nurse_action_notes				varchar(512),
			controlled_substance_code		varchar(50),
			route_of_admin					int,
			need_location_of_admin		    char(1),
			related_generic					varchar(250),
			is_new_order					varchar(1),
			form							varchar(50),
			order_category_id				int,
			order_origin_id					int,
			dispense_as_written				varchar(1),
			administered_by_id 				int,
			start_date						datetime,
			until_finished					char,
			prn_admin_value					int,
			prn_admin_units					char(1),
			dose_uom_id						int,
			dose_value						varchar(31),
			order_date						datetime,
			schedule_date					datetime,
			perform_date					datetime,
			schedule_date_end				datetime,
			pho_schedule_detail_id			bigint,
			chart_code						varchar(31),
			followup_result					char(1),
			progress_note_id				int,
			effective_date					datetime,
			created_date					datetime,
			dose							varchar(31),
			doseLow varchar(31),
			reminder_status					tinyint,
			reminder_id						int,
			reminder_created_by				varchar(60),
			reminder_created_by_long        varchar(60),
			reminder_created_date  			datetime,
			reminder_effective_date			datetime,
			reminder_ineffective_date		datetime,
			order_status					tinyint,
			order_relationship				tinyint,
			order_status_reason				varchar(50),
			order_schedule_id               int,
			alternate_dose_value            varchar(31),
			end_date_type                   int,
			std_vital_ids					varchar(50),
			supply_directions				varchar(1000),
			supply_description				varchar(500),
			order_supply_id					int,
			supply_status					int,
			supply_status_level_4			int,
			pharm_nurse_notes				varchar(2000),
			disp_package_identifier 		varchar(50),
			prescription                    VARCHAR(50),
            vendor_phys_order_id            VARCHAR(30),
			supplement_description			varchar(500),
			sort_by							tinyint,
			last_scheduled_dose				datetime,
			order_next_admin_date			datetime,
			order_last_admin_date			datetime,
			drug_allergy                    char,
			apply_remove_flag               int,
			has_black_box					tinyint,
			drug_interaction                char,
			actual_start_time				varchar(15),
			has_dose_check					tinyint,
			no_dp_check int,
			matches_filter bit,
			controlled_substance_code_new   varchar(50),
			requires_second_signature		bit,
			drugname						varchar(500),
			last_24h_dose					double precision,
			last_24h_dose_routine			double precision,
			drugProductIdentifier			int,
			admin_record_id int,
			behavior_lookback bit,
			device_id int
		)
		IF(@administration_task_list <> 1)
			BEGIN

	--		declare @supplyData table
			CREATE TABLE #supplyData
			(
				supply_directions		varchar(1000),
				supply_description		varchar(500),
				order_supply_id			int,
				status					int,
				med_src_type_id			int,
				pharmacy_id				int,
				phys_order_id			int,
				pharm_nurse_notes		varchar(2000),
				disp_package_identifier varchar(50),
                prescription            VARCHAR(50),
                vendor_phys_order_id    VARCHAR(30)
			)

	--		declare @orderSupplies table
			CREATE TABLE #orderSupplies
			(
				phys_order_id				int,
				total_supplies				int,
				total_supply_status_4		int,
				total_diff_source_status_4	int,
				directions					varchar(1000),
				description					varchar(500),
				order_supply_id				int,
				status						int,
				pharm_nurse_notes			varchar(2000),
				disp_package_identifier 	varchar(50),
                prescription                VARCHAR(50),
                vendor_phys_order_id        VARCHAR(30)
			)

			-- Table variable to record last dose for duration / until finished orders
	--		DECLARE @last_dose TABLE
			CREATE TABLE #last_dose
			(
				phys_order_id int,
				last_scheduled_dose datetime
			)

			-- Table variable to record last administration date for PRN orders with a frequency

	--		DECLARE @med_last_admin_date_max TABLE
			CREATE TABLE #med_last_admin_date_max
			(
				phys_order_id int,
				max_admin_date datetime
			)

	--	    declare @doseCheckPhysOrders table
			CREATE TABLE #doseCheckPhysOrders
			(
				phys_order_id         int,
				order_schedule_id	  int,
				last_24h_dose         double precision,
				last_24h_dose_routine double precision
			)

			IF(@doseCheckEnabled='Y')
			BEGIN
				--			declare @last24h table
				CREATE TABLE #last24h
				(
					phys_order_id         int,
					last_24h_dose         double precision,
					last_24h_dose_routine double precision
				)

	--			declare @last24hDetails table
				CREATE TABLE #last24hDetails
				(
					phys_order_id int,
					dose double precision,
					dose_routine double precision
				)

	--			declare @last24hDetailsHistory table
				CREATE TABLE #last24hDetailsHistory
				(
					phys_order_id int,
					dose double precision,
					dose_routine double precision
				)

				declare @actualNowMinus24h datetime = dateadd(hh,-24,@actualNowTime);

				declare @doseCheckStep tinyint = 1;

				insert INTO #doseCheckPhysOrders
					select DISTINCT osi.phys_order_id,osi.order_schedule_id, 0, 0
					from @order_sched_info osi
					left join @detail_temp d on d.schedule_id = osi.schedule_id
					inner join pho_order_ext_lib_med_ref ref ON ref.phys_order_id = osi.phys_order_id and osi.new_phys_order_id is not null
					where (osi.schedule_type = 8 or osi.std_time_type_id = 2 or d.perform_date is not null)

				set @doseCheckStep = 2;
				insert into #last24hDetails
				select dck.phys_order_id,CASE when psd.chart_code='0' THEN convert(double precision,psd.dose) ELSE convert(double precision,psd.modified_quantity) END as dose
				,CASE
					WHEN pos.schedule_type = 8 OR pstt.std_time_type_id = 2 THEN 0
					ELSE CASE when psd.chart_code='0' THEN convert(double precision,psd.dose) ELSE convert(double precision,psd.modified_quantity) END
				 END as dose_routine
				from #doseCheckPhysOrders dck
				INNER JOIN dbo.pho_order_schedule pos ON pos.order_schedule_id=dck.order_schedule_id
				inner JOIN dbo.pho_schedule ps on ps.order_schedule_id=pos.order_schedule_id
				inner join pho_schedule_details psd on psd.pho_schedule_id=ps.schedule_id
				LEFT JOIN dbo.pho_std_time pst ON pst.pho_std_time_id = pos.pho_std_time_id
				LEFT JOIN dbo.pho_std_time_type pstt ON pstt.std_time_type_id = pst.std_time_type_id
				where psd.effective_date>@actualNowMinus24h AND psd.effective_date<=@actualNowTime and psd.perform_date is not null
				AND 1=(CASE WHEN psd.chart_code='0' THEN ISNUMERIC(psd.dose) ELSE ISNUMERIC(psd.modified_quantity) END)

				set @doseCheckStep = 3;
				insert into #last24hDetailsHistory
				select dck.phys_order_id,ch.modified_quantity as dose, ch.modified_quantity as dose_routine
				from #doseCheckPhysOrders dck
				inner join pho_schedule ps on ps.order_schedule_id=dck.order_schedule_id
				inner JOIN dbo.pho_chart_code_history ch ON ch.schedule_id=ps.schedule_id and ch.chart_code_change_source_id=2
				where ch.effective_date>@actualNowMinus24h AND ch.effective_date<=@actualNowTime and ch.perform_date is not null and ISNUMERIC(ch.modified_quantity)=1

				set @doseCheckStep = 4;
				insert into #last24h
				select phys_order_id,sum(dose), sum(dose_routine)
				from
					(
						SELECT phys_order_id,dose, dose_routine FROM #last24hDetails
								UNION ALL
								SELECT phys_order_id,dose, dose_routine FROM #last24hDetailsHistory
							  ) last24h
							group BY last24h.phys_order_id

				set @doseCheckStep = 5;
				update dck
				SET dck.last_24h_dose = l24.last_24h_dose, dck.last_24h_dose_routine = l24.last_24h_dose_routine
				from #doseCheckPhysOrders dck
				inner join #last24h l24 ON l24.phys_order_id=dck.phys_order_id
			END

			INSERT INTO #last_dose (phys_order_id, last_scheduled_dose)
			select osi.phys_order_id, max(schedule_date) as last_scheduled_dose
			from pho_schedule_details psd WITH (NOLOCK)
				inner join @order_sched_info osi on osi.schedule_id = psd.pho_schedule_id and osi.end_date_type <> 3 --FIX we only need last dose for duration orders
			where
				psd.deleted = 'N'
			group by osi.phys_order_id


			if @DebugMe='Y' BEGIN Print 'Step 13.1 '+ ' ' + convert(varchar(26),getdate(),109) end
			INSERT into #supplyData
			select
				supply.directions,
				supply.description,
				supply.order_supply_id,
				supply.status,
				med_src_type_id,
				pharmacy_id,
				supply.phys_order_id,
				supply.pharm_nurse_notes,
				supply.disp_package_identifier,
                supply.prescription,
                supply.vendor_phys_order_id
			from
				(
					select distinct(phys_order_id) from @order_sched_info
				) as osi
				inner join dbo.PHO_ORDER_SUPPLY supply with (nolock) on
					osi.phys_order_id = supply.phys_order_id
			where
				supply.active='Y'
				and isnull(supply.deleted,'N')='N'

			if @DebugMe='Y' BEGIN Print 'Step 13.2 '+ ' ' + convert(varchar(26),getdate(),109) end
			insert into #orderSupplies
			select
				total_supplies.phys_order_id,
				total_supplies.total_supplies,
				total_supply_status_4.total_supply_status_4,
				total_supply_status_4.total_diff_source_status_4,
				null,
				null,
				null,--order_supply_id
				case
					when total_supply_status_4.total_supply_status_4>0 then
						4
					else
						total_supplies.max_status
				end,	--status
				null,
				null,
                NULL,
                NULL
			from
			(
				select
					phys_order_id,
					count(*) as total_supplies,
					max(status) as max_status
				from
					#supplyData
				group by phys_order_id
			) as total_supplies
			left join
			(
				select
					phys_order_id,
					count(*) as total_supply_status_4,
					count(distinct convert(varchar(26),med_src_type_id,109)+'_'+convert(varchar(26),pharmacy_id,109)) as total_diff_source_status_4
				from
					#supplyData
				where
					status=4 or status=8
				group by phys_order_id
			) as total_supply_status_4 on total_supplies.phys_order_id = total_supply_status_4.phys_order_id


			if @DebugMe='Y' BEGIN Print 'Step 13.3 '+ ' ' + convert(varchar(26),getdate(),109) end
			update
				#orderSupplies
			set
				directions		= sd.supply_directions,
				description		= sd.supply_description,
				order_supply_id = sd.order_supply_id,
				status			= sd.status,
				pharm_nurse_notes = sd.pharm_nurse_notes,
				disp_package_identifier = sd.disp_package_identifier,
                prescription = sd.prescription,
                vendor_phys_order_id = sd.vendor_phys_order_id
			from
				#orderSupplies os
				inner join #supplyData  sd on os.phys_order_id = sd.phys_order_id
			where
				total_supplies = 1 or total_supply_status_4 = 1


			if @DebugMe='Y' BEGIN Print 'Step 13.4 '+ ' ' + convert(varchar(26),getdate(),109) end
			update
				#orderSupplies
			set
				directions		= sd.supply_directions,
				description		= sd.supply_description,
				pharm_nurse_notes = sd.pharm_nurse_notes,
				disp_package_identifier = sd.disp_package_identifier,
                prescription = sd.prescription,
                vendor_phys_order_id = sd.vendor_phys_order_id
			from
				#orderSupplies os
				inner join #supplyData  sd on os.phys_order_id = sd.phys_order_id
			where
				total_supplies > 1
				and isnull(os.total_diff_source_status_4,-1) > 1



			if @DebugMe='Y'
			BEGIN
				select '@orderSupplies',* from #orderSupplies
			END

			insert into #med_last_admin_date_max
			select osi.phys_order_id, ad.order_last_admin_Date
			from pho_order_last_Admin_details ad
			join (SELECT distinct phys_order_id from  @order_sched_info  WHERE schedule_type = 8)
			as osi ON osi.phys_order_id = ad.phys_order_id

		END -- end of if @administration_task_list <> 1 -- populate dose check info and supply info


		if @DebugMe='Y' BEGIN Print 'Step 13.4 '+ ' ' + convert(varchar(26),getdate(),109) end
		if (@administration_task_list = 1)
		begin
			INSERT INTO #medDetails
			select
				d.detail_status,
				osi.fac_id,
				osi.std_time_type_id,
				osi.time_code,
				osi.std_shift_id,
				osi.std_shift_description,
				osi.schedule_id,
				osi.self_admin,
				osi.schedule_type,
				osi.client_id,
				osi.start_time,
				osi.actual_end_time,
				osi.phys_order_id,
				osi.description,
				osi.directions,
				osi.order_directions,
				osi.hold_date,
				osi.hold_date_end,
				osi.discontinued_date,
				osi.date_ordered,
				osi.order_verified,
				osi.sliding_scale_id,
				osi.nurse_admin_notes,
				osi.nurse_action_notes	,
				osi.controlled_substance_code,
				osi.route_of_admin,
				osi.need_location_of_admin,
				osi.related_generic,
				osi.is_new_order,
				osi.form,
				osi.order_category_id	,
				osi.order_origin_id		,
				osi.dispense_as_written	,
				osi.administered_by_id 	,
				osi.start_date,
				case
					when osi.until_finished = 'Y' then 'Y'
					when osi.is_new_order = 'N' and osi.end_date_type = 4 then 'Y'
					else 'N'
				end as until_finished,
				osi.prn_admin_value,
				osi.prn_admin_units,
				osi.dose_uom_id,
				osi.dose_value,
				osi.order_date,
				d.schedule_date,
				d.perform_date,
				d.schedule_date_end,
				d.pho_schedule_detail_id,
				d.chart_code,
				d.followup_result,
				d.progress_note_id,
				d.effective_date,
				d.created_date,
				d.dose,
				osi.doseLow,
				d.reminder_status,
				d.reminder_id,
				d.reminder_created_by,
				d.reminder_created_by_long,
				d.reminder_created_date,
				d.reminder_effective_date,
				d.reminder_ineffective_date,
				d.order_status,
				d.order_relationship,
				d.order_status_reason,
				osi.order_schedule_id, -- PCC-30715
				osi.alternate_dose_value, -- PCC-36934
				osi.end_date_type, -- PCC-32538
				null as std_vital_ids,
				null as supply_directions,
				null as supply_description,
				null as order_supply_id,
				null as status,
				null as supply_status_level_4,
				null as pharm_nurse_notes,
				null as disp_package_identifier,
				NULL AS prescription,
                NULL AS vendor_phys_order_id,
				null as supplement_description,
				null as sort_by,
				null as last_scheduled_dose,
				null as order_next_admin_date,
				null as max_admin_date,
				'0' as hasDrugAllergy,
				CASE
					WHEN osi.apply_remove_flag = 1 THEN
						CASE WHEN d.dose = '0' THEN 0 ELSE 1 END
					ELSE
						null
				END as apply_remove_flag, -- PCC-32537, CORE-2406
				'0' as has_black_box,
				'0' as drugInteraction,
				(CASE WHEN osi.apply_remove_flag=1 THEN left(replace(convert(varchar, d.schedule_date, 108),':',''),4) ELSE osi.actual_start_time END) , -- PCC-42176
				null as has_dose_check,
				null as no_dp_check,
				matches_filter = osi.matches_filter & ISNULL(d.matches_filter, 1),
				null as controlled_substance_code_new,
				osi.requires_second_signature,
				osi.drugname,
				null as last_24h_dose,
				null as last_24h_dose_routine,
				null as pho_ext_lib_med_ddid,
				osi.admin_record_id,
				osi.behavior_lookback,
				pl.device_id
			from
				@order_sched_info osi
				left join @detail_temp d on d.schedule_id = osi.schedule_id
				left join pho_phys_order_lab pl on pl.phys_order_id = osi.phys_order_id and osi.order_category_id=3024
			where schedule_type in (8,9) or d.schedule_date is not null
		end -- end of @administration_task_list = 1
		else
			begin
			INSERT INTO #medDetails
			select
				d.detail_status,
				osi.fac_id,
				osi.std_time_type_id,
				osi.time_code,
				osi.std_shift_id,
				osi.std_shift_description,
				osi.schedule_id,
				osi.self_admin,
				osi.schedule_type,
				osi.client_id,
				osi.start_time,
				osi.actual_end_time,
				osi.phys_order_id,
				osi.description,
				osi.directions,
				osi.order_directions,
				osi.hold_date,
				osi.hold_date_end,
				osi.discontinued_date,
				osi.date_ordered,
				osi.order_verified,
				osi.sliding_scale_id,
				osi.nurse_admin_notes,
				osi.nurse_action_notes	,
				osi.controlled_substance_code,
				osi.route_of_admin,
				osi.need_location_of_admin,
				osi.related_generic,
				osi.is_new_order,
				osi.form,
				osi.order_category_id	,
				osi.order_origin_id		,
				osi.dispense_as_written	,
				osi.administered_by_id 	,
				osi.start_date,
				case
					when osi.until_finished = 'Y' then 'Y'
					when osi.is_new_order = 'N' and osi.end_date_type = 4 then 'Y'
					else 'N'
				end as until_finished,
				osi.prn_admin_value,
				osi.prn_admin_units,
				osi.dose_uom_id,
				osi.dose_value,
				osi.order_date,
				d.schedule_date,
				d.perform_date,
				d.schedule_date_end,
				d.pho_schedule_detail_id,
				d.chart_code,
				d.followup_result,
				d.progress_note_id,
				d.effective_date,
				d.created_date,
				d.dose,
				osi.doseLow,
				d.reminder_status,
				d.reminder_id,
				d.reminder_created_by,
				d.reminder_created_by_long,
				d.reminder_created_date,
				d.reminder_effective_date,
				d.reminder_ineffective_date,
				d.order_status,
				d.order_relationship,
				d.order_status_reason,
				osi.order_schedule_id, -- PCC-30715
				osi.alternate_dose_value, -- PCC-36934
				osi.end_date_type, -- PCC-32538
				std_vital_ids = (select
										',' + convert(varchar(5),vital) as 'data()'
									from
										dbo.pho_schedule_vitals with (nolock)
									where schedule_id=osi.schedule_id and deleted='N'
									for XML PATH('')),
				supply.directions as supply_directions,
				supply.description as supply_description,
				supply.order_supply_id,
				supply.status,
				case
					when (supply.status=4 or supply.status=8) and supply.total_supply_status_4>1 and supply.total_diff_source_status_4>1 and isnull(supply.total_diff_source_status_4,0)<>isnull(total_supply_status_4,0) then
						3 --MULTIPLE ACTIVE SOURCES,MORE THAN 1 SUPPLY TO ADMINISTER
					when (supply.status=4 or supply.status=8) and supply.total_supply_status_4>1 and supply.total_diff_source_status_4>1 then
						1  --MULTIPLE ACTIVE SOURCES
					when (supply.status=4 or supply.status=8) and supply.total_supply_status_4>1 and supply.total_diff_source_status_4=1 then
						2  --MORE THAN 1 SUPPLY TO ADMINISTER
					else
						null
				end
				as supply_status_level_4,
				supply.pharm_nurse_notes as pharm_nurse_notes,
				supply.disp_package_identifier,
				supply.prescription,
                supply.vendor_phys_order_id,
				dietsup.item_description as supplement_description,
				null as sort_by,
				last_scheduled_dose as last_scheduled_dose,
				case
					when (osi.prn_admin_value>0 AND osi.prn_admin_units = 'H' AND adminmax.max_admin_date IS NOT NULL) then
						dateadd(hh, osi.prn_admin_value, adminmax.max_admin_date)
					when (osi.prn_admin_value>0 AND osi.prn_admin_units = 'M' AND adminmax.max_admin_date IS NOT NULL) then
						dateadd(mi, osi.prn_admin_value, adminmax.max_admin_date)
					else
						null
				end	as order_next_admin_date,
				adminmax.max_admin_date,
				CASE WHEN (phoa.phys_order_id is null and phosa.phys_order_id is null) THEN '0' ELSE '1' END hasDrugAllergy,
				CASE
					WHEN osi.apply_remove_flag = 1 THEN
						CASE WHEN d.dose = '0' THEN 0 ELSE 1 END
					ELSE
						null
				END as apply_remove_flag, -- PCC-32537, CORE-2406
				CASE WHEN pba.phys_order_id is null THEN 0 ELSE 1 END has_black_box,
				CASE WHEN poda.phys_order_id is null THEN '0' ELSE '1' END drugInteraction,
				(CASE WHEN osi.apply_remove_flag=1 THEN left(replace(convert(varchar, d.schedule_date, 108),':',''),4) ELSE osi.actual_start_time END) , -- PCC-42176
				ppodc.over_dose as has_dose_check,
				ndpc.phys_order_id as no_dp_check,
				matches_filter = osi.matches_filter & ISNULL(d.matches_filter, 1),
				pponc.new_controlled_substance_code as controlled_substance_code_new,
				osi.requires_second_signature,
				osi.drugname,
				dcpo.last_24h_dose,
				dcpo.last_24h_dose_routine,
				ref.pho_ext_lib_med_ddid,
				osi.admin_record_id,
				osi.behavior_lookback,
				pl.device_id
			from
				@order_sched_info osi
				left join @detail_temp d on d.schedule_id = osi.schedule_id
				LEFT JOIN dbo.COMMON_CODE dietsup ON osi.diet_supplement = dietsup.item_id and dietsup.item_code = 'phosup'
				left join #orderSupplies as supply on supply.phys_order_id=osi.phys_order_id
				left join #last_dose  as ld on ld.phys_order_id=osi.phys_order_id
				left join #med_last_admin_date_max adminmax on adminmax.phys_order_id = osi.phys_order_id
				left join (select distinct phys_order_id from pho_phys_order_blackbox_acknowledgement) pba on osi.phys_order_id = pba.phys_order_id
				left join (select distinct phys_order_id
					from pho_phys_order_allergy_acknowledgement poa
					inner join allergy al on al.allergy_id=poa.allergy_id and al.client_id=@client_id
					where (al.status_id=1 or al.status_id=3)  and (al.resolved_date is null or al.resolved_date >=@shift_start_local) and (al.onset_date is null or al.onset_date<=@shift_start_local))
				as  phoa on phoa.phys_order_id=osi.phys_order_id
				left join (select distinct phys_order_id
									from pho_phys_order_drug_acknowledgement p where p.severity_code in (@severity_level_severe, @severity_level_moderate, @severity_level_minor) ) as  poda on poda.phys_order_id=osi.phys_order_id
				left join  pho_phys_order_dose_check_acknowledgement ppodc on ppodc.phys_order_id=osi.phys_order_id
				left join  pho_phys_order_new_ctrlsubstancecode pponc on pponc.phys_order_id=osi.phys_order_id
				left join (select distinct pos.phys_order_id
				from pho_order_supply pos
				inner join pho_order_supply_allergy posa on posa.order_supply_id = pos.order_supply_id
				inner join allergy al on al.allergy_id=posa.allergy_id and al.client_id=@client_id
				where (pos.active = 'Y' and (pos.status=3 or pos.status=4 or pos.status=8)) and pos.deleted = 'N' and
				(al.status_id=1 or al.status_id=3)  and (al.resolved_date is null or al.resolved_date >=@shift_start_local))
				as phosa on phosa.phys_order_id=osi.phys_order_id
				left join #doseCheckPhysOrders dcpo on dcpo.order_schedule_id=osi.order_schedule_id
				left join pho_order_ext_lib_med_ref ref ON ref.phys_order_id = osi.phys_order_id and osi.new_phys_order_id is not null
				left join pho_phys_order_no_drug_protocol_checks ndpc on ndpc.phys_order_id=osi.phys_order_id
				left join pho_phys_order_lab pl on pl.phys_order_id = osi.phys_order_id and osi.order_category_id=3024
			where schedule_type in (8,9) or d.schedule_date is not null
		end
		------ PRN remove rec.without  follow up
		delete m from #medDetails m join pho_schedule_details_pending_followup fp
		WITH (NOLOCK) on fp.schedule_id = m.schedule_id where m.schedule_type = 8 and
		m.pho_schedule_detail_id<> fp.schedule_detail_id

		----need to remove multiple PRN details for a single schedule based on effective date & schedule detail id

		delete m FROM #medDetails m
		join
		(SELECT schedule_id, pho_schedule_detail_id, effective_date, schedule_date,
			row_number() OVER (PARTITION BY schedule_id
			ORDER BY ISNULL(effective_date, schedule_date) DESC, schedule_date DESC, pho_schedule_detail_id DESC) as rowNum
			from #medDetails where schedule_type = 8
		)
		AS data on m.pho_schedule_detail_id = data.pho_schedule_detail_id where  data.rowNum > 1

    --need to remove multiple details for a single schedule.  QShift  - can document these more than once.
    DELETE m
    FROM #medDetails m
    INNER JOIN (
      SELECT schedule_id,max(pho_schedule_detail_id) AS pho_schedule_detail_id
      FROM #medDetails
      WHERE
      schedule_type = 9
      OR std_time_type_id = 2
      GROUP BY schedule_id
      HAVING count(*) > 1
    ) AS data ON data.schedule_id = m.schedule_id AND data.pho_schedule_detail_id <> m.pho_schedule_detail_id;

		if @DebugMe='Y' BEGIN Print 'Step 14 '+ ' ' + convert(varchar(26),getdate(),109) end
		if @DebugMe='Y'
		BEGIN
			select 'from_med_details',* from #medDetails
		END
		--for every xhours we need to display the time it's due.
		update #medDetails set start_time =
			case
				when datepart(hh,schedule_date)<10 then
					'0'+datename(hh,schedule_date)
				else
					datename(hh,schedule_date)
			end
			+
			case
				when datepart(mi,schedule_date)<10 then
					'0'+datename(mi,schedule_date)
				else
					datename(mi,schedule_date)
			end
		from #medDetails where schedule_date is not null
			and
			(
				schedule_type=18
				or (schedule_type not in (8,9,24,26) and isnull(std_shift_id,0)<=0)
			)

	    -- Adjust the self admin flag based on the history of changes according to the schedule_date if required
		UPDATE m SET m.administered_by_id=h.administered_by_id , m.self_admin=(CASE WHEN h.administered_by_id > 1 THEN 1 ELSE 0 END)
		FROM #medDetails m
		INNER JOIN pho_order_schedule_self_admin_history h ON h.order_schedule_id = m.order_schedule_id
		WHERE m.schedule_date >= h.effective_date and m.schedule_date < h.ineffective_date



		if @DebugMe='Y' BEGIN Print 'Step 14.1 '+ ' ' + convert(varchar(26),getdate(),109) end
		update #medDetails
			set sort_by =
				case
					when perform_date is null or (start_time='PRN' and detail_status=@inprogressStatus) then
						CASE
							when start_time='One Time Only' then
								10
							when start_time='STAT' then
								15
							when start_time='Complex' then
								20
							when std_shift_id is not null then
								40
							when start_time='PRN' and detail_status<>@inprogressStatus then
								50
							when start_time='PRN' and detail_status=@inprogressStatus then
								55
							else
								30-- scheduled item.
						END
					ELSE
						CASE
							when start_time='One Time Only' then
								60
							when start_time='STAT' then
								65
							when start_time='Complex' then
								70
							when std_shift_id is not null then
								90
							when start_time='PRN' then
								100
							else
								80 -- scheduled item.
						END
				END

		IF @GET_BASIC = @GET_BASIC & @filterMode
		BEGIN
			IF(@administration_task_list = 0)
			BEGIN
				if @DebugMe='Y' BEGIN Print 'Step 15 '+ ' ' + convert(varchar(26),getdate(),109) end
	-- todo can't we merge them into one select and separate them in the java mapper?
				--calculate the overdue view
				select
					*
				from
					#medDetails
				where
					 detail_status=@overdueStatus
				order by sort_by,actual_start_time,supply_description, description

				--calculate the now view
				select
					*
				from
					#medDetails
				where
					--schedule_date between dateadd(hh,-1,@now_local) and dateadd(hh,1,@now_local)
					(detail_status = @inprogressStatus or detail_status=@overdueStatus or schedule_type = 9)
					and detail_status is not null
				order by sort_by,actual_start_time,supply_description, description
			END


			if @DebugMe='Y' BEGIN Print 'Step 16 '+ ' ' + convert(varchar(26),getdate(),109) end

			--shift view
			select
				*
			from
				#medDetails
			where detail_status is not null
			order by sort_by,actual_start_time,supply_description, description


			IF(@administration_task_list = 0)
			BEGIN
				if @DebugMe='Y' BEGIN Print 'Step 17 '+ ' ' + convert(varchar(26),getdate(),109) end

				--calculate PRN view.
				select
					*
				from
					#medDetails
				where
					schedule_type=8
				order by sort_by,actual_start_time,supply_description, description


				if @DebugMe='Y' BEGIN Print 'Step 18 '+ ' ' + convert(varchar(26),getdate(),109) end

				--get reminder view.
				select
					*
				from
					#medDetails d
				where
					d.reminder_status is not null
				order by sort_by,actual_start_time,supply_description, description
			END -- if @@administration_task_list = 0
		END -- IF @GET_BASIC

		IF @GET_ADVANCED = @GET_ADVANCED & @filterMode
		BEGIN
			-- Return Advanced view (based on shift view).
			IF (len(@filteringHOAs) >0) AND ( len(@filteringQshifts) >0 )
			BEGIN
				if @DebugMe='Y' BEGIN Print 'Step 20.01 '+ ' ' + convert(varchar(26),getdate(),109) end
					DELETE md
					FROM #medDetails md
					LEFT JOIN #filterScheduleStartTime st ON st.start_time = md.start_time
					LEFT JOIN #filterScheduleQshift q ON q.std_shift_id = md.std_shift_id
					WHERE  st.start_time is null AND q.std_shift_id is NULL
			END
			ELSE IF ( len(@filteringQshifts) >0 )
			BEGIN
				if @DebugMe='Y' BEGIN Print 'Step 20.02 '+ ' ' + convert(varchar(26),getdate(),109) end

				DELETE md
				FROM #medDetails md
				LEFT JOIN #filterScheduleQshift q ON q.std_shift_id = md.std_shift_id
				WHERE  q.std_shift_id is NULL
			END
			ELSE IF (len(@filteringHOAs) >0)
			BEGIN
				if @DebugMe='Y' BEGIN Print 'Step 20.03 '+ ' ' + convert(varchar(26),getdate(),109) end
				DELETE md
				FROM #medDetails md
				LEFT JOIN #filterScheduleStartTime st ON st.start_time = md.start_time
				WHERE  st.start_time is NULL
			END

			SELECT *, is_advanced = CAST(1 AS BIT) FROM #medDetails d WHERE matches_filter = 1 ORDER BY sort_by,actual_start_time,supply_description, description
		END -- @advanced_filtering = 1
		ELSE
			SELECT TOP 0 *, is_advanced = CAST(1 AS BIT) FROM #medDetails -- To consistently align the index result

		IF (@GET_BASIC = @GET_BASIC & @filterMode) or @administration_task_list = 2
		BEGIN
			if @DebugMe='Y' BEGIN Print 'Step 21.03 '+ ' ' + convert(varchar(26),getdate(),109) end
			--get prompt view.
			select
				osi.schedule_id,
				p.prompt_id,
				p.description as prompt_description,
				p.value_data_type,
				p.no_of_values,
				p.value_type,
				p.long_description as prompt_long_description
			from
				dbo.pho_order_related_prompt p, @order_sched_info osi
			where
				p.schedule_id = osi.schedule_id and p.deleted='N'
			order by osi.schedule_id
		END

		IF @administration_task_list = 1
		begin
			if @DebugMe='Y' BEGIN Print 'Step 21.04 '+ ' ' + convert(varchar(26),getdate(),109) end
		select
			clients.client_id,
			clients.bed_desc,
			clients.room_desc,
			clients.unit_desc,
			clients.first_name,
			clients.last_name,
			CASE WHEN clients.photo_small is null then 0 else 1 end as has_photo,
			clients.barcode,
			clients.resActionType as resStatus
			from @TMPActiveClientsDetail clients
			WHERE EXISTS (SELECT 1 FROM #medDetails details where clients.client_id = details.client_id)
		end

	END

	if @DebugMe='Y' BEGIN Print 'Step 99 '+ ' ' + convert(varchar(26),getdate(),109) end

END TRY
BEGIN CATCH
	select @error_code = @@error, @status_text = ERROR_MESSAGE()
	if @DebugMe='Y' Print 'Stored procedure failure in step: '+ @step
	if @DebugMe='Y' Print 'Error code: '+@step + '; Error description:	' +@status_text
	RAISERROR (@status_text, 10, 1)
	return @error_code
END CATCH
GO

grant execute on dbo.sproc_pho_list_getEmarResident_details to public
go

go
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getEmarResident_details.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEmarResident_details.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_poc_behavior_monitoring_intervention.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- Script for the Behavior Monitoring and Interventions Report
--
-- Written By:          Mustafa Behrainwala
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_pho_poc_behavior_monitoring_intervention Procedure for Behavior Monitoring and Interventions Report
-- =================================================================================

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_pho_poc_behavior_monitoring_intervention' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_pho_poc_behavior_monitoring_intervention
END
GO

Create Procedure dbo.sproc_pho_poc_behavior_monitoring_intervention
	@userId		INT,
	@facId		INT,
	@clientIdsCsv	VARCHAR(MAX),
	@unitId INT,
	@floorId INT,
	@lookBackType BIT,
	@lookBackPeriodStartDate DATETIME,
	@lookBackPeriodEndDate DATETIME,
	@includeCurrent BIT,
	@includeDischarged BIT,
	@includeOutpatient BIT,
	@includeStruckOut BIT,
	@includeMedicationInterventions BIT,
	@includeNoBehaviorsObserved BIT,
	@sortByLocation BIT,
	@debug_me CHAR(1),
	@status_code INT OUT,
	@status_text VARCHAR(3000)	OUT

as
BEGIN

SET NOCOUNT ON;

declare @vdelim	CHAR(1) = ','

declare @clients table
(
	client_id INT PRIMARY KEY
);
INSERT INTO @clients SELECT items FROM dbo.split(@clientIdsCsv, @vdelim);


declare @tempClients table
(
	client_id int,
	client_number varchar(MAX),
	client_first_name varchar(MAX),
	client_last_name varchar(MAX),
	unit_desc varchar(MAX),
	room_desc varchar(MAX),
	bed_desc varchar(MAX)
)

create table #resultsBEHV
(
	client_id int,
	client_number varchar(MAX),
	client_first_name varchar(MAX),
	client_last_name varchar(MAX),
	unit_desc varchar(MAX),
	room_desc varchar(MAX),
	bed_desc varchar(MAX),
	documentation_id varchar(MAX),
	itemValueId int,
	itemValue varchar(MAX),
	intervention_id varchar(MAX),
	intvItemValueId int,
	intvItemValue varchar(MAX),
	std_question_id int,
	initials_docu varchar(4),
	effective_schedule_date datetime,
	documented_date datetime,
	struckout varchar(1),
	strikeout_date datetime,

	noBehaviorsObserved bit,

	physicalBehvToOthers bit,
	grabbingOthers bit,
	hittingOthers bit,
	kickingOthers bit,
	pushingOthers bit,
	physicallyAggressiveToOthers bit,
	scratchingOthers bit,

	verbalBehvToOthers bit,
	accusingOfOthers bit,
	cursingAtOthers bit,
	angerAtOthers bit,
	screamingAtOthers bit,
	threateningOthers bit,

	sociallyInappropriateBehv bit,
	disruptiveSounds bit,
	disrobingPublic bit,
	enteringRoom bit,
	publicSexualActs bit,
	repetitiveMotions bit,
	rummaging bit,
	spitting bit,
	throwingFood bit,
	throwingWaste bit,

	otherBehv bit,
	agitated bit,
	delusions bit,
	elopement bit,
	hallucinations bit,
	hittingSelf bit,
	hoarding bit,
	insomnia bit,
	neglectingSelf bit,
	pacing bit,

	panic bit,
	pickingSelf bit,
	refusingCare bit,
	sad bit,
	scratching bit,
	screamingNotAtOthers bit,
	wandering bit,
	withdrawn bit,
	anxious bit,
	selfInjury bit,


	residentNotAvailable bit,
	residentRefused bit,
	notApplicable bit,

	noInterventionsAttempted bit,
	redirect varchar(MAX),
	removeSituation varchar(MAX),
	provideCalmEnvironment varchar(MAX),
	meaningfulActivity varchar(MAX),
	reapproach varchar(MAX),
	oneOnOne varchar(MAX),
	offerFood varchar(MAX),
	toilet varchar(MAX),
	provideComfort varchar(MAX),

	intvResidentNotAvailable bit,
	intvResidentRefused bit,
	intvNotApplicable bit,

	schedule_detail_id bigint,
	chart_code_history_id int,
	admin_strikeout_id int,

	schedule_effective_date datetime,
	phys_order_id int,
	description varchar(MAX),
	generic varchar(MAX),
	directions varchar(MAX),
	amountAdministered varchar(MAX),
	form varchar(MAX),
	uom_id int,
	administeredStatus varchar(MAX),
	schedule_perform_initials varchar(MAX),
	schedule_perform_date datetime,
	schedule_struckout bit,
	schedule_strikeout_by varchar(MAX),
	schedule_strikeout_date datetime,
    schedule_id int
)

create table #behaviorResult
(
    documentation_id varchar(MAX),
    item_value_id int
)

IF @clientIdsCsv is null or LEN(@clientIdsCsv) <1
BEGIN
	insert into @tempClients
		select c.client_id, c.client_id_number, m.first_name, m.last_name, unit.unit_desc, room.room_desc, bed.bed_desc from clients c
			join mpi m WITH(NOLOCK) on m.mpi_id=c.mpi_id
			join fn_clinical_list_clientsForUserByUserRole(@userId, 0, @facId) cpa on cpa.client_id=c.client_id
			left join census_item ci WITH(NOLOCK) on ci.census_id = c.current_census_id
			left join bed WITH(NOLOCK) on bed.bed_id = ci.bed_id
			left join room WITH(NOLOCK) on room.room_id = bed.room_id
			left join unit WITH(NOLOCK) on unit.unit_id = room.unit_id
			left join ar_lib_payers lib_payer WITH(NOLOCK) on lib_payer.payer_id = ci.primary_payer_id
			where
				c.fac_id=@facId and (
				(@includeCurrent = 1 AND c.admission_date IS NOT NULL AND c.discharge_date IS NULL AND (lib_payer.payer_type <> 'Outpatient' OR lib_payer.payer_type IS NULL))
				or
				(@includeDischarged = 1 AND c.discharge_date IS NOT NULL AND (lib_payer.payer_type <> 'Outpatient' OR lib_payer.payer_type IS NULL))
				or
				(@includeOutpatient = 1 AND lib_payer.payer_type = 'Outpatient')
				)
				and 
				(@unitId = -1 or unit.unit_id = @unitId)
				and 
				(@floorId = -1 or room.floor_id = @floorId)

END
ELSE
BEGIN
	insert into @tempClients
		select c.client_id, c.client_id_number, m.first_name, m.last_name, unit.unit_desc, room.room_desc, bed.bed_desc from clients c
			join @clients cli on cli.client_id=c.client_id
			join mpi m WITH(NOLOCK) on m.mpi_id=c.mpi_id
			join fn_clinical_list_clientsForUserByUserRole(@userId, 0, @facId) cpa on cpa.client_id=c.client_id
			left join census_item ci WITH(NOLOCK) on ci.census_id = c.current_census_id
			left join bed WITH(NOLOCK) on bed.bed_id = ci.bed_id
			left join room WITH(NOLOCK) on room.room_id = bed.room_id
			left join unit WITH(NOLOCK) on unit.unit_id = room.unit_id
			left join ar_lib_payers lib_payer WITH(NOLOCK) on lib_payer.payer_id = ci.primary_payer_id
			where
				c.fac_id=@facId and (
				(@includeCurrent = 1 AND c.admission_date IS NOT NULL AND c.discharge_date IS NULL AND (lib_payer.payer_type <> 'Outpatient' OR lib_payer.payer_type IS NULL))
				or
				(@includeDischarged = 1 AND c.discharge_date IS NOT NULL AND (lib_payer.payer_type <> 'Outpatient' OR lib_payer.payer_type IS NULL))
				or
				(@includeOutpatient = 1 AND lib_payer.payer_type = 'Outpatient')
				)
				and 
				(@unitId = -1 or unit.unit_id = @unitId)
				and 
				(@floorId = -1 or room.floor_id = @floorId)
END

IF @debug_me = 'Y'
BEGIN
	select 'Residents'
	select * from @tempClients
END

IF @includeStruckOut = 1
BEGIN
	insert into #resultsBEHV (client_id, client_number, client_first_name, client_last_name, unit_desc, room_desc, bed_desc
	        , documentation_id, itemValueId, itemValue, std_question_id, initials_docu, effective_schedule_date, documented_date
			, struckout, strikeout_date, schedule_detail_id, chart_code_history_id, admin_strikeout_id,schedule_id)
		select distinct c.client_id, c.client_number, c.client_first_name, c.client_last_name, c.unit_desc, c.room_desc, c.bed_desc
		    ,dr.documentation_id, dr.item_value_id, dr.item_value, siq.std_question_id, dr.initials
			, CASE WHEN dr.completed_date is not null THEN  dr.completed_date ELSE dr.entered_date END
			, dr.entered_date
			, dr.strikeout_flag, dr.strikeout_date, dl.schedule_detail_id, dl.chart_code_history_id, dl.admin_strikeout_id, sch.schedule_id
			from cp_std_task_library_mapping stlm
			INNER JOIN cp_std_task_library stl WITH(NOLOCK) on stl.library_id=stlm.library_id
			INNER JOIN cp_rev_intervention cpi WITH(NOLOCK) on cpi.std_intervention_id = stlm.std_intervention_id
			INNER JOIN @tempClients c on c.client_id = cpi.clientID
			INNER JOIN cp_std_intervention_question siq WITH(NOLOCK) on siq.std_intervention_id = cpi.std_intervention_id
			INNER JOIN cp_std_question sq WITH(NOLOCK) on sq.std_question_id=siq.std_question_id
			INNER JOIN cp_schedule sch WITH(NOLOCK) on sch.intervention_id=cpi.gen_intervention_id
			INNER JOIN view_cp_all_documentation_responses dr WITH(NOLOCK) on siq.std_question_id=dr.std_question_id and dr.fac_id = @facId
				and sch.schedule_id=dr.schedule_id
			LEFT JOIN pho_medadmin_poc_documentation_linking dl on dl.documentation_id = dr.documentation_id and @includeMedicationInterventions=1
				AND (@includeStruckOut = 1 OR dl.admin_strikeout_id is null)
			WHERE stl.system = 'Y'
			  AND cpi.deleted = 'N' AND cpi.current_row = 'Y' AND cpi.is_Task = 'Y'
			  AND sq.control_type='bhv'
			  AND (@lookBackType = 0 OR dl.documentation_id is not null)
			  AND (@lookBackType = 1 OR
				(
					(
						dr.completed_date is not null
						AND (@lookBackPeriodStartDate is null OR @lookBackPeriodStartDate <= dr.completed_date)
						AND (@lookBackPeriodEndDate is null OR dr.completed_date <=@lookBackPeriodEndDate)
					)
					OR
					(
						dr.completed_date is null
						AND (@lookBackPeriodStartDate is null OR @lookBackPeriodStartDate <= dr.entered_date)
						AND (@lookBackPeriodEndDate is null OR dr.entered_date <=@lookBackPeriodEndDate)
					)
				)
			);
END
ELSE
BEGIN
	insert into #resultsBEHV (client_id, client_number, client_first_name, client_last_name, unit_desc, room_desc, bed_desc
	    , documentation_id, itemValueId, itemValue, std_question_id, initials_docu, effective_schedule_date, documented_date
		, struckout, schedule_detail_id, chart_code_history_id, admin_strikeout_id,schedule_id)
		select distinct c.client_id, c.client_number, c.client_first_name, c.client_last_name, c.unit_desc, c.room_desc, c.bed_desc
		, dr.documentation_id, dr.item_value_id, dr.item_value, siq.std_question_id, dr.initials
		, CASE WHEN dr.completed_date is not null THEN  dr.completed_date ELSE dr.entered_date END
		, dr.entered_date
		, dr.strikeout_flag, dl.schedule_detail_id, dl.chart_code_history_id, dl.admin_strikeout_id, sch.schedule_id
			from cp_std_task_library_mapping stlm
			INNER JOIN cp_std_task_library stl WITH(NOLOCK) on stl.library_id=stlm.library_id
			INNER JOIN cp_rev_intervention cpi WITH(NOLOCK) on cpi.std_intervention_id = stlm.std_intervention_id
			INNER JOIN @tempClients c on c.client_id = cpi.clientID
			INNER JOIN cp_std_intervention_question siq WITH(NOLOCK) on siq.std_intervention_id = cpi.std_intervention_id
			INNER JOIN cp_std_question sq WITH(NOLOCK) on sq.std_question_id=siq.std_question_id
			INNER JOIN cp_schedule sch WITH(NOLOCK) on sch.intervention_id=cpi.gen_intervention_id
			INNER JOIN view_cp_active_documentation_responses dr WITH(NOLOCK) on siq.std_question_id=dr.std_question_id and dr.fac_id = @facId
				and sch.schedule_id=dr.schedule_id and dr.strikeout_flag = 'N'
			LEFT JOIN pho_medadmin_poc_documentation_linking dl on dl.documentation_id = dr.documentation_id and @includeMedicationInterventions=1
				AND (@includeStruckOut = 1 OR dl.admin_strikeout_id is null)
			WHERE stl.system = 'Y'
			  AND cpi.deleted = 'N' AND cpi.current_row = 'Y' AND cpi.is_Task = 'Y'
			  AND sq.control_type='bhv'
			  AND (@lookBackType = 0 OR dl.documentation_id is not null)
			  AND (@lookBackType = 1 OR
				(
					(
						dr.completed_date is not null
						AND (@lookBackPeriodStartDate is null OR @lookBackPeriodStartDate <= dr.completed_date)
						AND (@lookBackPeriodEndDate is null OR dr.completed_date <=@lookBackPeriodEndDate)
					)
					OR
					(
						dr.completed_date is null
						AND (@lookBackPeriodStartDate is null OR @lookBackPeriodStartDate <= dr.entered_date)
						AND (@lookBackPeriodEndDate is null OR dr.entered_date <=@lookBackPeriodEndDate)
					)
				)
			);
END

IF @debug_me = 'Y'
BEGIN
	select 'POC documentation w/o interventions'
	select * from #resultsBEHV
END

-- seperate update for interventions to improve performance 
update result
	set result.intervention_id = intv.documentation_id
	, result.intvItemValueId = intv.item_value_id
	, result.intvItemValue = intv.item_value
	from #resultsBEHV result
		INNER JOIN view_cp_active_documentation_responses intv WITH(NOLOCK) on result.std_question_id!=intv.std_question_id and intv.fac_id = @facId
			and result.documentation_id=intv.documentation_id and result.schedule_id=intv.schedule_id
		INNER JOIN cp_std_question itv_ques WITH(NOLOCK) ON itv_ques.std_question_id = intv.std_question_id AND itv_ques.control_type='itv' AND itv_ques.fac_id=-1
	
IF @debug_me = 'Y'
BEGIN
	select 'POC documentation with interventions'
	select * from #resultsBEHV
END

/**
Codes for behavior tasks
900	No Behaviors Observed

901	Physical Behaviors Directed At Others
902	Grabbing Others
903	Hitting Others
904	Kicking Others
905	Pushing Others
906	Physically Aggressive Towards Others
907	Scratching Others

908	Verbal Behaviors Directed At Others
909	Accusing of Others
910	Cursing at Others
911	Express Frustration/Anger at Others
912	Screaming at Others
913	Threatening Others

914	Socially Inappropriate Behaviors
915	Disruptive Sounds
916	Disrobing in Public
917	Entering Other Resident's Room/Personal Space
918	Public Sexual Acts
919	Repetitive Motions
920	Rummaging
921	Spitting
922	Throwing/Smearing Food
923	Throwing/Smearing Bodily Waste

924	Other Behaviors Not Directed At Others
925	Agitated
926	Delusions
927	Elopement, Exit Seeking
928	Hallucinations
929	Hitting Self
930	Hoarding
931	Insomnia, Not Sleeping
932	Neglecting Self Care
933	Pacing

934	Panic
935	Picking At Self
936	Refusing Care
937	Sad, Tearful
938	Scratching Self
939	Screaming Not At Others
940	Wandering
941	Withdrawn/Isolating
942	Anxious, Restless
943	Self Injury
**/



--for behaviors
BEGIN
    insert into #behaviorResult
    select documentation_id, item_value_id from #resultsBEHV result
        CROSS APPLY OPENJSON(result.itemValue) WITH (item_value_id INT '$.itemValueId') jsonBehv
    where result.itemValueId is not null;
END

BEGIN
    update result
    set result.physicalBehvToOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 901

    update result
    set result.grabbingOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 902

    update result
    set result.hittingOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 903

    update result
    set result.kickingOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 904

    update result
    set result.pushingOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 905

    update result
    set result.physicallyAggressiveToOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 906

    update result
    set result.scratchingOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 907

    update result
    set result.verbalBehvToOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 908

    update result
    set result.accusingOfOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 909

    update result
    set result.cursingAtOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 910

    update result
    set result.angerAtOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 911

    update result
    set result.screamingAtOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 912

    update result
    set result.threateningOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 913

    update result
    set result.sociallyInappropriateBehv=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 914

    update result
    set result.disruptiveSounds=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 915

    update result
    set result.disrobingPublic=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 916

    update result
    set result.enteringRoom=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 917

    update result
    set result.publicSexualActs=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 918

    update result
    set result.repetitiveMotions=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 919

    update result
    set result.rummaging=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 920

    update result
    set result.spitting=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 921

    update result
    set result.throwingFood=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 922

    update result
    set result.throwingWaste=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 923

    update result
    set result.otherBehv=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 924

    update result
    set result.agitated=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 925

    update result
    set result.delusions=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 926

    update result
    set result.elopement=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 927

    update result
    set result.hallucinations=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 928

    update result
    set result.hittingSelf=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 929

    update result
    set result.hoarding=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 930

    update result
    set result.insomnia=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 931

    update result
    set result.neglectingSelf=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 932

    update result
    set result.pacing=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 933

    update result
    set result.panic=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 934

    update result
    set result.pickingSelf=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 935

    update result
    set result.refusingCare=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 936

    update result
    set result.sad=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 937

    update result
    set result.scratching=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 938

    update result
    set result.screamingNotAtOthers=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 939

    update result
    set result.wandering=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 940

    update result
    set result.withdrawn=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 941

    update result
    set result.anxious=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 942

    update result
    set result.selfInjury=1
    from #resultsBEHV result
             join #behaviorResult innerResult on innerResult.documentation_id = result.documentation_id
    where innerResult.item_value_id = 943
END 

update result 
	set 
	residentNotAvailable=CASE WHEN jsonBehv.item_value_id = '-99' then 1 else 0 end
	, residentRefused=CASE WHEN jsonBehv.item_value_id = '-98' then 1 else 0 end
	, notApplicable=CASE WHEN jsonBehv.item_value_id = '-97' then 1 else 0 end

	, noBehaviorsObserved=CASE WHEN jsonBehv.item_value_id = '900' then 1 else 0 end
	from #resultsBEHV result
		CROSS APPLY OPENJSON(result.itemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonBehv
		where result.itemValueId is not null;

IF @debug_me = 'Y'
BEGIN
	select 'After parsing POC documentation'
	select * from #resultsBEHV
END

/**
Codes for interventions
2	Redirect
3	Better (improved)
4	Worsened
5	Same (unchanged)
6	Unable to Determine
7	Remove from Situation / Ensure Resident Safety
8	Better (improved)
9	Worsened
10	Same (unchanged)
11	Unable to Determine
12	Provide Calm Environment (low lighting, quiet)
13	Better (improved)
14	Worsened
15	Same (unchanged)
16	Unable to Determine
17	Meaningful Activity
18	Better (improved)
19	Worsened
20	Same (unchanged)
21	Unable to Determine
22	Reapproach
23	Better (improved)
24	Worsened
25	Same (unchanged)
26	Unable to Determine
27	1:1
28	Better (improved)
29	Worsened
30	Same (unchanged)
31	Unable to Determine
32	Offer Food/Drink
33	Better (improved)
34	Worsened
35	Same (unchanged)
36	Unable to Determine
37	Toilet
38	Better (improved)
39	Worsened
40	Same (unchanged)
41	Unable to Determine
42	Provide Comfort (massage, reposition, heat / cold)
43	Better (improved)
44	Worsened
45	Same (unchanged)
46	Unable to Determine
1	No Interventions Attempted
**/

--For Interventions
	update result 
	set 
	intvResidentNotAvailable=CASE WHEN jsonInt.item_value_id = -99 then 1 else 0 end
	, intvResidentRefused=CASE WHEN jsonInt.item_value_id = -98 then 1 else 0 end
	, intvNotApplicable=CASE WHEN jsonInt.item_value_id = -97 then 1 else 0 end

	, noInterventionsAttempted=CASE WHEN jsonInt.item_value_id = 1 then 1 else 0 end
	from #resultsBEHV result
		CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
		where result.intvItemValueId = -901;

	update result
		set result.redirect=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (3,4,5,6)

	update result
		set result.removeSituation=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (8,9,10,11)

	update result
		set result.provideCalmEnvironment=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (13,14,15,16)

	update result
		set result.meaningfulActivity=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (18,19,20,21)

	update result
		set result.reapproach=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (23,24,25,26)
			
	update result
		set result.oneOnOne=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (28,29,30,31)

	update result
		set result.offerFood=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (33,34,35,36)

	update result
		set result.toilet=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (38,39,40,41)

	update result
		set result.provideComfort=innerResult.item_value
		from #resultsBEHV  result
			join (select documentation_id, item_value_id, item_value from #resultsBEHV result
					CROSS APPLY OPENJSON(result.intvItemValue) WITH (item_value_id INT '$.itemValueId', item_value VARCHAR(MAX) '$.itemValue') jsonInt
					where result.intvItemValueId = -901) innerResult on innerResult.documentation_id = result.documentation_id
			where innerResult.item_value_id in (43,44,45,46)

IF @debug_me = 'Y'
BEGIN
	select 'After parsing POC interventions'
	select * from #resultsBEHV
END
		
/*
	Update the result with the orders information.
*/

IF @includeMedicationInterventions=1
BEGIN
	update result
		set result.phys_order_id = ppo.phys_order_id
		, result.description = ppo.description
		, result.generic = ppo.related_generic
		, result.directions = direc.directions
		, result.form = ppo.form
		, result.uom_id = CASE WHEN pos.dose_uom_id is null THEN pos.quantity_uom_id ELSE pos.dose_uom_id END
		, result.schedule_effective_date = sd.effective_date
		, result.amountAdministered = CASE WHEN sd.modified_quantity is not null AND sd.modified_quantity != '' THEN sd.modified_quantity ELSE 
			CASE WHEN sd.chart_code='0' THEN sd.dose ELSE null END END
		, result.administeredStatus = CASE WHEN sd.chart_code='0' THEN 'Administered' ELSE cc.item_description END
		, result.schedule_perform_initials = sd.perform_initials
		, result.schedule_perform_date = sd.perform_date
	from #resultsBEHV result
		join pho_schedule_details sd on sd.pho_schedule_detail_id = result.schedule_detail_id and sd.deleted='N'
		join pho_schedule sch on sch.schedule_id = sd.pho_schedule_id
		join pho_order_schedule pos on pos.order_schedule_id = sch.order_schedule_id
		join pho_phys_order ppo on ppo.phys_order_id = sch.phys_order_id
		left join common_code cc on cc.short_description=sd.chart_code and cc.item_code='phocht' and cc.deleted='N'
		CROSS APPLY dbo.fn_clinical_getOrderDirections(ppo.phys_order_id, null, null, ', ', ', ') direc
		where result.admin_strikeout_id is null and chart_code_history_id is null

	/*
	** update the schedule from the historical administrations
	*/
	update result
		set result.phys_order_id = ppo.phys_order_id
		, result.description = ppo.description
		, result.generic = ppo.related_generic
		, result.directions = direc.directions
		, result.form = ppo.form
		, result.uom_id = CASE WHEN pos.dose_uom_id is null THEN pos.quantity_uom_id ELSE pos.dose_uom_id END
		, result.schedule_effective_date = ch.effective_date
		, result.amountAdministered = ch.modified_quantity
		, result.administeredStatus = CASE WHEN ch.chart_code='0' THEN 'Administered' ELSE cc.item_description END
		, result.schedule_perform_initials = ch.perform_initials
		, result.schedule_perform_date = ch.perform_date
	from #resultsBEHV result
		join pho_chart_code_history ch on ch.chart_code_history_id = result.chart_code_history_id and ch.schedule_detail_id = result.schedule_detail_id
		join pho_schedule sch on sch.schedule_id = ch.schedule_id
		join pho_order_schedule pos on pos.order_schedule_id = sch.order_schedule_id
		join pho_phys_order ppo on ppo.phys_order_id = sch.phys_order_id
		left join common_code cc on cc.short_description=ch.chart_code and cc.item_code='phocht' and cc.deleted='N'
		CROSS APPLY dbo.fn_clinical_getOrderDirections(ppo.phys_order_id, null, null, ', ', ', ') direc
	where result.phys_order_id is null
		and result.admin_strikeout_id is null and result.chart_code_history_id is not null

	IF @includeStruckOut=1
	BEGIN
		/*
		** update the schedule for struckout administrations
		*/
		update result
			set result.phys_order_id = ppo.phys_order_id
			, result.description = ppo.description
			, result.generic = ppo.related_generic
			, result.directions = direc.directions
			, result.form = ppo.form
			, result.uom_id = CASE WHEN pos.dose_uom_id is null THEN pos.quantity_uom_id ELSE pos.dose_uom_id END
			, result.schedule_effective_date = CASE WHEN adso.effective_date is null THEN adso.perform_date ELSE adso.effective_date END
			, result.amountAdministered = CASE WHEN adso.quantity is not null AND adso.quantity != '' THEN adso.quantity 
												ELSE CASE WHEN ch.modified_quantity is not null THEN ch.modified_quantity 
													ELSE CASE WHEN sd.modified_quantity is not null AND sd.modified_quantity != '' THEN sd.modified_quantity ELSE 
														CASE WHEN adso.chart_code='0' THEN sd.dose ELSE null END END
												END
											END
			, result.administeredStatus = CASE WHEN adso.chart_code='0' THEN 'Administered' ELSE cc.item_description END
			, result.schedule_perform_initials = adso.perform_initials
			, result.schedule_perform_date = adso.perform_date
			, result.schedule_struckout = 1
			, result.schedule_strikeout_date = adsoaudit.strikeout_date
			, result.schedule_strikeout_by = su.initials
		from #resultsBEHV result
			join pho_admin_strikeout adso on adso.schedule_detail_id = result.schedule_detail_id
				and (adso.chart_code_history_id = result.chart_code_history_id or (adso.chart_code_history_id is null and result.chart_code_history_id is null)) 
				and adso.admin_strikeout_id = result.admin_strikeout_id and adso.deleted='N'
			join pho_schedule_details_strikeout_performby_useraudit adsoaudit on adsoaudit.admin_strikeout_id = adso.admin_strikeout_id
			join cp_sec_user_audit su on su.cp_sec_user_audit_id = adsoaudit.strikeout_performby_useraudit_id
			join pho_schedule sch on sch.schedule_id = adso.schedule_id
			join pho_order_schedule pos on pos.order_schedule_id = sch.order_schedule_id
			join pho_phys_order ppo on ppo.phys_order_id = sch.phys_order_id
			left join common_code cc on cc.short_description=adso.chart_code and cc.item_code='phocht' and cc.deleted='N'
			left join pho_schedule_details sd on sd.pho_schedule_detail_id = adso.schedule_detail_id
			left join pho_chart_code_history ch on ch.schedule_detail_id = adso.schedule_detail_id
			CROSS APPLY dbo.fn_clinical_getOrderDirections(ppo.phys_order_id, null, null, ', ', ', ') direc
		where result.phys_order_id is null
			and result.admin_strikeout_id is not null
	END

	IF @debug_me = 'Y'
	BEGIN
		select 'Adding med Administrations'
		select * from #resultsBEHV
	END

	delete from #resultsBEHV where @lookBackType = 1 AND schedule_effective_date is not null AND
			((@lookBackPeriodStartDate is not null AND @lookBackPeriodStartDate > schedule_effective_date)
				OR (@lookBackPeriodEndDate is not null AND schedule_effective_date > @lookBackPeriodEndDate))
	
	IF @debug_me = 'Y'
	BEGIN
		select 'Removing med Administrations not within lookbackPeriod'
		select * from #resultsBEHV
	END
END

/*
	Return Results
*/
select client_id,
       client_number,
       client_first_name,
       client_last_name,
       unit_desc,
       room_desc,
       bed_desc,
       documentation_id,
       itemValueId,
       itemValue,
       intervention_id,
       intvItemValueId,
       intvItemValue,
       std_question_id,
       initials_docu,
       effective_schedule_date,
       documented_date,
       struckout,
       strikeout_date,
       noBehaviorsObserved,
       physicalBehvToOthers,
       grabbingOthers,
       hittingOthers,
       kickingOthers,
       pushingOthers,
       physicallyAggressiveToOthers,
       scratchingOthers,
       verbalBehvToOthers,
       accusingOfOthers,
       cursingAtOthers,
       angerAtOthers,
       screamingAtOthers,
       threateningOthers,
       sociallyInappropriateBehv,
       disruptiveSounds,
       disrobingPublic,
       enteringRoom,
       publicSexualActs,
       repetitiveMotions,
       rummaging,
       spitting,
       throwingFood,
       throwingWaste,
       otherBehv,
       agitated,
       delusions,
       elopement,
       hallucinations,
       hittingSelf,
       hoarding,
       insomnia,
       neglectingSelf,
       pacing,
       panic,
       pickingSelf,
       refusingCare,
       sad,
       scratching,
       screamingNotAtOthers,
       wandering,
       withdrawn,
       anxious,
       selfInjury,
       residentNotAvailable,
       residentRefused,
       notApplicable,
       noInterventionsAttempted,
       redirect,
       removeSituation,
       provideCalmEnvironment,
       meaningfulActivity,
       reapproach,
       oneOnOne,
       offerFood,
       toilet,
       provideComfort,
       intvResidentNotAvailable,
       intvResidentRefused,
       intvNotApplicable,
       schedule_detail_id,
       chart_code_history_id,
       admin_strikeout_id,
       schedule_effective_date,
       phys_order_id,
       description,
       generic,
       directions,
       amountAdministered,
       form,
       uom_id,
       administeredStatus,
       schedule_perform_initials,
       schedule_perform_date,
       schedule_struckout,
       schedule_strikeout_by,
       schedule_strikeout_date
from #resultsBEHV
where
	(@includeNoBehaviorsObserved = 1 
		or (noBehaviorsObserved=0 and residentNotAvailable=0 and residentRefused=0 and notApplicable=0)
	)
group by client_id
	, client_number
	, client_first_name
	, client_last_name
	, unit_desc
	, room_desc
	, bed_desc
	, documentation_id
	, itemValueId
	, itemValue
	, intervention_id
	, intvItemValueId
	, intvItemValue
	, std_question_id
	, initials_docu
	, effective_schedule_date
	, documented_date
	, struckout
	, strikeout_date

	, noBehaviorsObserved

	, physicalBehvToOthers
	, grabbingOthers
	, hittingOthers
	, kickingOthers
	, pushingOthers
	, physicallyAggressiveToOthers
	, scratchingOthers

	, verbalBehvToOthers
	, accusingOfOthers
	, cursingAtOthers
	, angerAtOthers
	, screamingAtOthers
	, threateningOthers

	, sociallyInappropriateBehv
	, disruptiveSounds
	, disrobingPublic
	, enteringRoom
	, publicSexualActs
	, repetitiveMotions
	, rummaging
	, spitting
	, throwingFood
	, throwingWaste

	, otherBehv
	, agitated
	, delusions
	, elopement
	, hallucinations
	, hittingSelf
	, hoarding
	, insomnia
	, neglectingSelf
	, pacing

	, panic
	, pickingSelf
	, refusingCare
	, sad
	, scratching
	, screamingNotAtOthers
	, wandering
	, withdrawn
	, anxious
	, selfInjury


	, residentNotAvailable
	, residentRefused
	, notApplicable

	, noInterventionsAttempted
	, redirect
	, removeSituation
	, provideCalmEnvironment
	, meaningfulActivity
	, reapproach
	, oneOnOne
	, offerFood
	, toilet
	, provideComfort

	, intvResidentNotAvailable
	, intvResidentRefused
	, intvNotApplicable

	, schedule_detail_id
	, chart_code_history_id
	, admin_strikeout_id
	, schedule_effective_date
	, phys_order_id
	, description
	, generic
	, directions
	, amountAdministered
	, form
	, uom_id
	, administeredStatus
	, schedule_perform_initials
	, schedule_perform_date
	, schedule_struckout
	, schedule_strikeout_by
	, schedule_strikeout_date
order by
	CASE WHEN (@sortByLocation = 1) THEN unit_desc END ASC,
	CASE WHEN (@sortByLocation = 1) THEN room_desc END ASC,
	CASE WHEN (@sortByLocation = 1) THEN bed_desc END ASC,
		client_last_name ASC, 
		client_first_name ASC,
		effective_schedule_date DESC,
		documentation_id DESC,
		schedule_perform_date DESC,
		description ASC,
		directions ASC,
		schedule_detail_id ASC


    DROP TABLE #resultsBEHV

    DROP TABLE #behaviorResult
END
GO
GRANT EXECUTE ON  dbo.sproc_pho_poc_behavior_monitoring_intervention to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_pho_poc_behavior_monitoring_intervention.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_poc_behavior_monitoring_intervention.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_insert_chart_generated_log.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-64645:			script to create sproc_prp_insert_chart_generated_log Procedure  
--						
-- 
-- Written By:          Rick Penton
-- Reviewed By:         Goran Paric
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script: Inserts a row in the chart_printed_log table
--
-- =================================================================================
-- REVISION HISTORY
-- DATE			NAME				JIRA        VERSION		DESCRIPTION
-- 2014-10-02	Rick Penton			PCC-64645	3.7.5		Initial creation of this stored proc
-- 2015-06-03	Goran Paric			PCC-76022	3.7.8		Table changes based on new design.
-- 2015-06-15	Goran Paric			PCC-76022	3.7.8		Changed SPROC name.
-- 2015-06-25	Goran Paric			PCC-76022	3.7.8		Added transaction block.
-- 2015-07-07	Goran Paric			PCC-76029	3.7.8		Added new fields for emar lines and photo on cover page only.
-- 2015-07-08	Goran Paric			PCC-75219	3.7.8		Added generate_as_zip flag.
-- 2015-07-08	Goran Paric			PCC-78737	3.7.8		Changed name of column to better match values stored.
-- 2015-07-30	Rick Penton			PCC-79469	3.7.8		Added intelligent scheduling logic
-- 2015-08-05	Rick Penton			PCC-80248	3.7.8		Added column job_guid to table
-- 2015-08-17	Rick Penton			PCC-80862	3.7.8		Add 1 to number of days, since periods are inclusive
-- 2015-09-08	Rick Penton			PCC-81487	3.7.8		Intelligent scheduling to recognize multiple calls to some reports
-- 2015-09-16	Rick Penton			PCC-82409	3.7.8		Include client_id in test for duplicate request
-- 2015-09-29	Rick Penton			PCC-82706	3.7.8		Fixed filtering of administration records to scope by LOB and state
-- 2015-10-01	Rick Penton			PCC-83176	3.7.8.1		Additional variables for Intelligent Scheduling
-- 2015-10-16	Rick Penton			PCC-75247	3.7.8.1		Add support for special parameter sel_report_criteria
-- 2015-10-22	Rick Penton			PCC-84091	3.7.8.1		Handle special case assessments for SNRZ
-- 2015-12-15	Surender Kumar		PCC-75837	3.7.8.2		Added columns loginname and chart_name to table
-- 2015-01-04	Surender Kumar		PCC-87497	3.7.8.2		Added column 'userid' to table dbo.prp_chart_generated_log
-- 2017-10-27	Tri Vo				CORE-5235	3.7.15		Added column generated_date and job_started_date
-- 2021-10-01	Yevgen Voroshylov	CORE-93852	4.4.7		Added column user_facility_country
-- =================================================================================

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[sproc_prp_insert_chart_generated_log]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
   DROP PROCEDURE [dbo].[sproc_prp_insert_chart_generated_log]

GO
   
CREATE PROCEDURE [dbo].[sproc_prp_insert_chart_generated_log]
	 @chart_id							int
	,@client_id							int
	,@fac_id							int
	,@generated_by						varchar(60)
	,@generated_date					datetime
	,@deleted_by						varchar(60)
	,@deleted_date						datetime
	,@printed_date						datetime
	,@from_date							datetime
	,@to_date							datetime
	,@file_id							int
	,@job_guid							varchar(36)
	,@resident_photo_on_chart_reports	char(1) = 'N'
	,@resident_photo_on_cover_page_only	char(1) = 'N'
	,@non_emar_lines					int = 0
	,@report_list						varchar(max)	-- used by intelligent scheduling to determine the number of times each report is called in the chart
	,@org_code							varchar(10)
	,@loginname							varchar(60)
	,@userid							int
	,@user_facility_country             varchar(10)
	,@debug_me							char(1) = 'N'
	,@status_code 						int				OUTPUT
	,@status_text 						varchar(3000) 	OUTPUT
	
AS

SET NOCOUNT ON;


-- parameter sniffing variables
DECLARE   @vChartID INT
		, @vReport_list VARCHAR(MAX)
		, @vFacId INT
		, @vClientId INT
		, @vOrgCode varchar(10)
		, @vLoginname varchar(60)
		, @vUserId INT

DECLARE @chart_generated_log_id INT,  @error_code int
DECLARE @status CHAR(1), @orig_status CHAR(1) = NULL
DECLARE @orig_generated_date datetime, @orig_job_started_date datetime, @orig_chart_generated_log_id int
--set local variables
SELECT @status_code = 0
SELECT @status_text = ''

-- parameter sniffing
SET @vChartID = @chart_id
SET @vReport_list = @report_list
SET @vFacId = @fac_id
SET @vClientId = @client_id
SET @vOrgCode = CASE WHEN LEFT(@org_code, 4) = 'SNRZ' THEN 'SNRZ' ELSE @org_code END
SET @vLoginname = @loginname
SET @vUserId = @userid

BEGIN TRY

		------------------------------------------------------------------------------------------------------
		---		Check for DUPLICATE REQUEST
		---		If the chart being generated is for the same chart and period as for a chart that has already
		---		been requested, then set the status of the new record to 'A' (already requested) and save the
		---		original status to return to the caller.
		---
		SELECT @orig_status = [status], 
			@orig_generated_date=generated_date, 
			@orig_job_started_date=job_started_date,
			@orig_chart_generated_log_id = chart_generated_log_id
			FROM dbo.prp_chart_generated_log WITH (NOLOCK)
		WHERE client_id = @vClientId AND chart_id = @chart_id AND from_date = @from_date AND to_date = @to_date AND ([status] = 'Q' OR [status] = 'S')
		IF @orig_status IS NOT NULL
			SET @status = 'A'

		ELSE
		BEGIN
			------------------------------------------------------------------------------------------------------
			---		INTELLIGENT SCHEDULING
			---		set the @status of the chart request to 'Q' (Queued) or 'S' (Scheduled), according to the 
			---		scheduling rules in effect (table prp_chart_scheduling_rule)
			---
			DECLARE @myVarString NVARCHAR(MAX)
			DECLARE @myVariables TABLE (N FLOAT, NRI FLOAT, P INT, UR BIT, TOD CHAR(8), NCQ INT, MAXQ VARCHAR(20))
			DECLARE @report89_included BIT
			SET @report89_included = CASE WHEN EXISTS(SELECT 1 FROM dbo.prp_chart_report WHERE chart_id = @vChartID AND report_id = -89) THEN 1 ELSE 0 END
			-- Add variables N, P, UR, TOD, NCQ, and MAXQ
			INSERT INTO @myVariables

			SELECT
				  CONVERT(FLOAT, SUM(CASE WHEN cr.report_id IS NULL THEN 0 ELSE report_run_time_ms END) * 100) / CONVERT(FLOAT, SUM(report_run_time_ms)) AS N
				, CONVERT(FLOAT, SUM(CASE WHEN cr.report_id IS NULL THEN 0 ELSE report_run_time_ms * report_count.value END) * 100) / CONVERT(FLOAT, SUM(report_run_time_ms)) AS NRI
				, DATEDIFF(d, @from_date, @to_date) + 1 AS P
				, @report89_included AS UR
				, LEFT(CONVERT(VARCHAR, GETDATE(), 114), 8) AS TOD
				, (SELECT COUNT(1) FROM dbo.prp_chart_generated_log WHERE [status] = 'Q') AS NCQ
				, ISNULL((SELECT value from dbo.configuration_parameter WHERE name = 'ehr_chart_feature_max_queued' AND fac_id = -1), 0) AS MAXQ

			FROM dbo.prp_chart_report_timings ct WITH (NOLOCK)
			LEFT JOIN dbo.prp_chart_report cr WITH (NOLOCK)
						ON	ct.report_id = cr.Report_id
						AND cr.chart_id = @vChartID
			OUTER APPLY ( SELECT COUNT(1) AS value FROM dbo.Split(@vReport_list, ',') rl WHERE rl.items = CONVERT(VARCHAR,ct.report_id) ) report_count

			SELECT @myVarString = CONVERT(varchar, N) + ' AS N'
								+ ', ' + CONVERT(varchar, NRI) + ' AS NRI'
								+ ', ' + CONVERT(VARCHAR, P) + ' AS P'
								+ ', ' + CONVERT(VARCHAR, UR) + ' AS UR'
								+ ', ''' + TOD + ''' AS TOD'
								+ ', ' + CONVERT(VARCHAR, NCQ) + ' AS NCQ'
								+ ', ' + MAXQ + ' AS MAXQ'
			FROM @myVariables

			-- create dynamic SQL statement to evaluate the rules using the value of the variables
			DECLARE @mySQL nvarchar(MAX)
			SELECT	@mySQL = 'SELECT @pass_parm = SUM(pass)  FROM (' + 
							REPLACE(REPLACE(
							STUFF([sql], 1, 10, '')
							, '&lt;', '<')
							, '&gt;', '>')
							+ ') [all]'
					FROM (	SELECT ' UNION ALL SELECT CASE WHEN ' + rule_text + ' THEN 1 ELSE 0 END AS [pass] FROM (SELECT '
									+ @myVarString + ') x' 
							FROM dbo.prp_chart_scheduling_rule WITH (NOLOCK) FOR XML PATH('')
						  ) [rule] ([sql])

			-- execute the sql and set status according to the result of the SQL
			DECLARE @pass int
			EXEC sp_executesql @mySQL, N'@pass_parm INT OUT', @pass_parm = @pass OUT
			SET @status = CASE WHEN @pass > 0 THEN 'Q' ELSE 'S' END
		END

		------------------------------------------------------------------------------------------------------
		---		GET FORMATTED VALUES FOR REPORT PARAMETERS
		---		Call SPROC sproc_prp_get_chart_report_parameters to return the formated values for include
		---		and filter options and put these into a table variable.  This table will be joined to and
		---		these values will be used if the params contains the 'sel_report_criteria=' token.
		---
		DECLARE @rows_ret int, @statuscode int, @statustext varchar(3000)
				--, @filter_options varchar(max)
				--, @include_options varchar(max)

		DECLARE @report_parameters table
			(	  report_id int
				, report_name varchar(300)
				, fac_id int
				, params varchar(MAX)
				, filter_options varchar(MAX)
				, include_options varchar(MAX)
				, include_resident_photo char(1)
			)

		INSERT INTO @report_parameters
		EXEC dbo.sproc_prp_get_chart_report_parameters
		  @chart_id = @vChartID
		, @fac_id = @vFacId
		, @filter_sep = ';--;'
		, @execution_user_login = @generated_by
		, @org_code = @vOrgCode
		, @debug_me = 'N'
		, @rows_returned = @rows_ret out
		, @status_code = @statuscode out
		, @status_text = @statustext out
		UPDATE @report_parameters
		SET   filter_options = REPLACE(filter_options, '^', ', ')
			, include_options = REPLACE(include_options, '^', ', ')

		------------------------------------------------------------------------------------------------------
		---		GET FORMATTED VALUES FOR Client Name and Date Range
		---		These will form part of the replaced 'sel_report_criteria=' param if this token is found
		---		in the params of any reports in this chart.
		---
		DECLARE @name_and_date VARCHAR(500)
		SELECT @name_and_date = '<b>Resident: </b>' + m.last_name + ', ' + m.first_name + '(' + c.client_id_number + ')'
							  + '<b>Date Range: </b>' + CONVERT(VARCHAR(10), @from_date, 101) + '-' + CONVERT(VARCHAR(10), @to_date, 101)
		FROM dbo.clients c
		LEFT JOIN dbo.mpi m
				ON m.mpi_id = c.mpi_id
		WHERE c.client_id = @vClientId


		------------------------------------------------------------------------------------------------------
		---		STORE THE RECORDS
		---		prp_chart_generated_log and prp_chart_report_generated_log in same update unit 
		---
		BEGIN TRANSACTION t1
    
		INSERT INTO [dbo].[prp_chart_generated_log]
			([chart_id]
			,[client_id]
			,[fac_id]
			,[status]
			,[generated_by]
			,[generated_date]
			,[deleted_by]
			,[deleted_date]
			,[printed_date]
			,[from_date]
			,[to_date]
			,[file_id]
			,job_guid
			,resident_photo_on_chart_reports
			,scope_fac_id
			,scope_reg_id
			,scope_state_code
			,resident_photo_on_cover_page_only
			,non_emar_lines
			,generate_as_zip
			,loginname
			,chart_name
			,userid
			,user_facility_country
			)

		SELECT
		
			 @chart_id
			,@vClientId
			,@vFacId
			,@status
			,@generated_by
			,@generated_date
			,@deleted_by
			,@deleted_date
			,@printed_date
			,@from_date
			,@to_date
			,@file_id
			,@job_guid
			,c.include_resident_photo
			,c.fac_id
			,c.reg_id
			, c.state_code
			, @resident_photo_on_cover_page_only
			, @non_emar_lines
			, c.generate_as_zip
			,@vLoginname
			,c.chart_name
			,@vUserId
			,@user_facility_country

		FROM	dbo.prp_chart c

		WHERE
			c.chart_id = @chart_id
           
		SET @chart_generated_log_id = SCOPE_IDENTITY()

		INSERT INTO dbo.prp_chart_report_generated_log (chart_generated_log_id, report_id, params, chart_tab_seq, sequence_in_tab)

		SELECT 
			  @chart_generated_log_id
			, r.report_id
			, REPLACE(r.params, 'sel_report_criteria=',
						'sel_report_criteria=' + @name_and_date
					  + CASE WHEN ISNULL(rp.filter_options, '') + ISNULL(rp.include_options, '') = '' 
							 THEN '' 
							 ELSE  
								 CASE WHEN ISNULL(rp.include_options, '') = ''
									   THEN ISNULL(rp.filter_options, '')
									   ELSE ISNULL(rp.filter_options, '') + ';' + ISNULL(rp.include_options, '')
								  END
						END
					 ) AS params
			, ct.chart_tab_seq
			, ctr.sequence_in_tab
		FROM	dbo.prp_chart_generated_log l

		INNER JOIN dbo.prp_chart_report r
				ON l.chart_id = r.chart_id

		INNER JOIN dbo.prp_chart_tab_report ctr
				ON r.report_id = ctr.report_id

		INNER JOIN dbo.prp_chart_tab ct
				ON ctr.chart_tab_id = ct.chart_tab_id

		LEFT JOIN @report_parameters rp
				ON rp.report_id = r.report_id

		WHERE
			l.chart_generated_log_id = @chart_generated_log_id

		UPDATE crgl
		SET params = REPLACE(crgl.params,  cast(admin_rec_param.old_value as varchar(max)), cast(admin_rec_param.new_value as varchar(max)))
		FROM dbo.prp_chart_report_generated_log crgl
		INNER JOIN (	SELECT crgl.chart_generated_log_id, crgl.report_id, old_filter.value AS old_value, new_filter.value AS new_value

						FROM dbo.prp_chart_report_generated_log crgl

						INNER JOIN dbo.prp_chart_generated_log cgl ON crgl.chart_generated_log_id = cgl.chart_generated_log_id

						OUTER APPLY	(	SELECT items
										FROM dbo.split(replace(crgl.params, ';--;', '|'), '|')
										WHERE LEFT(items, 20) = 'sel_admin_record_id='
									) old_filter (value)

						OUTER APPLY	(	SELECT 'sel_admin_record_id=' + STUFF(x.admins, 1, 1, '')
										FROM (	SELECT ',' + sel.admin_id/*, cr.params, cr.report_id, ar.fac_id, ar.reg_id, ar.state_code, usr.fac_id, usr.regional_id, usr.prov*/
												FROM dbo.prp_chart_report cr
												OUTER APPLY (	SELECT items as admin_id
																FROM dbo.split((SELECT substring(items, 21, 1000) as Y
																				FROM dbo.split(replace(cr.params, ';--;', '|'), '|')
																				WHERE LEFT(items, 20) = 'sel_admin_record_id=')
																			, ',')
															) sel
												LEFT JOIN dbo.pho_administration_record ar ON sel.admin_id = CONVERT(VARCHAR (10), ar.administration_record_id) AND ar.deleted = 'N'
												LEFT JOIN dbo.facility usr ON usr.fac_id = @vFacId 
												WHERE ar.administration_record_type_id <> 3066
													AND cr.chart_id = cgl.chart_id
													AND cr.report_id = crgl.report_id
													AND ((ar.fac_id = -1
													OR (ar.fac_id <> -1 AND ar.reg_id IS NOT NULL AND ar.state_code IS NOT NULL AND ar.reg_id = usr.regional_id AND ar.state_code = usr.prov)
													OR (ar.fac_id <> -1 AND ar.reg_id IS NOT NULL AND ar.state_code IS NULL AND ar.reg_id = usr.regional_id)
													OR (ar.fac_id <> -1 AND ar.state_code IS NOT NULL AND ar.reg_id IS NULL AND ar.state_code = usr.prov)
													OR (ar.fac_id <> -1 AND ar.fac_id = @vFacId AND ar.reg_id IS NULL AND ar.state_code IS NULL)))
												FOR XML PATH ('')
											) x(admins)
									) new_filter (value)

						WHERE crgl.chart_generated_log_id = @chart_generated_log_id
							AND (report_id = -3 OR report_id = -21)
					) admin_rec_param

						ON crgl.chart_generated_log_id = admin_rec_param.chart_generated_log_id

		WHERE crgl.chart_generated_log_id = @chart_generated_log_id
		AND (crgl.report_id = -3 OR crgl.report_id = -21)

		SELECT @chart_generated_log_id AS chart_generated_log_id, 
			@status AS status, @orig_status AS orig_status, @orig_generated_date as generated_date,
			@orig_job_started_date as job_started_date, @orig_chart_generated_log_id as orig_chart_generated_log_id

		COMMIT TRANSACTION t1
	
		GOTO PgmSuccess	
  
END TRY
BEGIN CATCH

	SET @error_code = @@error

	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION t1
    
	SET @status_text = ERROR_MESSAGE()
	SET @status_code = 1
	GOTO PgmAbend
	
END CATCH

PgmSuccess:
IF @status_code = 0
BEGIN
    IF @debug_me='Y' 
		PRINT 'Successfull execution of stored procedure'
	
    RETURN
END
	
PgmAbend:
		SELECT NULL AS chart_generated_log_id, 'F' AS status, NULL AS orig_status, NULL as generated_date,
			NULL as job_started_date, NULL as orig_chart_generated_log_id

IF @debug_me='Y'
	IF @status_code <> 0
	BEGIN
		PRINT 'Stored procedure failure: '+ convert(varchar(26),getdate(),109)
		PRINT 'Error code: '+convert(varchar(10),@error_code) + '; Error description:  ' + @status_text
	END
 
GO
                        
GRANT EXECUTE ON [dbo].[sproc_prp_insert_chart_generated_log] TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_insert_chart_generated_log.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_insert_chart_generated_log.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-45691       :   script to create sproc_prp_order_based_recap_order_report Procedure  
--						-- 
-- Written By:          Henny Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_recap_order_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:

23/09/2013  Dominic Christie	PCC- 46630			Added the Order By Filter
2013-12-10 Rolly Sanchez		PCC-50905(3.7.2.2)	change order summary formatting from style to b-tag
2014-14-10 Dominic Christie		PCC-53334(3.7.4)	Rolled back the ICD 10 Changes
2014-09-25 Dominic Christie		PCC-64671(3.7.5)	Added the logic to handle the Status Id 9 to print Pending Clinical Review
2014-12-19 H Ehghaghi 			PCC-68306(3.7.6)	Adding  Orders Pending Signature Status 
2015-23-03 Dom Christie         PCC-72173(3.7.7)    Implemented The ICD 10 codes using the end date as per the requirement.This end date is passed to the diagnosis function along with                                                            clientid
2015-03-30 H Ehghaghi	        PCC-73709(3.7.7)    Remove generic Metadat Store procedure
2015-23-11 Dom Christie         PCC-85632(3.7.8.2)  Filtered out the Discharged orders using the classid =2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2017-08-31 Hemanth Reddy	PCC-102383 (3.7.14) Fixed the script to get date format based on the execution user's default facility.
-- ================================================================================= */


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_recap_order_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_recap_order_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

Create Procedure dbo.sproc_prp_order_based_recap_order_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************


Sample Execution Script:
---Select * from prp_report_column


Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_recap_order_report
 @report_id =  '-1014'--'-13'
,@fac_id =  '1'
,@field_list =  '-12,-48,-51,-103,-37,-41'
--,@field_list = '0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36'
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;custom_order_date_range_repcap=01/01/2015,04/30/2015'
,@sort_list =  '0=-1'
,@execution_user_login =  'PCC-ehghah'
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null

Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint;

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @vSP_ClientId int

;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)

-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare  @term_admission varchar(50)
        ,@term_client varchar(50),@vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)




-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit



----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime


	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime
	,@IcdDate datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_range varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime


	,@vfil_asof_order varchar(100)  ---as of date setting for order summary report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime


	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'
	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime


Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );
 Create Clustered Index _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));



CREATE TABLE #view_prp_pho_phys_order_schedule (
administered_by_id int,
alter_med_src int,
client_id int,
communication_method int,
completed_by varchar(60),
max_end_date datetime,
confirmed_by varchar(60),
confirmed_by_long_username varchar(60),
confirmed_date datetime,
created_by varchar(60),
[created_by_long_username] varchar(60),
created_date datetime,
diet_type int,
diet_texture int,
diet_supplement int,
diet_supplement_desc varchar(200),
diet_texture_desc  varchar(200),
diet_type_desc varchar(200),
directions varchar(max),
discontinued_date datetime,
end_date datetime,
fac_id int,
fluid_consistency_desc varchar(200),
hold_date datetime,
hold_date_end datetime,
indications_for_use varchar(250),
order_category_id int,
order_date datetime,
order_desc varchar(max),
order_status int,
order_relationship int,
order_type_id int,
pharmacy_id int,
phys_order_id int,
physician_id int,
related_diagnoses varchar(250),
related_generic varchar(250),
resume_date datetime,
revision_by varchar(60),
revision_by_long_username varchar(60),
revision_date datetime,
route_of_admin_desc varchar(250),
schedule_template int,
[start_date] datetime,
std_order_id int,
supplementary_notes varchar(max),
supply_order_date datetime,
supply_last_order_date datetime,
supply_last_reorder_date datetime,
supply_reorder char(1),
fluid_consistency int,
active_flag varchar(3),
order_verified varchar(3),
draft bit,
std_freq_id int,
description varchar(max),
order_schedule_id int,
last_reorder_date datetime,
date_ordered datetime,
diagnoses varchar(400),
route_of_admin int,
controlled_substance_code int
);

CREATE CLUSTERED INDEX _tmp_idx_prp_pho_phys_order_schedule on #view_prp_pho_phys_order_schedule(phys_order_id,order_schedule_id);


CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary varchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
			, order_schedule_id int
            , controlled_substance_code int
);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #prp_admin_orders
(
---Revision(chrisd):PCC- 46630 ; Begin
  admin_physician_Id int
---End
,phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
, admin_phys_order_id int

);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;


----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
);
 CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	SET @vSortList	  = @sort_list;


	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

  --------------------------------------------------

  ---------Code to select the date format based on the country for the default facility of executing user--------------------
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	---------------------------------------------------------***********---------------------------------------------------------

  DECLARE @vParentReportId int
		, @vWV_transfer int
	    , @footer varchar(50)
        , @header varchar(50)


    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9


	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting facility terminology information... ' + convert(varchar(26),getdate(),109)

	Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		--, @vTermAdmission = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc)


SET @vTermClient=@term_client
SET @vTermAdmission=@term_admission;


	-----------------Begin The Core Part of Generic Metadata ---
	;WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;

	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN
					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---



SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission


	if isnull(@vGeneric_statuscode,0)  = 1
		  begin
				set @status_text = 'sproc_prp_generic_metadata returned the following error: ' + isnull(@vGeneric_statustext,'')
				Raiserror( @vGeneric_statustext, 11, 1 );
	  end

-----------------------------------------------



	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';

	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');


	select @vStep = 16
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;


	if @debug_me='Y' Select 'Columnname' name,@vColWidth
		  ,@vCol1
		  ,@vCol2
		  ,@vCol3
		  ,@vCol4
		  ,@vCol5
		  ,@vCol6
		  ,@vCol7
		  ,@vCol8
		  ,@vCol9
		  ,@vCol10
		  ,@vCol11
		  ,@vCol12
		  ,@vRelatedDiagnoses
		  ,@vIndicationsForUse
		  ,@vOrderSummary
		  ,@vOrderScheduleSummary
		  ,@vDirections
		  ,@vOrderDesc
		  ,@vRelatedGeneric
		  ,@vAdditionalDirections
		  ,@vRouteOfAdmin
		  ,@vDietInfo
		  ,@vAuditInfoSelected

	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		  +  isnull(@vCol2,'')
		  + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END



	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 18
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 20
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter


   set @vIncludeAdminOrder=1; -- for showining detail


	-----DATE TIME

	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'custom_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SET @IcdDate=@vfil_order_date
		SEt @vfil_order_date  = @vfil_order_date_type
	End



SET @vOrderSummary = '1'
	----Special filters date range for med review report


	select @vStep = 24
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_med_prof'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 24
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 26
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

------chrisd---change--Begin
if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_med_prof')				SET @vfil_physician  = '1';
-------Change--End

	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 28
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 30;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END




	-----getting the list of clients
	select @vStep = 32
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select client_id, mpi_id, client_id_number
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end +
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender



		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id


		WHERE 	c.fac_id =  @vFacID
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 34

	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select '#clients' name,* from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 36
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 38
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;



		-- get all the admin order first
	BEGIN
		select @vStep = 40
        if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of admin order '+ convert(varchar(26),getdate(),109);


		;With tb1
		  as
		  (
		  Select

				pro.related_phys_order_id Original_phys_order_id
				, pro.order_related_id
				, pro.phys_order_id as admin_phys_order_id
				, pro.order_relationship_id
				, pao.effective_date
				, pao.ineffective_date
				, pao.physician_id
				, pao.reason
				, pao.created_date as admin_order_created_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock )
				on pro.phys_order_id = pao.phys_order_id
					  and  isnull(pro.deleted,'N')='N'
					  and isnull(pao.deleted,'N')='N'
					  and pao.exclude_eom_status_calculation=0
				inner join dbo.pho_phys_order  po WITH (NOLOCK) on  pro.related_phys_order_id = po.phys_order_id AND po.order_class_id =1

				INNER join #clients c with (NOLOCK)  on po.client_id = c.client_id
		  )
		  , tb2 as
		  (
			Select tb1.original_phys_order_id
				, tb1.order_related_id
				, tb1.admin_phys_order_id
				, tb1.order_relationship_id
				, tb1.effective_date
				, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
				, tb1.physician_id
				, tb1.reason
				, tb1.admin_order_created_date
				, nextrow.admin_phys_order_id as next_admin_phys_order_id
				From tb1
					  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		  )

--select * from tb2

		  Insert into #prp_admin_orders(
							---Revision(chrisd):PCC- 46630 ; Begin
							admin_physician_Id
							----End
                            ,phys_order_id
                             , effective_date
                             , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by,admin_phys_order_id)

		         Select
                 tb2.physician_id
                ,tb2.original_phys_order_id
				, tb2.effective_date
				, case when tb2.order_relationship_id =2 then null else tb2.ineffective_date end ineffective_date
				, tb2.order_relationship_id
				, Case tb2.order_relationship_id
							when 1 then 'hold'
							when 2 then 'resume'
							when 3 then 'discontinue'
							else 'unknown'
						end as relationship
				, tb2.reason
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
				,admin_phys_order_id
		  From tb2
				left OUTER JOIN dbo.contact ct WITH (NOLOCK )
							on ct.contact_id = tb2.physician_id
                 ---INNER JOIN
---Revision(chrisd):PCC- 46630 ; Begin

left join #PRP_Multi_Filters fil_orderphy_id		on fil_orderphy_id.filter_name	= 'pho_med_prof'			and fil_orderphy_id.filter_value = tb2.physician_id

---Revision(chrisd):ENd
                 where

				 ((isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))

					)
---Revision(chrisd):PCC- 46630 ; Begin

         AND ((@vfil_physician='1' and fil_orderphy_id.filter_value is not null)or  @vfil_physician is  null)

---Revision(chrisd):End

		update a set 	ineffective_date=b.ineffective_date
		--select b.ineffective_date,a.*
		from #prp_admin_orders  a
		inner join pho_admin_order b on a.admin_phys_order_id=b.phys_order_id
		--where a.phys_order_id=2234794

		--select * from #prp_admin_orders


			if @debug_me='Y' select @vfil_asof_order_date_d1 as asof_d1, @vfil_asof_order_date_d2 as asof_d2, @vfil_order_date orderdate1, @vfil_order_date2 orderdate2


			if @debug_me='Y' select '#prp_admin_orders' as admin_order,* from #prp_admin_orders



--getting list of orders
			select @vStep = 158
			if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);


			if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'


                INSERT INTO #view_prp_pho_phys_order_schedule
                    select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, case when po.discontinued_date is null then po.max_end_date else po.discontinued_date end  max_end_date
						, null      as confirmed_by
						, null  	as confirmed_by_long_username
						, null	    as confirmed_date
						,po.created_by as [created_by]
						,null as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						,case when po.discontinued_date is null then po.max_end_date else po.discontinued_date end  end_date
						--, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								else NULL end as order_desc
						, null as order_status --OrderStatus.order_status as order_status
						, null as order_relationship --OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by as [revision_by]
						,null as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[min_start_date] [start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin
						, po.controlled_substance_code
						--, po.order_verified
						--, po.active_flag
			from view_prp_pho_phys_order_schedule po
			INNER JOIN pho_phys_order ppor ON po.phys_order_id=ppor.phys_order_id
			AND ppor.order_class_id =1
					inner join #clients clients  with (nolock)
							on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
			 where po.draft='0'
				and	po.order_category_id  <> 3030  ----exclude administrative orders
	            AND po.fac_id = @vFacId;




if @debug_me='Y' select '#view_prp_pho_phys_order_schedule', * from #view_prp_pho_phys_order_schedule
---Order without Admin
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code
				)

				Select  distinct
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id
                left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id
				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					------DATE FILTERS
					AND 1 =
							case when
								((po.order_date is not null and po.order_date < @vfil_order_date2  )
										and po.order_date >= @vfil_order_date )

								 ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending
								then 1 else 0 end
					AND NOT EXISTS   (select 1 from #prp_admin_orders  ho where po.phys_order_id = ho.phys_order_id);


--Order Adminstrated
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code


				)
				      Select
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id
				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id
                left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'
                           and ph.filter_value = ho.admin_physician_id ---Revision(chrisd):PCC- 46630 ;po.physician_id replaced with ho.admin_physician_id
				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					------DATE FILTERS
--					AND 1 =
--							case when
--								((po.order_date is not null and po.order_date < @vfil_order_date2  )
--										and po.order_date >= @vfil_order_date )
--
--								 ---handling with or without schedules
--								and (po.end_date is null  or po.end_date >= @vfil_order_date)
--								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
--								and isnull(po.active_flag,'y') = 'y'   --- valid order
--									  and po.order_verified = 'Y'   -----no pending
--
--								then 1 else 0 end ;

			--END

		---no schedule level or schedule detail level
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code

				)
				Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</b>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )

					-- new order date range

					and 1= case when
					        (po.order_date is null or ( po.order_date < @vfil_order_date2
										 and po.order_date >@vfil_order_date ))

						and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

					then 1 else 0 end

					and not exists (select 1 from #PRP_Orders b where  po.phys_order_id=b.phys_order_id)

Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code

				)
                Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</b>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'
                  and ph.filter_value = ho.admin_physician_id --Revision(chrisd):PCC- 46630 ;po.physician_id replaced with ho.admin_physician_id
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )

					-- new order date range

--					and 1= case when
--					        (po.start_date is null or ( po.start_date < @vfil_order_date2
--										 and po.start_date >@vfil_order_date ))
--
--						and (po.end_date is null  or po.end_date >= @vfil_order_date)
--								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
--								and isnull(po.active_flag,'y') = 'y'   --- valid order
--									  and po.order_verified = 'Y'   -----no pending
--
--					then 1 else 0 end

					and not exists (select 1 from #PRP_Orders b where  po.phys_order_id=b.phys_order_id)



	end

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)


	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status


-- get all orders for that facility/client
if @debug_me='Y'  select '#tempResult',* from #tempResult

if @client_id <> '-1' set @vSP_ClientId = @client_id

DECLARE @vSelectedDate datetime
set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vSelectedDate
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


-- Update order summery
if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
									+ replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
			from #PRP_Orders o
			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
							(
								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.start_date
									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

			update #PRP_Orders
				set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
				where order_status = 4

	END


--	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )

			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by



	end

	if  @vfil_created_by is not null or @vfil_confirmed_by is not null
	begin
		delete #PRP_Orders
			from #PRP_Orders po
			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
							)



	end
	if @debug_me = 'y' Select * from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retrieving administrative orders ' + convert(varchar(26),getdate(),109)

--	 get all administrative orders instead of just hold orders

-- eliminated usage of view_prp_pho_administrative_order

	/*TRUNCATE table #prp_admin_orders

	;With tb1
	as
	(
	Select

		 pro.related_phys_order_id Original_phys_order_id
		, pro.order_related_id
		, pro.phys_order_id as admin_phys_order_id
		, pro.order_relationship_id
		, pao.effective_date
		, pao.ineffective_date
		, pao.physician_id
		, pao.reason
		, pao.created_date as admin_order_created_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
		from dbo.pho_related_order  pro with (nolock )
		inner Join dbo.pho_admin_order pao  with (nolock )
		on pro.phys_order_id = pao.phys_order_id
			and  isnull(pro.deleted,'N')='N'
			and isnull(pao.deleted,'N')='N'
			and pao.exclude_eom_status_calculation=0
		inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
	)
	, tb2 as
	(
	  Select tb1.original_phys_order_id
		, tb1.order_related_id
		, tb1.admin_phys_order_id
		, tb1.order_relationship_id
		, tb1.effective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
		, tb1.physician_id
		, tb1.reason
		, tb1.admin_order_created_date
		, nextrow.admin_phys_order_id as next_admin_phys_order_id
		From tb1
			left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
	)

	Insert into #prp_admin_orders(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

	Select  tb2.original_phys_order_id
		, tb2.effective_date
		, tb2.ineffective_date
		, tb2.order_relationship_id
		, Case tb2.order_relationship_id
				when 1 then 'hold'
				when 2 then 'resume'
				when 3 then 'discontinue'
				else 'unknown'
			  end as relationship
		, tb2.reason
		, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
	 From tb2
		left OUTER JOIN dbo.contact ct WITH (NOLOCK )
				on ct.contact_id = tb2.physician_id

where
			( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))
*/


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 finished retrieving administrative orders ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #prp_admin_orders

	if @debug_me='Y' select  @vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end


	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	--Select '#PRP_Orders3' name,order_summary,order_status, * from #PRP_Orders;


	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vDateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vDateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vDateFormatStyle)			as created_date

--		, po.directions									as directions
		, replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vDateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,@vDateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
            when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status in (11,10)  then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'')
		, isnull(po.order_desc,'') + isnull((replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')),'')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vDateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vDateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vDateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vDateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vDateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vDateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		--, po.order_schedule_id

		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join dbo.common_code cc with (nolock ) on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #prp_admin_orders ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								convert(char(10),effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								isnull(convert(char(10),ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								reason + char(9) +
								ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #prp_admin_orders ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

--			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
--							(
--								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
--									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
--									where po.phys_order_id = o.phys_order_id
--									order by po.start_date
--									FOR XML PATH (''), TYPE
--							) a ( order_summary )
--				) OrderSumm

	)
	, tbWithGroupSet
	as
	(
		Select *
	      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_summary
			  when 'pho_order_summary'			then order_schedule_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date


			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date




			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			--, order_schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id,G1,G2,G3, G_set_id
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+ 'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,@IcdDate,@vFacId) ,'')

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	--, order_schedule_id
   	from tbWithSort
	Order by row_num
	)

	--SELECT DISTINCT * FROM tbWithSort
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code
		, (case when row_num = 1 then status_text else null end )status_text
		, phys_order_id
		--, order_schedule_id
		, row_num
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;



	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY

BEGIN CATCH
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END


	Select
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text
		, NULL as phys_order_id
		, NULL as order_schedule_id
		, NULL as row_num
END CATCH
END
RETURN

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_recap_order_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_cash_batch_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE-22380       :   script to create sproc_prp_rl_cash_batch_report Procedure  
--						-- 
-- Written By:          Ritch Moore
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_cash_batch_report 
-- 
-- Special Instruction: 

-- 
-- =================================================================================

/***********************************************************************************
Revision History:
2018-09-24  Ritch Moore		CORE-22380 	Initial creation of this stored proc
2018-10-04  Ritch Moore		CORE-22391	Changes to support report output requirements

***********************************************************************************/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_cash_batch_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_cash_batch_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO


Create Procedure dbo.sproc_prp_rl_cash_batch_report

  @fac_id int
, @batch_list varchar(max)
, @start_date datetime
, @end_date datetime
, @isOpenCashManualApplicationEnabled  bit = 0
, @execution_user_login varchar(60)
, @debug_me char(1)  = 'N'
, @rows_returned int = 0 out
, @status_code int = 0 out 
, @status_text varchar(3000) = Null out


/********************************************************************************

exec dbo.sproc_prp_rl_cash_batch_report
  @fac_id				= 1
, @batch_list			= '-1'--'315730'--'952451'--952451
, @start_date			= '1/1/2017'
, @end_date				= '1/31/2017'
, @isOpenCashManualApplicationEnabled = 0
, @execution_user_login = 'PCC-moorer'
, @debug_me				= 'Y'
, @rows_returned		= 0
, @status_code			= ''
, @status_text			= ''     

**********************************************************************************/

as
Begin

SET NOCOUNT ON;
--declare Standard local variables required for any store proc
DECLARE   @vStep int
		, @vErr varchar(max)
		, @vdelim char(1)
		, @vReportDate datetime
		, @vRowCount int
		, @vCflr varchar(10)
		, @vTermClient VARCHAR(50)
		, @vTermFacility VARCHAR(50)
		, @vTermAdmission VARCHAR(50)
		, @vTermDischarge VARCHAR(50)
		, @vTermRoom VARCHAR(50)

----Local Variables
DECLARE @vFacId int
	, @vBatchList varchar(max)
	, @vStartDate datetime
	, @vEndDate datetime
	, @vAllowCashSplit char(1)

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		 ,@vgsStepStartTime datetime
		 ,@vgsStepEndTime datetime
		 ,@vDebugMe char(1)

BEGIN TRY

Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
set @status_text = null;
set @rows_returned = 0;
Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
Set @vgs_start_time = getdate();
Set @vgs_execution_user = @execution_user_login;
set @vdelim = ','
set @vCflr = Char(13)
set @vReportDate = getdate();
set @vStep = 0
set @vgsStepStartTime = GETDATE()
set @vDebugMe = @debug_me

if @vDebugMe='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

----Parameter Sniffing - use local variables when they are used in a where clause
SET @vFacID				= @fac_id;
SET @vBatchList			= @batch_list;
SET @vStartDate			= convert(datetime, convert(varchar(10),@start_date , 101) + ' 00:00:00');
SET @vEndDate			= convert(datetime, convert(varchar(10),@end_date , 101) + ' 23:59:59');

select @vAllowCashSplit = isnull(allow_cash_split, 'N') from ta_configuration where fac_id = @vFacID;

create table #batch_ids_table 
		 (
			batch_id int
		  );

CREATE CLUSTERED INDEX _tmp_idx_batch_ids_table on #batch_ids_table(batch_id);

If  isnull(@vBatchList,'-1') <> '-1'
	begin
		INSERT into #batch_ids_table select Cast(items as int) from dbo.Split(@vBatchList,@vdelim)
	end
else
	begin
		INSERT into #batch_ids_table select batch_id from dbo.ar_batch with (nolock) where fac_id = @vFacID and deleted='N' and [status] = 'Posted' and batch_type = 'D' and transaction_date >= @vStartDate and transaction_date <= @vEndDate
	end

create table #cash_txs_table 
	(
		batch_id int,
		transaction_id int,
		payer_id int,
		distribution_tx_id int
	)
	
create table #used_cash_txs
(
	transaction_id int not null
	index #usedCashTxs__transactionId clustered (transaction_id)
)
	
CREATE TABLE #invoice_with_mount
	(
		batch_id int,
		transaction_id int,
		invoice_id int,
		payer_id int,
		amount decimal (20,2),
		writeoff_amount decimal (20,2),
		apply_to_year_month date
	)

create table #batch_data
	(
		  batch_id							int
		, entered_total						money
		, client_id							int
		, contact_id						int
		, transaction_id					int
		, distribution_tx_id				int
		, entry_number						int
		, payer								varchar(50)
		, dollar_account_id					int
		, dollar_account					varchar(30)
		, dollar_account_number				varchar(75)
		, dollar_account_type				varchar(140)
		, dollar_account_total				money
		, cash_account_id					int
		, cash_account						varchar(30)
		, cash_account_number				varchar(75)
		, cash_account_type					varchar(140)
		, cash_account_total				money
		, gl_account_id						int
		, gl_account						varchar(30)
		, gl_account_number					varchar(75)
		, gl_account_type					varchar(140)
		, gl_account_total					money
		, trust_gl_account_total			money
		, cash_receipt_type					varchar(254)
		, cash_receipt_type_seq				int
		, cash_receipt_total				money
		, cash_receipt_type_summary_total	money
		, [description]						varchar(100)
		, alt_description					varchar(100)
		, cheque_number						varchar(50)
		, effective_date					datetime
		, transaction_date					datetime
		, bill_date							datetime
		, applied_to_date					datetime
		, revision_by						varchar(60)
		, revision_date						datetime
		, amount							money
		, distribution_amount				money
		, applied_amount					money
		, trust_amount						money
		, writeoff_amount					money			
		, comment							varchar(200)
		, contact_amount					money
		, contact_distribution_amount		money
		, contact_trust_amount				money
		, contact_receipt_amount			money
		, paid_invoice_id					int
	);

select @vStep = 10
set @vgsStepStartTime = GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Gathering batch data  ' +  convert(varchar(26),getdate(),109)

IF @isOpenCashManualApplicationEnabled = 0
	BEGIN
		insert into #batch_data
		select
			  tx.batch_id
			, 0 as entered_total
			, tx.client_id
			, concash.contact_id
			, tx.transaction_id
			, tx.distribution_tx_id
			, tx.entry_number
			, libpyr.description as payer
			, dollact.account_id as dollar_account_id
			, dollact.description as dollar_account
			, dollact.account_number as dollar_account_number
			, dolcc.item_description as dollar_account_type
			, 0 as dollar_account_total
			, cashact.account_id as cash_account_id
			, cashact.description as cash_account
			, cashact.account_number as cash_account_number
			, cashcc.item_description as cash_account_type
			, 0 as cash_account_total
			, glact.account_id as gl_account_id
			, glact.description as gl_account
			, glact.account_number as gl_account_number
			, glcc.item_description as gl_account_type
			, 0 as gl_account_total
			, 0 as trust_gl_account_total
			, isnull(rectyp.item_description, 'Unspecified') as cash_receipt_type
			, isnull(rectyp.sequence_no,999) as cash_receipt_type_seq	
			--, tx.receipt_amount  as cash_receipt_total
			, Case when tx.cash_receipt_type_id is null then tx.amount else tx.receipt_amount end as cash_receipt_total
			--, coalesce(tx.receipt_amount, -1*appay.amount, tx.amount)  as cash_receipt_total
			, 0 as cash_receipt_type_summary_total
			, tx.[description]	
			, tx.alt_description
			, tx.cheque_number	
			, tx.effective_date
			, tx.transaction_date
			, tx.transaction_date AS bill_date
			, appay.applied_to_date
			, coalesce(appay.revision_by, tx.revision_by) as revision_by
			, coalesce(appay.revision_date, tx.revision_date) as revision_date
			, -1*tx.amount as amount
			, -1*tx.distribution_amount as distribution_amount
			, appay.amount as applied_amount
			, -1*tx.trust_amount
			, appay.writeoff_amount		
			, tx.comment
			, -1*concash.amount as contact_amount
			, -1*concash.distribution_amount as contact_distribution_amount
			, -1*concash.trust_amount as contact_trust_amount
			, -1*concash.receipt_amount as contact_receipt_amount
			, -1 AS paid_invoice_id
		from
		dbo.ar_transactions tx with (nolock)
		inner join #batch_ids_table bch on tx.batch_id = bch.batch_id and tx.deleted = 'N'
		left join dbo.common_code rectyp with (nolock) on tx.cash_receipt_type_id = rectyp.item_id
		left join dbo.ar_lib_payers libpyr with (nolock) on tx.payer_id = libpyr.payer_id
		left join dbo.ar_payers pyr  with (nolock) on libpyr.payer_id = pyr.payer_id and pyr.fac_id = @vFacID
		left join dbo.ar_lib_accounts glact with (nolock) on pyr.account_id = glact.account_id
		left join dbo.ar_common_code glcc with (nolock) on glact.account_type_id = glcc.item_id
		left join dbo.ar_applied_payment_history appay with (nolock) on tx.transaction_id = appay.transaction_id and appay.fac_id = @vFacID and appay.deleted = 'N' and appay.amount <> 0.00
		left join dbo.ar_lib_accounts dollact with (nolock) on tx.dollars_account_id = dollact.account_id
		left join dbo.ar_common_code dolcc with (nolock) on dollact.account_type_id = dolcc.item_id
		left join dbo.ar_lib_accounts cashact with (nolock) on tx.misc_cash_account_id = cashact.account_id
		left join dbo.ar_common_code cashcc with (nolock) on cashact.account_type_id = cashcc.item_id
		left join dbo.ar_transactions_contact_cash concash with (nolock) on tx.batch_id = concash.batch_id and tx.entry_number = concash.entry_number
	END
ELSE
	BEGIN
		-- Get pre-Transition payments
		insert into #batch_data
		select
			  tx.batch_id
			, 0 as entered_total
			, tx.client_id
			, concash.contact_id
			, tx.transaction_id
			, tx.distribution_tx_id
			, tx.entry_number
			, libpyr.description as payer
			, dollact.account_id as dollar_account_id
			, dollact.description as dollar_account
			, dollact.account_number as dollar_account_number
			, dolcc.item_description as dollar_account_type
			, 0 as dollar_account_total
			, cashact.account_id as cash_account_id
			, cashact.description as cash_account
			, cashact.account_number as cash_account_number
			, cashcc.item_description as cash_account_type
			, 0 as cash_account_total
			, glact.account_id as gl_account_id
			, glact.description as gl_account
			, glact.account_number as gl_account_number
			, glcc.item_description as gl_account_type
			, 0 as gl_account_total
			, 0 as trust_gl_account_total
			, isnull(rectyp.item_description, 'Unspecified') as cash_receipt_type
			, isnull(rectyp.sequence_no,999) as cash_receipt_type_seq	
			, Case when tx.cash_receipt_type_id is null then tx.amount else tx.receipt_amount end as cash_receipt_total
			, 0 as cash_receipt_type_summary_total
			, tx.[description]	
			, tx.alt_description
			, tx.cheque_number	
			, tx.effective_date
			, tx.transaction_date
			, NULL AS bill_date
			, appay.applied_to_date
			, coalesce(appay.revision_by, tx.revision_by) as revision_by
			, coalesce(appay.revision_date, tx.revision_date) as revision_date
			, -1*tx.amount as amount
			, -1*tx.distribution_amount as distribution_amount
			, appay.amount as applied_amount
			, -1*tx.trust_amount
			, appay.writeoff_amount		
			, tx.comment
			, -1*concash.amount as contact_amount
			, -1*concash.distribution_amount as contact_distribution_amount
			, -1*concash.trust_amount as contact_trust_amount
			, -1*concash.receipt_amount as contact_receipt_amount
			, -3 AS paid_invoice_id
		from
		dbo.ar_transactions tx with (nolock)
		inner join #batch_ids_table bch on tx.batch_id = bch.batch_id and tx.deleted = 'N'
		inner join dbo.ar_applied_payment_history appay with (nolock) on tx.transaction_id = appay.transaction_id 
			and tx.fac_id = appay.fac_id
			and appay.fac_id = @vFacID and appay.deleted = 'N' and appay.amount <> 0.00 
			AND (appay.include_transaction_payment=0 OR appay.include_transaction_payment IS NULL) 
		left join dbo.common_code rectyp with (nolock) on tx.cash_receipt_type_id = rectyp.item_id
		left join dbo.ar_lib_payers libpyr with (nolock) on tx.payer_id = libpyr.payer_id
		left join dbo.ar_payers pyr  with (nolock) on libpyr.payer_id = pyr.payer_id and pyr.fac_id = @vFacID
		left join dbo.ar_lib_accounts glact with (nolock) on pyr.account_id = glact.account_id
		left join dbo.ar_common_code glcc with (nolock) on glact.account_type_id = glcc.item_id
		left join dbo.ar_lib_accounts dollact with (nolock) on tx.dollars_account_id = dollact.account_id
		left join dbo.ar_common_code dolcc with (nolock) on dollact.account_type_id = dolcc.item_id
		left join dbo.ar_lib_accounts cashact with (nolock) on tx.misc_cash_account_id = cashact.account_id
		left join dbo.ar_common_code cashcc with (nolock) on cashact.account_type_id = cashcc.item_id
		left join dbo.ar_transactions_contact_cash concash with (nolock) on tx.batch_id = concash.batch_id and tx.entry_number = concash.entry_number

		INSERT INTO #cash_txs_table
		SELECT tx.batch_id, tx.transaction_id, tx.payer_id, isnull(tx.distribution_tx_id, -1)
		FROM ar_transactions tx WITH (NOLOCK) 
		INNER JOIN #batch_ids_table bch on tx.batch_id = bch.batch_id
		WHERE tx.deleted = 'N' AND tx.fac_id=@vFacID
		
		INSERT INTO #invoice_with_mount (batch_id, transaction_id, invoice_id, payer_id, amount, writeoff_amount, apply_to_year_month)
			SELECT a.batch_id, a.transaction_id, t.invoice_id, a.payer_id, SUM(tp.amount) * -1 AS amount, 
				ISNULL(sum(tp.amount_for_auto_writeoff)*-1, 0) as writeoff_amount,
				NULL as apply_to_year_month
			FROM #cash_txs_table a 
			  JOIN ar_transactions_payment tp WITH (NOLOCK) on a.transaction_id = tp.payment_transaction_id 
			  JOIN ar_transactions t WITH (NOLOCK) on tp.charge_transaction_id = t.transaction_id 
			WHERE t.fac_id=@vFacID AND t.deleted='N' 
				AND t.invoice_id IS NOT NULL AND t.invoice_id>0 
				AND t.transaction_type <> 'C' 
			GROUP BY a.batch_id, a.transaction_id, t.invoice_id, a.payer_id 
			UNION ALL
			SELECT a.batch_id, a.transaction_id, -999 AS invoice_id, a.payer_id, SUM(tp.amount) * -1 AS amount, 
				ISNULL(sum(tp.amount_for_auto_writeoff)*-1, 0) as writeoff_amount,
				DATEFROMPARTS(year(t.effective_date), month(t.effective_date), 1) as apply_to_year_month
			FROM #cash_txs_table a 
			  JOIN ar_transactions_payment tp WITH (NOLOCK) on a.transaction_id = tp.payment_transaction_id 
			  JOIN ar_transactions t WITH (NOLOCK) on tp.charge_transaction_id = t.transaction_id 
			WHERE t.fac_id=@vFacID AND t.deleted='N' 
				AND t.invoice_id=-999
				AND t.transaction_type <> 'C' 
			GROUP BY a.batch_id, a.transaction_id, a.payer_id, DATEFROMPARTS(year(t.effective_date), month(t.effective_date), 1) 
			union ALL
			SELECT a.batch_id, a.transaction_id, -2 as invoice_id, a.payer_id,  SUM(tp.amount) * -1 AS amount,
				ISNULL(sum(tp.amount_for_auto_writeoff)*-1, 0) as writeoff_amount,
				DATEFROMPARTS(year(t.effective_date), month(t.effective_date), 1) as apply_to_year_month
			FROM #cash_txs_table a 
			  JOIN ar_transactions_payment tp WITH (NOLOCK) on a.transaction_id = tp.payment_transaction_id 
			  JOIN ar_transactions t WITH (NOLOCK) on tp.charge_transaction_id = t.transaction_id 
			WHERE t.fac_id=@vFacID AND t.deleted='N' 
				AND t.invoice_id IS NULL 
				AND t.transaction_type <> 'C' 
			GROUP BY a.batch_id, a.transaction_id, a.payer_id, DATEFROMPARTS(year(t.effective_date), month(t.effective_date), 1)
			UNION ALL 
			SELECT c.batch_id, c.transaction_id, -1 as invoice_id, t.payer_id, 
				SUM(t.amount) * -1 AS amount, 0 AS writeoff_amount,
				NULL as apply_to_year_month
			FROM dbo.view_ar_unapplied_cash t 
			  JOIN #cash_txs_table c ON c.transaction_id=t.transaction_id 
			where t.fac_id = @vFacID
			GROUP BY c.batch_id, c.transaction_id, t.payer_id 
			HAVING SUM(t.amount) <> 0

		insert into #used_cash_txs (transaction_id)
		select distinct transaction_id from #batch_data
		union
		select distinct transaction_id from #invoice_with_mount			

		/*
			zero dollar payments with no applied payments
				- invoice_id is 0 as there are no applied payments
				- A/R amount will be 0
			
			misc transactions
				- invoice_id is 0 as misc transactions do not pay invoices
				- A/R amount will be 0 (as required by CORE-65696)
		*/
		INSERT INTO #invoice_with_mount (batch_id, transaction_id, invoice_id, payer_id, amount, writeoff_amount)
		SELECT ct.batch_id, ct.transaction_id, 0, ISNULL(ct.payer_id, -1), 0 AS amount, 0 AS writeoff_amount
		 FROM #cash_txs_table ct
		 JOIN ar_transactions t WITH (NOLOCK) ON ct.transaction_id = t.transaction_id
		LEFT JOIN #used_cash_txs u ON ct.transaction_id = u.transaction_id
		WHERE u.transaction_id IS NULL
		AND (ct.distribution_tx_id = -1 OR (ct.distribution_tx_id = ct.transaction_id))

		INSERT INTO #batch_data
		SELECT
			  tx.batch_id
			, 0 as entered_total
			, tx.client_id
			, concash.contact_id
			, tx.transaction_id
			, tx.distribution_tx_id
			, tx.entry_number
			, libpyr.description as payer
			, dollact.account_id as dollar_account_id
			, dollact.description as dollar_account
			, dollact.account_number as dollar_account_number
			, dolcc.item_description as dollar_account_type
			, 0 as dollar_account_total
			, cashact.account_id as cash_account_id
			, cashact.description as cash_account
			, cashact.account_number as cash_account_number
			, cashcc.item_description as cash_account_type
			, 0 as cash_account_total
			, glact.account_id as gl_account_id
			, glact.description as gl_account
			, glact.account_number as gl_account_number
			, glcc.item_description as gl_account_type
			, 0 as gl_account_total
			, 0 as trust_gl_account_total
			, isnull(rectyp.item_description, 'Unspecified') as cash_receipt_type
			, isnull(rectyp.sequence_no,999) as cash_receipt_type_seq	
			, Case when tx.cash_receipt_type_id is null then tx.amount else tx.receipt_amount end as cash_receipt_total
			, 0 as cash_receipt_type_summary_total
			, tx.[description]	
			, tx.alt_description
			, tx.cheque_number	
			, tx.effective_date
			, tx.transaction_date
			, CASE 
				WHEN libpyr.bill_form = 'Other' OR (libpyr.bill_form = 'private' AND s.generated_date IS NOT NULL) THEN i.effective_date 
				WHEN ia.invoice_id = -1 THEN NULL 
				WHEN c.invoice_id IS NULL AND i.invoice_id IS NOT NULL THEN i.eff_date_to 
				ELSE c.effective_to_date 
				END AS bill_date 
			, CASE
				WHEN ia.invoice_id = -2 OR ia.invoice_id = -999 then ia.apply_to_year_month
				ELSE tx.transaction_date 
				END AS applied_to_date
			, tx.revision_by as revision_by
			, tx.revision_date as revision_date
			, -1*tx.amount as amount
			, -1*tx.distribution_amount as distribution_amount
			, ia.amount as applied_amount
			, -1*tx.trust_amount
			, ia.writeoff_amount		
			, tx.comment
			, -1*concash.amount as contact_amount
			, -1*concash.distribution_amount as contact_distribution_amount
			, -1*concash.trust_amount as contact_trust_amount
			, -1*concash.receipt_amount as contact_receipt_amount
			, ia.invoice_id AS paid_invoice_id
		from
		dbo.ar_transactions tx with (nolock)
		JOIN #invoice_with_mount ia ON ia.transaction_id = tx.transaction_id
		inner join #batch_ids_table bch on tx.batch_id = bch.batch_id and tx.deleted = 'N' AND tx.fac_id=@vFacID
		left join dbo.common_code rectyp with (nolock) on tx.cash_receipt_type_id = rectyp.item_id
		left join dbo.ar_lib_payers libpyr with (nolock) on tx.payer_id = libpyr.payer_id
		left join dbo.ar_payers pyr  with (nolock) on libpyr.payer_id = pyr.payer_id and pyr.fac_id = @vFacID
		left join dbo.ar_lib_accounts glact with (nolock) on pyr.account_id = glact.account_id
		left join dbo.ar_common_code glcc with (nolock) on glact.account_type_id = glcc.item_id
		LEFT JOIN ar_invoice i WITH (NOLOCK) ON i.invoice_id = ia.invoice_id 
		LEFT JOIN ar_invoice_claim c WITH (NOLOCK) ON c.invoice_id = ia.invoice_id 
		LEFT JOIN ar_invoice_statement s WITH (NOLOCK) ON ia.invoice_id = s.invoice_id 
		left join dbo.ar_lib_accounts dollact with (nolock) on tx.dollars_account_id = dollact.account_id
		left join dbo.ar_common_code dolcc with (nolock) on dollact.account_type_id = dolcc.item_id
		left join dbo.ar_lib_accounts cashact with (nolock) on tx.misc_cash_account_id = cashact.account_id
		left join dbo.ar_common_code cashcc with (nolock) on cashact.account_type_id = cashcc.item_id
		left join dbo.ar_transactions_contact_cash concash with (nolock) on tx.batch_id = concash.batch_id and tx.entry_number = concash.entry_number
	END
	

if @vAllowCashSplit = 'Y'
	update bd set bd.cash_receipt_type = pbd.cash_receipt_type, bd.cash_receipt_type_seq = pbd.cash_receipt_type_seq
	from #batch_data bd
	inner join #batch_data pbd on bd.distribution_tx_id = pbd.transaction_id
	where bd.distribution_tx_id <> bd.transaction_id and bd.cash_receipt_type = 'Unspecified'
	and pbd.distribution_tx_id = pbd.transaction_id

update childcash set childcash.comment = parentcash.comment, childcash.cheque_number = parentcash.cheque_number 
from #batch_data childcash
inner join #batch_data parentcash with (nolock) on childcash.distribution_tx_id = parentcash.transaction_id
	and childcash.distribution_tx_id <> childcash.transaction_id and parentcash.distribution_tx_id = parentcash.transaction_id

set @vgsStepEndTime=GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 20
set @vgsStepStartTime = GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' updating summary totals ' +  convert(varchar(26),getdate(),109)

update bd set bd.gl_account_total = bdttl.ttl, bd.trust_gl_account_total = bdttl.trustttl
from #batch_data bd
inner join
	(select batch_id, gl_account_id, sum(amount) as ttl, SUM(isnull(trust_amount,0)) as trustttl
	from #batch_data
	where gl_account_id is not null
	group by batch_id, gl_account_id) bdttl on bd.gl_account_id = bdttl.gl_account_id and bd.batch_id = bdttl.batch_id

update bdgl set bdgl.gl_account_total = trust.ttl
from #batch_data bdgl
inner join
	(select batch_id, gl_account_id, sum(applied_amount) as ttl
		from #batch_data
			where ISNULL(applied_amount, 0) <> 0 and gl_account_id  is not null
		group by batch_id, gl_account_id) trust
	on bdgl.gl_account_id = trust.gl_account_id and bdgl.batch_id = trust.batch_id 

update bd set bd.cash_account_total = bdttl.ttl
from #batch_data bd
inner join
	(select batch_id, cash_account_id, sum(amount) as ttl
	from #batch_data
	where cash_account_id is not null
	group by batch_id, cash_account_id) bdttl on bd.cash_account_id = bdttl.cash_account_id and bd.batch_id = bdttl.batch_id

update bdgl set bdgl.dollar_account_total = dlr.ttl
from #batch_data bdgl
inner join
	(select batch_id, dollar_account_id, sum(amount) as ttl
	from
		(select distinct batch_id, dollar_account_id, transaction_id, amount
			from #batch_data
			where ISNULL(amount, 0) <> 0) a
	where dollar_account_id  is not null
	group by 
	batch_id, dollar_account_id) dlr on bdgl.dollar_account_id = dlr.dollar_account_id and bdgl.batch_id = dlr.batch_id 

if @vAllowCashSplit = 'Y'
	begin
		update bd set bd.cash_receipt_type_summary_total = bdttl.ttl
		from #batch_data bd
		inner join
			(select batch_id, cash_receipt_type, sum(receipt_type_ttl) as ttl
			from 
			(select distinct batch_id, cash_receipt_type, transaction_id, coalesce (cash_receipt_total, -1*amount) as receipt_type_ttl
				from #batch_data where distribution_amount is not null
			) receipt
			group by batch_id, cash_receipt_type) bdttl on bd.cash_receipt_type = bdttl.cash_receipt_type and bd.batch_id = bdttl.batch_id
	end
else
	begin
		update bd set bd.cash_receipt_type_summary_total = bdttl.ttl
		from #batch_data bd
		inner join
			(select batch_id, cash_receipt_type, sum(receipt_type_ttl) as ttl
			from 
			(select distinct batch_id, cash_receipt_type, transaction_id, coalesce (cash_receipt_total, -1*amount) as receipt_type_ttl
				from #batch_data
			) receipt
			group by batch_id, cash_receipt_type) bdttl on bd.cash_receipt_type = bdttl.cash_receipt_type and bd.batch_id = bdttl.batch_id

		update bd set bd.cash_receipt_type_summary_total = bd.cash_receipt_type_summary_total - unspbd.cash_receipt_type_summary_total
		from #batch_data bd
		inner join #batch_data unspbd on bd.distribution_tx_id = unspbd.distribution_tx_id and bd.cash_receipt_type <> 'Unspecified' and unspbd.cash_receipt_type = 'Unspecified'

	end

update cl set cl.client_id = prnt.client_id
from #batch_data cl
inner join #batch_data prnt on cl.distribution_tx_id = prnt.transaction_id
where cl.client_id is null

set @vgsStepEndTime=GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 40
set @vgsStepStartTime = GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Returning Final Results ' +  convert(varchar(26),getdate(),109)

select 
	  btch.actual_posting_date as batch_system_posting_date
	, btch.transaction_date as batch_posting_date
	, btch.batch_number
	, btch.description as batch_description
	, btchact.account_number + ' - ' + btchact.description as batch_cash_account
	, btch.control_total as batch_total
	, bd.entry_number
	, Case when cl.client_id is null and bd.description <> 'Trust Transfer' then bd.cash_account_number + ' ' + bd.cash_account 
		when cl.client_id is not null then mpi.last_name + ', ' + mpi.first_name + ' (' + cl.client_id_number + ')' else '' end as client_name
	, Case when con.contact_id is not null then con.last_name + ', ' + con.first_name + ' (' + con.contact_number + ')' else '' end as contact
	, bd.batch_id
	, btch.batch_total as entered_total
	, bd.client_id
	, bd.distribution_tx_id
	, bd.transaction_id
	, bd.payer
	, bd.dollar_account_id
	, bd.dollar_account
	, bd.dollar_account_number
	, bd.dollar_account_type
	, bd.dollar_account_total
	, bd.cash_account_id
	, bd.cash_account
	, bd.cash_account_number
	, bd.cash_account_type
	, bd.cash_account_total
	, bd.gl_account_id
	, bd.gl_account
	, bd.gl_account_number
	, bd.gl_account_type
	, bd.gl_account_total
	, bd.trust_gl_account_total
	, bd.cash_receipt_type
	, bd.cash_receipt_type_seq
	, bd.cash_receipt_total
	, bd.cash_receipt_type_summary_total
	, bd.[description]
	, bd.alt_description
	, bd.cheque_number
	, bd.effective_date
	, bd.transaction_date
	, bd.bill_date
	, bd.applied_to_date
	, btch.revision_by
	, btch.revision_date
	, bd.amount
	, bd.distribution_amount
	, bd.applied_amount
	, bd.trust_amount
	, bd.writeoff_amount			
	, bd.comment
	, bd.contact_amount
	, bd.contact_distribution_amount
	, bd.contact_trust_amount
	, bd.contact_receipt_amount
	, bd.paid_invoice_id
	, btch.account_id as batch_account_id
	, @status_code status_code
	, @status_text status_text
from #batch_data bd
left join dbo.ar_batch btch with (nolock) on bd.batch_id = btch.batch_id
left join dbo.ar_lib_accounts btchact with (nolock) on btch.account_id = btchact.account_id
left join dbo.clients cl with (nolock) on bd.client_id = cl.client_id
left join dbo.mpi mpi with (nolock) on cl.mpi_id = mpi.mpi_id
left join dbo.contact con with (nolock) on bd.contact_id = con.contact_id
order by btch.batch_number, bd.entry_number,
	case when @isOpenCashManualApplicationEnabled = 1 then bd.distribution_tx_id else 1 end,
	transaction_id, 
	case
		-- order is balance forward, invoices, unbilled, unapplied cash
		when bd.paid_invoice_id = -3 then 1	
		when bd.paid_invoice_id = -999 then 2	
		when bd.paid_invoice_id > 0 then 3
		when bd.paid_invoice_id = -2 then 4
		else 5 end,
	case 
		-- @isOpenCashManualApplicationEnabled = 1, invoices use bill_date, unbilled use applied_to_date
		when bd.bill_date is not null then bd.bill_date 
		else bd.applied_to_date end

set @vgsStepEndTime=GETDATE()
if @vDebugMe='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
if @vDebugMe='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);

END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @vDebugMe='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @vDebugMe='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END
	 
	Select 
	  NULL as batch_system_posting_date
	, NULL as batch_posting_date
	, NULL as batch_number
	, NULL as batch_description
	, NULL as batch_cash_account
	, NULL as batch_total
	, NULL as entry_number
	, NULL as client_name
	, NULL as contact
	, NULL as batch_id
	, NULL as entered_total
	, NULL as client_id
	, NULL as transaction_id
	, NULL as payer
	, NULL as dollar_account_id
	, NULL as dollar_account
	, NULL as dollar_account_number
	, NULL as dollar_account_total
	, NULL as cash_account_id
	, NULL as cash_account
	, NULL as cash_account_number
	, NULL as cash_account_total
	, NULL as gl_account_id
	, NULL as gl_account
	, NULL as gl_account_number
	, NULL as gl_account_total
	, NULL as trust_gl_account_total
	, NULL as cash_receipt_type
	, NULL as cash_receipt_total
	, NULL as cash_receipt_type_summary_total
	, NULL as [description]
	, NULL as alt_description
	, NULL as cheque_number
	, NULL as effective_date
	, NULL as transaction_date
	, NULL as bill_date
	, NULL as applied_to_date
	, NULL as revision_by
	, NULL as revision_date
	, NULL as amount
	, NULL as distribution_amount
	, NULL as applied_amount
	, NULL as trust_amount
	, NULL as writeoff_amount			
	, NULL as comment
	, NULL as contact_amount
	, NULL as contact_distribution_amount
	, NULL as contact_trust_amount
	, NULL as contact_receipt_amount
	, NULL as paid_invoice_id
	, NULL as batch_account_id
	, @status_code status_code
	, @status_text status_text
	
END CATCH 

RETURN 

END
GO
GRANT EXECUTE ON  dbo.sproc_prp_rl_cash_batch_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_cash_batch_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_cash_batch_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_ocpc_uda_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-38320       :   script to create sproc_prp_rl_ocpc_uda_report Procedure  
--						-- 
-- Written By:          Ritch Moore
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_ocpc_uda_report Procedure for UDA reporting
-- 
-- Special Instruction: This version only works from version 3.7.6 and up

-- 

-- =================================================================================

/***********************************************************************************
Revision History:
2013-03-05  Ritch Moore		Initial creation of this stored proc
2013-04-16  Ritch Moore		PCC-42472 Moved 'Blank (skip pattern)' filter to resolve disabled question issue
2013-05-22	Ritch Moore		PCC-42684 Set @vLocationWithUnit ='1' for Unit inclusion in location
2013-05-30	Ritch Moore		PCC-43034 Add section_sequence column
2013-06-05	Ritch Moore		PCC-43235 Added additional sort by to include std_question_no,std_subquestion_no, std_subquestion_AB
								plus handling of '' std_subquestion_no ordering
2013-06-12	Ritch Moore		PCC-43028 Format date responses (control_type=dte) to be mm/dd/yyyy
2013-09-03	Ritch Moore		PCC-43639 Added dynamic UDA header logic
2013-09-03	Ritch Moore		PCC-43622 Corrected 'no date' issue
2013-09-03	Ritch Moore		PCC-44041 Added logic for dttm date format
2013-09-03	Ritch Moore		PCC-44317 Added logic for lang (language lookup)
2013-09-04	Rick Penton		PCC-44042 Added logic for Skin Body diagram control (bdy and gbdy)
2013-09-05	Rick Penton		PCC-44319 Added logic for Admission/Readmission Date (ad)
2013-09-05	Rick Penton		PCC-46695 return configuration parameter for facepain_use_cartoon
2013-09-09	Rick Penton		PCC-44322 Added logic for Transfer/Discharge Details (to)
2013-09-10	Ritch Moore		PCC-44295 Added fields for section and group nums
2013-09-11	Rick Penton		PCC-44354 Added logic for Immunization (iFlu, iPneu, and iTet) controls
2013-09-13	Rick Penton		PCC-44333 Added logic for Advance Directive control (adir) and Resident Contact (cnt) control
2013-09-16	Rick Penton		PCC-47112 Fix bug re: ad control only works in facilities with 12 hour clock
2013-09-17	Ritch Moore		PCC-46881 Added empty resident for blank report for blank dynamic header data
2013-09-19	Rick Penton		PCC-47171 Fix bug re: Number of blank rows in response grid not correct
2013-09-23	Rick Penton		PCC-44284 handle character sort of multi-part character and numeric values
2013-09-26	Ritch Moore		PCC-43639 Ensured that Allergy and Diagnosis header elemenst always come last
2013-09-26	Ritch Moore		PCC-47214 Lookup and set uda_asst_type variable when only uda_assess_id filter is passed
2013-10-02	Rick Penton		PCC-47728 Fix Question sequence
2013-10-03	Rick Penton		PCC-48114 Performance improvement - send header only when needed
2013-10-04	Rick Penton		PCC-48006 Fix bug re: If resident doesn't have diagnosis then should display message 'No Medical Diagnosis Found' 
2013-10-07	Rick Penton		PCC-44040 Added logic for Horizontal Checkbox (hck) control
2013-10-07	Rick Penton		PCC-48028 Fix bug re: Instruction control always displayed on report even if "Include on Report" is unchecked
2013-10-08	Rick Penton		PCC-48010 Fix bug re: Score and Category in header fields are not displayed on report output when selected in assessment header configuration 
2013-10-08	Rick Penton		PCC-47762 Fix bug re: Header element's fields overlap each other
2013-10-10	Rick Penton		PCC-48010 Fix bug re: "Score: Total ADL Score" and "Category for: Total ADL Score" header fields are not displayed on report output when selected in assessment header configuration
2013-10-10	Rick Penton		PCC-48239 Fix bug re: Diagnoses field in header displays "No Medical Diagnosis Found" on blank report
2013-10-15	Rick Penton		PCC-48333 Fix bug re: Group title is missing on blank report output
2013-10-15	Rick Penton		PCC-48231 Fix bug re: displays all assessments's results when there are multiple instances of same assessment type for same resident
2013-10-16	Rick Penton		PCC-48514 Fix bug re: Report does not display data for assessment type "Bowel & Bladder Continence" even if data exist
2013-10-16	Rick Penton		PCC-48553 Fix bug re: Question split and displayed twice on report for assessment type "Continence Care"
2013-10-18	Rick Penton		PCC-48644 Fix bug re: Data not displayed for "Agitation Assessment" caused by overflow exception
2013-10-24	Rick Penton		PCC-48695 Add support for question groups for 2-column layout style
2013-10-24	Rick Penton		PCC-48842 Fix bug re: Time is not displayed on report as part of Effective Date in header
2013-10-25	Rick Penton		PCC-48721 Fix bug re: Only prints completed sections of multi-section report
2013-10-25	Rick Penton		PCC-48919 Fix bug re: Report printed from assessment's history section in resident's chart doesn't return data
2013-10-25	Rick Penton		PCC-48695 Fix bug re: Add group_no to sort sequence
2013-10-28	Rick Penton		PCC-48695 Fix bug re: Add minutes and  seconds to Strike Out Date
2013-11-08	Rick Penton		PCC-49396 Fix bug re: Assessment header displayed as "nullnullnull" when blank report run with a client_id <> -1
2013-11-13	Rick Penton		PCC-49744 Fix bug re: Multiple Issues with Pain Assessment
2013-11-13	Rick Penton		PCC-49798 Fix bug re: Date time value is not populated on report output with date time control
2013-11-13	Rick Penton		PCC-49797 Fix bug re: SQL error on report output for "AHSLLC- OLD Triage Nursing Assessment"
2013-11-14	Rick Penton		PCC-49826 Fix bug re: SQL error on reprot output for "Nutrition Assessment 2008" form both clinical and Admin module
2013-11-14	Rick Penton		PCC-49869 Fix bug re: Data not displayed on text box control when in 2 columns
2013-11-15	Rick Penton		PCC-49912 Fix bug re: Java Exception for "Fall Risk Assessment" on CDN environments
2013-11-19	Rick Penton		PCC-50026 Handle multiple facilities for emc
2013-11-20	Rick Penton		PCC-50016 Fix bug re: Resident name is not displayed on PCC Standard Form
2013-11-20	Rick Penton		PCC-50061 Support two column layout for all control types
2013-11-21	Rick Penton		PCC-50083 Fix bug re: Horizontal radio buttons not displayed on the report when there is no response
2013-11-22	Rick Penton		PCC-50218 Fix bug re: Pain Faces not displayed on report output when no response selected
2013-11-25	Rick Penton		PCC-50047 Return bdy and gbdy result in one row when in C2 column group
2013-11-25	Rick Penton		PCC-49879 Fix bug re: Question sequence incorrect for "Nutrition Assessment 2008"
2013-11-26	Rick Penton		PCC-50047 Support for two column blank report
2013-11-27	Rick Penton		PCC-50511 Support for new 'payer' control
2013-12-02	Rick Penton		PCC-50611 Fix bug re: Horizontal radio buttons control does not display on report with 2 column lay out
2013-12-03	Rick Penton		PCC-50662 Change to bdy and gbdy control appearing in two column question groups
2013-12-10	Rick Penton		PCC-50962 Fix bug re: Java exception on report when run for assessment with all control types in 2 column lay-out
2013-12-12	Rick Penton		PCC-50998 Fix bug re: displayed 3 times for all questions for "Braden Scale for Predicting Pressure Sore Risk" assessment
2013-12-12	Rick Penton		PCC-50603 Change handling of cmb and rad controls when in side-by-side (C1) layout
2013-12-12	Rick Penton		PCC-51147 Fix bug re: Resident Identifier control displayed multiple times on blank report with side by side layout)
2013-12-12	Rick Penton		PCC-50962 Fix bug re: Java exception on report when run for assessment with all control types in 2 column lay-out
2014-03-10	Rolly Sanchez	PCC-53474 (3.7.4) added icd 10 support
2014-04-07	Rick Penton		PCC-50660 (3.7.4) Fix bug re: Printing UDA assessment from IRM the system displays " No resident found with the current filter criteria"
2014-04-10  Rolly Sanchez	PCC-53474 (3.7.4) rollback icd 10 changes
2014-09-15	Rolly Sanchez	PCC-63848 (3.7.5) Custom Assessments UDA Reports conversion sproc changes
2014-09-24	Rolly Sanchez	PCC-53392 (3.7.5) Add care plan control, mcs and mcsh (multi select check box)
2014-09-29	Rolly Sanchez	PCC-51746 (3.7.5) Special Instruction throws error on very long special instructions
2014-10-02	Rolly Sanchez	PCC-63846 (3.7.5) get the latest assessment if run from print chart
2014-10-06	Rolly Sanchez	PCC-64746 (3.7.5) Fixed hck sorting
2014-10-15	Rolly Sanchez	PCC-64551 (3.7.5.1) Faces Pain Scale Diagram Response Options Not Displayed Correctly in Two Column Layout 
2014-10-23	Rolly Sanchez	PCC-65663 (3.7.5.1) handle duplicate output
2014-10-29	Rolly Sanchez	PCC-66208 (3.7.5.1)	Custom Assessment (UDA) Report: Planning and Tasks control issues
2014-11-04	Rolly Sanchez	PCC-66309 (3.7.5.1) return diagnosis control as text box
2014-11-10	Rolly Sanchez	PCC-66813 (3.7.5.2) Return image
2014-11-18	Rolly Sanchez	PCC-67272 (3.7.5.2) Drop down control always display only selected response regardless of "Print Short Version" configuration
2014-11-19	Rolly Sanchez	PCC-58264 (3.7.5.2) Return 1 row to handle no data found
2014-11-19	Rolly Sanchez	PCC-67275 (3.7.5.2) MCS and MCSH does not show on short version
2014-11-21	Rolly Sanchez	PCC-66708 (3.7.5.2) Report displayed "No Data Found" for care plan control when no care plan items are added to Planning and Tasks
2014-11-27	Rolly Sanchez	PCC-64416 (3.7.5.2) Return only selected care plan regardless of configuration
												text formatting for header
2014-12-01	Rolly Sanchez	PCC-67801 (3.7.6)	support new UDA architecture
2014-12-02	Rolly Sanchez	PCC-67893 (3.7.5.2) Fixed body diagram issue
												fixed messed short version
2014-12-04	Rolly Sanchez	PCC-67433 (3.7.6)	Support multiple custom score and category
2014-12-05	Rolly Sanchez	PCC-68053 (3.7.6) date filter has a day extra 
2014-12-09	Rolly Sanchez	PCC-68176 (3.7.6) jrxml issue when no data found
2015-01-02	Rolly Sanchez	PCC-68503 (3.7.6) Add show hide capability on blank report
2015-01-02	Rolly Sanchez	PCC-56392 (3.7.6) Add show hide capability on populated report
2015-01-14	Rolly Sanchez	PCC-69179 (3.7.6) Return double qoute for allergy as this is being handled by jrxml
2015-01-26	Rolly Sanchez	PCC-70000 (3.7.6) Disable rules applied even if its disabled
2015-03-03	Rolly Sanchez	PCC-71993 (3.7.6.1) duplicate picklist
2015-03-11	Rolly Sanchez	PCC-72667 (3.7.6.1) Some show/hide rule does not on the report
2015-03-18	Dom Christie	PCC-72177 (3.7.7) Implemented ICD 10 by passing the current date to the diagnosis function.
2015-03-26	Steve Lo		PCC-73530 (3.7.6.2) Fixed issue with date formatting on 'ad' control type
2015-04-01	Rolly Sanchez	PCC-73855 (3.7.6.2) fixed error when running Sunrise SEHA V1.2 report 
2015-05-12	Rolly Sanchez	PCC-75129 (3.7.7) support Chinese characters
2015-05-27	Kunle Adeniyi	PCC-72829 (3.7.7.1) Fixed print issue when printing assessments default to short version print that contain serveral long picklist items
2015-06-24	Kunle Adeniyi	PCC-72829 (3.7.7.1) Fixed broken uses cases for mcs in step 121
2015-07-03	Rolly Sanchez	PCC-77209 (3.7.7.1) Handle body diagram incomplete question key
2015-09-02	Rolly Sanchez	PCC-81302 (3.7.8)	added new filter for MDS and UDA Assessments
2015-09-28	Rolly Sanchez	PCC-82874 (3.7.8)   treat struck out as OR condition
2015-09-30	Rolly Sanchez	PCC-79646 (3.7.8.1)	Text format not displaying correctly on the report
2015-12-08	Rolly Sanchez	PCC-78877 (3.7.8.2) Question and picklist were missing from the report
2016-07-28	Rolly Sanchez	PCC-98699 (3.7.10.2) UDA: PCC Standard Form Does Not Print Out the "<" Character
2016-09-13 Rolly Sanchez	PCC-101394 (3.7.11) added Code Status Control Type
2016-09-29 Rolly Sanchez	PCC-101238 (3.7.11.1) The PCC Standard Form for UDA displays actual HTML tags instead of rendering them properly on the report
2016-10-27 Rolly Sanchez	PCC-103337 (3.7.11.1) Implement date standard
2016-10-31	Rolly Sanchez	PCC-103405 (3.7.11.1) Implement dynamic term for care plan controll 
2016-11-03	Rolly Sanchez	PCC-104290	(3.7.11.1) return Task in plural 
2016-11-23	Rolly Sanchez		PCC-105564		3.7.12	Update framework related to UK local terminology
2016-11-24	Rolly Sanchez		PCC-104871		3.7.12	Get Goal Term from Term configuration
2016-12-22	Katya Niakhai	PCC-103604	3.7.12	UDA report: Amendments/checks for rendering of new control
2017-01-09	Katya Niakhai	PCC-106754	3.7.12	Skin & Wound: Framework to Print the Wound Assessment with Attached Image
2017-01-10	Katya Niakhai	PCC-103604	3.7.12	UDA report: Amendments/checks for rendering of new control
2017-01-17	Rolly Sanchez	PCC-85308	3.7.12	fixed duplicated data
2017-01-19	Katya Niakhai	PCC-103604	3.7.12	UDA report: Amendments/checks for rendering of new control: two column layout
2017-01-26	Katya Niakhai	PCC-103604	3.7.12	UDA report: Amendments/checks for rendering of new control: escape special characters for ams_key
2017-01-31	Katya Niakhai	PCC-103604	3.7.12	UDA report: Amendments/checks for rendering of new control: escape double quotes in ams_key
2017-03-03	Katya Niakhai	PCC-100266	3.7.12.1	UDA: Error received when printing UDA in resident chart due to text box question having too many characters
2017-03-07	Rolly Sanchez	PCC-98987	3.7.12.1	UDA: An error is generated when printing due to unclear child response(s)
2017-03-09	Rolly Sanchez	PCC-111263 3.7.12.1 EPUAP new skin body diagram
2017-04-04	Katya Niakhai	adjustment for rules that have multiple parents for 1 child. Need to show up child question if any of the parents have qualified response; Commented out clean up;
							added old cp controls 'ads','dev','mus','gen','risk' to split logic so that rules for them will work

2017-04-19	Rolly Sanchez	PCC-112998/113001		3.7.12.2	Support rules for care profile and WV controls
2017-05-03	Rolly Sanchez	PCC-115485		3.7.12.2	Recommit on this jira 
2017-10-16	Rolly Sanchez	CORE-2951		3.7.14.1	Only get the latest pick list item
2017-11-20	Rolly Sanchez	CORE-2735		3.7.15		SP return duplicate record on care plan show/hide rules on the same question with multiple check box pick list
2018-02-01	Rolly Sanchez	CORE-9393		3.7.15.1	changed delimiter for care plan (cp) control type for 2 column (c2) 
2018-03-21	Rolly Sanchez	CORE-2890		3.7.15.2	Change logic to get pick_list_id from std_questions view instead of as_atd_pick_list table. This table dont have all the picklist
2018-05-14  Katya Niakhai	CORE-13591		3.7.15.3	When printing Skin and Wound Assessment, Report must not include hidden fields 
2018-05-16  Austin Peddle   CORE-13820      3.7.15.3    Allow PCC Standard Assessment printing from CRM side of application
2020-11-05  Sean Toohey     CORE-76339      4.3.2	    Assessment Report timing out
2021-08-23  Richard Liu     CORE-91409      4.4.6		convert the signed_date facility time zone.

***********************************************************************************/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_ocpc_uda_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_ocpc_uda_report
END
GO


Create Procedure dbo.sproc_prp_rl_ocpc_uda_report

  @report_id int 
, @fac_id varchar(max)
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @num_rec int = 0
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/********************************************************************************
Purpose: To get a list of fields to display for custom reporting model

						   
Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_rl_ocpc_uda_report
 @report_id =  '-57'
,@fac_id =  '10'
,@field_list = ''
,@filter_list =  'client_id=370936;client_unit=-1;client_floor=-1;client_status=-1;uda_asst_type=10046;uda_incl_disabled_qs=1;is_blank=0;uda_assessment_status=1'
,@sort_list =  '0=-1'
, @num_rec = 0
,@execution_user_login =  'pcc-sanchr'
,@rows_returned = null
,@debug_me = 'N'
,@status_code = null
,@status_text = null

Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/

as
Begin


SET NOCOUNT ON;
--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vSeparator2 char(6)
		,@vSeparator3 char(6) -- between columns of two column report
		,@vReportDate datetime
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @vFacName varchar(500)
	, @vFacAddress varchar(max)
	, @vRegId int
	, @vrecnum int
	, @vCountryName varchar(260)
	, @vCountryCode char(2)

----	, @vAgingStrategyID smallint ---variable that will define where to retrieve the data (rolly)
	, @visemc bit
	, @vSP_ClientId int
	, @vstd_assess_id int 
	, @vreport_date_filter datetime
	, @vfil_start_end_date_range_d1 datetime
	, @vfil_start_end_date_range_d2 datetime
	, @vshort_version bit
	, @vincl_strikeout bit
	, @vincl_disabled_qs bit
	, @vis_blank bit
	, @vHeaderColumnCount int
	, @vIdsInHeader bit
	, @vIdsInSubHeader bit
	, @vConfig_facepain_use_cartoon char(1)
	, @vSingleClient bit
	, @maxcharlen int
	, @uda_title varchar(200)
	, @cnt_result INT
	, @min_clientid INT
	, @uda_assess_status varchar(75)
	, @vTermTask		varchar(1000)
	, @vTermTasks		varchar(1000)
	, @vTermIntervention		varchar(1000)
	, @vTermFocus		varchar(1000)
	, @vTermGoal		varchar(1000)
	, @vdateFormatStyle smallint
	, @vgoal_flag							tinyint = 1
	, @vtermErrorMsg varchar(max)
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--		
		
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500) 

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500) 

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500) 

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500) 

		,@vgsStepStartTime datetime
		,@vgsStepEndTime datetime

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		 ,@vGeneric_statuscode int 
		 ,@vGeneric_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC 
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)

-----variables for each column in the report
Declare  @vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level

		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)

		,@vP1  varchar(100) ---- page level header column name
		,@vP2  varchar(100) ---- page level header column name
		,@vP3  varchar(100) ---- page level header column name
		,@vP4  varchar(100) ---- page level header column name
		,@vP5  varchar(100) ---- page level header column name
		,@vP6  varchar(100) ---- page level header column name
		,@vP7  varchar(100) ---- page level header column name
		,@vP8  varchar(100) ---- page level header column name
		,@vP9  varchar(100) ---- page level header column name
		,@vP10  varchar(100) ---- page level header column name
		,@vP11  varchar(100) ---- page level header column name
		,@vP12  varchar(100) ---- page level header column name
		,@vP13  varchar(100) ---- page level header column name
		,@vP14  varchar(100) ---- page level header column name
		,@vP15  varchar(100) ---- page level header column name
		,@vP16  varchar(100) ---- page level header column name
		,@vP17  varchar(100) ---- page level header column name
		,@vP18  varchar(100) ---- page level header column name
		,@vP19  varchar(100) ---- page level header column name
		,@vP20  varchar(100) ---- page level header column name

		,@vSubP1  varchar(100) ---- page level header column name
		,@vSubP2  varchar(100) ---- page level header column name
		,@vSubP3  varchar(100) ---- page level header column name
		,@vSubP4  varchar(100) ---- page level header column name
		,@vSubP5  varchar(100) ---- page level header column name
		,@vSubP6  varchar(100) ---- page level header column name
		,@vSubP7  varchar(100) ---- page level header column name
		,@vSubP8  varchar(100) ---- page level header column name
		,@vSubP9  varchar(100) ---- page level header column name
		,@vSubP10  varchar(100) ---- page level header column name
		,@vSubP11  varchar(100) ---- page level header column name
		,@vSubP12  varchar(100) ---- page level header column name
		,@vSubP13  varchar(100) ---- page level header column name
		,@vSubP14  varchar(100) ---- page level header column name
		,@vSubP15  varchar(100) ---- page level header column name
		,@vSubP16  varchar(100) ---- page level header column name
		,@vSubP17  varchar(100) ---- page level header column name
		,@vSubP18  varchar(100) ---- page level header column name
		,@vSubP19  varchar(100) ---- page level header column name
		,@vSubP20  varchar(100) ---- page level header column name

		,@vP1_disp_name varchar(100) --- display name for group header
		,@vP2_disp_name varchar(100) --- display name for group header
		,@vP3_disp_name varchar(100) --- display name for group header
		,@vP4_disp_name varchar(100) --- display name for group header
		,@vP5_disp_name varchar(100) --- display name for group header
		,@vP6_disp_name varchar(100) --- display name for group header
		,@vP7_disp_name varchar(100) --- display name for group header
		,@vP8_disp_name varchar(100) --- display name for group header
		,@vP9_disp_name varchar(100) --- display name for group header
		,@vP10_disp_name varchar(100) --- display name for group header
		,@vP11_disp_name varchar(100) --- display name for group header
		,@vP12_disp_name varchar(100) --- display name for group header
		,@vP13_disp_name varchar(100) --- display name for group header
		,@vP14_disp_name varchar(100) --- display name for group header
		,@vP15_disp_name varchar(100) --- display name for group header
		,@vP16_disp_name varchar(100) --- display name for group header
		,@vP17_disp_name varchar(100) --- display name for group header
		,@vP18_disp_name varchar(100) --- display name for group header
		,@vP19_disp_name varchar(100) --- display name for group header
		,@vP20_disp_name varchar(100) --- display name for group header

		,@vSubP1_disp_name varchar(100) --- display name for group header
		,@vSubP2_disp_name varchar(100) --- display name for group header
		,@vSubP3_disp_name varchar(100) --- display name for group header
		,@vSubP4_disp_name varchar(100) --- display name for group header
		,@vSubP5_disp_name varchar(100) --- display name for group header
		,@vSubP6_disp_name varchar(100) --- display name for group header
		,@vSubP7_disp_name varchar(100) --- display name for group header
		,@vSubP8_disp_name varchar(100) --- display name for group header
		,@vSubP9_disp_name varchar(100) --- display name for group header
		,@vSubP10_disp_name varchar(100) --- display name for group header
		,@vSubP11_disp_name varchar(100) --- display name for group header
		,@vSubP12_disp_name varchar(100) --- display name for group header
		,@vSubP13_disp_name varchar(100) --- display name for group header
		,@vSubP14_disp_name varchar(100) --- display name for group header
		,@vSubP15_disp_name varchar(100) --- display name for group header
		,@vSubP16_disp_name varchar(100) --- display name for group header
		,@vSubP17_disp_name varchar(100) --- display name for group header
		,@vSubP18_disp_name varchar(100) --- display name for group header
		,@vSubP19_disp_name varchar(100) --- display name for group header
		,@vSubP20_disp_name varchar(100) --- display name for group header

		,@vPHDR1  varchar(50) ---- page level group 1 header type
		, @vAll_disp_name varchar(2200)
		, @vClientidnumberIndex int

--		,@vGID  varchar(50)
--		,@vG1   varchar(50)
--		,@vG2   varchar(50)
--		,@vG3   varchar(50)
--
--		,@vG1_disp_name varchar(100)
--		,@vG2_disp_name varchar(100)
--		,@vG3_disp_name varchar(100)---max of three group levels are supported		

		---data intensive columns flag
		,@vLocationWithUnit bit 


DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_unit bit
	,@vfil_std_assess_id bit
	--- non metadata filters
	,@vfil_uda_assess_id int
	,@vis_from_print_chart bit
	,@is_crm bit

	
DECLARE @spaceDate varchar(12) = '<space>Date:'; 
DECLARE @brScale varchar(10) = '<BR>Scale:'; 

DECLARE @lenSpaceDate int; --length of @space and following space
DECLARE @lenBrScale int; --length of @br and following space



Declare @reportingdays smallint;

CREATE TABLE #PRP_Multi_Value_Filters (filter_name varchar(100), filter_value varchar(32));

-- this temp table is created for performance purpose

CREATE TABLE #PRP_as_response
			( 	assess_response_id bigint 
			, assess_id int, question_key varchar(100)
			, item_value varchar(2000)
			, revision_date datetime
			, pick_list_id int
			, sub_item_value varchar(25)
			, first_val varchar(2000)
			, second_val varchar(10)
			)




CREATE TABLE #PRP_Assess_Filter (
			 std_assess_id int
			,client_id int
			,assess_id int
			,effective_date datetime
			)

CREATE TABLE #PRP_Results (
			fac_id int
			, std_assess_id int 
			, client_id int
			, assess_id int 
			, assess_date datetime
			, assessment_type varchar(55)
			, uda varchar(600)
			, section_title varchar(600)
			, section_sequence int
			, group_no varchar(6)
			, group_title varchar(254)
			, group_text varchar(1000)
			, group_layout_style varchar(5)
			, section_code varchar(10)
			, question_key varchar(100)
			, sequence int
			, std_question_no varchar(50)
			, std_subquestion_no varchar(50)	--must handle 2 controls (6 x 2) plus separator (6)
			, std_subquestion_AB varchar(50)
			, question_title varchar(2006)		--must handle 2 controls (1000 x 2) plus separator (6)
			, question_text varchar(2006)		--must handle 2 controls (1000 x 2) plus separator (6)
			, control_type varchar(50)			--must handle 2 controls ((5+2) x 2) plus separator (6)
			, control_length int
			, response_required char(1)
			, pick_list_id int
			, pick_list_name varchar(80)		--must handle 2 controls (35 x 2) plus separator (6)
			, pick_list_value varchar(max) 
			, pick_list_description varchar(max)
			, pick_list_sequence  varchar(max)			
			, pick_list_value_effective_date smalldatetime
			, pick_list_value_ineffective_date smalldatetime
			, assess_type_code varchar(10)
			, assess_status varchar(75)
			, resp_item_value varchar(max)
			, response varchar(max)
			, score float
			, score_category varchar(50)
			, strikeout_flag char(1)
			, strikeout_by varchar(60)
			, strikeout_date datetime
			, strikeout_reason varchar(60)
			, include_signature_section_flag char(1)
			, signed_by varchar(500)
			, signed_date datetime
			, cust_hdr varchar(max)
			, cust_sub_hdr varchar(max)
			, cust_hdr_long VARCHAR(MAX)
			, cust_sub_hdr_long varchar(max)
			, rnum int
			, unique_question int
			, was_merge BIT
			, print_s varchar(50)
			, ams_key varchar(max)
			, file_metadata_id varchar(max)
			, visual char
);




Create table #PRP_SubHeaderUnq (header_item varchar(254),display_name varchar(254), sequence int);

Create table #PRP_HeaderUnq (header_item varchar(254),display_name varchar(254), sequence int);

CREATE TABLE #care_profile_question(
	question_id smallint,
	category_id tinyint,
	question_text varchar(80),
	question_key varchar(100),
	question_type_id tinyint,
	parent_question_id smallint,
	group_order smallmoney,
	display_order smallmoney,
	seq smallint,
	subkey varchar(12)
	)
	-- show hide and disable assessment rules
	create table #prp_ShowHideDisable_rules
			(std_question_id	int 
			, pick_list_id int
			, question_key	varchar(100)
			, section_code	varchar(100)
			, group_text varchar(1000)
			,std_question_no varchar(50)
			,std_subquestion_no varchar(50)
			,std_subquestion_ab varchar(50)
			,title varchar(1000)
			,consistency_rule_id int
			,control_type varchar(50)
			,group_title varchar(300)
			, enabled_flag varchar(5)
			, question_key_info varchar(100)
			,question_text	varchar(max)
			,question_key_sbj varchar(100)
			,item_id int
			,rules_description varchar(50)
			,range_orig varchar(50)
			, range1 varchar(50)
			, range2 varchar(50)
			, item_description varchar(800)
			, question_key_obj varchar(100)
			)
--	The next three tables contain data to support the Body Part control 
--	This table should probably eventually be persisted database table
declare @prp_body_site 
	table (
			  body_site_id int
			, description varchar(100)
		  )

declare @prp_body_type 
	table (
			  body_type_id int
			, description varchar(100)
		  )
declare @prp_body_stage 
	table (
			  body_stage_id int
			, description varchar(100)
			-- This table has a third column for a longer description of the stage that is not required for this report so is 
			-- omitted from the table variable but should be added if this table is ever persisted in the database.
		  )

declare @prp_body_stage_egbdy 
	table (
			  body_stage_id int
			, description varchar(100)
			-- This table has a third column for a longer description of the stage that is not required for this report so is 
			-- omitted from the table variable but should be added if this table is ever persisted in the database.
		  )

INSERT INTO @prp_body_site (body_site_id, description)
		SELECT 0,  '1) Top of Scalp'
UNION	SELECT 1,  '2) Right ear'
UNION	SELECT 2,  '3) Left ear'
UNION	SELECT 3,  '4) Face'
UNION	SELECT 4,  '5) Back of head'
UNION	SELECT 5,  '6) Right shoulder (front)'
UNION	SELECT 6,  '7) Left shoulder (front)'
UNION	SELECT 7,  '8) Right shoulder (rear)'
UNION	SELECT 8,  '9) Left shoulder (rear)'
UNION	SELECT 9,  '10) Right scapula'
UNION	SELECT 10, '11) Left scapula'
UNION	SELECT 11, '12) Chest'
UNION	SELECT 12, '13) Vertebrae (upper-mid)'
UNION	SELECT 13, '14) Abdomen'
UNION	SELECT 14, '15) Right antecubital'
UNION	SELECT 15, '16) Left antecubital'
UNION	SELECT 16, '17) Right elbow'
UNION	SELECT 17, '18) Left elbow'
UNION	SELECT 18, '19) Right iliac crest (front)'
UNION	SELECT 19, '20) Left iliac crest (front)'
UNION	SELECT 20, '21) Right iliac crest (rear)'
UNION	SELECT 21, '22) Left iliac crest (rear)'
UNION	SELECT 22, '23) Coccyx'
UNION	SELECT 23, '24) Groin'
UNION	SELECT 24, '25) Right trochanter (hip)'
UNION	SELECT 25, '26) Left trochanter (hip)'
UNION	SELECT 26, '27) Right hand (palm)'
UNION	SELECT 27, '28) Left hand (palm)'
UNION	SELECT 28, '29) Right hand (back)'
UNION	SELECT 29, '30) Left hand (back)'
UNION	SELECT 30, '31) Right buttock'
UNION	SELECT 31, '32) Left buttock'
UNION	SELECT 32, '33) Right thigh (front)'
UNION	SELECT 33, '34) Left thigh (front)'
UNION	SELECT 34, '35) Right thigh (rear)'
UNION	SELECT 35, '36) Left thigh (rear)'
UNION	SELECT 36, '37) Right knee (front)'
UNION	SELECT 37, '38) Left knee (front)'
UNION	SELECT 38, '39) Right knee (rear)'
UNION	SELECT 39, '40) Left knee (rear)'
UNION	SELECT 40, '41) Right lower leg (front)'
UNION	SELECT 41, '42) Left lower leg (front)'
UNION	SELECT 42, '43) Right lower leg (rear)'
UNION	SELECT 43, '44) Left lower leg (rear)'
UNION	SELECT 44, '45) Right ankle (inner)'
UNION	SELECT 45, '46) Left ankle (inner)'
UNION	SELECT 46, '47) Right ankle (outer)'
UNION	SELECT 47, '48) Left ankle (outer)'
UNION	SELECT 48, '49) Right heel'
UNION	SELECT 49, '50) Left heel'
UNION	SELECT 50, '51) Right toe(s)'
UNION	SELECT 51, '52) Left toe(s)'
UNION	SELECT 52, '53) Sacrum'
UNION	SELECT 53, '54) Left gluteal fold'
UNION	SELECT 54, '55) Right gluteal fold'





INSERT INTO @prp_body_type (body_type_id, description)
		SELECT 0, 'Pressure'
UNION	SELECT 1, 'Vascular'
UNION	SELECT 2, 'Bruising'
UNION	SELECT 3, 'Skin Tear'
UNION	SELECT 4, 'Scar'
UNION	SELECT 5, 'Surgical Incision'
UNION	SELECT 6, 'Burn'
UNION	SELECT 7, 'Rash'
UNION	SELECT 8, 'IV/Sub q/Implanted Port'
UNION	SELECT 9, 'Blister'





INSERT INTO @prp_body_stage (body_stage_id, description)
		SELECT 0, 'I'
UNION	SELECT 1, 'II'
UNION	SELECT 2, 'III'
UNION	SELECT 3, 'IV'
UNION	SELECT 4, 'Unstageable'
UNION	SELECT 5, 'N/A'
UNION	SELECT 6, 'Suspected Deep Tissue Injury'


INSERT INTO @prp_body_stage_egbdy (body_stage_id, description)
		 SELECT 0, 'EPUAP - Grade  1'
UNION	SELECT 1, 'EPUAP - Grade  2'
UNION	SELECT 2, 'EPUAP - Grade  3'
UNION	SELECT 3, 'EPUAP - Grade  4'
UNION	SELECT 4, 'Moisture Lesions'



insert into #care_profile_question
select 
	question_id,
	category_id,
	case 
	when question_key = 'A_2_1' then 'Upper Dental Appliance'
	when question_key = 'A_2_2' then 'Lower Dental Appliance'
	when question_key = 'A_6_1' then 'Other (Auxiliary Devices and Services):'
	when question_key = 'B_3_2' then 'Other (Devices and Treatments):' 
	when question_key = 'C_3_2'	then 'Other (Risk Alerts):' 
	when question_key = 'D_1_4' then 'Other (Impairments - Musculoskeletal):' 
	when question_key =  'E_1_6' then 'Other (Impairments - General):' 
	when question_key =  'K_1_10' then 'Other (Special Care):' 
	else question_text
	end as question_text,
	question_key,
	question_type_id,
	parent_question_id,
	group_order,
	display_order,
	row_number () over (partition by category_id order by group_order, display_order) as seq,
	case 
		when question_key = 'A_1_2' then '#hearing'
		when question_key = 'A_2_1' then '#dentalupper'
		when question_key = 'A_2_2' then '#dentallower'
		when question_key = 'B_1_2' then '#bladder'
		when question_key = 'B_2_1' then '#nebulizer'
		when question_key = 'B_2_2' then '#oxygen'--'#l_per_min'
		when question_key = 'C_1_5' then '#bearing'
		when question_key = 'A_6_1' then '#ao' --'#auxother'
		when question_key = 'B_3_2' then '#do'--'#devother'
		when question_key = 'C_3_2' then '#ro'--'#riskother'
		when question_key = 'D_1_4' then '#mo' --'#muscother'
		when question_key = 'E_1_6' then '#so' --'#genother'		
		when question_key = 'K_1_5' then '#bp' --'#bdpayment' for Bundled Payment Program'
		when question_key = 'K_1_10' then '#co' --'#specother' for special care other'
		
		--to handle subquestions
		when question_key = 'A_1_2_1' then 'L'
		when question_key = 'A_1_2_2' then 'R'
		when question_key = 'A_2_1_1' then 'UP'
		when question_key = 'A_2_1_2' then 'UF'
		when question_key = 'A_2_2_1' then 'LP'
		when question_key = 'A_2_2_2' then 'LF'
		when question_key = 'B_1_2_1' then 'C'
		when question_key = 'B_1_2_2' then 'N'
		when question_key = 'B_2_1_1' then 'C'
		when question_key = 'B_2_1_2' then 'N'
		--O2 question
		when question_key = 'B_2_2_1' then ''
		when question_key = 'B_2_2_2' then 'C'
		when question_key = 'B_2_2_3' then 'N'
		when question_key = 'C_1_5_1' then 'L'
		when question_key = 'C_1_5_2' then 'R'
	end as subkey
from [WESREFERENCE].dbo.care_profile_question p with (nolock)



----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients( 
		  client_id int
		, client_name varchar(200) 
		, admission_date varchar(10)
		, initial_admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id 
		, client_physician varchar(100)
		, client_language varchar(254)
		, client_title varchar(254)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
		, ids varchar(max)
		, subids varchar(max)
);

CREATE TABLE #PRP_localterm
	(
            fac_id int
		, name varchar(100)
		, value varchar(1000)
		, status_code int
		, status_text varchar(max)
	);


BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login;
	Set @vLocationWithUnit ='1'

	if @debug_me='Y' Print 'Executing store proc :  ' + @vgs_program_name  +' '+ convert(varchar(26),getdate(),109)

	select @vStep = 0
	set @vgsStepStartTime = GETDATE()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Setting local variables ' + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';
	set @vSeparator2 = 'UVWXYZ';
	set @vSeparator3 = 'Z-XU#Y';
	SELECT @lenSpaceDate = LEN(@spaceDate)+1, @lenBrScale = LEN(@brScale)+1;

	-- handle emc case of list of facilities
	if @is_emc = 1
		if charindex(',', @fac_id) <> 0
			set @fac_id = '-1'

	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @vrecnum	  = @num_rec;


	select @vStep = 10
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end



	select	@vRegId = fac.regional_id, 
			@vFacName = fac.name, 
			@vFacAddress = ltrim(rtrim(isnull(fac.address1,''))) 
				+ ', ' + ltrim(rtrim(isnull(fac.address2,''))) 
				+ ', ' + ltrim(rtrim(isnull(fac.city,''))) 
				+ ', ' + ltrim(rtrim(isnull(fac.prov,''))) 
				+ ', ' + ltrim(rtrim(isnull(fac.pc,''))) 
				+ ', ' + ltrim(rtrim(isnull(cntry.item_description,'')))
	from dbo.facility fac with (nolock)
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	where fac.fac_id=@vFacID


	select 
		@vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
	from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
	on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @vgs_execution_user



	set  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)


	-- Local terminology
	-- error on this call will not force the SP to catch block. the error msg will be part of the final output
	insert into #PRP_localterm
	exec dbo.sproc_prp_local_terminology 	@vFacId , @vgoal_flag;
	
	if @debug_me='Y' select * from #PRP_localterm


	select @vtermErrorMsg = status_text from #PRP_localterm where status_code = 1
	select @vTermTask = value from #prp_localterm where name = 'term_tsk'
	select @vTermTasks = value from #prp_localterm where name = 'term_tsk'
	select @vTermIntervention = value from #prp_localterm where name = 'term_intrvntn'
	select @vTermFocus = value from #prp_localterm where name = 'term_fcs'
	select @vTermGoal = value from #prp_localterm where name = 'term_gol'

	--set @vtermErrorMsg = 'Err 0123'
	--set @status_code = 0

	select @vTermTask = dbo.fn_format_local_term('term_tsk', @vTermTask, 1,0,0) + ': '
	 ,@vTermIntervention = dbo.fn_format_local_term('term_intrvntn', @vTermIntervention, 1,0,0)  + ': '
	 ,@vTermFocus = dbo.fn_format_local_term('term_fcs', @vTermFocus, 1,0,0)  + ': '
	 ,@vTermGoal = dbo.fn_format_local_term('term_gol', @vTermGoal, 1,0,0)  + ': '
	 , @vTermTasks = dbo.fn_format_local_term('term_tsk', @vTermTasks, 1,1,0) + ': '

	select @vFacAddress=replace(replace(replace(replace(@vFacAddress,', , , , , ',', '), ', , , , ',', '), ', , , ',', '), ', , ',', ')
	select @vFacAddress= CASE WHEN left(@vFacAddress,1)=',' THEN RIGHT(@vFacAddress,(LEN(@vFacAddress)-2)) ELSE @vFacAddress end

	SET @vSortList	  = '';
	SET @vGroupList   = '';
	
	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' select @vCountryCode as CountryCode

	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
	
	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
	Select @vStep = 20;
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim_irm(@fac_id,@vgs_execution_user); ---filter the fac list with user access
																					  ---note that this report can be called from irm
	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @PRP_FacList 
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);
	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 30;
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting Meta Data ' + convert(varchar(26),getdate(),109);

/***************************************************************************
					GET META DATA SECTION
***************************************************************************/

	---- Create metadata temp tables ----

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
--Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
--Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));
Create table #PRP_Header (item_id int, id_type_id int, id_description varchar(254),header_item varchar(254),display_name varchar(254), sequence int);
Create table #PRP_SubHeader (item_id int, id_type_id int, id_description varchar(254),header_item varchar(254),display_name varchar(254), sequence int);

	---- Populate metadata temp tables ----


Select @vTermFacility= term_facility
		, @vTermClient = term_client
		, @vTermAdmission = term_admission
			from [dbo].fn_prp_get_terminology(@vFacID,@is_emc ) where fac_id = @vFacID


	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name 
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id
		
		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id 

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id 
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
	
		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id  
							from dbo.Split(@sort_list,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or	
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1') 
			  or 
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)


INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock) 
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock) 
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id 
	Where rm.report_id =  @vReportId 
		and repfilter.run_time_option = '0'


if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + 'Header and footer information... ' + convert(varchar(26),getdate(),109)


	Select @vheader = hdr1.[object_name]
			, @vFooter = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id 
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = ''--isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');

	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 =isnull( @vFilterList,'');


	---- retreive sort metadata from temp tables ----

	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end -- could be commented
--		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end -- could be commented
	from #PRP_Report_Metadata_Sorting order by seq;


	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');

	-- get facility default for face pain diagram
	select @vConfig_facepain_use_cartoon = [value] from dbo.configuration_parameter with (NOLOCK) where name='facepain_use_cartoon' and fac_id=@vFacId
	set @vConfig_facepain_use_cartoon = ISNULL(@vConfig_facepain_use_cartoon,'N')

/***************************************************************************
					END OF GET META DATA SECTION
***************************************************************************/
	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 40
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Deciding MRN number ' + convert(varchar(26),getdate(),109)

	-------------------------------------------------------------
	-- Deciding MRN number 
	-------------------------------------------------------------
	--declare @vMRNId varchar(50)
	declare @FinMRNId varchar(50)
	set @finmrnid = null

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end 
			  ,@vMRNId = cfg.hc_no_id 
            from   dbo.ar_configuration cfg with (nolock)
            left join dbo.facility fac with (nolock) on fac.fac_id = cfg.fac_id
            left join dbo.id_type hid with (nolock) on cfg.hc_no_id = hid.id_type_id
                  and ( ( hid.fac_id = @vFacId
                              and hid.state_code is null
                              and ( hid.reg_id is null
                                       or hid.reg_id = -1 ) )
                           or hid.fac_id = -1
                           or ( hid.reg_id = fac.regional_id
                                    and hid.state_code is null )
                           or ( hid.state_code = fac.prov
                                    and ( hid.reg_id = fac.regional_id
                                             or hid.reg_id is null
                                             or hid.reg_id = -1 ) )
                                and hid.deleted = 'N' )
            left join dbo.id_type sid with (nolock) on cfg.ssn_id = sid.id_type_id
                  and ( ( sid.fac_id = @vFacId
                              and sid.state_code is null
                              and ( sid.reg_id is null or sid.reg_id = -1 )
               )
              or sid.fac_id = -1
              or ( sid.reg_id = fac.regional_id
                  and sid.state_code is null )
              or ( sid.state_code = fac.prov
                                    and ( sid.reg_id = fac.regional_id
                                             or sid.reg_id is null
                                             or sid.reg_id = -1 ) )
                                and sid.deleted = 'N' )
    where  cfg.fac_id = @vFacId and cfg.deleted = 'N'

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 50
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)
--	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' start date ' + cast( @vfil_schedule_date as varchar(20)) + ' end date ' + cast( cast( @vfil_schedule_date2 as varchar(20)) as varchar(20))
 
	Set @vgsParamName1 = 'Not required'
	Set @vgsParamValue1 = 	''


	---Non metadata filters---
	SELECT @vfil_uda_assess_id = filter_value from #PRP_Filters where filter_name = 'uda_assess_id' and filter_value not in ('-1' ,'ALL','');
	SELECT @vis_from_print_chart = filter_value from #PRP_Filters where filter_name = 'is_from_print_chart' and filter_value = '1';
	SELECT @is_crm = filter_value from #PRP_Filters where filter_name = 'is_crm';

	IF @is_crm IS NULL
		set @is_crm = 0;

	---NON INTEGER VALUES AND SINGLE SELECTION

	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged
	
	-----DATE TIME

	SELECT @vreport_date_filter = filter_value
	from #PRP_Filters where filter_name = 'uda_rev_since';

--	if @debug_me='Y' Print '@vreport_date_filter = ' +  isnull(convert(varchar(26),@vreport_date_filter,109),'filter not found') 

	;with tb
			as
			( 
				select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
				cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
				where a.filter_name = 'uda_date_rnge'

			)
		select 
			 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
			,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
--			,@vfil_start_end_date_range_review  = '1'
		from tb

	if @debug_me='Y' Print '@vfil_start_end_date_range_d1 = ' +  isnull(convert(varchar(26),@vfil_start_end_date_range_d1,109),'filter not found') 
	if @debug_me='Y' Print '@vfil_start_end_date_range_d2 = ' +  isnull(convert(varchar(26),@vfil_start_end_date_range_d2,109),'filter not found') 

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Value_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split(a.filter_value,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */ 
	'client_floor'
	, 'uda_asst_type' 
	, 'client_unit'
	, 'uda_assessment_status'
	);


	Create Clustered Index _temp_filters_idx on #PRP_Multi_Value_Filters( filter_name, filter_value) ;

	if @debug_me='Y' SELECT * FROM #PRP_Multi_Value_Filters

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 60
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Value_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';
--	if Exists( select 1 from #PRP_Multi_Value_Filters where filter_name = 'std_assess_id')	SET @vfil_std_assess_id= '1';
	if Exists( select 1 from #PRP_Multi_Value_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	SET @vis_blank = (Select isnull(filter_value,'0') from #PRP_Filters where filter_name = 'is_blank');
		
	if @vis_blank is null set @vis_blank=0

--	if @debug_me='Y' print '@vis_blank value is '+ltrim(rtrim(str(@vis_blank)))

	SET @vshort_version = (Select filter_value from #PRP_Filters where filter_name = 'uda_print_shrt_ver');

--	if @debug_me='Y' print '@vshort_version value is '+ltrim(rtrim(str(isnull(@vshort_version,0))))

	SET @vincl_disabled_qs = (Select filter_value from #PRP_Filters where filter_name = 'uda_incl_disabled_qs');
	if @vincl_disabled_qs is null set @vincl_disabled_qs=0;

--	if @debug_me='Y' print '@vincl_disabled_qs value is '+ltrim(rtrim(str(@vincl_disabled_qs)))

	SET @vincl_strikeout = (Select filter_value from #PRP_Filters where filter_name = 'uda_Incl_struckout_assmts');

--	if @debug_me='Y' print '@vincl_strikeout value is '+ltrim(rtrim(str(@vincl_strikeout)))

	SET @vstd_assess_id = (Select filter_value from #PRP_Filters where filter_name = 'uda_asst_type');

--	if @debug_me='Y' print '@vstd_assess_id value is '+ltrim(rtrim(str(@vstd_assess_id)))

	-- get the assessment name 
	-- this was added to return uda if no data found
	
	select @uda_title = dbo.fn_scape_characters(
	  [description] ,'<')

	from dbo.as_std_assessment where std_assess_id = @vstd_assess_id


/***************************************************************************
					Check for call from history transfer
***************************************************************************/
	-- if this assessment is for a different client or facilty (as when called from the
	-- transfer history) then change the client_id and fac_id for the rest of the SPROC
	if @vfil_uda_assess_id IS NOT NULL
	begin
		SELECT @vFacId = fac_id, @client_id = client_id FROM dbo.as_assessment WITH (NOLOCK) WHERE assess_id = @vfil_uda_assess_id
	end


	if @vfil_uda_assess_id is not null and @vstd_assess_id is null
	begin
		select @vstd_assess_id = std_assess_id from dbo.as_assessment with (NOLOCK) where assess_id=@vfil_uda_assess_id
	end

	if @vfil_uda_assess_id is not null and @client_id ='-1'
	begin

		select @client_id = client_id from dbo.as_assessment with (NOLOCK) where assess_id=@vfil_uda_assess_id

	end

	if @vis_blank = 1 set @client_id = '-1'

	If @client_id='-1' set @vSingleClient=0 else set @vSingleClient=1;

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 70;
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting UDA Header & SubHeader columns ' + convert(varchar(26),getdate(),109);
	
	insert INTO #PRP_Header (item_id,id_type_id,id_description,display_name, sequence)
	SELECT assh.item_id,assh.id_type_id,idtype.description, ltrim(rtrim(ccode.item_description)),sequence_no --row_number() OVER (order by sequence_no) as row_num
	FROM dbo.AS_STD_ASSESS_HEADER assh
	LEFT JOIN dbo.COMMON_CODE ccode ON assh.item_id = ccode.item_id AND (ccode.deleted = 'N')  
	LEFT JOIN dbo.ID_TYPE idtype ON assh.id_type_id = idtype.id_type_id AND (idtype.deleted = 'N')  
	WHERE (((assh.std_assess_id  =  @vstd_assess_id  AND (assh.main_enabled  =  'Y' OR 
	(assh.main_enabled  =  'U'  AND assh.id_type_id  =  '6' )) AND (idtype.fac_id  =  '-1'  OR idtype.fac_id  =  @vFacID  OR 
	idtype.fac_id IS NULL  OR idtype.reg_id  =  '-1'  OR idtype.reg_id  =  @vRegId ) AND (assh.id_type_id  =  '-1'   OR 
	(assh.id_type_id  <>  '-1'   AND idtype.description IS NOT NULL ))))) 
	ORDER BY  sequence_no--row_num

	Set @vHeaderColumnCount = @@ROWCOUNT ;

	update #PRP_Header SET header_item='client_name',display_name=@vTermClient where display_name='Client Name'
	update #PRP_Header SET header_item='client_number',display_name=@vTermClient+' Number' where display_name='Client Number'
	update #PRP_Header SET header_item='assess_date' where display_name='Effective Date'
	update #PRP_Header SET header_item='client_location' where display_name='Location'
	update #PRP_Header SET header_item='admission_date',display_name=@vTermAdmission where display_name='Admission Date'
	update #PRP_Header SET header_item='date_of_birth' where display_name='Date of Birth'
	update #PRP_Header SET header_item='sex' where display_name='Gender'
	update #PRP_Header SET header_item='client_language' where display_name='Primary Language'
	update #PRP_Header SET header_item='physician' where display_name='Physician'
	update #PRP_Header SET header_item='allergy', sequence=99 where display_name='Allergies'
	update #PRP_Header SET header_item='Diagnoses', sequence=100, display_name='Diagnoses' where display_name='Diagnosis'
	update #PRP_Header SET header_item='uda', sequence=98 where display_name='Title'
	update #PRP_Header SET header_item='assessment_type' where display_name='Type'
	update #PRP_Header SET header_item='facility_name',display_name=@vTermFacility where display_name='Facility Name'
	update #PRP_Header SET header_item='facility_address',display_name=@vTermFacility+' Address' where display_name='Facility Address'
	update #PRP_Header SET header_item='initial_admission_date',display_name='Initial '+@vTermAdmission where display_name='Initial Admission Date'
	update #PRP_Header SET header_item='score' where display_name='Score'
	update #PRP_Header SET header_item='score_category' where display_name='Category'
	update #PRP_Header SET header_item='ids' where display_name='Identifiers'

	if Exists( select 1 from #PRP_Header where display_name = 'Identifiers') SET @vIdsInHeader = '1';
	
	if not exists (SELECT 1 from #PRP_Header where header_item = 'uda' )
	begin
	insert INTO #PRP_Header (item_id,id_type_id,id_description,header_item, display_name, sequence)
			VALUES (7115, -1, null, 'uda','Title', 98)
	end 

	
	if @debug_me='Y' select '#PRP_Header', * from #PRP_Header 
	
	-- when client id number was selected it will be added to client name instead of separate item
	SELECT @vClientidnumberIndex = count(*) from #PRP_Header where header_item = 'client_number'
	delete FROM #PRP_Header where header_item = 'client_number'
	if @debug_me='Y' select @vClientidnumberIndex as '@vClientidnumberIndex' 

-- eliminate duplicate identifier rows for use when setting variables (we concactonate selected identifiers after #client table loading)

	insert INTO #PRP_HeaderUnq  (header_item,display_name,sequence)
	SELECT header_item,display_name,row_number() OVER (order by sequence) as row_num from
	(SELECT  header_item,display_name,sequence from #PRP_Header where display_name <> 'Identifiers'
	union all
	SELECT  top 1 header_item,display_name,sequence from #PRP_Header where display_name = 'Identifiers') temp
	order by row_num

	

	---- retreive page and grouping metadata from temp tables ----

	Select 
		   @vP1      = Case when sequence = 1 then header_item else @vP1 end
		  ,@vP2      = Case when sequence = 2 then header_item else @vP2 end
		  ,@vP3      = Case when sequence = 3 then header_item else @vP3 end
		  ,@vP4      = Case when sequence = 4 then header_item else @vP4 end
		  ,@vP5      = Case when sequence = 5 then header_item else @vP5 end
		  ,@vP6      = Case when sequence = 6 then header_item else @vP6 end
		  ,@vP7      = Case when sequence = 7 then header_item else @vP7 end
		  ,@vP8      = Case when sequence = 8 then header_item else @vP8 end
		  ,@vP9      = Case when sequence = 9 then header_item else @vP9 end
		  ,@vP10     = Case when sequence = 10 then header_item else @vP10 end
		  ,@vP11     = Case when sequence = 11 then header_item else @vP11 end
		  ,@vP12     = Case when sequence = 12 then header_item else @vP12 end
		  ,@vP13     = Case when sequence = 13 then header_item else @vP13 end
		  ,@vP14     = Case when sequence = 14 then header_item else @vP14 end
		  ,@vP15     = Case when sequence = 15 then header_item else @vP15 end
		  ,@vP16     = Case when sequence = 16 then header_item else @vP16 end
		  ,@vP17     = Case when sequence = 17 then header_item else @vP17 end
		  ,@vP18     = Case when sequence = 18 then header_item else @vP18 end
		  ,@vP19     = Case when sequence = 19 then header_item else @vP19 end
		  ,@vP20     = Case when sequence = 20 then header_item else @vP20 end

		  ,@vP1_disp_name      = Case when sequence = 1 then display_name else @vP1_disp_name end
		  ,@vP2_disp_name      = Case when sequence = 2 then display_name else @vP2_disp_name end
		  ,@vP3_disp_name      = Case when sequence = 3 then display_name else @vP3_disp_name end
		  ,@vP4_disp_name      = Case when sequence = 4 then display_name else @vP4_disp_name end
		  ,@vP5_disp_name      = Case when sequence = 5 then display_name else @vP5_disp_name end
		  ,@vP6_disp_name      = Case when sequence = 6 then display_name else @vP6_disp_name end
		  ,@vP7_disp_name      = Case when sequence = 7 then display_name else @vP7_disp_name end
		  ,@vP8_disp_name      = Case when sequence = 8 then display_name else @vP8_disp_name end
		  ,@vP9_disp_name      = Case when sequence = 9 then display_name else @vP9_disp_name end
		  ,@vP10_disp_name     = Case when sequence = 10 then display_name else @vP10_disp_name end
		  ,@vP11_disp_name     = Case when sequence = 11 then display_name else @vP11_disp_name end
		  ,@vP12_disp_name     = Case when sequence = 12 then display_name else @vP12_disp_name end
		  ,@vP13_disp_name     = Case when sequence = 13 then display_name else @vP13_disp_name end
		  ,@vP14_disp_name     = Case when sequence = 14 then display_name else @vP14_disp_name end
		  ,@vP15_disp_name     = Case when sequence = 15 then display_name else @vP15_disp_name end
		  ,@vP16_disp_name     = Case when sequence = 16 then display_name else @vP16_disp_name end
		  ,@vP17_disp_name     = Case when sequence = 17 then display_name else @vP17_disp_name end
		  ,@vP18_disp_name     = Case when sequence = 18 then display_name else @vP18_disp_name end
		  ,@vP19_disp_name     = Case when sequence = 19 then display_name else @vP19_disp_name end
		  ,@vP20_disp_name     = Case when sequence = 20 then display_name else @vP20_disp_name end
	from #PRP_HeaderUnq;

--begin subheader setup

	insert INTO #PRP_SubHeader (item_id,id_type_id,id_description,display_name, sequence)
	SELECT assh.item_id,assh.id_type_id,idtype.description, ltrim(rtrim(ccode.item_description)),sequence_no --row_number() OVER (order by sequence_no) as row_num
	FROM dbo.AS_STD_ASSESS_HEADER assh
	LEFT JOIN dbo.COMMON_CODE ccode ON assh.item_id = ccode.item_id AND (ccode.deleted = 'N')  
	LEFT JOIN dbo.ID_TYPE idtype ON assh.id_type_id = idtype.id_type_id AND (idtype.deleted = 'N')  
	WHERE assh.std_assess_id  =  @vstd_assess_id  AND assh.sub_enabled  =  'Y' AND (idtype.fac_id  =  '-1'  OR idtype.fac_id  =  @vFacID  OR 
	idtype.fac_id IS NULL  OR idtype.reg_id  =  '-1'  OR idtype.reg_id  =  @vRegId ) AND (assh.id_type_id  =  '-1'   OR 
	(assh.id_type_id  <>  '-1'   AND idtype.description IS NOT NULL ))
	ORDER BY  sequence_no --row_num

	update #PRP_SubHeader SET header_item='client_name',display_name=@vTermClient where display_name='Client Name'
	update #PRP_SubHeader SET header_item='client_number',display_name=@vTermClient+' Number' where display_name='Client Number'
	update #PRP_SubHeader SET header_item='assess_date' where display_name='Effective Date'
	update #PRP_SubHeader SET header_item='client_location' where display_name='Location'
	update #PRP_SubHeader SET header_item='admission_date',display_name=@vTermAdmission where display_name='Admission Date'
	update #PRP_SubHeader SET header_item='date_of_birth' where display_name='Date of Birth'
	update #PRP_SubHeader SET header_item='sex' where display_name='Gender'
	update #PRP_SubHeader SET header_item='client_language' where display_name='Primary Language'
	update #PRP_SubHeader SET header_item='physician' where display_name='Physician'
	update #PRP_SubHeader SET header_item='allergy', sequence=99 where display_name='Allergies'
	update #PRP_SubHeader SET header_item='Diagnoses', sequence=100, display_name='Diagnoses' where display_name='Diagnosis'
	update #PRP_SubHeader SET header_item='uda', sequence=98 where display_name='Title'
	update #PRP_SubHeader SET header_item='assessment_type' where display_name='Type'
	update #PRP_SubHeader SET header_item='facility_name',display_name=@vTermFacility where display_name='Facility Name'
	update #PRP_SubHeader SET header_item='facility_address',display_name=@vTermFacility+' Address' where display_name='Facility Address'
	update #PRP_SubHeader SET header_item='initial_admission_date',display_name='Initial '+@vTermAdmission where display_name='Initial Admission Date'
	update #PRP_SubHeader SET header_item='score' where display_name='Score'
	update #PRP_SubHeader SET header_item='score_category' where display_name='Category'
	update #PRP_SubHeader SET header_item='subids' where display_name='Identifiers'

	if Exists( select 1 from #PRP_SubHeader where display_name = 'Identifiers') SET @vIdsInSubHeader = '1';
	
	if not exists (SELECT 1 from #PRP_SubHeader where header_item = 'uda' )
	begin
	insert INTO #PRP_SubHeader (item_id,id_type_id,id_description,header_item, display_name, sequence)
		select item_id,id_type_id,id_description,header_item, display_name, sequence from  #PRP_Header where  header_item='uda'
	end 

	delete FROM #PRP_SubHeader where header_item = 'client_number'
	if @debug_me='Y' select '#PRP_SubHeader', * from #PRP_SubHeader 

	

-- eliminate duplicate identifier rows for use when setting variables (we concactonate selected identifiers after #client table loading)

	insert INTO #PRP_SubHeaderUnq  (header_item,display_name,sequence)
	SELECT header_item,display_name,row_number() OVER (order by sequence) as row_num from
	(SELECT  header_item,display_name,sequence from #PRP_SubHeader where display_name <> 'Identifiers'
	union all
	SELECT  top 1 header_item,display_name,sequence from #PRP_SubHeader where display_name = 'Identifiers') temp
	order by row_num

	


	---- retreive page and grouping metadata from temp tables ----

	Select 
		   @vSubP1      = Case when sequence = 1 then header_item else @vSubP1 end
		  ,@vSubP2      = Case when sequence = 2 then header_item else @vSubP2 end
		  ,@vSubP3      = Case when sequence = 3 then header_item else @vSubP3 end
		  ,@vSubP4      = Case when sequence = 4 then header_item else @vSubP4 end
		  ,@vSubP5      = Case when sequence = 5 then header_item else @vSubP5 end
		  ,@vSubP6      = Case when sequence = 6 then header_item else @vSubP6 end
		  ,@vSubP7      = Case when sequence = 7 then header_item else @vSubP7 end
		  ,@vSubP8      = Case when sequence = 8 then header_item else @vSubP8 end
		  ,@vSubP9      = Case when sequence = 9 then header_item else @vSubP9 end
		  ,@vSubP10     = Case when sequence = 10 then header_item else @vSubP10 end
		  ,@vSubP11     = Case when sequence = 11 then header_item else @vSubP11 end
		  ,@vSubP12     = Case when sequence = 12 then header_item else @vSubP12 end
		  ,@vSubP13     = Case when sequence = 13 then header_item else @vSubP13 end
		  ,@vSubP14     = Case when sequence = 14 then header_item else @vSubP14 end
		  ,@vSubP15     = Case when sequence = 15 then header_item else @vSubP15 end
		  ,@vSubP16     = Case when sequence = 16 then header_item else @vSubP16 end
		  ,@vSubP17     = Case when sequence = 17 then header_item else @vSubP17 end
		  ,@vSubP18     = Case when sequence = 18 then header_item else @vSubP18 end
		  ,@vSubP19     = Case when sequence = 19 then header_item else @vSubP19 end
		  ,@vSubP20     = Case when sequence = 20 then header_item else @vSubP20 end

		  ,@vSubP1_disp_name      = Case when sequence = 1 then display_name else @vSubP1_disp_name end
		  ,@vSubP2_disp_name      = Case when sequence = 2 then display_name else @vSubP2_disp_name end
		  ,@vSubP3_disp_name      = Case when sequence = 3 then display_name else @vSubP3_disp_name end
		  ,@vSubP4_disp_name      = Case when sequence = 4 then display_name else @vSubP4_disp_name end
		  ,@vSubP5_disp_name      = Case when sequence = 5 then display_name else @vSubP5_disp_name end
		  ,@vSubP6_disp_name      = Case when sequence = 6 then display_name else @vSubP6_disp_name end
		  ,@vSubP7_disp_name      = Case when sequence = 7 then display_name else @vSubP7_disp_name end
		  ,@vSubP8_disp_name      = Case when sequence = 8 then display_name else @vSubP8_disp_name end
		  ,@vSubP9_disp_name      = Case when sequence = 9 then display_name else @vSubP9_disp_name end
		  ,@vSubP10_disp_name     = Case when sequence = 10 then display_name else @vSubP10_disp_name end
		  ,@vSubP11_disp_name     = Case when sequence = 11 then display_name else @vSubP11_disp_name end
		  ,@vSubP12_disp_name     = Case when sequence = 12 then display_name else @vSubP12_disp_name end
		  ,@vSubP13_disp_name     = Case when sequence = 13 then display_name else @vSubP13_disp_name end
		  ,@vSubP14_disp_name     = Case when sequence = 14 then display_name else @vSubP14_disp_name end
		  ,@vSubP15_disp_name     = Case when sequence = 15 then display_name else @vSubP15_disp_name end
		  ,@vSubP16_disp_name     = Case when sequence = 16 then display_name else @vSubP16_disp_name end
		  ,@vSubP17_disp_name     = Case when sequence = 17 then display_name else @vSubP17_disp_name end
		  ,@vSubP18_disp_name     = Case when sequence = 18 then display_name else @vSubP18_disp_name end
		  ,@vSubP19_disp_name     = Case when sequence = 19 then display_name else @vSubP19_disp_name end
		  ,@vSubP20_disp_name     = Case when sequence = 20 then display_name else @vSubP20_disp_name end
	from #PRP_SubHeaderUnq;


	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

--end subheader setup

	-----getting the list of clients
	select @vStep = 80
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of clients ' + convert(varchar(26),getdate(),109)

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Value_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END

	IF @is_crm=1
	begin
			Insert into #clients
		(
			  client_id 
			, client_name 
			, admission_date 
			, initial_admission_date
			, discharge_date 
			, deceased_date 
			, allergy 
			, location 
			, date_of_birth 
			, client_physician_id
			, client_physician
			, client_language
			, client_title
			, mrn_number 
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select assessment.client_id as client_id
			,rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  )   
			as client_name

			, '' as admission_date
			, '' as initial_admission_date
			, '' as discharge_date
			, isnull(convert(varchar(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date

			, '' as allergy
			, '' as location
			
			, isnull(convert(varchar(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth

			, '' as client_physician_id
			, ''  as client_physician
			, isnull(lang.item_description,'') as client_language
			, isnull(ttl.item_description,'') as client_title
			, NULL as mrn_number
			, '' as client_id_number
			, isnull(m.sex,'') sex
			, '' as bed_id
			, 0 as hasAllergy
    		, 0 as hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
		from dbo.scrm_lead_assessment a with (nolock)
		inner JOIN as_assessment assessment with (nolock)  ON assessment.assess_id = a.assess_id
		inner JOIN dbo.scrm_lead l with (nolock) on a.entity_id=l.entity_id
		inner JOIN dbo.mpi m with (nolock) on l.mpi_id = m.mpi_id
		left JOIN dbo.common_code lang WITH(NOLOCK) ON m.primary_lang_id=lang.item_id
		left JOIN dbo.common_code ttl WITH(NOLOCK) ON m.title=ttl.item_id 
		WHERE  a.assess_id=@vfil_uda_assess_id

		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	end
	ELSE
		IF @vSingleClient=1
		begin
			Insert into #clients
			(
				  client_id 
				, client_name 
				, admission_date 
				, initial_admission_date
				, discharge_date 
				, deceased_date 
				, allergy 
				, location 
				, date_of_birth 
				, client_physician_id
				, client_physician
				, client_language
				, client_title
				, mrn_number 
				, client_id_number
				, sex
				, bed_id
				, hasAllergy
				, hasBed
				, hasDOB
				, hasGender
			)
			select  c.client_id
				 ,case when @vClientidnumberIndex = 0 then
				 rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  )  
				 ELSE
				rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' END 
				as client_name

	--			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			

				, isnull(convert(varchar(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
				, isnull(convert(varchar(10),c.initial_admission_date, @vdateFormatStyle),'')	as initial_admission_date
				, isnull(convert(varchar(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
				, isnull(convert(varchar(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date


				, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
				, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
					 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			
			
				, isnull(convert(varchar(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth

				, convert(varchar,c.primary_physician_id) as client_physician_id
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
				, isnull(lang.item_description,'') as client_language
				, isnull(ttl.item_description,'') as client_title
				, Case when @vMRNId = -2 then c.client_id_number 
					else NULL 
					end as mrn_number
				, isnull(c.client_id_number,'')
				, isnull(m.sex,'') sex
				, loc.bed_id 
				, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    			, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
				, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    			, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
			from dbo.clients c with (nolock)
			inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
			left JOIN dbo.common_code lang WITH(NOLOCK) ON m.primary_lang_id=lang.item_id
			left JOIN dbo.common_code ttl WITH(NOLOCK) ON m.title=ttl.item_id
			inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
	--		inner join ( Select * from 
			LEFT join ( Select * from 
							(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
								From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
							where row_num = 1
						) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string
		
			left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
			left join dbo.room r with (nolock) on b.room_id=r.room_id
			left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
			left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id
			left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id  
			WHERE  c.client_id=@client_id

			Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
		end
		else if @vfil_client_status in (-1,1) and @vis_blank=0 ----ALL or discharged
		BEGIN
			Insert into #clients
			(
				  client_id 
				, client_name 
				, admission_date 
				, initial_admission_date
				, discharge_date 
				, deceased_date 
				, allergy 
				, location 
				, date_of_birth 
				, client_physician_id
				, client_physician
				, client_language
				, client_title
				, mrn_number 
				, client_id_number
				, sex
				, bed_id
				, hasAllergy
				, hasBed
				, hasDOB
				, hasGender
			)
			select  c.client_id
				,case when @vClientidnumberIndex = 0 then
				 rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  )  
				 ELSE
				rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' END 
				as client_name

	--			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name

				, isnull(convert(varchar(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
				, isnull(convert(varchar(10),c.initial_admission_date, @vdateFormatStyle),'')	as initial_admission_date
				, isnull(convert(varchar(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
				, isnull(convert(varchar(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date

				, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
				, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
					 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			
				, isnull(convert(varchar(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
	
				, convert(varchar,c.primary_physician_id) as client_physician_id
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
				, isnull(lang.item_description,'') as client_language
				, isnull(ttl.item_description,'') as client_title
				, Case when @vMRNId = -2 then c.client_id_number 
					else NULL 
					end as mrn_number
				, isnull(c.client_id_number,'')
				, isnull(m.sex,'') sex
				, loc.bed_id 
				, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    			, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
				, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    			, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
				from ( Select client_id, mpi_id, client_id_number 
								, admission_date
								, initial_admission_date
								, discharge_date
								, primary_physician_id
								, pharmacy_id

						from dbo.clients  with (nolock) 
					left join #PRP_Multi_Value_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
					where clients.fac_id = @vFacID  and clients.deleted = 'N' 
						AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
						AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
				) c
			inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
			left JOIN dbo.common_code lang WITH(NOLOCK) ON m.primary_lang_id=lang.item_id
			left JOIN dbo.common_code ttl WITH(NOLOCK) ON m.title=ttl.item_id
			inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id		
			inner join ( Select * from 
							(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
								From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
							where row_num = 1
						) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

			left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
			left join dbo.room r with (nolock) on b.room_id=r.room_id
			left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
			left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id
			left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id  
			Left join #PRP_Multi_Value_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
			Left join #PRP_Multi_Value_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
			WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
				AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )


			Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
		END
		ELSE IF @vfil_client_status not in (-1,1) and @vis_blank=0 -----ONLY Current clients
		BEGIN

			Insert into #clients
			(
				  client_id 
				, client_name 
				, admission_date 
				, initial_admission_date
				, discharge_date 
				, deceased_date 
				, allergy 
				, location 
				, date_of_birth 
				, client_physician_id
				, client_physician
				, client_language
				, client_title
				, mrn_number 
				, client_id_number
				, sex
				, bed_id
				, hasAllergy
				, hasBed
				, hasDOB
				, hasGender
			)
			select  c.client_id
				,case when @vClientidnumberIndex = 0 then
				 rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  )  
				 ELSE
				rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,'')))  ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' END 
				as client_name

	--			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			
				, isnull(convert(varchar(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
				, isnull(convert(varchar(10),c.initial_admission_date, @vdateFormatStyle),'')	as initial_admission_date
				, isnull(convert(varchar(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
				, isnull(convert(varchar(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date

				, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
				, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end + 
						rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			
		
				, isnull(convert(varchar(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
			
				, convert(varchar,c.primary_physician_id) as client_physician_id
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
				, isnull(lang.item_description,'') as client_language
				, isnull(ttl.item_description,'') as client_title
				, Case when @vMRNId = -2 then c.client_id_number 
					else NULL 
					end as mrn_number
				, isnull(c.client_id_number,'')
				, isnull(m.sex,'') as sex
				, loc.bed_id 
				, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    			, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
				, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    			, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 

			from dbo.clients c with (nolock)
			inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
			left JOIN dbo.common_code lang WITH(NOLOCK) ON m.primary_lang_id=lang.item_id
			left JOIN dbo.common_code ttl WITH(NOLOCK) ON m.title=ttl.item_id		
			inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
			inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
			left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id  
			left join #PRP_Multi_Value_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
			Left join #PRP_Multi_Value_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
			Left join #PRP_Multi_Value_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
			WHERE 	c.fac_id =  @vFacID	
				AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
				AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
				AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
				AND c.discharge_date is null
			Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
		END
		ELSE IF @vis_blank=1 ----- Empty client for blank report
		BEGIN
			Insert into #clients
					(
						  client_id 
						, client_name 
						, admission_date 
						, initial_admission_date
						, discharge_date 
						, deceased_date 
						, allergy 
						, location 
						, date_of_birth 
						, client_physician
						, client_language
						, client_title
						, mrn_number 
						, client_id_number
						, sex
					)
			SELECT	0 as client_id
					, '' as client_name
					, '' as admission_date
					, '' as initial_admission_date
					, '' as discharge_date
					, '' as deceased_date
					, '' as allergy
					, '' as location
					, '' as date_of_birth
					, '' as client_physician
					, '' as client_language
					, '' as client_title
					, '' as mrn_number
					, '' as client_id_number
					, '' as sex
			Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
		END

	IF @vgsClientCount=0 and @vis_blank=0
		Begin
			Set @status_code = 2 ; 
			Set @status_text = 'No residents found with the current filter criteria.'
			Raiserror( @status_text, 11, 1 );
		End 

	if @debug_me='Y'  select * from #clients


	CREATE CLUSTERED INDEX _tmp_idx_clients on #clients(client_id);

	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) and @vis_blank=0-----
	BEGIN
	
		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description)) 
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId 

	END

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(@vgsClientCount))+ ' rows in ' +ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 90
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' bulding client identifiers for header ' + convert(varchar(26),getdate(),109)

	IF @vIdsInHeader = 1 --dynamically concatenate all selected header identifier names and values
	BEGIN
		Update c SET c.ids = indents.ids 
		from #clients c
		inner JOIN (SELECT client_id, REPLACE(csv,'|',@vSeparator2) as ids
			from(
			SELECT distinct t.client_id, STUFF(
			(SELECT  '|' +id_description+@vSeparator+[description]
			FROM 
			(select cl.client_id,head.id_description,isnull(cids.description,'') as [description] FROM 
			#clients cl
			OUTER APPLY #PRP_Header head
			left join dbo.client_ids cids with (nolock) on cl.client_id=cids.client_id AND cids.deleted='N' AND  head.id_type_id=cids.id_type_id
			where head.display_name='Identifiers') s
			WHERE s.client_id = t.client_id
			FOR XML PATH('')),1,1,'') AS CSV
			FROM 
			(select cl.client_id,head.id_description,isnull(cids.description,'') as [description] FROM 
			#clients cl
			OUTER APPLY #PRP_Header head
			left join dbo.client_ids cids with (nolock) on cl.client_id=cids.client_id AND cids.deleted='N' AND  head.id_type_id=cids.id_type_id
			where head.display_name='Identifiers') t
			GROUP BY t.client_id) clids) indents ON c.client_id=indents.client_id
	END

	IF @vIdsInSubHeader = 1 --dynamically concatenate all selected header identifier names and values
	BEGIN
		Update c SET c.subids = indents.ids 
		from #clients c
		inner JOIN (SELECT client_id, REPLACE(csv,'|',@vSeparator2) as ids
			from(
			SELECT distinct t.client_id, STUFF(
			(SELECT  '|' +id_description+@vSeparator+[description]
			FROM 
			(select cl.client_id,head.id_description,isnull(cids.description,'') as [description] FROM 
			#clients cl
			OUTER APPLY #PRP_SubHeader head
			left join dbo.client_ids cids with (nolock) on cl.client_id=cids.client_id AND cids.deleted='N' AND  head.id_type_id=cids.id_type_id
			where head.display_name='Identifiers') s
			WHERE s.client_id = t.client_id
			FOR XML PATH('')),1,1,'') AS CSV
			FROM 
			(select cl.client_id,head.id_description,isnull(cids.description,'') as [description] FROM 
			#clients cl
			OUTER APPLY #PRP_SubHeader head
			left join dbo.client_ids cids with (nolock) on cl.client_id=cids.client_id AND cids.deleted='N' AND  head.id_type_id=cids.id_type_id
			where head.display_name='Identifiers') t
			GROUP BY t.client_id) clids) indents ON c.client_id=indents.client_id
	END

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	------Initializing Execution Statistics Varibales
	select @vStep = 100
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information 

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ; 

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'


	-------------------------------------------------------------
	-- Inserting records in temp assess filter table.
	-------------------------------------------------------------

	select @vStep = 110
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Inserting records in temp assess filter table ' + convert(varchar(26),getdate(),109);

	if @vfil_uda_assess_id is not null
		-- a specific assessment has been specified so just put the one into the table
		begin
			insert INTO #PRP_Assess_Filter
			SELECT a.std_assess_id,
			a.client_id,
			a.assess_id,
			a.assess_date
			from dbo.as_assessment a WITH (NOLOCK)
			INNER JOIN #clients c on 
					a.client_id = c.client_id
				and a.assess_id = @vfil_uda_assess_id
			left outer join #PRP_Multi_Value_Filters mfl
				on mfl.filter_name = 'uda_assessment_status'
			where
				1 = (case when mfl.filter_value is null then 1
						  when 	mfl.filter_value = '1' and (a.status = 'In Progress' or a.status = 'Errors' ) then 1
						  when mfl.filter_value = '2' and a.status = 'Complete' then 1
						  when mfl.filter_value = '3' and a.status = 'Incomplete' then 1
						 else 0
					 end
					)

			set @vRowCount = @@rowcount
			set @vStep = 111
		end
	else

	if @vis_from_print_chart is null and (@vreport_date_filter is not null or @vfil_start_end_date_range_d1 is not null )
		-- when date filters are used, there are two cases - one for a specific client_id, and the other for all clients
		begin
			if @vSingleClient=1
				begin
					-- date filter and single client: all applicable assessments are returned
					
					insert INTO #PRP_Assess_Filter
					SELECT distinct
					assess.std_assess_id,
					assess.client_id,
					assess.assess_id,
					assess.assess_date
					from
					dbo.as_assessment assess WITH (NOLOCK)
					INNER JOIN #clients cl on assess.client_id=cl.client_id

					left outer join #PRP_Multi_Value_Filters mfl
					on mfl.filter_name = 'uda_assessment_status'
				where
					
						assess.deleted='N' 
					
					and
						(
							(((@vincl_strikeout='0' OR @vincl_strikeout IS NULL) AND isnull(assess.strikeout_flag,'N')='N' )
							and (
								(mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' ))
								or 
								( mfl.filter_value = '2' and assess.status = 'Complete')
								or 
								(mfl.filter_value = '3' and assess.status = 'Incomplete')	
								))
							

						OR 
							(
							@vincl_strikeout='1'
							and (mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' )
								or 
								( mfl.filter_value = '2' and assess.status = 'Complete')
								or 
								(mfl.filter_value = '3' and assess.status = 'Incomplete')	
								or 
								(assess.strikeout_flag = 'Y')
								)
							)
														
						)
						 
					AND
						(@vstd_assess_id = -1 or @vstd_assess_id is NULL or assess.std_assess_id = @vstd_assess_id)
					and
						((@vreport_date_filter is not NULL and assess.revision_date >= @vreport_date_filter)
						or  
						(@vreport_date_filter is NULL ))
					and
						((@vfil_start_end_date_range_d1 is not NULL and assess.assess_date >= @vfil_start_end_date_range_d1 AND assess.assess_date< @vfil_start_end_date_range_d2)
						or  
						(@vfil_start_end_date_range_d1 is NULL ))

					set @vRowCount = @@rowcount
					set @vStep = 112
				end
			else
				begin
					-- date filter and all clients: only most recent applicible assessments
					-- date filter and single client: all applicible assessments
					-- this is also applicable if the report is from print chart
						--(date filter and single client and print chart)
					

					; with MostRecent
					as
					( SELECT 
							assess.std_assess_id,
							assess.client_id,
							assess.assess_date, 
							assess.assess_id,
							row_number() OVER ( partition by assess.std_assess_id, assess.client_id, assess.status, isnull(assess.strikeout_flag,'N') ORDER BY assess.std_assess_id, assess.client_id, assess.status,assess.assess_date desc ) rnum
							from
							dbo.as_assessment assess WITH (NOLOCK)
							INNER JOIN #clients cl on assess.client_id=cl.client_id

							left outer join #PRP_Multi_Value_Filters mfl
							on mfl.filter_name = 'uda_assessment_status'
						where
							 assess.deleted='N' 
							and
								(
									(((@vincl_strikeout='0' OR @vincl_strikeout IS NULL) AND isnull(assess.strikeout_flag,'N')='N' )
									and (
										(mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' ))
										or 
										( mfl.filter_value = '2' and assess.status = 'Complete')
										or 
										(mfl.filter_value = '3' and assess.status = 'Incomplete')	
										))
							

								OR 
									(
									@vincl_strikeout='1'
									and (mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' )
										or 
										( mfl.filter_value = '2' and assess.status = 'Complete')
										or 
										(mfl.filter_value = '3' and assess.status = 'Incomplete')	
										or 
										(assess.strikeout_flag = 'Y')
										)
									)
														
								)


							AND
							(@vstd_assess_id = -1 or @vstd_assess_id is NULL or assess.std_assess_id = @vstd_assess_id)
							and
							((@vreport_date_filter is not NULL and assess.revision_date >= @vreport_date_filter)
							or  
							(@vreport_date_filter is NULL ))
							and
							((@vfil_start_end_date_range_d1 is not NULL and assess.assess_date >= @vfil_start_end_date_range_d1 AND assess.assess_date< @vfil_start_end_date_range_d2)
							or  
							(@vfil_start_end_date_range_d1 is NULL ))
							

					)


					INSERT INTO #PRP_Assess_Filter

					select std_assess_id, client_id,assess_id, assess_date from MostRecent 
						where 
						1 = ( case when @client_id = '-1' and	rnum = 1 then 1
									when @client_id <> '-1' then 1
									else 0
                              end
							  )


					set @vRowCount = @@rowcount
					set @vStep = 113
				end
		end
	else	 -- when date filters are NOT used, only the latest assessment is returned
		begin
			insert INTO #PRP_Assess_Filter
			SELECT a.std_assess_id,
			a.client_id,
			a.assess_id,
			a.assess_date
			from
				(SELECT 
				assess.std_assess_id,
				assess.client_id,
				max(assess.assess_date) as max_assess_date
				from
				dbo.as_assessment assess WITH (NOLOCK)
				INNER JOIN #clients cl on assess.client_id=cl.client_id

				left outer join #PRP_Multi_Value_Filters mfl
					on mfl.filter_name = 'uda_assessment_status'
				where
					assess.deleted='N' 
				and
						(
							(((@vincl_strikeout='0' OR @vincl_strikeout IS NULL) AND isnull(assess.strikeout_flag,'N')='N') 
							and (
								(mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' ))
								or 
								( mfl.filter_value = '2' and assess.status = 'Complete')
								or 
								(mfl.filter_value = '3' and assess.status = 'Incomplete')	
								)
							)

						OR 
							(
							@vincl_strikeout='1'
							or (mfl.filter_value = '1' and (assess.status = 'In Progress' or assess.status = 'Errors' ))
								or 
								( mfl.filter_value = '2' and assess.status = 'Complete')
								or 
								(mfl.filter_value = '3' and assess.status = 'Incomplete')	
							)
														
						)

				AND
				(@vstd_assess_id = -1 or @vstd_assess_id is NULL or assess.std_assess_id = @vstd_assess_id)
				GROUP BY 
				assess.std_assess_id,
				assess.client_id
				) b

			INNER JOIN dbo.as_assessment a WITH (NOLOCK)
			 on a.client_id=b.client_id and a.std_assess_id=b.std_assess_id AND a.assess_date=b.max_assess_date

			set @vRowCount = @@rowcount
			set @vStep = 114
		end


	CREATE CLUSTERED INDEX _tmp_idx_prp_Assess_Filter on #PRP_Assess_Filter(assess_id, std_assess_id);

	if @debug_me = 'Y' select '#PRP_Assess_Filter' AS [#PRP_Assess_Filter], *, convert(varchar(20), @vStep) as steps from #PRP_Assess_Filter

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(@vRowCount)))+ ' rows in '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	insert into #prp_ShowHideDisable_rules
select distinct q.std_question_id, q.pick_list_id, q.question_key,
q.section_code,  stdqg.group_text, 
q.std_question_no, q.std_subquestion_no, q.std_subquestion_ab
, q.title, acr.consistency_rule_id
, q.control_type,
stdqg.group_title,
acr.enabled_flag,
acr.question_key_info,
 q.question_text,
acr.question_key_sbj,  
acr.item_id
, case when acr.item_id = 4110 then 'Show/hide'
			when acr.item_id = 4102 then 'Disable'
			else 'N/A'
			end as rules_description
, acrr.range
, case when CHARINDEX('thru', acrr.range,1) = 0 then acrr.range
		else SUBSTRING (acrr.range, 1, CHARINDEX('thru', acrr.range,1)-1 )
		end
, case when CHARINDEX('thru', acrr.range,1) = 0 then null
		else SUBSTRING (acrr.range,  CHARINDEX('thru', acrr.range,1) + 4, 10)
		end
, pl.item_description
, acr.question_key_obj
 from dbo.mirror_as_std_question q WITH (NOLOCK)
 inner join #PRP_Assess_Filter std
 on q.std_assess_id = std.std_assess_id
 LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON q.std_assess_id=stds.std_assess_id
 and q.section_code = stds.section_code
 left outer join dbo.as_std_question_group stdqg WITH (NOLOCK)
 on q.std_assess_id = stdqg.std_assess_id
 and q.section_code=stdqg.section_code and q.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
left outer join dbo.as_consistency_rule acr WITH (NOLOCK)
on q.std_assess_id = acr.std_assess_id
and q.question_key = acr.question_key_sbj
left outer join dbo.as_consistency_rule_range acrr WITH (NOLOCK)
on acr.consistency_rule_id = acrr.consistency_rule_id
left outer join dbo.mirror_as_std_pick_list_item pl WITH (NOLOCK)
		on  q.pick_list_id = pl.pick_list_id 
and pl.item_value = acrr.range
where  acrr.range_type = 0
and acr.item_id in (4110, 4102)
and acr.deleted = 'N'
order by  q.std_question_no

if @debug_me='Y' select '#prp_ShowHideDisable_rules', * from #prp_ShowHideDisable_rules


	-------------------------------------------------------------
	-- Inserting records in temp table.
	-------------------------------------------------------------

	set @vStep = 120
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' +  convert(varchar, @vStep)  + ' loading results table '  + convert(varchar(26),getdate(),109)

	set @vRowCount = 0

	if @vis_blank=1
		begin
		---------------------------------------------------------------------------------------------
		--	BLANK REPORT
		---------------------------------------------------------------------------------------------
			INSERT INTO #PRP_Results

			SELECT distinct 
			  @vFacID as fac_id
			, stda.std_assess_id
			, 0 as client_id
			, 0 as assess_id
			, NULL assess_date
			, '' as assessment_type
			, stda.description as UDA
			, stds.title as section_title
			, stds.sequence as section_sequence
			, stdqg.std_question_no
			, stdqg.group_title
			, stdqg.group_text
			, stdqg.layout_style
			, stds.section_code
			, stdq.question_key
			, stdq.sequence
			, stdq.std_question_no
			, stdq.std_subquestion_no
			, stdq.std_subquestion_AB
			, stdq.title
			, stdq.question_text
			, case when stdq.control_type in ( 'diag', 'cs') then 'txt' else stdq.control_type end as control_type
			, stdq.length
			, stdq.required
			, stdq.pick_list_id
			, stdpl.description as picklist_name
			, CASE WHEN stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
												  OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs'*/ ))
				   THEN pick_list_values ELSE stdpli.item_value END AS pick_list_value
			, CASE WHEN stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
												  OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /* or stdq.control_type = 'mcs' */))
				   THEN pick_list_descriptions ELSE stdpli.item_description END AS pick_list_description
			, CASE WHEN stdqg.layout_style = 'C2' AND stdq.control_type = 'ams' 
				   THEN pick_list_sequences ELSE cast(stdpli.sequence as varchar(10)) END AS sequence
			, null as effective_date
			--, stdpli.effective_date
			, stdpli.ineffective_date
			, '' asassess_type_code
			, '' as status
			, '' as resp_item_value
			, case when stdq.control_type = 'pain' then @vConfig_facepain_use_cartoon + @vSeparator
					  when stdq.control_type = 'ams' and stdqg.layout_style <> 'C2' then isnull(cpqk.subkey,'')
					  when stdq.control_type = 'ams' and stdqg.layout_style = 'C2' then isnull(questions_subkeys,'')
					  else ''
			  end as response
			, null as score
			, '' as score_category
			, '' as strikeout_flag
			, '' as strikeout_by
			, Null as strikeout_date
			, '' as strikeout_reason
			, stda.include_signature_section_flag
			, '' as signed_by
			, Null as signed_date
			,  cust_hdr
			,  cust_sub_hdr
			, custom_header_long.cust_hdr_long
			, cust_sub_hdr_long

			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, case when stdq.control_type = 'ams' and stdqg.layout_style <> 'C2' then isnull(cpqk.subkey,'')
					  when stdq.control_type = 'ams' and stdqg.layout_style = 'C2' then isnull(questions_subkeys,'')
			  end as ams_key			
			, NULL as file_metadata_id
			, stdq.visual

			FROM
					dbo.as_std_assessment stda WITH (NOLOCK)
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON 
								stda.std_assess_id = stdq.std_assess_id 
							AND stds.section_code = stdq.section_code
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON 
								stdq.std_assess_id=stdqg.std_assess_id 
							AND stdq.section_code=stdqg.section_code 
							AND stdq.std_question_no=stdqg.std_question_no
							AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_pick_list stdpl WITH (NOLOCK) ON 
								stdq.pick_list_id = stdpl.pick_list_id
								AND stdq.control_type <> 'chk'
			LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
								stdq.pick_list_id = stdpli.pick_list_id 
							AND stdpli.item_description <> 'Blank (skip pattern)'
							AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
--							AND (stdqg.layout_style <> 'C2' AND stdq.control_type <> 'pop' AND stdq.control_type <> 'radh')
							AND NOT (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
								 OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs'*/ )))
			-- hide/show  or parent/child question
			left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.item_id in ( 4102, 4110)
						and cr.deleted = 'N'
			LEFT JOIN #care_profile_question cpqk
						ON stdq.control_type in ('ams' ) 
						AND cpqk.question_text = stdpli.item_description

			--OUTER APPLY (	SELECT subkeys
			--				FROM	(	SELECT '%'+item_value + cpqsk.subkey
			--							FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
			--							JOIN #care_profile_question cpqsk
			--							ON cpqsk.question_text = stdpli.item_description
			--							WHERE stdpl.pick_list_id = stdpli.pick_list_id 
			--							AND stdqg.layout_style = 'C2' 
			--								AND stdq.control_type = 'ams'
			--							ORDER BY stdpli.sequence
			--							FOR XML PATH ('')
			--						) AS questions (subkeys)
			--			) qsk (questions_subkeys)
				OUTER APPLY (	SELECT	STUFF(subkeys, 1, LEN(@vSeparator), '') 
								FROM (SELECT @vSeparator+isnull(cpqsk.subkey,'')+ 
										case 
											when cpqsk.subkey in ('#oxygen') then '%l_per_min%#%#other:%'  
											when cpqsk.subkey  in ('#ao') then '%#auxother:%' 
											when cpqsk.subkey  in ('#do') then '%#devother:%' 
											when cpqsk.subkey  in ('#ro') then '%#riskother:%' 
											when cpqsk.subkey  in ('#mo') then '%#muscother:%' 
											when cpqsk.subkey  in ('#so') then '%#genother:%' 
											when cpqsk.subkey  in ('#bp') then '%#bdpayment:%' 
											when cpqsk.subkey  in ('#co') then '%#specother:%' 
											else ''
										end 	
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										INNER JOIN #care_profile_question cpqsk
										ON cpqsk.question_text = stdpli.item_description
										WHERE stdq.pick_list_id = stdpli.pick_list_id 
											AND stdqg.layout_style = 'C2' 
											AND stdq.control_type = 'ams'
											AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS questions (subkeys)
							) qsk (questions_subkeys)	
			OUTER APPLY (	SELECT	 STUFF([values], 1, LEN(@vSeparator), '')
										--replace(
										--replace(
										--replace(STUFF([values], 1, LEN(@vSeparator), ''), '&amp;', '&')
										--, '&lt;','<')
										--, '&gt;','>')

										--STUFF([values], 1, LEN(@vSeparator), '')

							FROM	(	SELECT @vSeparator + stdpli.item_value
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										WHERE	stdq.pick_list_id = stdpli.pick_list_id 
											AND stdpli.item_description <> 'Blank (skip pattern)'
											AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
--											AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh')
											AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
											 OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs'*/ )))
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS picklist ([values])
						) plv (pick_list_values)
						
			OUTER APPLY (	SELECT		STUFF(descriptions, 1, LEN(@vSeparator), '')
										--replace(
										--replace(
										--replace(STUFF(descriptions, 1, LEN(@vSeparator), ''), '&amp;', '&')
										--	, '&lt;','<')
										--	, '&gt;','>')
							FROM	(	SELECT @vSeparator + stdpli.item_description
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										WHERE	stdq.pick_list_id = stdpli.pick_list_id 
											AND stdpli.item_description <> 'Blank (skip pattern)'
											AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
--											AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh')
											AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
											 OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs'*/ )))
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS picklist (descriptions)
						) pld (pick_list_descriptions)
			OUTER APPLY (	SELECT	 STUFF(seq, 1, LEN(@vSeparator), '')
							FROM	(	SELECT @vSeparator + cast(stdpli.sequence as varchar(10))
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										WHERE	stdq.pick_list_id = stdpli.pick_list_id 
											AND stdpli.item_description <> 'Blank (skip pattern)'
											AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
											AND stdqg.layout_style = 'C2' 
											AND stdq.control_type = 'ams'
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS picklist (seq)
						) pls (pick_list_sequences)
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25

											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score:</b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category:</b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score:</b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category:</b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
				1 = CASE WHEN stdq.control_type <> 'inst' THEN 1 ELSE CASE WHEN stdq.electronic = 'Y' THEN 1 ELSE 0 END END
				--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

				

				AND	stdq.control_type <> 'bdy'
				AND	stdq.control_type <> 'gbdy'
				AND	stdq.control_type <> 'ebdy'
				AND	stdq.control_type <> 'adir'
				AND	stdq.control_type <> 'cnt'
				AND	stdq.control_type <> 'hck'
				AND	stdq.control_type <> 'payer'
				AND stdq.control_type <> 'ident'
				AND stdq.control_type <> 'cp'
				AND stdq.control_type <> 'payer'

			set @vRowCount = @vRowCount + @@rowcount


			if @debug_me='Y' select 'first load' as fl, * from #PRP_Results

		-- add in payer Controls
			INSERT INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date,
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,			-- null for payer controls
			null as item_value,				-- null for payer controls
			null as item_description,		-- null for payer controls
			null as sequence,				-- null for payer controls
			null as effective_date,			-- null for payer controls
			null as ineffective_date,		-- null for payer controls
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			resp.response as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date 
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
				dbo.as_std_assessment stda WITH (NOLOCK)
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
					AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
				left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.item_id in ( 4102, 4110)
						and cr.deleted = 'N'

				OUTER APPLY		(SELECT	   @vSeparator
										 + @vSeparator 
										 + @vSeparator 
										 + @vSeparator 
										 + @vSeparator 
										 + @vSeparator 
										 + @vSeparator		-- 8 columns in the payer control
								 )resp (response)

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long
			WHERE 
					stdq.control_type = 'payer'
					--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

			set @vRowCount = @vRowCount + @@rowcount


		-- add in Body Parts Controls (originally for layout_style = 'V', 'PV', or 'C1', this is now for all bdy and gbdy)
			insert INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date,
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,			-- null for bdy and gbdy controls
			null as item_value,				-- null for bdy and gbdy controls
			null as item_description,		-- null for bdy and gbdy controls
			null as sequence,				-- null for bdy and gbdy controls
			null as effective_date,			-- null for bdy and gbdy controls
			null as ineffective_date,		-- null for bdy and gbdy controls
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			resp.response as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date 
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, resp.num as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
				dbo.as_std_assessment stda WITH (NOLOCK)
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
					AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
				left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.item_id in ( 4102, 4110)
						and cr.deleted = 'N'

				OUTER APPLY		(SELECT CASE stdq.control_type
											 WHEN 'bdy' THEN   @vSeparator
															 + @vSeparator 
															 + @vSeparator 
															 + @vSeparator 
															 + @vSeparator 
															 + @vSeparator 
															 + @vSeparator		-- 8 columns in the grid for bdy
											 WHEN 'gbdy' THEN  @vSeparator		-- 2 columns in the grid for gbdy
											 WHEN 'ebdy' THEN  @vSeparator		-- 2 columns in the grid for gbdy
										END AS response
										, num
								 FROM pcc_num_sequence WHERE num <= stdq.length
								 )resp
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					(	stdq.control_type = 'bdy'
					OR	stdq.control_type = 'gbdy'
					OR	stdq.control_type = 'ebdy'
					)
				--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

--		The next line is commented out because we now want to return multiple rows for these controls in C2's also
--		(in addition to the marker control that will be returned in the single row
--				AND stdqg.layout_style <> 'C2'	

			set @vRowCount = @vRowCount + @@rowcount

		-- add in Body Parts Controls (layout_style = 'C2')
			INSERT INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date,
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,			-- null for bdy and gbdy controls
			null as item_value,				-- null for bdy and gbdy controls
			null as item_description,		-- null for bdy and gbdy controls
			null as sequence,				-- null for bdy and gbdy controls
			null as effective_date,			-- null for bdy and gbdy controls
			null as ineffective_date,		-- null for bdy and gbdy controls
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			allbdy.resp_list as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date 
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
				dbo.as_std_assessment stda WITH (NOLOCK)
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
					AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
				left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.deleted = 'N'
						and cr.item_id in ( 4102, 4110)

				OUTER APPLY	
					(SELECT '' as resp_list) allbdy

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long
-----------------------------------------------------------------------------------------------------------------
--			The following code has been commented out in favour of returning empty string in this instance
--			but the original code has been retained because it is expected to be used at some future time when
--			the real bdy and gbdy controls (as opposed to these marker controls) are converted to returning one
--			row per control.
-----------------------------------------------------------------------------------------------------------------
--						(SELECT stuff(isnull(response_list,''),1, len(@vSeparator2),'') as resp_list
--						 FROM
--							(
--								SELECT	@vSeparator2 +
--										CASE stdq.control_type
--											 WHEN 'bdy' THEN   @vSeparator
--															 + @vSeparator 
--															 + @vSeparator 
--															 + @vSeparator 
--															 + @vSeparator 
--															 + @vSeparator 
--															 + @vSeparator		-- 8 columns in the grid for bdy
--											 WHEN 'gbdy' THEN  @vSeparator		-- 2 columns in the grid for gbdy
--									  END AS response
--									 FROM pcc_num_sequence WHERE num <= stdq.length
--								FOR XML PATH ('')
--							) yyy (response_list)
--						) allbdy
			WHERE 
					(stdq.control_type = 'bdy'
				OR	stdq.control_type = 'gbdy'
				OR	stdq.control_type = 'ebdy')
				AND stdqg.layout_style = 'C2'
				--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

			set @vRowCount = @vRowCount + @@rowcount


		-- add in Advanced Directives
			insert INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date, 
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,			-- null for adir control
			null as item_value,				-- null for adir control
			null as item_description,		-- null for adir control
			null as sequence,				-- null for adir control
			null as effective_date,			-- null for adir control
			null as ineffective_date,		-- null for adir control
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			resp.response as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
				dbo.as_std_assessment stda WITH (NOLOCK)
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
					AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
				left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.deleted = 'N'
						and cr.item_id in ( 4102, 4110)

				OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
								  FROM	(
										 SELECT  @vSeparator + ltrim(rtrim(description + @vSeparator + '0' ))
										 FROM wesreference.dbo.pho_std_advanced_directive adir WITH (NOLOCK)
											  FOR XML PATH ('')
										) ans (response_str)
								 )resp
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					stdq.control_type = 'adir'
				--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

			set @vRowCount = @vRowCount + @@rowcount

	-- Add in Resident Contacts control
			insert INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date, 
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,			-- null for cnt control
			null as item_value,				-- null for cnt control
			null as item_description,		-- null for cnt control
			null as sequence,				-- null for cnt control
			null as effective_date,			-- null for cnt control
			null as ineffective_date,		-- null for cnt control
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			resp.response as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
			dbo.as_std_assessment stda WITH (NOLOCK)
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
			left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.item_id in ( 4102, 4110)
						and cr.deleted = 'N'

			OUTER APPLY		(SELECT @vSeparator + @vSeparator -- allow for missing name and phone numbers
									+ isnull(response_str,'') as response     
                              FROM	(
									 SELECT  @vSeparator + ltrim(rtrim(description + @vSeparator + '0' ))
									 FROM wesreference.dbo.common_code_standard_contact_type c_type WITH (NOLOCK)
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                             )resp
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					stdq.control_type = 'cnt'
				--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

			set @vRowCount = @vRowCount + @@rowcount

	-- Add in hck controls
			insert INTO #PRP_Results
			SELECT 
			@vFacID as fac_id,
			stda.std_assess_id,
			0 as client_id,
			0 as assess_id,
			NULL assess_date, 
			'' as assessment_type, 
			stda.description as UDA,
			stds.title as section_title,
			stds.sequence as section_sequence,
			stdqg.std_question_no,
			stdqg.group_title,
			stdqg.group_text,
			stdqg.layout_style,
			stds.section_code,
			stdq.question_key,
			stdq.sequence,
			stdq.std_question_no,
			stdq.std_subquestion_no,
			stdq.std_subquestion_AB,
			stdq.title,
			stdq.question_text,
			stdq.control_type,
			stdq.length,
			stdq.required,
			stdq.pick_list_id,
			null as picklist_name,
			pick_list.[value] AS pick_list_value,
			null as item_description,
			null as sequence,
			null as effective_date,
			null as ineffective_date,
			'' asassess_type_code,
			'' as status,
			'' as resp_item_value,
			'' as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM
			dbo.as_std_assessment stda WITH (NOLOCK)
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
					AND stds.section_code=stdqg.section_code
					-- hide/show  or parent/child question
				left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.deleted = 'N'
						and cr.item_id in ( 4102, 4110)

				OUTER APPLY		(SELECT stuff(isnull(pick_list_value,''),1, len(@vSeparator),'') as [value]     
								  FROM	(
											SELECT @vSeparator + stdpli.item_value FROM dbo.as_std_pick_list stdpl WITH (NOLOCK)
											LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
														stdq.pick_list_id=stdpli.pick_list_id 
													AND stdpli.item_description<>'Blank (skip pattern)'
													AND (stdpli.ineffective_date is null or stdpli.ineffective_date >= @vReportDate)
											WHERE stdq.pick_list_id=stdpl.pick_list_id
													ORDER BY stdpli.sequence
											FOR XML PATH ('')
										) plv (pick_list_value)
								 ) pick_list
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long


			WHERE 
					stdq.control_type = 'hck'
					--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )


			set @vRowCount = @vRowCount + @@rowcount



	-- Add in ident control
			INSERT INTO #PRP_Results
			SELECT 
				@vFacID as fac_id,
				stda.std_assess_id,
				0 as client_id,
				0 as assess_id,
				NULL assess_date, 
				'' as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for ident control
				NULL AS item_value,			-- null for ident control
				NULL AS item_description,	-- null for ident control
				NULL AS sequence,			-- null for ident control
				NULL AS effective_date,		-- null for ident control
				NULL AS ineffective_date,	-- null for ident control
				'' asassess_type_code,
				'' as status,
				'' as resp_item_value,
				@vSeparator + ISNULL(type_id.format, '') as response,
			null as score,
			'' as score_category,
			'' as strikeout_flag,
			'' as strikeout_by,
			Null as strikeout_date,
			'' as strikeout_reason,
			stda.include_signature_section_flag,
			'' as signed_by,
			Null as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, case when cr.question_key_obj is not NULL and cr.item_id = 4110 and cr.enabled_flag = 'Y' then '1' else '0' END as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM dbo.as_std_assessment stda WITH (NOLOCK)
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id and stda.std_assess_id=@vstd_assess_id
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
				-- hide/show  or parent/child question
			left OUTER JOIN dbo.as_consistency_rule cr WITH (NOLOCK)
						ON stdq.std_assess_id = cr.std_assess_id
						and stdq.question_key = cr.question_key_obj
						and cr.deleted = 'N'
						and cr.item_id in ( 4102, 4110)

			LEFT JOIN dbo.id_type type_id WITH (NOLOCK) ON
								type_id.id_type_id = stdq.pick_list_id
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long


			WHERE 
					stdq.control_type = 'ident'
					--and 1 = (case when  cr.item_id = 4102 and cr.enabled_flag = 'N' then 0 else 1 end )

			set @vRowCount = @vRowCount + @@rowcount

			-- Add blank care plan control
		

			INSERT INTO #PRP_Results
			SELECT fac_id,
				std_assess_id,
				client_id,
				assess_id,
				assess_date, 
				assessment_type, 
				UDA,
				section_title,
				section_sequence,
				grp_std_question_no,
				group_title,
				group_text,
				layout_style,
				section_code,
				question_key,
				sequence,
				std_question_no,
				std_subquestion_no,
				std_subquestion_AB,
				CASE WHEN rnum = 1 /*or /*is_task = 'Y'*/  title = 'Other Tasks:' */ THEN isnull(
																
																	title
																	
																	
																	,'') ELSE '' end as title,
				question_text,
				control_type,
				[length],
				[required],
				pick_list_id,
				picklist_name,		-- null for ident control
				item_value,			-- null for ident control
				item_description,	-- null for ident control
				pick_list_sequence,			-- null for ident control
				effective_date,		-- null for ident control
				ineffective_date,	-- null for ident control
				assess_type_code,
				status,
				resp_item_value,
				response,
				--+isnull(trig_res.standard_description, 'Rolly')  
				score,
				score_category,
				strikeout_flag,
				strikeout_by,
				strikeout_date,
				strikeout_reason,
				include_signature_section_flag,
				signed_by,
				signed_date,
				cust_hdr,
				cust_sub_hdr,
				cust_hdr_long,
				cust_sub_hdr_long,
				rnum,
				unique_question,
				NULL,
				print_s,
				NULL, 
				NULL as file_metadata_id, 
				visual
			 from 
			 
			(SELECT TOP 100 PERCENT 
				@vFacID fac_id,
				stda.std_assess_id,
				'0' client_id,
				'0' assess_id,
				null assess_date, 
				'' as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no as grp_std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				

				case WHEN stdi.is_task = 'Y' and isnull(stdq.question_text,'') <> '' 
						and (ncount.focus_text = 	isnull( @vTermFocus  + interv_parent.text1, @vTermFocus  + goal_parent.text1) 
							or COALESCE( @vTermFocus  + interv_parent.text1, @vTermFocus  + goal_parent.text1,'') = ''
							)then '<b>Other '+  @vTermTasks + '</b>'  
					WHEN ncount.focus_text = 	isnull(@vTermFocus  + interv_parent.text1, @vTermFocus + goal_parent.text1) THEN NULL  -- do not format this line
					--ELSE isnull('Focus: ' + interv_parent.text1, 'Focus: ' + goal_parent.text1) 

					ELSE isnull('<b>'+ @vTermFocus + '</b>' + case when substring(interv_parent.text1,1,1) = ' '  
								then STUFF(replace(replace(interv_parent.text1, char(10),''),char(13),''),1,1, '') 
								else ltrim(rtrim(replace(replace(interv_parent.text1, char(10),''),char(13),''))) end

								, '<b>' + @vTermFocus + '</b>' + case when substring(goal_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(goal_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(goal_parent.text1, char(10),''),char(13),''))) end)
					END  as title /*question title*/,

				
				stdq.question_text,
				

				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for ident control
				coalesce(stdn.std_need_id,stdg.std_need_id,stdi.std_need_id,stdt.std_trigger_id)  AS item_value,
				--case when ncount.std_need_id = stdg.std_need_id 
				--		  or ncount.std_need_id = stdi.std_need_id 
				--		  or ncount.std_need_id = stdn.std_need_id 
				--			then
				--			ncount.std_need_id

				--	else stdt.std_trigger_id end  AS item_value,			-- null for ident control
				 ''   AS item_description,	-- null for ident control
				NULL AS pick_list_sequence,			-- null for ident control
				NULL AS effective_date,		-- null for ident control
				NULL AS ineffective_date,	-- null for ident control
				NULL assess_type_code,
				NULL [status],
				'0'  as resp_item_value,

				 CASE WHEN stdt.trigger_type = 'N' THEN '<b>'+ @vTermFocus + '</b>' + stdn.text1
				 WHEN stdt.trigger_type = 'G' THEN '<b>' + @vTermGoal+'</b>'  + stdg.text1
				 WHEN stdt.trigger_type = 'I' THEN CASE WHEN stdi.is_task = 'Y' THEN '<b>'+ @vTermTask +' </b>' ELSE '<b>' + @vTermIntervention +' </b>' END + stdi.text1
				 ELSE ''
				 END   as response,
				
				null score,
				null as score_category,
				NULL  as strikeout_flag,
				NULL  as strikeout_by,
				null AS strikeout_date,
				NULL  as strikeout_reason,
				stda.include_signature_section_flag,
				null as signed_by,
				NULL  as signed_date
			,  cust_hdr
			,  cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, row_number()  OVER ( partition BY stda.std_assess_id, stdq.question_key 
								, COALESCE( ncount.focus_text, @vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1)
								--,case WHEN ncount.focus_text = 	isnull('Focus: ' + 
								--	interv_parent.text1, 'Focus: ' + goal_parent.text1) 
								--THEN NULL ELSE isnull('Focus: ' + interv_parent.text1, 'Focus: ' + goal_parent.text1) END

						ORDER BY stda.std_assess_id, stdq.question_key, case WHEN stdi.is_task = 'Y' and isnull(stdq.question_text,'') <> '' 
							and (ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) 
								or COALESCE(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1,'') = ''
								)then 'Other ' + @vTermTask 
					WHEN ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) THEN NULL 
					--ELSE isnull('Focus: ' + interv_parent.text1, 'Focus: ' + goal_parent.text1) 

					ELSE isnull('<b>'+@vTermFocus +'</b>' + case when substring(interv_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(interv_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(interv_parent.text1, char(10),''),char(13),''))) end

								, '<b>' + @vTermFocus + '</b>' + case when substring(goal_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(goal_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(goal_parent.text1, char(10),''),char(13),''))) end)end ) rnum
			, row_number()  OVER ( partition BY stda.std_assess_id, stdq.question_key 
								
						ORDER BY stda.std_assess_id, stdq.question_key, case WHEN stdi.is_task = 'Y' and isnull(stdq.question_text,'') <> '' 
							and (ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) 
								or COALESCE(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1,'') = ''
								)then 'Other '+@vTermTask  
					WHEN ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) THEN NULL 

					ELSE isnull('<b>'+ @vTermFocus +'</b>' + case when substring(interv_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(interv_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(interv_parent.text1, char(10),''),char(13),''))) end

								, '<b>'+@vTermFocus  +'</b>' + case when substring(goal_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(goal_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(goal_parent.text1, char(10),''),char(13),''))) end)END ) unique_question
			,stdi.is_Task
			,  '0' print_s
			, stdq.visual
			FROM  dbo.as_std_assessment stda WITH (NOLOCK) 
			 
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id --and  stda.std_assess_id =  @vstd_assess_id
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			left OUTER JOIN as_std_trigger stdt ON stdt.std_assess_id = stda.std_assess_id AND stdt.deleted = 'N'
																	and stdq.question_key = stdt.question_key
			LEFT JOIN cp_std_need stdn ON stdt.trigger_type = 'N' AND stdn.std_need_id = stdt.triggered_item_id
			LEFT JOIN cp_std_goal stdg ON stdt.trigger_type = 'G' AND stdg.std_goal_id = stdt.triggered_item_id
			LEFT JOIN cp_std_intervention stdi ON stdt.trigger_type = 'I' AND stdi.std_intervention_id = stdt.triggered_item_id
			left OUTER JOIN dbo.cp_std_need interv_parent WITH (NOLOCK) ON stdi.std_need_id = interv_parent.std_need_id 
			left OUTER JOIN dbo.cp_std_need goal_parent WITH (NOLOCK) ON stdg.std_need_id = goal_parent.std_need_id 
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id 
					and stdq.section_code=stdqg.section_code 
					and stdq.std_question_no=stdqg.std_question_no
					and stds.section_code=stdqg.section_code						

			outer apply ( SELECT  @vTermFocus + stdn.text1 as focus_text, stdn.std_need_id from dbo.as_std_trigger stt WITH (nolock)
							INNER JOIN dbo.cp_std_need stdna WITH (NOLOCK) ON stt.trigger_type = 'N' 
								
							where stt.std_assess_id = stda.std_assess_id
								AND stdna.std_need_id = stt.triggered_item_id
								AND stdna.std_need_id = stdn.std_need_id
							and stt.question_key = stdq.question_key
							and stt.deleted = 'N'
						) ncount	
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator +  '' + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator +  '' + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											WHERE stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Score: </b> <br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>'+ isnull(stds.description, '') + ' Category: </b> <br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											
											where	stds.std_assess_id = stda.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE stdq.control_type = 'cp'
				and stda.std_assess_id =  @vstd_assess_id
				and stdq.visual <> 'N'
				--and 1 = (case when cr.item_id is null then 1
				--		 when cr.item_id = 4110 and cr.enabled_flag = 'Y' then 1
				--		 when cr.item_id = 4102 and cr.enabled_flag = 'Y' then 1
				--		 else 0
				--		 end )

			) cp_data

			set @vRowCount = @@rowcount

			DELETE from #PRP_Results
			where visual = 'N'
		
			if  @vrowcount > 0
			begin
					
					
					--select  @maxcharlen = max(len(pick_list_value)) from #PRP_Results
					 --order BY len(pick_list_value) desc 

				-- update response to support c2 layout
					update rp
					SET rp.response =	question_tit.response_title	
											
											--replace(
											--replace(
											--question_tit.response_title
											--, '&lt;b&gt;','<b>')
											--, '&lt;/b&gt;', '</b>')

						
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT 
													 re.response + @vseparator
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													order BY re.unique_question

													--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response
													--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) response_title
							)question_tit
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';

					

					update rp
					SET rp.question_title = question_titl.q_title
											--replace(
											--replace(
											--question_titl.q_title
											--, '&lt;b&gt;','<b>')
											--, '&lt;/b&gt;', '</b>')
						
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT   case when re.question_title = '' then ' ' else re.question_title END  + @vseparator
													
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													order BY re.unique_question 

													--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response
													--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) q_title
								)question_titl
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';


					-- update response flag to support c2 layout
					update rp
					SET rp.resp_item_value = question_title.resp_item_value_title
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT 
													
													 re.resp_item_value + @vseparator
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													--order by RE.rnum
													
													order BY re.unique_question

															--re.question_title,  re.response
														

												--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response
												--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) resp_item_value_title
							)question_title
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';



				

				
				DELETE from #PRP_Results
				where control_type = 'CP'
					and group_layout_Style = 'C2'
					and unique_question > 1


			end
	

		end -- end of blank report

	else
		begin
		---------------------------------------------------------------------------------------------
		--	POPULATED REPORT
		---------------------------------------------------------------------------------------------

		set @vStep = 121
		set @vgsStepStartTime=GETDATE()
		if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + '.12 spliting selected answer insert ' + CONVERT(varchar(26), @vgsStepStartTime,109)  


		Create Clustered Index _prp_temp_PRP_as_response__AssessResponseId_idx on #PRP_as_response( assess_response_id) ;
		Create Index _prp_temp_PRP_as_response__AssessIdQuestionKey_idx on #PRP_as_response( assess_id,question_key ) ;

		insert INTO #PRP_as_response( assess_response_id , assess_id , question_key , item_value , revision_date )

		SELECT asr.assess_response_id , asr.assess_id , asr.question_key , b.items as item_value , asr.revision_date 
						FROM dbo.as_response asr WITH (NOLOCK)
						INNER JOIN #PRP_Assess_Filter af 
						ON af.assess_id = asr.assess_id 
						OUTER APPLY (SELECT items from dbo.Split(asr.item_value,',')) b

		insert INTO #PRP_as_response( assess_response_id , assess_id , question_key , item_value , revision_date, pick_list_id)
        SELECT asr.assess_response_id , asr.assess_id , asm.question_key , b.items as item_value ,asr.revision_date, 
			case when asm.control_type = 'ams' then asm.pick_list_id end as pick_list_id
                        FROM dbo.as_response asr WITH (NOLOCK)
                        INNER JOIN #PRP_Assess_Filter af 
                        ON af.assess_id = asr.assess_id 
                        inner join dbo.mirror_as_std_question asm with (nolock)
                                        ON asm.std_assess_id = af.std_assess_id
                                        and asm.question_key = asr.question_key
                        CROSS APPLY (SELECT items from dbo.Split(asr.item_value,'%')) b
                        where asm.control_type in ('ams','ther','spe','iso','comm','ads','dev','mus','gen','risk')

		update asm
		set asm.sub_item_value = ':'+sub.subkey
						FROM #PRP_as_response asm
						inner join 
						(SELECT ar.assess_id, ar.question_key, s.pick_list_id, s.item_value, 
							case when MIN(s.subkey)=MAX(s.subkey) then MIN(s.subkey)
								else MIN(s.subkey)+':'+MAX(s.subkey)
							end as subkey, 
							MIN(s.sub_item_values) as sub_item_values
							FROM #PRP_as_response ar
							inner join 
							(select pli.pick_list_id, pli.item_value, subq.subkey
								,cast (row_number () over (partition by pli.pick_list_id order by pli.sequence, subq.seq) as varchar(10)) as sub_item_values
								from dbo.mirror_as_std_pick_list_item pli with (nolock)
									left join #care_profile_question q
									ON pli.item_description = q.question_text
									left join #care_profile_question subq
									ON (subq.question_key = q.question_key or subq.question_key like q.question_key+'[_]'+'%')
								where pli.pick_list_id in (select ar2.pick_list_id from #PRP_as_response ar2)
								) s
							ON ar.pick_list_id = s.pick_list_id
							and ar.item_value = s.sub_item_values and ar.item_value <> s.item_value
						group by ar.assess_id, ar.question_key, s.pick_list_id, s.item_value
						) sub
						ON asm.pick_list_id = sub.pick_list_id
						and asm.assess_id = sub.assess_id
						and asm.question_key = sub.question_key
						and (asm.item_value = sub.sub_item_values or asm.item_value = sub.item_value)

-- we want to parse item_value in order to get a question response value
-- if item_value format is like '92<space>Date: 8/5/2011 15:30<BR>Scale: Wheelchair' then we find position of <space>Date and cut out what is before it
-- if item_value format is like '92' then we just copy it to firstVal
update asr
set asr.first_val = wv.firstval
	, asr.second_val = wv.secondval

	from 
		(select 
			r.assess_response_id,
			a.assess_id,
			q.question_key,
			item_value as value,
       
			case when control_type = 'bp' 
				then substring (substring (item_value,1,charindex(@spaceDate,item_value,0)),0,charindex('/',item_value,0))
			   
				else
					case when charindex(@spaceDate,item_value,0) <> 0
						then substring (item_value,0,charindex(@spaceDate,item_value,0)) 
						else item_value
				end
			end as firstVal, 

			case when control_type = 'bp' 
				then substring (substring (item_value,0,charindex(@spaceDate,item_value,0)),charindex('/',item_value,0)+1,len(substring (item_value,0,charindex(@spaceDate,item_value,0))) - charindex('/',substring (item_value,0,charindex(@spaceDate,item_value,0)),0))
				else null
			end as secondVal

      
		from dbo.as_assessment a with (nolock)
		join dbo.mirror_as_std_question q with (nolock)
		on a.std_assess_id = q.std_assess_id
		join dbo.as_response r with (nolock)
		on a.assess_id = r.assess_id and r.question_key = q.question_key
		inner join #PRP_Assess_Filter af
		on af.assess_id = r.assess_id) wv
		inner join #PRP_as_response asr 
		on wv.assess_response_id = asr.assess_response_id;




								
		if @debug_me='Y' select 'spliting response item_value', * from #PRP_as_response;
		

		if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + '.12 spliting selected answer end insert ' + CONVERT(varchar(26), getdate(),109)
		 
		if (@vshort_version is null)
		BEGIN

			SELECT top 1 @vshort_version = 
			case when std.default_short_version = 'Y' then 1
			else 0 END
			 from dbo.as_std_assessment std with (NOLOCK)
					INNER join #PRP_Assess_Filter fl
					on std.std_assess_id = fl.std_assess_id

		END


	set @vStep = 121
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' first insert populated data; is short version = '  + convert(varchar(10),@vshort_version)			

			insert INTO #PRP_Results
			SELECT distinct
			  assess.fac_id
			, stda.std_assess_id
			, assess.client_id
			, assess.assess_id
			, assess.assess_date
			, asstype.description as assessment_type
			, stda.description as UDA
			, stds.title as section_title
			, stds.sequence as section_sequence
			, stdqg.std_question_no
			, stdqg.group_title
			, stdqg.group_text
			, stdqg.layout_style
			, stds.section_code
			, stdq.question_key
			, stdq.sequence
			, stdq.std_question_no
			, stdq.std_subquestion_no
			, stdq.std_subquestion_AB
			, stdq.title
			, stdq.question_text
			, case WHEN stdq.control_type in ( 'diag', 'cs') then 'txt' else  stdq.control_type end as control_type
			, stdq.length
			, stdq.required
			, stdq.pick_list_id

			, stdpl.description as picklist_name

			, CASE
				WHEN NOT (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad')  
						OR stdq.control_type in ('mcs','ams')))
					OR (stdqg.layout_style <> 'C2' AND stdq.control_type in ('mcs','ams'))
				THEN stdpli.item_value
						
				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad'))) 
						AND (@vshort_version != 1)
				THEN pick_list_values

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version = 1) 
						AND (stdq.control_type IN ('cmb','rad')) 
						AND (isnull(resp.item_value,'') = '')
				THEN pick_list_values

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version = 1) 
						AND NOT (stdq.control_type IN ( 'mcsh', 'mcs','ams'))
				THEN case when resp.item_value is null or resp.item_value = '' then pick_list_values else  	resp.item_value end	
				--THEN ISNULL(resp.item_value,pick_list_values)
						
				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version = 1) 
						AND (stdq.control_type  IN ( 'mcsh', 'mcs','ams')) 
						AND (isnull(resp.item_value,'') = '')
				THEN pick_list_values

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs'))) 
						AND (@vshort_version = 1) 
						AND	(stdq.control_type IN ( 'mcsh', 'mcs')) 
				THEN replace(isnull(resp.item_value, ''),',','ZYXWVU')	

				WHEN stdqg.layout_style = 'C2' 
						AND (@vshort_version = 1) 
						AND	(stdq.control_type IN ( 'ams'))
						AND isnull(ams_selected_pick_list,'')<>''
				THEN ams_selected_pick_list

				else 	pick_list_values										  
			END pick_list_value

			, CASE 
				WHEN NOT (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams')))
						OR (stdqg.layout_style <> 'C2' AND stdq.control_type in ('mcs','ams'))
				THEN stdpli.item_description
						
				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version != 1)
				THEN pick_list_descriptions

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version = 1) 
						AND (stdq.control_type IN ('cmb','rad')) 
						AND (isnull(plresp.item_description,'') = '')
				THEN pick_list_descriptions

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs','ams'))) 
						AND (@vshort_version = 1) 
						AND NOT (stdq.control_type IN ( 'mcsh', 'mcs','ams'))
				THEN isnull(plresp.item_description, pick_list_descriptions)

				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs'))) 
						AND (@vshort_version = 1) 
						AND (stdq.control_type IN ( 'mcsh', 'mcs')) 
						AND (isnull(mcs_selected_answer_descriptions,'') ='')
				THEN pick_list_descriptions
				
				WHEN (stdqg.layout_style = 'C2' OR stdq.control_type IN ('pop', 'radh', 'mcsh') OR (stdqg.layout_style = 'C1' AND stdq.control_type IN ('cmb', 'rad') 
							OR stdq.control_type in ('mcs'))) 
						AND (@vshort_version = 1) 
						AND (stdq.control_type IN ( 'mcsh', 'mcs')) 
				THEN isnull(mcs_selected_answer_descriptions, '')

				WHEN stdqg.layout_style = 'C2'
						AND @vshort_version = 1 
						AND stdq.control_type IN ('ams') 
						AND isnull(ams_selected_answer_descriptions,'') =''
				THEN pick_list_descriptions
							
				WHEN stdqg.layout_style = 'C2'
						AND @vshort_version = 1 
						AND stdq.control_type IN ('ams') 
				THEN isnull(ams_selected_answer_descriptions, '')							  
			END pick_list_description			
			--, case WHEN @vshort_version = 1 and (stdq.control_type in ( 'mcsh', 'mcs') ) then null else stdpli.sequence end
			, case WHEN  (stdq.control_type in ( 'mcsh') ) then null 
					WHEN stdqg.layout_style = 'C2' AND stdq.control_type = 'ams' AND (isnull(@vshort_version,0) <> 1 OR isnull(ams_selected_sequences,'') = '') THEN pick_list_sequences
					WHEN stdqg.layout_style = 'C2' AND stdq.control_type = 'ams' AND @vshort_version = 1 THEN ams_selected_sequences
			else cast(stdpli.sequence as varchar(10)) end

			, resp.revision_date 
			--, stdpli.effective_date cause duplicate
			, stdpli.ineffective_date
			, assess.assess_type_code
			, assess.status
			, CASE WHEN stdq.control_type IN ( 'mcsh', 'mcs', 'ams') and (resp.item_value = '' or resp.item_value is null) then ' '
					when resp.item_value IS NULL THEN '' ELSE resp.item_value END as resp_item_value

			, CASE WHEN stdq.control_type = 'ad'
						THEN CASE WHEN (select count(1) from dbo.split(resp.item_value, '|')) = 4
								  THEN  convert(varchar(10), convert(datetime,replace(replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':'), ':P', ':00 P'), ':A', ':00 A')), @vdateFormatStyle)

									  + @vSeparator 
									  + substring(convert(varchar(16), convert(datetime,replace(replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':'), ':P', ':00 P'), ':A', ':00 A')), 20), 12, 2)
									  + @vSeparator + 'T'
									  + substring(convert(varchar(16), convert(datetime,replace(replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':'), ':P', ':00 P'), ':A', ':00 A')), 20), 15, 2)

								  WHEN (select count(1) from dbo.split(resp.item_value, '|')) = 3
								  THEN  convert(varchar(10), convert(datetime,replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':') + ':00', '::', ':')), @vdateFormatStyle)

									  + @vSeparator 
									  + substring(convert(varchar(16), convert(datetime,replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':') + ':00', '::', ':')), 20), 12, 2)
									  + @vSeparator + 'T'
									  + substring(convert(varchar(16), convert(datetime,replace(replace(stuff(resp.item_value, charindex('|', resp.item_value), 1, ' '), '|', ':') + ':00', '::', ':')), 20), 15, 2)
								  else ''
							 END
				   WHEN stdq.control_type = 'pain'
						THEN case when resp.item_value IS NULL OR resp.item_value = '' THEN @vConfig_facepain_use_cartoon + @vSeparator ELSE @vConfig_facepain_use_cartoon + @vSeparator + resp.item_value END
				   WHEN stdq.control_type = 'iFlu' or stdq.control_type = 'iPneu' or stdq.control_type = 'iTet' or stdq.control_type = 'iTb'
						THEN case when isdate(resp.item_value) = 1 then isnull(convert(varchar(10), convert(date,resp.item_value), @vdateFormatStyle),'') ELSE resp.item_value END
				   WHEN stdq.control_type = 'chk'
						THEN CASE WHEN resp.item_value IS NULL OR resp.item_value = '' THEN '0' ELSE resp.item_value END
				   WHEN stdq.control_type = 'dte' 
						THEN CASE WHEN resp.item_value IS NULL OR resp.item_value = '' THEN '' ELSE 
										case when isdate(resp.item_value) = 1 then 

												 isnull(convert(varchar(10), convert(date,resp.item_value), @vdateFormatStyle),'')
										else resp.item_value end 
								  END
				
				   WHEN stdq.control_type = 'dttm'
						THEN CASE WHEN resp.item_value IS NULL OR resp.item_value = '' THEN '' ELSE 
									 isnull(convert(varchar(10), convert(date,resp.item_value), @vdateFormatStyle),'')

									+ ' ' + CONVERT(CHAR(5),CONVERT(datetime, resp.item_value),114) 
									END
				   WHEN stdq.control_type IN ( 'mcsh', 'mcs')  THEN  
										case when mcs_selected_answer_descriptions is null or len(mcs_selected_answer_descriptions) < len(@vSeparator)  then ''
											else substring (mcs_selected_answer_descriptions, 1, len(mcs_selected_answer_descriptions) - len(@vSeparator))
										end
				  -- WHEN stdq.control_type IN ( 'ams')  THEN isnull(ams_selected_answer_descriptions, '')
				    WHEN stdq.control_type IN ( 'ams')  THEN  
										case when ams_selected_answer_descriptions is null or len(ams_selected_answer_descriptions) < len(@vSeparator) then ''
											else substring (ams_selected_answer_descriptions, 1, len(ams_selected_answer_descriptions) - len(@vSeparator))
										end

				   WHEN stdq.control_type in ('pulse','we','bp','resp','bs','o2','he','pnl', 'temp')  and charindex('<BR>', resp.item_value) > 0 /*and isnull(resp.item_value,'') <> ''*/ THEN

							 REPLACE(resp.item_value, 
										left(SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), (  CHARINDEX('<BR>', resp.item_value,1) - (CHARINDEX('space>Date:', resp.item_value,1)+11) )), ( len( SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), (  CHARINDEX('<BR>', resp.item_value,1) - (CHARINDEX('space>Date:', resp.item_value,1)+11) ))) - 5) )
							 ,
								  convert(varchar(10), convert(datetime, (left(SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), (  CHARINDEX('<BR>', resp.item_value,1) - (CHARINDEX('space>Date:', resp.item_value,1)+11) )), ( len( SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), (  CHARINDEX('<BR>', resp.item_value,1) - (CHARINDEX('space>Date:', resp.item_value,1)+11) ))) - 5) ))    ),  @vdateFormatStyle) + ' '
								  )

					WHEN stdq.control_type in ('pulse','we','bp','resp','bs','o2','he','pnl', 'temp')  and charindex('<BR>', resp.item_value) = 0 and isnull(resp.item_value,'') <> '' and resp.item_value <> 'null'  THEN
						case when len(resp.item_value) > 17 then
							 REPLACE(resp.item_value, 
										left( SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), 17),  len(SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), 17))- 5) 
							 ,
								  convert(varchar(10),  convert(datetime, (left( SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), 17),  len(SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), 17))- 5) )    ),  @vdateFormatStyle) + ' '
								  )
						end

					WHEN stdq.control_type in ('oa')  and charindex('||', resp.item_value) > 0  THEN

							REPLACE(resp.item_value

									, substring(resp.item_value, charindex('||', resp.item_value ) + 2, 10)
									, convert(varchar(10), convert(date, substring(resp.item_value, charindex('||', resp.item_value ) + 2, 10)) , @vdateFormatStyle)
									)

					WHEN stdq.control_type = 'dob' 
						THEN CASE WHEN resp.item_value IS NULL OR resp.item_value = '' THEN '' ELSE 
										case when isdate(resp.item_value) = 1 then 

												 isnull(convert(varchar(10), convert(date,resp.item_value), @vdateFormatStyle),'')
										else resp.item_value end 
								  END

					--SUBSTRING(resp.item_value,  (CHARINDEX('space>Date:', resp.item_value,1)+11), 17)

				   WHEN stdq.pick_list_id IS NULL	
						THEN CASE WHEN resp.item_value IS NULL OR resp.item_value = '' THEN '' ELSE resp.item_value END
				   ELSE CASE WHEN plresp.item_description IS NULL THEN '' ELSE plresp.item_description END
			  END as response

			
			, score.score
			, score.category as score_category
			, case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag
			, case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by
			, dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date
			, case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason
			, stda.include_signature_section_flag
			, case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
				   when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by
			, assess_sec.completed_date as signed_date
			, custom_header.cust_hdr
			, custom_sub_header.cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, CASE WHEN stdq.control_type = 'ams' and stdqg.layout_style <> 'C2' THEN isnull(cpqk.subkey,'')
					WHEN stdq.control_type = 'ams' and stdqg.layout_style = 'C2' THEN isnull(questions_subkeys,'')
			END ams_key
			, NULL as file_metadata_id
			, stdq.visual
			-- for show hide debugging purpose

			--, pick_list_descriptions
			--, stdq.question_key
			--, cr.question_key_sbj
			--, cr.question_key_obj
			--, cr.item_id
			--, cr.range_orig
			--, cr.range1
			--, cr.range2
			--, cr.control_type
			--, 'asr_split'
			--, asr_split.item_value
			--, asr_split.first_val
			--, asr_split.second_val
			--, asr_split.question_key
			
			FROM

				#PRP_Assess_Filter af
				INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
				INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
				LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
				LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
				INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON 
									stda.std_assess_id = stdq.std_assess_id 
								AND stds.section_code = stdq.section_code

				--left join #PRP_as_response resp

				LEFT JOIN dbo.as_response resp WITH (NOLOCK) 
					ON af.assess_id=resp.assess_id and stdq.question_key=resp.question_key

				LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON 
									stdq.std_assess_id=stdqg.std_assess_id 
								AND stdq.section_code=stdqg.section_code 
								AND stdq.std_question_no=stdqg.std_question_no
								AND stds.section_code=stdqg.section_code
				LEFT JOIN dbo.as_std_pick_list stdpl WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpl.pick_list_id
								AND stdq.control_type <> 'chk'
				LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpli.pick_list_id 

									and (stdq.control_type IN ( 'rad','mcs','cmb','mcsh','ams') OR resp.item_value = stdpli.item_value )

								AND stdpli.item_description <> 'Blank (skip pattern)'
								AND (resp.revision_date IS NULL OR resp.revision_date >= stdpli.effective_date)
								AND (resp.revision_date IS NULL OR resp.revision_date <= stdpli.ineffective_date OR stdpli.ineffective_date IS null)

								AND ((@vshort_version = 1 AND stdqg.layout_style = 'V' AND stdq.control_type in ('mcs','ams')) OR (
									NOT (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' /*or stdq.control_type = 'mcsh'*/
									 OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' )))
									 ))
				LEFT JOIN #care_profile_question cpqk
								ON stdq.control_type in ('ams') 
								AND cpqk.question_text = stdpli.item_description								
				OUTER APPLY (	SELECT	STUFF(subkeys, 1, LEN(@vSeparator), '') 
								FROM (SELECT @vSeparator+isnull(cpqsk.subkey,'')+ isnull(r.sub_item_value,'') + 
										case 
											when cpqsk.subkey in ('#oxygen') and charindex('l_per_min',resp.item_value) = 0 then isnull(resp.item_value,'')+'%l_per_min%#%#other:%'  
											when cpqsk.subkey  in ('#ao') and charindex('#auxother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#auxother:%' 
											when cpqsk.subkey  in ('#do') and charindex('#devother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#devother:%' 
											when cpqsk.subkey  in ('#ro') and charindex('#riskother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#riskother:%' 
											when cpqsk.subkey  in ('#mo') and charindex('#muscother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#muscother:%' 
											when cpqsk.subkey  in ('#so') and charindex('#genother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#genother:%'
											when cpqsk.subkey  in ('#bp') and charindex('#bdpayment',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#bdpayment:%' 
											when cpqsk.subkey  in ('#co') and charindex('#specother',resp.item_value) = 0 then isnull(resp.item_value,'')+'%#specother:%' 											
											when cpqsk.subkey  in ('#oxygen','#ao','#do','#ro','#mo','#so','#co','#bp') then isnull(resp.item_value,'')
											else ''
										end 	
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										INNER JOIN #care_profile_question cpqsk
										ON cpqsk.question_text = stdpli.item_description

										LEFT JOIN #PRP_as_response r
										ON r.pick_list_id = stdpli.pick_list_id 
										AND r.assess_id = af.assess_id
										AND r.question_key = resp.question_key
										AND r.item_value = stdpli.item_value
										WHERE stdq.pick_list_id = stdpli.pick_list_id 
											AND stdqg.layout_style = 'C2' 
											AND stdq.control_type = 'ams'
											AND (
											(r.item_value is not null AND @vshort_version = 1) 
											OR resp.item_value not like '%[0-9]%'--in case no response - print all pick list items for short form									
											OR @vshort_version <> 1)
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS questions (subkeys)
							) qsk (questions_subkeys)	
				OUTER APPLY (	SELECT	 STUFF([values], 1, LEN(@vSeparator), '')
										
								FROM	(	SELECT @vSeparator + stdpli.item_value
											FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
											WHERE	stdq.pick_list_id = stdpli.pick_list_id 
												AND stdpli.item_description <> 'Blank (skip pattern)'
												AND (resp.revision_date IS NULL OR resp.revision_date >= stdpli.effective_date)
												AND (resp.revision_date IS NULL OR resp.revision_date <= stdpli.ineffective_date OR stdpli.ineffective_date IS null)
												AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
												  OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs' or stdq.control_type = 'mcsh'*/)))
											ORDER BY stdpli.sequence
											FOR XML PATH ('')
										) AS picklist ([values])
							) plv (pick_list_values)

				OUTER APPLY (	SELECT STUFF(descriptions, 1, LEN(@vSeparator), '')
										

								FROM	(	SELECT @vSeparator + stdpli.item_description
											FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
											WHERE	stdq.pick_list_id = stdpli.pick_list_id 
												AND stdpli.item_description <> 'Blank (skip pattern)'
												AND (resp.revision_date IS NULL OR resp.revision_date >= stdpli.effective_date)
												AND (resp.revision_date IS NULL OR resp.revision_date <= stdpli.ineffective_date OR stdpli.ineffective_date IS null)
												AND (stdqg.layout_style = 'C2' OR stdq.control_type = 'pop' OR stdq.control_type = 'radh' or stdq.control_type = 'mcsh'
												  OR (stdqg.layout_style = 'C1' AND (stdq.control_type = 'cmb' OR stdq.control_type = 'rad' /*or stdq.control_type = 'mcs' or stdq.control_type = 'mcsh'*/)))
											ORDER BY stdpli.sequence
											FOR XML PATH ('')
										) AS picklist (descriptions)
							) pld (pick_list_descriptions)
			OUTER APPLY (	SELECT	 STUFF(seq, 1, LEN(@vSeparator), '')
							FROM	(	SELECT @vSeparator + cast(stdpli.sequence as varchar(10))
										FROM	dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK)
										WHERE	stdq.pick_list_id = stdpli.pick_list_id 
											AND stdpli.item_description <> 'Blank (skip pattern)'
											AND stdqg.layout_style = 'C2' 
											AND stdq.control_type = 'ams'
										ORDER BY stdpli.sequence
										FOR XML PATH ('')
									) AS picklist (seq)
						) pls (pick_list_sequences)
				OUTER APPLY (	SELECT	descriptions
				
								FROM	( SELECT   pli.item_description  + @vSeparator
											FROM (SELECT  b.items as item_value , asr.question_key , asr.assess_id 
														FROM dbo.as_response asr WITH (NOLOCK)
														CROSS APPLY (SELECT items from dbo.Split(asr.item_value,',')) b
													WHERE asr.assess_id = af.assess_id
													and (stdq.control_type = 'mcs' or stdq.control_type = 'mcsh')
													and resp.question_key = asr.question_key 

													) sel_ans 
											INNER JOIN dbo.mirror_as_std_pick_list_item pli WITH (NOLOCK)
													ON stdq.pick_list_id = pli.pick_list_id 
													and sel_ans.item_value = pli.item_value 
												order by pli.sequence

											FOR XML PATH ('')
										) AS selected_answer (descriptions)
							) mcs_ans (mcs_selected_answer_descriptions)

				OUTER APPLY (	SELECT	descriptions -- STUFF(descriptions, 1, LEN(@vSeparator), '')
								FROM	( SELECT   pli.item_description  + @vSeparator
											FROM (SELECT  asr.item_value , asr.question_key , asr.assess_id 
														FROM #PRP_as_response asr WITH (NOLOCK)
													WHERE asr.assess_id = af.assess_id
													and stdq.control_type = 'ams'
													and asr.question_key  = resp.question_key
													) sel_ans 
											INNER JOIN dbo.mirror_as_std_pick_list_item pli WITH (NOLOCK)
													ON stdq.pick_list_id = pli.pick_list_id 
													and sel_ans.item_value = pli.item_value 
												order by pli.sequence

											FOR XML PATH ('')
										) AS selected_answer (descriptions)
							) ams_ans (ams_selected_answer_descriptions)
				OUTER APPLY (	SELECT	 STUFF(seq, 1, LEN(@vSeparator), '')
								FROM	( SELECT @vSeparator + cast(pli.sequence as varchar(10))
											FROM (SELECT  asr.item_value, asr.question_key , asr.assess_id 
														FROM #PRP_as_response asr WITH (NOLOCK)
													WHERE asr.assess_id = af.assess_id
													and stdq.control_type = 'ams'
													and stdqg.layout_style = 'C2' 
													and @vshort_version = 1
													and resp.question_key = asr.question_key 

													) sel_ans 
											INNER JOIN dbo.mirror_as_std_pick_list_item pli WITH (NOLOCK)
													ON stdq.pick_list_id = pli.pick_list_id 
													and sel_ans.item_value = pli.item_value 
												order by pli.sequence

											FOR XML PATH ('')
										) AS selected_answer (seq)
							) ams_seq (ams_selected_sequences)
				OUTER APPLY (	SELECT	 STUFF(pl, 1, LEN(@vSeparator), '')
								FROM	( SELECT @vSeparator + pli.item_value
											FROM (SELECT  asr.item_value, asr.question_key , asr.assess_id 
														FROM #PRP_as_response asr WITH (NOLOCK)
													WHERE asr.assess_id = af.assess_id
													and stdq.control_type = 'ams'
													and stdqg.layout_style = 'C2' 
														AND (@vshort_version = 1) 
													and resp.question_key = asr.question_key 

													) sel_ans 
											INNER JOIN dbo.mirror_as_std_pick_list_item pli WITH (NOLOCK)
													ON stdq.pick_list_id = pli.pick_list_id 
													and sel_ans.item_value = pli.item_value 
												order by pli.sequence

											FOR XML PATH ('')
										) AS selected_answer (pl)
							) ams_pick_list (ams_selected_pick_list)
				LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON 
									assess.std_assess_id = asstype.std_assess_id 
								AND assess.assess_type_code = asstype.assess_type_code 
				LEFT JOIN dbo.mirror_as_std_pick_list_item plresp WITH (NOLOCK) ON 
									stdq.pick_list_id = plresp.pick_list_id 
								AND resp.item_value = plresp.item_value
								AND (resp.revision_date IS NULL OR resp.revision_date >= plresp.effective_date)
								AND (resp.revision_date IS NULL OR resp.revision_date <= plresp.ineffective_date OR plresp.ineffective_date IS null)

				LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
									stda.std_assess_id = stdscore.std_assess_id
								AND stdscore.is_default = 'Y'
								AND stdscore.deleted = 'N'

				LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
							score.assess_id = assess.assess_id
								AND score.std_score_id = stdscore.std_score_id

				-- hide/show  or parent/child question
				left outer join #prp_ShowHideDisable_rules cr
					on stdq.question_key = cr.question_key_obj

					left OUTER JOIN #PRP_as_response asr_split
						ON af.assess_id = asr_split.assess_id 
						and asr_split.question_key = cr.question_key_sbj


				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr 
							) custom_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
												 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) < 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr
							) custom_sub_header

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 

				(
					(
						@vshort_version = 1
						AND stdpl.pick_list_id is not NULL
						AND stdqg.layout_style in ('V','C1')												
						AND stdq.control_type in ('mcs') 
						AND mcs_ans.mcs_selected_answer_descriptions is not null
						AND charindex(stdpli.item_description+@vSeparator,mcs_ans.mcs_selected_answer_descriptions COLLATE Latin1_General_CS_AS) > 0
					)
					OR
					(
						@vshort_version = 1
						AND stdpl.pick_list_id is not NULL
						AND stdqg.layout_style in ('V','C1')												
						AND stdq.control_type in ('ams') 
						AND ams_ans.ams_selected_answer_descriptions is not null
						AND charindex(stdpli.item_description +@vSeparator ,ams_ans.ams_selected_answer_descriptions COLLATE Latin1_General_CS_AS) > 0
					)
					OR
					(
						@vshort_version = 1
						
						AND stdq.control_type  in ('rad','cmb')
						AND ((stdqg.layout_style = 'V' and (ltrim(resp.item_value) = stdpli.item_value or (stdpl.pick_list_id is not NULL  and (resp.item_value = '' or resp.item_value is null  ) ))) or 
							 (stdqg.layout_style = ( 'C1') or (resp.item_value = '' or resp.item_value is null  ) and stdpl.pick_list_id is not NULL )
							)
					)
					OR
					(
						@vshort_version = 1
						AND stdpl.pick_list_id is not NULL
						AND stdq.control_type in ('mcs', 'mcsh') 
						AND mcs_ans.mcs_selected_answer_descriptions is null
					)
					OR
					(
						@vshort_version = 1
						AND stdpl.pick_list_id is not NULL
						AND stdq.control_type in ('ams') 
						AND ams_ans.ams_selected_answer_descriptions is null
					)					

					OR (stdqg.layout_style not in ('V','C1') OR stdq.control_type not in ('mcs','rad','cmb','ams')) 							
					OR @vshort_version = 0 
					OR @vshort_version is null						
				)

				
				and
				-- show hide and disabled question
				-- if one of the cases is true and returns 0 then question will be hidden 
				-- if all cases are false and we have 1 as a result then question will be showed 

				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)
					

					AND 1 = CASE WHEN stdq.control_type <> 'inst' THEN 1 ELSE CASE WHEN stdq.electronic = 'Y' THEN 1 ELSE 0 END END
					AND stdq.control_type <> 'bdy'
					AND stdq.control_type <> 'gbdy'
					AND	stdq.control_type <> 'ebdy'			
					AND stdq.control_type <> 'to'			
					AND stdq.control_type <> 'adir'			
					AND stdq.control_type <> 'cnt'			
					AND stdq.control_type <> 'hck'
					AND stdq.control_type <> 'ident'
					AND stdq.control_type <> 'cp'
					AND stdq.control_type <> 'payer'
		
			set @vRowCount = @@rowcount

			if @debug_me='Y' 		SELECT '#PRP_Results before upd',  * from #PRP_Results


		-- do an update to handle ams
			update r
			SET r.ams_key =  case 
					when r.ams_key in ('#oxygen') and charindex('l_per_min',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%l_per_min%#%#other:%'  
					when r.ams_key in ('#ao') and charindex('#auxother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#auxother:%' 
					when r.ams_key in ('#do') and charindex('#devother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#devother:%' 
					when r.ams_key in ('#ro') and charindex('#riskother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#riskother:%' 
					when r.ams_key in ('#mo') and charindex('#muscother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#muscother:%' 
					when r.ams_key in ('#so') and charindex('#genother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#genother:%'
					when r.ams_key in ('#bp') and charindex('#bdpayment',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#bdpayment:%' 	
					when r.ams_key in ('#co') and charindex('#specother',r.resp_item_value) = 0 then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')+'%#specother:%' 					
					when r.ams_key in ('#oxygen','#ao','#do','#ro','#mo','#so','#co','#bp') then r.ams_key + isnull(asr.sub_item_value,'') +isnull(r.resp_item_value,'')
					else r.ams_key + isnull(asr.sub_item_value,'') end 				
			from #PRP_Results r left join #PRP_as_response asr
			ON r.assess_id = asr.assess_id
			and r.question_key = asr.question_key
			and r.pick_list_value = asr.item_value
			and r.group_layout_style in ('C1','V')
			and r.control_type in  ('ams')

		-- do an update to handle mcs
			update r
			SET r.resp_item_value = 0
			from #PRP_Results r inner join #PRP_as_response asr
			ON r.assess_id = asr.assess_id
			and r.question_key = asr.question_key
			and r.group_layout_style = 'V'
			and r.control_type in  ('mcs','ams')

			update r
			SET r.resp_item_value = 1
			from #PRP_Results r inner join #PRP_as_response asr
			ON r.assess_id = asr.assess_id
			and r.question_key = asr.question_key
			and r.pick_list_value = asr.item_value
			and r.group_layout_style = 'V'
			and r.control_type in  ('mcs','ams')


		if @debug_me='Y' 		SELECT @vStep as step,  * from #PRP_Results

		set @vStep = 122
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' payer control insert' 

	-- Add in payer controls
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for payer control
				NULL AS item_value,			-- null for payer control
				NULL AS item_description,	-- null for payer control
				NULL AS sequence,			-- null for payer control
				NULL AS effective_date,		-- null for payer control
				NULL AS ineffective_date,	-- null for payer control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for payer control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	
                                    (SELECT  @vSeparator + ltrim(rtrim(item_value))
                                          FROM dbo.as_response resp WITH (NOLOCK)
                                          WHERE		assess.assess_id = resp.assess_id 
												and resp.question_key LIKE '%' + stdq.question_key
												and resp.question_key <> stdq.question_key
                                          ORDER BY CASE LEFT(question_key, CHARINDEX(stdq.question_key, question_key) - 1)
														WHEN 'cn'     THEN 1
														WHEN 'pn'     THEN 2
														WHEN 'pno'    THEN 3
														WHEN 'ca1'    THEN 4
														WHEN 'ca2'    THEN 5
														WHEN 'plno'   THEN 6
														WHEN 'grpno'  THEN 7
														WHEN 's'      THEN 8
													END
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                              )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
			-- hide/show  or parent/child question
			left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj


			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE stdq.control_type = 'payer'
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)
					
					

			set @vRowCount = @vRowCount + @@rowcount


		set @vStep = 123
		set @vgsStepStartTime=GETDATE()
		if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' body parts insert' 
		if @debug_me='Y' SELECT * from #PRP_Results

	-- Add in Body Part controls (originally for layout_style = 'V', 'PV', or 'C1', this is now for all bdy and gbdy)
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for bdy/gbdy control
				NULL AS item_value,			-- null for bdy/gbdy control
				NULL AS item_description,	-- null for bdy/gbdy control
				NULL AS sequence,			-- null for bdy/gbdy control
				NULL AS effective_date,		-- null for bdy/gbdy control
				NULL AS ineffective_date,	-- null for bdy/gbdy control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for bdy/gbdy control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, rownumber.value as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			--,substring(resp.response,1,6)
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			left OUTER JOIN dbo.as_response rs WITH (NOLOCK) ON rs.assess_id = af.assess_id
																and rs.question_key = stdq.question_key 

			OUTER APPLY		(SELECT num - 1 FROM pcc_num_sequence WHERE num <= stdq.length) rownumber ([value])

			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	
                                    (SELECT  @vSeparator + ltrim(rtrim(
												CASE CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1	-- case of column (a,b,c,etc.) in grid
														  THEN left(question_key, 1)
														  ELSE left(question_key, 2)
													  END
												WHEN 'a' THEN CASE WHEN bdy_site.description is null then resp.item_value else bdy_site.description end
												WHEN 'b' THEN CASE WHEN bdy_type.description is null then resp.item_value else bdy_type.description end
												WHEN 'f' THEN CASE WHEN bdy_stage.description is null then resp.item_value else bdy_stage.description end
												WHEN 'aa' then resp.item_value
												WHEN 'bb' then resp.item_value
												ELSE resp.item_value 
												END
																)	)
                                          FROM dbo.as_response resp WITH (NOLOCK)
										LEFT JOIN @prp_body_site bdy_site ON convert(varchar, bdy_site.body_site_id) = resp.item_value
										LEFT JOIN @prp_body_type bdy_type ON convert(varchar, bdy_type.body_type_id) = resp.item_value
										LEFT JOIN @prp_body_stage bdy_stage ON convert(varchar, bdy_stage.body_stage_id) =  resp.item_value 
                                          WHERE		assess.assess_id = resp.assess_id 
												and resp.question_key LIKE '%' + stdq.question_key
												and resp.question_key <> stdq.question_key
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and( stdq.control_type = 'bdy' and  (bdy_site.description IS NOT NULL  or resp.item_value is NOT NULL))  OR stdq.control_type = 'gbdy'))
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and ( stdq.control_type = 'bdy' and (bdy_type.description IS NOT NULL or resp.item_value is NOT NULL))  OR stdq.control_type = 'gbdy'))
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and ( stdq.control_type = 'bdy' and (bdy_stage.description IS NOT NULL or resp.item_value is NOT NULL))  or stdq.control_type = 'gbdy'))

												AND  rownumber.[value] =  CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
																			   THEN case when isnumeric(substring(question_key, 2, charindex('_', question_key) - 2))= 1 then substring(question_key, 2, charindex('_', question_key) - 2) else 0 end
																			   ELSE case when isnumeric(substring(question_key, 3, charindex('_', question_key) - 3))= 1 then substring(question_key, 3, charindex('_', question_key) - 3) else 0 end
																		  END
	
                                          ORDER BY convert(int, CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
																			   THEN case when isnumeric(substring(question_key, 2, charindex('_', question_key) - 2))= 1 then substring(question_key, 2, charindex('_', question_key) - 2) else 0 end
																			   ELSE case when isnumeric(substring(question_key, 3, charindex('_', question_key) - 3))= 1 then substring(question_key, 3, charindex('_', question_key) - 3) else 0 end
																		  END )
												 , CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
													    THEN ' ' + left(question_key, 1)
													    ELSE left(question_key, 2)
												   END
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                              )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
		
			-- hide/show  or parent/child question
			left outer join #prp_ShowHideDisable_rules cr
				on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					(	stdq.control_type = 'bdy' 
					OR	stdq.control_type = 'gbdy')
					and ((@vshort_version IS NULL OR @vshort_version = 0) 
							OR @vshort_version = 1 and (resp.response IS NOT null and substring(resp.response,1,6) <> @vSeparator))
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

		set @vStep = 123
		set @vgsStepStartTime=GETDATE()
		if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' ebdy parts insert new body diagram for UK' 
		if @debug_me='Y' SELECT * from #PRP_Results

	-- Add in Body Part controls (originally for layout_style = 'V', 'PV', or 'C1', this is now for all bdy and gbdy)
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for bdy/gbdy control
				NULL AS item_value,			-- null for bdy/gbdy control
				NULL AS item_description,	-- null for bdy/gbdy control
				NULL AS sequence,			-- null for bdy/gbdy control
				NULL AS effective_date,		-- null for bdy/gbdy control
				NULL AS ineffective_date,	-- null for bdy/gbdy control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for bdy/gbdy control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, rownumber.value as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			--,substring(resp.response,1,6)
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			left OUTER JOIN dbo.as_response rs WITH (NOLOCK) ON rs.assess_id = af.assess_id
																and rs.question_key = stdq.question_key 

			OUTER APPLY		(SELECT num - 1 FROM pcc_num_sequence WHERE num <= stdq.length) rownumber ([value])

			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	
                                    (SELECT  @vSeparator + ltrim(rtrim(
												CASE CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1	-- case of column (a,b,c,etc.) in grid
														  THEN left(question_key, 1)
														  ELSE left(question_key, 2)
													  END
												WHEN 'a' THEN CASE WHEN bdy_site.description is null then resp.item_value else bdy_site.description end
												WHEN 'b' THEN CASE WHEN bdy_type.description is null then resp.item_value else bdy_type.description end
												WHEN 'f' THEN CASE WHEN bdy_stage.description is null then resp.item_value else bdy_stage.description end
												WHEN 'aa' then resp.item_value
												WHEN 'bb' then resp.item_value
												ELSE resp.item_value 
												END
																)	)
                                          FROM dbo.as_response resp WITH (NOLOCK)
										LEFT JOIN @prp_body_site bdy_site ON convert(varchar, bdy_site.body_site_id) = resp.item_value
										LEFT JOIN @prp_body_type bdy_type ON convert(varchar, bdy_type.body_type_id) = resp.item_value
										LEFT JOIN @prp_body_stage_egbdy bdy_stage ON convert(varchar, bdy_stage.body_stage_id) =  resp.item_value 
                                          WHERE		assess.assess_id = resp.assess_id 
												and resp.question_key LIKE '%' + stdq.question_key
												and resp.question_key <> stdq.question_key
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and( stdq.control_type = 'ebdy' and  (bdy_site.description IS NOT NULL  or resp.item_value is NOT NULL))  ))
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and ( stdq.control_type = 'ebdy' and (bdy_type.description IS NOT NULL or resp.item_value is NOT NULL))  ))
												and ((@vshort_version IS NULL or @vshort_version = 0) 
														OR (@vshort_version = 1 and ( stdq.control_type = 'ebdy' and (bdy_stage.description IS NOT NULL or resp.item_value is NOT NULL))  ))

												AND  rownumber.[value] =  CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
																			   THEN case when isnumeric(substring(question_key, 2, charindex('_', question_key) - 2))= 1 then substring(question_key, 2, charindex('_', question_key) - 2) else 0 end
																			   ELSE case when isnumeric(substring(question_key, 3, charindex('_', question_key) - 3))= 1 then substring(question_key, 3, charindex('_', question_key) - 3) else 0 end
																		  END
	
                                          ORDER BY convert(int, CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
																			   THEN case when isnumeric(substring(question_key, 2, charindex('_', question_key) - 2))= 1 then substring(question_key, 2, charindex('_', question_key) - 2) else 0 end
																			   ELSE case when isnumeric(substring(question_key, 3, charindex('_', question_key) - 3))= 1 then substring(question_key, 3, charindex('_', question_key) - 3) else 0 end
																		  END )
												 , CASE WHEN isnumeric(substring(question_key, 2, 1)) = 1
													    THEN ' ' + left(question_key, 1)
													    ELSE left(question_key, 2)
												   END
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                              )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
		
			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					(	stdq.control_type = 'ebdy' 
					)
					and ((@vshort_version IS NULL OR @vshort_version = 0) 
							OR @vshort_version = 1 and (resp.response IS NOT null and substring(resp.response,1,6) <> @vSeparator))
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

			set @vRowCount = @vRowCount + @@rowcount
			set @vStep = 125
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' tansfer discharge insert' 

	-- Add in Transfer/Discharge Details controls
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for to control
				NULL AS item_value,			-- null for to control
				NULL AS item_description,	-- null for to control
				NULL AS sequence,			-- null for to control
				NULL AS effective_date,		-- null for to control
				NULL AS ineffective_date,	-- null for to control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for bdy/gbdy control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	
                                    (SELECT  @vSeparator + ltrim(rtrim(
												CASE replace(resp.question_key, stdq.question_key + '_', '')
													-- sent to
													WHEN '1' THEN CASE WHEN isnumeric(resp.item_value) = 1 THEN CASE WHEN convert(int, resp.item_value) > 0 THEN sent_to_int.item_description ELSE sent_to_ext.name END ELSE '' END
													-- unit
													WHEN '4' THEN CASE WHEN unit.unit_desc IS NULL THEN '' ELSE unit.unit_desc END
													-- reason
													WHEN '5' THEN CASE WHEN trf_reason.description IS NULL THEN '' ELSE trf_reason.description END
													-- hour
													WHEN '7' THEN CASE WHEN isnull(resp.item_value ,'') = '' THEN '' ELSE right('00' + resp.item_value, 2) END
													-- minute
													WHEN '8' THEN CASE WHEN isnull(resp.item_value ,'') = '' THEN '' ELSE right('00' + resp.item_value, 2) END
													-- date
													WHEN '2' THEN CASE WHEN isnull(resp.item_value ,'') = '' THEN '' ELSE convert(varchar(10),convert(date,resp.item_value), @vdateFormatStyle)  END

													-- all others ( 3=sent from, 6=sent type) get passed through without modification
													ELSE CASE WHEN resp.item_value IS NULL THEN '' ELSE resp.item_value END
												END
																)	)
                                          FROM dbo.as_response resp WITH (NOLOCK)
											LEFT JOIN dbo.common_code sent_to_int WITH (NOLOCK) ON replace(resp.question_key, stdq.question_key + '_', '') = '1' AND convert(varchar, sent_to_int.item_id) = resp.item_value
											LEFT JOIN dbo.emc_ext_facilities sent_to_ext WITH (NOLOCK) ON replace(resp.question_key, stdq.question_key + '_', '') = '1' AND convert(varchar, 0 - sent_to_ext.ext_fac_id) = resp.item_value
											LEFT JOIN dbo.unit WITH (NOLOCK) ON convert(varchar, unit.unit_id) = resp.item_value
											LEFT JOIN WESREFERENCE.dbo.admin_reason_for_transfer trf_reason WITH (NOLOCK) ON convert(varchar, trf_reason.reason_id) = resp.item_value
                                          WHERE		assess.assess_id = resp.assess_id 
												AND resp.question_key LIKE stdq.question_key + '%'
												and resp.question_key <> stdq.question_key
                                          ORDER BY replace(resp.question_key, stdq.question_key + '_', '')
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                              )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					stdq.control_type = 'to'
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

			set @vRowCount = @vRowCount + @@rowcount

		set @vStep = 126
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' advance directives insert' 

	-- Add in Advance Directive control
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for adir control
				NULL AS item_value,			-- null for adir control
				NULL AS item_description,	-- null for adir control
				NULL AS sequence,			-- null for adir control
				NULL AS effective_date,		-- null for adir control
				NULL AS ineffective_date,	-- null for adir control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for bdy/gbdy control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	(
									 SELECT  @vSeparator + ltrim(rtrim(description + @vSeparator + CASE WHEN items IS NULL THEN '0' ELSE '1' END ))
									 FROM wesreference.dbo.pho_std_advanced_directive adir WITH (NOLOCK)
									 LEFT JOIN dbo.split((SELECT item_value FROM dbo.as_response resp2 WITH (NOLOCK) 
														  WHERE resp2.assess_id = af.assess_id
															AND resp2.question_key = stdq.question_key), '~') picked
										  ON convert(varchar, adir.std_advanced_directive_id) = picked.items
                                          FOR XML PATH ('')
                                    ) ans (response_str)
                             )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					stdq.control_type = 'adir'
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

			set @vRowCount = @vRowCount + @@rowcount

		set @vStep = 130
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' resident contact insert' 

	-- Add in Resident Contacts control
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for cnt control
				NULL AS item_value,			-- null for cnt control
				NULL AS item_description,	-- null for cnt control
				NULL AS sequence,			-- null for cnt control
				NULL AS effective_date,		-- null for cnt control
				NULL AS ineffective_date,	-- null for cnt control
				assess.assess_type_code,
				assess.status,
				NULL as resp_item_value,	-- null for bdy/gbdy control
				resp.response as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			OUTER APPLY		(SELECT stuff(isnull(response_str,''),1, len(@vSeparator),'') as response     
                              FROM	(
										SELECT ( 
												SELECT @vSeparator + item_value FROM as_response resp WITH (NOLOCK)
												WHERE resp.question_key LIKE stdq.question_key + '_[^ct_]%'
												  AND resp.assess_id = af.assess_id
												FOR XML PATH ('')
												) + (
												SELECT  @vSeparator + ltrim(rtrim(c_type.description + @vSeparator + CASE WHEN ISNULL(resp.item_value, '') = '' THEN '0' ELSE '1' END ))
												FROM wesreference.dbo.common_code_standard_contact_type c_type WITH (NOLOCK)
												LEFT JOIN as_response resp WITH (NOLOCK) ON convert(varchar, c_type.item_id) = replace(resp.question_key, stdq.question_key + '_ct_', '')
												WHERE resp.assess_id = af.assess_id 
												AND   resp.question_key LIKE stdq.question_key + '_ct_%'
												ORDER BY c_type.item_id
												FOR XML PATH ('')
												)
                                    ) ans (response_str)
                             )resp

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE 
					stdq.control_type = 'cnt'
				
			and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

			set @vRowCount = @vRowCount + @@rowcount


		set @vStep = 135
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' hck insert' 

	-- Add in hck control
			INSERT INTO #PRP_Results
			SELECT 
				  assess.fac_id
				, stda.std_assess_id
				, assess.client_id
				, assess.assess_id
				, assess.assess_date
				, asstype.description as assessment_type
				, stda.description as UDA
				, stds.title as section_title
				, stds.sequence as section_sequence
				, stdqg.std_question_no
				, stdqg.group_title
				, stdqg.group_text
				, stdqg.layout_style
				, stds.section_code
				, stdq.question_key
				, stdq.sequence
				, stdq.std_question_no
				, stdq.std_subquestion_no
				, stdq.std_subquestion_AB
				, stdq.title
				, stdq.question_text
				, stdq.control_type
				, stdq.length
				, stdq.required
				, stdq.pick_list_id
				, NULL as picklist_name
				, pick_list.[value] AS pick_list_value
				, NULL AS item_description
				, NULL AS sequence
				, NULL AS effective_date
				, NULL AS ineffective_date
				, assess.assess_type_code
				, assess.status
				, CASE WHEN resp.item_value IS NULL THEN '' ELSE resp.item_value END AS resp_item_value
				, CASE WHEN resp.item_value IS NULL THEN '' ELSE resp.item_value END AS response
				, score.score
				, score.category as score_category
				, case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag
				, case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by
				, dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date
				, case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason
				, stda.include_signature_section_flag
				, case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by
				, assess_sec.completed_date as signed_date
				, cust_hdr
				, cust_sub_hdr
				, cust_hdr_long
				, cust_sub_hdr_long
				, NULL as rnum
				, NULL as unique_question
				, NULL as was_merge
				, '0' as print_s
				, NULL as ams_key
				, NULL as file_metadata_id
				, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			LEFT JOIN dbo.as_std_pick_list stdpl WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpl.pick_list_id
								
			LEFT JOIN dbo.as_response resp WITH (NOLOCK) ON assess.assess_id=resp.assess_id and stdq.question_key=resp.question_key

			LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpli.pick_list_id 
									and resp.item_value = stdpli.item_value 
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) 
				ON stdq.std_assess_id=stdqg.std_assess_id 
				and stdq.section_code=stdqg.section_code 
				and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			OUTER APPLY		(SELECT stuff(isnull(pick_list_value,''), 1, len(@vSeparator), '') as [value]     
                              FROM	(
										SELECT @vSeparator + stdpli.item_value FROM dbo.as_std_pick_list stdpl WITH (NOLOCK)
										LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
													stdpl.pick_list_id=stdpli.pick_list_id 
												AND stdpli.item_description<>'Blank (skip pattern)'
												AND (resp.revision_date is null or resp.revision_date>=stdpli.effective_date )
												AND (resp.revision_date is null or resp.revision_date<=stdpli.ineffective_date OR stdpli.ineffective_date IS null)
										WHERE stdq.pick_list_id=stdpl.pick_list_id
											ORDER BY stdpli.sequence
										FOR XML PATH ('')
                                    ) plv (pick_list_value)
                             ) pick_list
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id

			LEFT JOIN dbo.mirror_as_std_pick_list_item plresp WITH (NOLOCK) ON 
									stdq.pick_list_id = plresp.pick_list_id 
								AND resp.item_value = plresp.item_value

			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE stdq.control_type = 'hck'
					and ((@vshort_version = 1 and ((stdpl.pick_list_id is not NULL and stdpli.item_description= plresp.item_description)
					or isnull(resp.item_value,'') = '') OR stdpl.pick_list_id IS NULL )
					or @vshort_version = 0 OR @vshort_version is NULL)  
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)

			set @vRowCount = @vRowCount + @@rowcount

		set @vStep = 140
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' ident insert' 

	-- Add in ident control
			INSERT INTO #PRP_Results
			SELECT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,
				stdq.title,
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,		-- null for ident control
				NULL AS item_value,			-- null for ident control
				NULL AS item_description,	-- null for ident control
				NULL AS sequence,			-- null for ident control
				NULL AS effective_date,		-- null for ident control
				NULL AS ineffective_date,	-- null for ident control
				assess.assess_type_code,
				assess.status,
				ISNULL(resp.item_value, '') as resp_item_value,
				ISNULL(resp.item_value, '') + @vSeparator + ISNULL(type_id.format, '') as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			, NULL as rnum
			, NULL as unique_question
			, NULL as was_merge
			, '0' as print_s
			, NULL as ams_key
			, NULL as file_metadata_id
			, stdq.visual
			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			LEFT JOIN dbo.as_std_pick_list stdpl WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpl.pick_list_id
								
			LEFT JOIN dbo.as_response resp WITH (NOLOCK) ON 
								assess.assess_id = resp.assess_id 
							AND stdq.question_key = resp.question_key

			LEFT JOIN dbo.mirror_as_std_pick_list_item stdpli WITH (NOLOCK) ON 
									stdq.pick_list_id = stdpli.pick_list_id 
									and resp.item_value = stdpli.item_value 

			LEFT JOIN dbo.id_type type_id WITH (NOLOCK) ON
								type_id.id_type_id = stdq.pick_list_id
			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id and stdq.section_code=stdqg.section_code and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id

			LEFT JOIN dbo.mirror_as_std_pick_list_item plresp WITH (NOLOCK) ON 
									stdq.pick_list_id = plresp.pick_list_id 
								AND resp.item_value = plresp.item_value
			-- hide/show  or parent/child question
					left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			WHERE stdq.control_type = 'ident'
					and ((@vshort_version = 1 and ((stdpl.pick_list_id is not NULL and stdpli.item_description= plresp.item_description)
					or isnull(resp.item_value,'') = '') OR stdpl.pick_list_id IS NULL )
					or @vshort_version = 0 OR @vshort_version is NULL) 
				
				and
				-- show hide and disabled question
				1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
					)
			set @vRowCount = @vRowCount + @@rowcount


-- Add in care plan control

			set @vStep = 145
	set @vgsStepStartTime=GETDATE()

	if @debug_me='Y' Print 'Step ' + convert(varchar(10),@vStep) + ' care plan control insert' 


; with cp_data as 
(
SELECT 
 distinct 
--top 100 PERCENT 
				assess.fac_id,
				stda.std_assess_id,
				assess.client_id,
				assess.assess_id,
				assess.assess_date, 
				asstype.description as assessment_type, 
				stda.description as UDA,
				--ncount.focus_text,
				stds.title as section_title,
				stds.sequence as section_sequence,
				stdqg.std_question_no as grp_std_question_no,
				stdqg.group_title,
				stdqg.group_text,
				stdqg.layout_style,
				stds.section_code,
				stdq.question_key,
				stdq.sequence,
				stdq.std_question_no,
				stdq.std_subquestion_no,
				stdq.std_subquestion_AB,

				case WHEN stdi.is_task = 'Y' and isnull(stdq.question_text,'') <> '' 
							and (ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) 
								or COALESCE(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1,'') = ''
								)then '<b>Other '+@vTermTasks +'</b>'  
					WHEN ncount.focus_text = 	isnull(@vTermFocus + interv_parent.text1, @vTermFocus + goal_parent.text1) THEN NULL 
					

					ELSE isnull('<b>'+ @vTermFocus +'</b>' + case when substring(interv_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(interv_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(interv_parent.text1, char(10),''),char(13),''))) end

								, '<b>' + @vTermFocus +'</b>' + case when substring(goal_parent.text1,1,1) = ' '  
									then STUFF(replace(replace(goal_parent.text1, char(10),''),char(13),''),1,1, '') 
									else ltrim(rtrim(replace(replace(goal_parent.text1, char(10),''),char(13),''))) end)

					
					END  as title /*question title*/,
				
				
				stdq.question_text,
				stdq.control_type,
				stdq.length,
				stdq.required,
				stdq.pick_list_id,
				NULL as picklist_name,			
				coalesce(stdn.std_need_id,stdg.std_need_id,stdi.std_need_id,stdt.std_trigger_id)  AS item_value,		
				NULL    AS item_description,	
				NULL AS pick_list_sequence,			
				NULL AS effective_date,		
				NULL AS ineffective_date,	
				assess.assess_type_code,
				assess.status,
				ISNULL(trig_res.checked, '') as resp_item_value,

				-- this line get the edited text 
				CASE WHEN stdt.trigger_type = 'N' THEN '<b>' +@vTermFocus+'</b>' + isnull(trig_res.custom_description, stdn.text1)
				 WHEN stdt.trigger_type = 'G' THEN '<b>' +@vTermGoal +'</b>' + isnull(trig_res.custom_description,stdg.text1)
				 WHEN stdt.trigger_type = 'I' THEN CASE WHEN stdi.is_task = 'Y' THEN '<b>'+ @vTermTask +' </b>' ELSE '<b>' + @vTermIntervention + ' </b>' END + isnull(trig_res.custom_description,stdi.text1)
				 ELSE ''
				 END as response,
				score.score,
				score.category as score_category,
				case when assess.strikeout_flag is null then 'N' else assess.strikeout_flag END as strikeout_flag,
				case when assess.strikeout_by IS NULL THEN '' ELSE assess.strikeout_by end as strikeout_by,
				dbo.fn_adjust_time_fac_time_zone(@vFacId, assess.strikeout_date)AS strikeout_date,
				case when assess.strikeout_desc IS NULL THEN '' ELSE assess.strikeout_desc end as strikeout_reason,
				stda.include_signature_section_flag,
				case when assess_sec.complete='Y' and assess_sec.completed_title is not null then assess_sec.completed_by+', '+assess_sec.completed_title 
					when assess_sec.complete='Y' and assess_sec.completed_title is null then assess_sec.completed_by else '' end as signed_by,
				assess_sec.completed_date as signed_date
			, cust_hdr
			, cust_sub_hdr
			, cust_hdr_long
			, cust_sub_hdr_long
			,stdi.is_task
			, '0' as print_s
			, ncount.focus_text
			, interv_parent.text1 as intervention_parent
			, goal_parent.text1 as goal_parent			
			, stdq.visual

			FROM #PRP_Assess_Filter af
			INNER JOIN dbo.as_std_assessment stda WITH (NOLOCK) ON stda.std_assess_id=af.std_assess_id
			INNER JOIN dbo.as_assessment assess WITH (NOLOCK) ON assess.assess_id=af.assess_id
			LEFT JOIN dbo.as_std_section stds WITH (NOLOCK) ON stda.std_assess_id=stds.std_assess_id
			LEFT JOIN dbo.as_assessment_section assess_sec WITH (NOLOCK) ON assess.assess_id=assess_sec.assess_id AND stds.section_code=assess_sec.section_code
			INNER JOIN dbo.mirror_as_std_question stdq WITH (NOLOCK) ON stda.std_assess_id=stdq.std_assess_id AND stds.section_code=stdq.section_code
			
			left outer JOIN dbo.as_std_trigger stdt WITH (NOLOCK) ON stdt.std_assess_id = af.std_assess_id AND stdt.deleted = 'N'
																and stdq.question_key = stdt.question_key 
			 LEFT JOIN dbo.cp_std_need stdn WITH (NOLOCK) ON stdt.trigger_type = 'N' AND stdn.std_need_id = stdt.triggered_item_id
			 LEFT JOIN dbo.cp_std_goal stdg WITH (NOLOCK) ON stdt.trigger_type = 'G' AND stdg.std_goal_id = stdt.triggered_item_id
			 LEFT JOIN dbo.cp_std_intervention stdi WITH (NOLOCK)ON stdt.trigger_type = 'I' AND stdi.std_intervention_id = stdt.triggered_item_id
			 left OUTER JOIN dbo.cp_std_need interv_parent WITH (NOLOCK) ON stdi.std_need_id = interv_parent.std_need_id 
			 left OUTER JOIN dbo.cp_std_need goal_parent WITH (NOLOCK) ON stdg.std_need_id = goal_parent.std_need_id 

			left join (SELECT asr.assess_response_id , asr.assess_id , asr.question_key , b.items as item_value 
				FROM dbo.as_response asr WITH (NOLOCK)
				Outer APPLY (SELECT items from dbo.Split(asr.item_value,',')) b
				
				) resp
				ON resp.assess_id = assess.assess_id 
				and stdq.question_key = resp.question_key 
				and convert(varchar(100),stdt.std_trigger_id) = resp.item_value
				

					-- added to handle short version of assessment where nothing was selected				
				left outer join dbo.as_response cp_resp with (nolock)
				on cp_resp.assess_id = assess.assess_id
				and cp_resp.question_key = stdq.question_key

			left JOIN dbo.as_response_trigger_item trig_res WITH (NOLOCK)
							ON resp.item_value = convert(varchar(50),trig_res.std_trigger_id )
							and resp.assess_response_id = trig_res.assess_response_id 

			LEFT JOIN dbo.as_std_question_group stdqg WITH (NOLOCK) ON stdq.std_assess_id=stdqg.std_assess_id 
				and stdq.section_code=stdqg.section_code 
				and stdq.std_question_no=stdqg.std_question_no
				AND stds.section_code=stdqg.section_code
			LEFT JOIN dbo.as_std_assess_type asstype WITH (NOLOCK) ON assess.std_assess_id = asstype.std_assess_id 
				AND assess.assess_type_code = asstype.assess_type_code 

			LEFT JOIN dbo.as_std_score stdscore  WITH (NOLOCK) ON 
								stda.std_assess_id = stdscore.std_assess_id
							AND stdscore.is_default = 'Y'
							AND stdscore.deleted = 'N'

			LEFT JOIN dbo.as_assessment_score score WITH (NOLOCK) ON 
						score.assess_id = assess.assess_id
							AND score.std_score_id = stdscore.std_score_id
				
			left outer join #prp_ShowHideDisable_rules cr
			on stdq.question_key = cr.question_key_obj

				-- show hide rules
			left OUTER JOIN #PRP_as_response asr_split
				ON af.assess_id = asr_split.assess_id 
				and asr_split.question_key = cr.question_key_sbj 


			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_on_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
										WHERE		af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
								  ) AS cust_hdr 
						) custom_header

			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Score' + @vSeparator + isnull(convert(varchar, ascr.score), '') + @vSeparator2 ELSE '' END
											 + CASE WHEN stds.cat_subsequent_header = 'Y' THEN isnull(stds.description, '') + ' Category' + @vSeparator + isnull(ascr.category, '') + @vSeparator2 ELSE '' END
										FROM dbo.as_std_score stds WITH (NOLOCK)
										LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
												ascr.assess_id = af.assess_id
											AND ascr.std_score_id = stds.std_score_id
										where	af.std_assess_id = stds.std_assess_id
												AND stds.deleted = 'N'
												and len(stds.description) < 25
										ORDER BY stds.std_score_id
										FOR XML PATH ('')
									) AS cust_sub_hdr
						) custom_sub_header
			OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
														ascr.assess_id = af.assess_id
													AND ascr.std_score_id = stds.std_score_id
											WHERE		af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
									  ) AS cust_hdr_long 
							) custom_header_long

				OUTER APPLY (	SELECT (	SELECT CASE WHEN stds.on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Score: </b>' + isnull(convert(varchar, ascr.score), '') + '<br>'  ELSE '' END
												 + CASE WHEN stds.cat_on_header = 'Y' THEN '<b>' + isnull(stds.description, '') + ' Category: </b>' + isnull(ascr.category, '') + '<br>' ELSE '' END
											FROM dbo.as_std_score stds WITH (NOLOCK)
											LEFT JOIN dbo.as_assessment_score ascr WITH (NOLOCK) ON
													ascr.assess_id = af.assess_id
												AND ascr.std_score_id = stds.std_score_id
											where	af.std_assess_id = stds.std_assess_id
													AND stds.deleted = 'N'
													and len(stds.description) >= 25
											ORDER BY stds.std_score_id
											FOR XML PATH ('')
										) AS cust_sub_hdr_long
							) custom_sub_header_long

			outer apply ( SELECT @vTermFocus + stdn.text1 as focus_text, stdn.std_need_id from dbo.as_std_trigger stt WITH (nolock)
							INNER JOIN dbo.cp_std_need stdna WITH (NOLOCK) ON stt.trigger_type = 'N' 
								
							where stt.std_assess_id = af.std_assess_id
							AND stdna.std_need_id = stt.triggered_item_id
							AND stdna.std_need_id = stdn.std_need_id
							and stt.question_key = stdq.question_key
							and stdt.std_trigger_id = stt.std_trigger_id
							
							and stt.deleted = 'N'
						) ncount	
			WHERE 
					stdq.control_type = 'cp'
					
					and (  (len(resp.item_value) >  1   and @vshort_version = 1)  -- short version with selected, return only selected
							or (@vshort_version = 0 )  -- long version return all
							or (isnull(cp_resp.item_value,'') = '' and @vshort_version = 1) -- short version but nothing was selected , return all
							)

				-- show hide and disabled question
				
				
				and 1 = ( case when 
									cr.enabled_flag = 'Y' 
									and  @vincl_disabled_qs = 0				-- assessment flag "By Default Include Disabled Questions in Report"
									and isnull(cr.item_id, '') = 4102		-- disabled question
									and  cr.range1 = asr_split.first_val	-- value that triggers rule equal response value
								then 0 

								when cr.enabled_flag = 'Y' and not cr.control_type in ('pulse','we','bp','resp','bs','o2','he', 'temp','pnl', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null or ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.item_value))) then 0
								
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pulse','we','resp','bs','o2','he', 'temp', 'numde') 
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)

											) then 0
							-- pain level
								when cr.enabled_flag = 'Y' and  cr.control_type in ('pnl')  
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or ( ltrim(rtrim(cr.range1)) <> ltrim(rtrim(asr_split.first_val)))
										
											) then 0

								-- blood pressure
								when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'sys'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.first_val)
														or convert(float,cr.range1) > convert(float,asr_split.first_val)
													)
										
											) then 0
									when cr.enabled_flag = 'Y' and  cr.control_type in ('bp')  and cr.question_key_info = 'dias'
										and isnull(cr.item_id,'') = 4110
										and (asr_split.item_value is null 
													or (  convert(float,cr.range2) < convert(float,asr_split.second_val)
														or convert(float,cr.range1) > convert(float,asr_split.second_val)
													)
										
											) then 0

								else 1 end
								
					)

	) -- cp_data



	INSERT INTO #PRP_Results


	select 
				fac_id,
				std_assess_id,
				client_id,
				assess_id,
				assess_date, 
				assessment_type, 
				UDA,
				section_title,
				section_sequence,
				grp_std_question_no,
				group_title,
				group_text,
				layout_style,
				section_code,
				question_key,
				sequence,
				std_question_no,
				std_subquestion_no,
				std_subquestion_AB,
				CASE WHEN (row_number()  OVER ( partition BY cp_data.std_assess_id, cp_data.assess_id, cp_data.question_key , title
								
								
									ORDER BY cp_data.std_assess_id, cp_data.assess_id, cp_data.question_key, title,
									response )
							) = 1  
							THEN isnull(title,'') ELSE '' end as title,
				question_text,
				control_type,
				[length],
				[required],
				pick_list_id,
				picklist_name,		-- null for ident control
				item_value,			-- null for ident control
				item_description,	-- null for ident control
				pick_list_sequence,			-- null for ident control
				effective_date,		-- null for ident control
				ineffective_date,	-- null for ident control
				assess_type_code,
				status,
				resp_item_value,
				response,
				--+isnull(trig_res.standard_description, 'Rolly')  
				score,
				score_category,
				strikeout_flag,
				strikeout_by,
				strikeout_date,
				strikeout_reason,
				include_signature_section_flag,
				signed_by,
				signed_date,
				cust_hdr,
				cust_sub_hdr,
				cust_hdr_long,
				cust_sub_hdr_long
				

				, null as rnum

			, row_number()  OVER ( partition BY cp_data.std_assess_id, cp_data.assess_id, cp_data.question_key 
								
						ORDER BY cp_data.std_assess_id, cp_data.assess_id, cp_data.question_key, title, response)  unique_question
				,null
				,print_s
				,null
				,null
				,visual

	 from cp_data 
	 where visual <> 'N'


			set @vRowCount = @@rowcount			
			if @debug_me = 'Y' SELECT 'after_cp_insert', * from #PRP_Results

			DELETE from #PRP_Results
			where visual = 'N'
			
-- update question title to support c2 layout
			if @vRowCount > 0 
			begin
					--select  @maxcharlen = max(len(pick_list_value)) from #PRP_Results

					-- update response flag to support c2 layout
					update rp
					SET rp.resp_item_value = question_tit.resp_item_value_title
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT 
													
													re.resp_item_value + ','
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													order BY 
														re.unique_question
															--CASE WHEN  re.question_title = '' THEN re.response ELSE re.question_title END 

													--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response
												--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) resp_item_value_title
							)question_tit
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';
					-- update response to support c2 layout


					update rp
					SET rp.response =		question_title.response_title
											--replace(
											--replace(
											--question_title.response_title
											--, '&lt;b&gt;','<b>')
											--, '&lt;/b&gt;', '</b>')
						
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT 
													 re.response + @vseparator
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													order BY 
															re.unique_question
															--CASE WHEN  re.question_title = '' THEN re.response ELSE re.question_title END 

													--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response

													--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) response_title
							)question_title
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';

					update rp
					SET rp.question_title = question_t.q_title
											--replace(
											--replace(
											--question_t.q_title
											--, '&lt;b&gt;','<b>')
											--, '&lt;/b&gt;', '</b>')

											
						
					from #PRP_Results rp
					outer apply  ( SELECT  (	SELECT   case when re.question_title = '' then ' ' else re.question_title END  + @vseparator
													
												FROM #PRP_Results re WITH (NOLOCK)
												
												where	re.assess_id = rp.assess_id
													and re.question_key = rp.question_key
													and re.control_type = 'cp'
													and re.group_layout_Style = 'C2'
													order BY 
															re.unique_question
															--CASE WHEN  re.question_title = '' THEN re.response ELSE re.question_title END 

													--order BY right( (replicate( '0',@maxcharlen) + re.pick_list_value) ,@maxcharlen) , re.response
													--order by convert(int, re.pick_list_value ), re.response
												
												FOR XML PATH ('')
											) q_title
								)question_t
					where rp.control_type = 'cp'
						 and rp.group_layout_Style = 'C2';


					if @debug_me = 'Y' SELECT 'first update', * from #PRP_Results

			END

		 

		
		DELETE from #PRP_Results
		where control_type = 'CP'
			and group_layout_Style = 'C2'
			and unique_question > 1


	

		end -- end of populated data



	update assess SET assess.response=isnull(lang.item_description,'')
	from #PRP_Results assess
	INNER JOIN dbo.common_code lang WITH (NOLOCK) ON assess.resp_item_value=lang.item_id and assess.control_type='lang'

	UPDATE #PRP_Results SET std_subquestion_no='ZZXXYY' where std_subquestion_no='' 
			

	if @debug_me = 'Y' select 'before 2 column merge', * from #PRP_Results
	order by    client_id
		  , assess_id
		  , section_sequence
		  , sequence
		  , case when isnumeric(pick_list_sequence)=1 then cast (pick_list_sequence as int) end 


	UPDATE #PRP_Results
	set group_layout_style = 'V'
	where group_layout_style = 'C2'
	and control_type in ( 'pain', 'gbdy', 'bdy', 'ebdy')
	--and control_type = 'pain'

	set @vRowCount = @@rowcount
	if @vRowCount > 0
	begin
	; with updated_pain
	  as ( select client_id
		  , assess_id
		  , sequence
		  from #PRP_Results
		  WHERE group_layout_style = 'V'
		  and control_type = 'pain'
	  
		)


		UPDATE a
		set a.group_layout_style = 'V'
		from #PRP_Results a inner join 
		updated_pain upd
		on a.client_id = upd.client_id
		and a.assess_id = upd.assess_id
		and a.sequence = upd.sequence + 1 
		and a.group_layout_style = 'C2'

	end
/***************************************************************************
						HANDLE 2 COLUMN SECTIONS C2
***************************************************************************/

if @debug_me = 'Y' select 'before 2 column merge after update for C2', * from #PRP_Results
	order by    client_id
		  , assess_id
		  , section_sequence
		  , sequence
		  , case when isnumeric(pick_list_sequence)=1 then cast (pick_list_sequence as int) end 



	UPDATE #PRP_Results
	SET control_type = ISNULL(A_control_type, '') + @vSeparator3 +  ISNULL(B_control_type, '')
		--control_type = ISNULL(A_control_type, '') + @vSeparator3 + ISNULL(B_control_type, '')
	  , std_subquestion_no = ISNULL(A_std_subquestion_no, '') + @vSeparator3 + ISNULL(B_std_subquestion_no, '')
	  , question_text = ISNULL(A_text, '') + @vSeparator3 + ISNULL(B_text, '')
	  , question_title = ISNULL(A_question_title, '') + @vSeparator3 + ISNULL(B_question_title, '')
	  , pick_list_id = 0
	  , pick_list_name = ISNULL(A_pick_list_name, '') + @vSeparator3 + ISNULL(B_pick_list_name, '')
	  , pick_list_value = ISNULL(A_pick_list_value, '') + @vSeparator3 + ISNULL(B_pick_list_value, '')
	  , pick_list_description = ISNULL(A_pick_list_description, '') + @vSeparator3 + ISNULL(B_pick_list_description, '')
	  , resp_item_value = ISNULL(A_resp_item_value, '') + @vSeparator3 + ISNULL(B_resp_item_value, '')
	  , response = ISNULL(A_response, '') + @vSeparator3 + ISNULL(B_response, '')
	  , print_s = ISNULL(A_print_s, '') + @vSeparator3 + ISNULL(B_print_s, '')
	  , was_merge = 1
	  , ams_key = ISNULL(A_ams_key, '') + @vSeparator3 + ISNULL(B_ams_key, '')
	  , pick_list_sequence = ISNULL(A_pick_list_sequence, '') + @vSeparator3 + ISNULL(B_pick_list_sequence, '')
	FROM
	

(


		SELECT CASE WHEN Col_1.new_seq IS NULL THEN Col_2.new_seq ELSE Col_1.new_seq END as new_seq -- remove on next revision if clears QAT
			 , Col_1.A_control_type
			 , Col_2.B_control_type
			 , Col_1.A_std_subquestion_no
			 , Col_2.B_std_subquestion_no
			 , Col_1.A_text
			 , Col_2.B_text
			 , Col_1.A_question_title
			 , Col_2.B_question_title
			 , Col_1.A_pick_list_name
			 , Col_2.B_pick_list_name
			 , Col_1.A_pick_list_value
			 , Col_2.B_pick_list_value
			 , Col_1.A_pick_list_description
			 , Col_2.B_pick_list_description
			 , Col_1.A_resp_item_value
			 , Col_2.B_resp_item_value
			 , Col_1.A_response
			 , Col_2.B_response
			 , Col_1.A_print_s
			 , Col_2.B_print_s
			 , CASE WHEN Col_1.section_sequence IS NULL THEN Col_2.section_sequence ELSE Col_1.section_sequence END AS sec_seq
			 , CASE WHEN Col_1.group_no IS NULL THEN Col_2.group_no ELSE Col_1.group_no END AS grp_no
			 , CASE WHEN Col_1.A_seq IS NULL THEN Col_2.B_seq ELSE Col_1.A_seq END AS seq
			 , CASE WHEN col_1.assess_id IS NULL THEN col_2.assess_id ELSE col_1.assess_id END AS ass_id
			 , Col_1.A_ams_key
			 , Col_2.B_ams_key
			 , Col_1.A_pick_list_sequence
			 , Col_2.B_pick_list_sequence
		FROM
				(SELECT
					  ROW_NUMBER() OVER ( PARTITION BY assess_id
							 , section_sequence
							 , group_no
					  ORDER BY assess_id
							 , section_sequence
							 , group_no
							 , sequence
						) AS new_seq

					, assess_id
					, section_sequence
					, group_no
					, sequence AS A_seq
					, std_subquestion_no AS A_std_subquestion_no
					, control_type AS A_control_type
					, question_text AS A_text
					, question_title AS A_question_title
					, pick_list_name AS A_pick_list_name
					, pick_list_value AS A_pick_list_value
					, pick_list_description AS A_pick_list_description
					, resp_item_value AS A_resp_item_value
					, response AS A_response
					, print_s as A_print_s
					, ams_key AS A_ams_key
					, pick_list_sequence as A_pick_list_sequence
				FROM #PRP_Results Col_A 
				WHERE Col_A.group_layout_style = 'C2'
				  AND Col_A.control_type <> 'bdy'
				  AND Col_A.control_type <> 'gbdy'
				  --AND col_A.control_type <> 'cp'
				  AND Col_A.sequence <	CASE WHEN
										(
											SELECT TOP 1 col_2_start.sequence FROM #PRP_Results col_2_start 
											WHERE	col_2_start.assess_id = Col_A.assess_id
												AND col_2_start.section_sequence = Col_A.section_sequence
												AND col_2_start.group_no = Col_A.group_no
												AND col_2_start.std_subquestion_AB = 'B'
												AND col_2_start.control_type <> 'bdy'
												AND col_2_start.control_type <> 'gbdy'
										) IS NULL THEN
										(
											SELECT MAX(col_2_start.sequence) + 1 FROM #PRP_Results col_2_start 
											WHERE	col_2_start.assess_id = Col_A.assess_id
												AND col_2_start.section_sequence = Col_A.section_sequence
												AND col_2_start.group_no = Col_A.group_no
												AND col_2_start.control_type <> 'bdy'
												AND col_2_start.control_type <> 'gbdy'
												--AND col_2_start.control_type <> 'cp'
										) ELSE
										(
											SELECT TOP 1 col_2_start.sequence FROM #PRP_Results col_2_start 
											WHERE	col_2_start.assess_id = Col_A.assess_id
												AND col_2_start.section_sequence = Col_A.section_sequence
												AND col_2_start.group_no = Col_A.group_no
												AND col_2_start.std_subquestion_AB = 'B'
												AND col_2_start.control_type <> 'bdy'
												AND col_2_start.control_type <> 'gbdy'
												--AND col_2_start.control_type <> 'cp'
										) END
				) Col_1
		FULL OUTER JOIN
				(SELECT
					  ROW_NUMBER() OVER ( PARTITION BY assess_id
							 , section_sequence
							 , group_no
					  ORDER BY assess_id
							 , section_sequence
							 , group_no
							 , sequence
						) AS new_seq

					, assess_id
					, section_sequence
					, group_no
					, sequence AS B_seq
					, std_subquestion_no AS B_std_subquestion_no
					, control_type AS B_control_type
					, question_text AS B_text
					, question_title AS B_question_title
					, pick_list_name AS B_pick_list_name
					, pick_list_value AS B_pick_list_value
					, pick_list_description AS B_pick_list_description
					, resp_item_value AS B_resp_item_value
					, response AS B_response
					, print_s as B_print_s
					, ams_key AS B_ams_key
					, pick_list_sequence as B_pick_list_sequence
				FROM #PRP_Results Col_A 
				WHERE Col_A.group_layout_style = 'C2'
				  AND Col_A.control_type <> 'bdy'
				  AND Col_A.control_type <> 'gbdy'
				 -- AND col_A.control_type <> 'cp'
				  AND Col_A.sequence >= 
										(
											SELECT TOP 1 col_2_start.sequence FROM #PRP_Results col_2_start 
											WHERE	col_2_start.assess_id = Col_A.assess_id
												AND col_2_start.section_sequence = Col_A.section_sequence
												AND col_2_start.group_no = Col_A.group_no
												AND col_2_start.std_subquestion_AB = 'B'
												AND col_2_start.control_type <> 'bdy'
												AND col_2_start.control_type <> 'gbdy'
												--AND col_2_start.control_type <> 'cp'
										)
				) Col_2 ON
							Col_1.assess_id = Col_2.assess_id
						AND	Col_1.section_sequence = Col_2.section_sequence
						AND	Col_1.group_no = Col_2.group_no
						AND	Col_1.new_seq = Col_2.new_seq
	) my_view


	WHERE	assess_id = my_view.ass_id
		AND	section_sequence = my_view.sec_seq
		AND	group_no = my_view.grp_no
		AND	sequence = my_view.seq
		and my_view.A_std_subquestion_no = std_subquestion_no
		AND control_type <> 'bdy'
		AND control_type <> 'gbdy'
		--AND control_type <> 'cp'


-- the following code was added to handle the scenario where lay out was set to two columns but there's no question(s) on the first column

if @debug_me = 'Y' print 'handling c2 where column 1 is empty'
	update prpres

	set prpres.was_merge = 1
	from #prp_results prpres
	inner JOIN
		(select  
				fac_id
				, client_id
				, std_assess_id
				, assess_id
				, std_question_no

				, substring(std_subquestion_no
					, charindex(@vSeparator3,std_subquestion_no) + len(@vSeparator3)
					, len(std_subquestion_no) - (charindex(@vSeparator3,std_subquestion_no) + len(@vSeparator3)) + 1) std_subquestion_no

				,  substring(question_title
					, charindex(@vSeparator3,question_title) + len(@vSeparator3)
					, len(question_title) - (charindex(@vSeparator3,question_title) + len(@vSeparator3)) + 1) question_title
				,  substring(question_text
					, charindex(@vSeparator3,question_text) + len(@vSeparator3)
					, len(question_text) - (charindex(@vSeparator3,question_text) + len(@vSeparator3)) + 1) question_text

				,  substring(control_type
					, charindex(@vSeparator3,control_type) + len(@vSeparator3)
					, len(control_type) - (charindex(@vSeparator3,control_type) + len(@vSeparator3)) + 1) control_type

				,  substring(pick_list_name
					, charindex(@vSeparator3,pick_list_name) + len(@vSeparator3)
					, len(pick_list_name) - (charindex(@vSeparator3,pick_list_name) + len(@vSeparator3)) + 1) pick_list_name
		
				,  substring(resp_item_value
					, charindex(@vSeparator3,resp_item_value) + len(@vSeparator3)
					, len(resp_item_value) - (charindex(@vSeparator3,resp_item_value) + len(@vSeparator3)) + 1) resp_item_value

				,  substring(response
					, charindex(@vSeparator3,response) + len(@vSeparator3)
					, len(response) - (charindex(@vSeparator3,response) + len(@vSeparator3)) + 1) response

				,  substring(pick_list_value
					, charindex(@vSeparator3,pick_list_value) + len(@vSeparator3)
					, len(pick_list_value) - (charindex(@vSeparator3,pick_list_value) + len(@vSeparator3)) + 1) pick_list_value

				,  substring(pick_list_description
					, charindex(@vSeparator3,pick_list_description) + len(@vSeparator3)
					, len(pick_list_description) - (charindex(@vSeparator3,pick_list_description) + len(@vSeparator3)) + 1) pick_list_description
				
				,  substring(print_s
					, charindex(@vSeparator3,print_s) + len(@vSeparator3)
					, len(print_s) - (charindex(@vSeparator3,print_s) + len(@vSeparator3)) + 1) print_s


		 from #prp_results where was_merge = 1) wm
		 on prpres.fac_id = wm.fac_id
		 and prpres.client_id = wm.client_id
		 and prpres.std_assess_id = wm.std_assess_id
		 and prpres.assess_id = wm.assess_id
		 and prpres.std_question_no = wm.std_question_no
		 and ISNULL(prpres.std_subquestion_no,'') = wm.std_subquestion_no
		 and ISNULL(prpres.question_title,'') = wm.question_title
		 and ISNULL(prpres.question_text,'') = wm.question_text
		 and ISNULL(prpres.control_type,'') = wm.control_type

		 and ISNULL(prpres.pick_list_name,'') = wm.pick_list_name
		 and ISNULL(prpres.resp_item_value,'') = wm.resp_item_value
		 and ISNULL(prpres.response,'') = wm.response
		 and ISNULL(prpres.pick_list_value,'') = wm.pick_list_value
		 and ISNULL(prpres.pick_list_description,'') = wm.pick_list_description
		 and ISNULL(prpres.print_s,'') = wm.print_s
		 and prpres.group_layout_style = 'C2'



	UPDATE #prp_results
	set std_subquestion_no = @vSeparator3 + isnull(std_subquestion_no ,'')
		,question_title = @vSeparator3 + isnull(question_title ,'')
		,question_text = @vSeparator3 + isnull(question_text ,'')
		,control_type = ' '+ @vSeparator3 + isnull(control_type ,'')
		,pick_list_name = @vSeparator3 + isnull(pick_list_name ,'')
		,resp_item_value = @vSeparator3 + isnull(resp_item_value ,'')
		,response = ' '+  @vSeparator3 + isnull(response ,'')
		,pick_list_value = @vSeparator3 + isnull(pick_list_value ,'')
		,pick_list_description = @vSeparator3 + isnull(pick_list_description ,'')
		,print_s = @vSeparator3 + isnull(print_s ,'')
		,ams_key =  ' '+  @vSeparator3 + isnull(ams_key ,'')
	WHERE group_layout_style = 'C2'
		 and was_merge is NULL




--	Since all the required info is now merged into combined rows, delete the rows that were not part of the merge
if @debug_me = 'Y' 
select 'before delete', *
from #PRP_Results
order by    client_id
		  , assess_id
		  , section_sequence
		  , sequence
		  , case when isnumeric(pick_list_sequence)=1 then cast (pick_list_sequence as int) end 


	DELETE FROM #PRP_Results
	--FROM  #PRP_Results  
	WHERE	group_layout_style = 'C2'
			AND control_type <> 'gbdy'
			AND control_type <> 'bdy'
			AND control_type not LIKE '%' + @vSeparator3 + '%' 
			

if @debug_me='Y' select '#PRP_Results After delete', * from #PRP_Results
order by    client_id
		  , assess_id
		  , section_sequence
		  , sequence
		  , case when isnumeric(pick_list_sequence)=1 then cast (pick_list_sequence as int) end 

/***************************************************************************
					END OF HANDLE 2 COLUMN SECTIONS
***************************************************************************/

	Set @vgs_fill_end_time  = getdate() ; -- fill end time

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(@vRowCount)))+ ' rows in '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	select @vStep = 150
	set @vgsStepStartTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)
	--*********************************************************************************************************

	select @cnt_result = count(*) from #PRP_Results

	select @min_clientid = min(client_id) from #clients


	;with tbBase
	as
	(
	select  DISTINCT
		 res.fac_id
		, cl.mrn_number
		, cl.sex
		, cl.date_of_birth
		, cl.admission_date
		, cl.initial_admission_date
		, cl.client_name
		, cl.client_language
		, cl.client_title
		, cl.client_id_number
		, res.client_id
		, convert(varchar,res.fac_id)		as fac_id_str --- required for building group id 	
		, convert(varchar,res.client_id)		as client_id_str --- required for building group id 	
		, convert(varchar,res.std_assess_id)		as std_assess_id_str --- required for building group id 	
		, convert(varchar,res.assess_id)		as assess_id_str --- required for building group id 
		, ltrim(rtrim(cl.client_physician)) as physician
		, cl.location
		, cl.allergy
		, cl.ids
		, cl.subids
		, res.std_assess_id
		, res.assess_id
		, res.assess_date
		, res.assessment_type
		
		--, replace(replace(replace ( replace( replace ( replace ( replace( replace(  res.uda, '&', '&amp;')
		--							, '<', '&lt;')
		--							, '>', '&gt;')
		--							, '"', '&quot;')
		--							, '''', '&#39;')
		--							, ' ', '&nbsp;')
		--							, '&amp;#', '&#')-- these 2 lines should be at the end
		--							, char(10), '<br>')  
		-- as uda -- report name

		,	dbo.fn_scape_characters( res.uda , '<') as uda
						
		, case when res.section_code='Cust' THEN '' WHEN res.section_code LIKE 'Cust_%' THEN RIGHT(res.section_code,(LEN(res.section_code)-5)) ELSE res.section_code end as section_no
		, res.section_title
		, res.section_sequence
		, res.group_no
		, res.group_title
		, res.group_text
		, res.group_layout_style
		, res.sequence
		, res.std_question_no
		, res.std_subquestion_no
		, res.std_subquestion_AB
		, res.question_title
		, res.question_text
		, res.control_type
		, res.control_length
		, res.response_required
		, res.pick_list_id
		, res.pick_list_name
		, res.pick_list_value

		, res.pick_list_description	
		, res.pick_list_sequence		
		, res.pick_list_value_effective_date
		, res.pick_list_value_ineffective_date
		, res.assess_type_code
		, res.assess_status
		, res.resp_item_value
		, res.response
		, res.score 
		, res.score_category
		, res.strikeout_flag
		, res.strikeout_by
		, CASE WHEN res.strikeout_date is not null 
			   THEN CONVERT(varchar(10), res.strikeout_date, @vdateFormatStyle) + ' '
				  + CONVERT(varchar(5), res.strikeout_date, 114) 
			   ELSE '' 
		  END as strikeout_date
		, res.strikeout_reason
		, res.include_signature_section_flag
		, res.signed_by
		, case when res.signed_date is not null then convert(varchar(10), dbo.fn_adjust_time_fac_time_zone(res.fac_id, res.signed_date), 101) /*convert(char(10),res.signed_date,101)*/  ELSE '' END as signed_date
		--, case when res.signed_date is not null then convert(char(10),res.signed_date,101) + '<br>' + isnull(substring(convert(varchar(20),res.signed_date, 120), 12, 5),'') ELSE '' END as signed_date
		, cust_hdr
		, cust_sub_hdr
		, cust_hdr_long
		, cust_sub_hdr_long
		, rnum
		, unique_question
		, print_s
		, ams_key
		, file_metadata_id
     from #clients cl
	left JOIN #PRP_Results res ON res.client_id=cl.client_id
	where (@client_id <> -1 or res.client_id is not null
					or (@cnt_result = 0 and cl.client_id = @min_clientid )
		  )


					
	)
, tbWithGroupSet
	as
	(
		Select *
		,isnull(fac_id_str,'')+'_' +isnull(client_id_str,'')+'_' +isnull(std_assess_id_str,'')+'_' +isnull(assess_id_str,'') as P_set_id
		,std_assess_id as G_set_id
		,uda as G1
		from tbBase
	)


	, tbWithSort
	as
	(
	Select 
		client_name
		, client_id
		, client_id_number
		, location
		, admission_date
		, initial_admission_date
		, mrn_number
		, client_language
		, client_title
		, sex
		, date_of_birth
		, physician
		, allergy
		, ids
		, subids
		, std_assess_id
		, assess_id
		, assess_date
		, assessment_type
		, uda
		, section_no
		, section_title
		, section_sequence
		, group_no
		, group_title
		, group_text
		, group_layout_style
		, sequence
		, std_question_no
		, replace(std_subquestion_no, 'ZZXXYY', '') AS std_subquestion_no
		, std_subquestion_AB
		, question_title
		, question_text
		, control_type
		, control_length
		, response_required
		, pick_list_id
		, pick_list_name
		, pick_list_value
		, pick_list_description	
		, pick_list_sequence		
		, pick_list_value_effective_date
		, pick_list_value_ineffective_date
		, assess_type_code
		, assess_status
		, resp_item_value
		, response
		, score 
		, score_category
		, strikeout_flag
		, strikeout_by
		, strikeout_date
		, strikeout_reason
		, include_signature_section_flag
		, isnull(signed_by,'') as signed_by
		, isnull(signed_date,'') as signed_date
		, cust_hdr
		, cust_sub_hdr
		, cust_hdr_long
		, cust_sub_hdr_long
		, P_set_id
		, print_s
		, ams_key
		, file_metadata_id
		, Case  
			  when @vP1 = 'client_name'				then client_name
			  when @vP1 = 'client_number'			then client_id_number
			  when @vP1 = 'client_location'			then location
			  when @vP1 = 'assess_date'				then isnull(convert(varchar(10), assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP1 = 'admission_date'			then admission_date
			  when @vP1 = 'date_of_birth' 			then date_of_birth 
			  when @vP1 = 'sex' 					then sex
			  when @vP1 = 'client_language' 		then client_language 
			  when @vP1 = 'physician' 				then physician 
			  when @vP1 = 'allergy'					then allergy
			  when @vP1 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP1 = 'uda'						then isnull(uda,@uda_title)
			  when @vP1 = 'assessment_type' 		then assessment_type
			  when @vP1 = 'facility_name'			then @vFacName
			  when @vP1 = 'facility_address'		then @vFacAddress
			  when @vP1 = 'initial_admission_date'	then initial_admission_date
			  when @vP1 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP1 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP1 = 'ids'						then ids
		  else NULL end as P1
		, Case  
			  when @vP2 = 'client_name'				then client_name
			  when @vP2 = 'client_number'			then client_id_number
			  when @vP2 = 'client_location'			then location
			  when @vP2 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP2 = 'admission_date'			then admission_date
			  when @vP2 = 'date_of_birth' 			then date_of_birth 
			  when @vP2 = 'sex' 					then sex
			  when @vP2 = 'client_language' 		then client_language 
			  when @vP2 = 'physician' 				then physician 
			  when @vP2 = 'allergy'					then allergy
			  when @vP2 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP2 = 'uda'						then isnull(uda,@uda_title)
			  when @vP2 = 'assessment_type' 		then assessment_type
			  when @vP2 = 'facility_name'			then @vFacName
			  when @vP2 = 'facility_address'		then @vFacAddress
			  when @vP2 = 'initial_admission_date'	then initial_admission_date
			  when @vP2 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP2 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP2 = 'ids'						then ids
		  else NULL end as P2
		, Case  
			  when @vP3 = 'client_name'				then client_name
			  when @vP3 = 'client_number'			then client_id_number
			  when @vP3 = 'client_location'			then location
			  when @vP3 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP3 = 'admission_date'			then admission_date
			  when @vP3 = 'date_of_birth' 			then date_of_birth 
			  when @vP3 = 'sex' 					then sex
			  when @vP3 = 'client_language' 		then client_language 
			  when @vP3 = 'physician' 				then physician 
			  when @vP3 = 'allergy'					then allergy
			  when @vP3 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP3 = 'uda'						then isnull(uda,@uda_title)
			  when @vP3 = 'assessment_type' 		then assessment_type
			  when @vP3 = 'facility_name'			then @vFacName
			  when @vP3 = 'facility_address'		then @vFacAddress
			  when @vP3 = 'initial_admission_date'	then initial_admission_date
			  when @vP3 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP3 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP3 = 'ids'						then ids
		  else NULL end as P3
		, Case  
			  when @vP4 = 'client_name'				then client_name
			  when @vP4 = 'client_number'			then client_id_number
			  when @vP4 = 'client_location'			then location
			  when @vP4 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP4 = 'admission_date'			then admission_date
			  when @vP4 = 'date_of_birth' 			then date_of_birth 
			  when @vP4 = 'sex' 					then sex
			  when @vP4 = 'client_language' 		then client_language 
			  when @vP4 = 'physician' 				then physician 
			  when @vP4 = 'allergy'					then allergy
			  when @vP4 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP4 = 'uda'						then isnull(uda,@uda_title)
			  when @vP4 = 'assessment_type' 		then assessment_type
			  when @vP4 = 'facility_name'			then @vFacName
			  when @vP4 = 'facility_address'		then @vFacAddress
			  when @vP4 = 'initial_admission_date'	then initial_admission_date
			  when @vP4 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP4 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP4 = 'ids'						then ids
		  else NULL end as P4
		, Case  
			  when @vP5 = 'client_name'				then client_name
			  when @vP5 = 'client_number'			then client_id_number
			  when @vP5 = 'client_location'			then location
			  when @vP5 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP5 = 'admission_date'			then admission_date
			  when @vP5 = 'date_of_birth' 			then date_of_birth 
			  when @vP5 = 'sex' 					then sex
			  when @vP5 = 'client_language' 		then client_language 
			  when @vP5 = 'physician' 				then physician 
			  when @vP5 = 'allergy'					then allergy 
			  when @vP5 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP5 = 'uda'						then isnull(uda,@uda_title)
			  when @vP5 = 'assessment_type' 		then assessment_type
			  when @vP5 = 'facility_name'			then @vFacName
			  when @vP5 = 'facility_address'		then @vFacAddress
			  when @vP5 = 'initial_admission_date'	then initial_admission_date
			  when @vP5 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP5 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP5 = 'ids'						then ids
		  else NULL end as P5
		, Case  
			  when @vP6 = 'client_name'				then client_name
			  when @vP6 = 'client_number'			then client_id_number
			  when @vP6 = 'client_location'			then location
			  when @vP6 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP6 = 'admission_date'			then admission_date
			  when @vP6 = 'date_of_birth' 			then date_of_birth 
			  when @vP6 = 'sex' 					then sex
			  when @vP6 = 'client_language' 		then client_language 
			  when @vP6 = 'physician' 				then physician 
			  when @vP6 = 'allergy'					then allergy 
			  when @vP6 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP6 = 'uda'						then isnull(uda,@uda_title)
			  when @vP6 = 'assessment_type' 		then assessment_type
			  when @vP6 = 'facility_name'			then @vFacName
			  when @vP6 = 'facility_address'		then @vFacAddress
			  when @vP6 = 'initial_admission_date'	then initial_admission_date
			  when @vP6 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP6 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP6 = 'ids'						then ids
		  else NULL end as P6
		, Case  
			  when @vP7 = 'client_name'				then client_name
			  when @vP7 = 'client_number'			then client_id_number
			  when @vP7 = 'client_location'			then location
			  when @vP7 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP7 = 'admission_date'			then admission_date
			  when @vP7 = 'date_of_birth' 			then date_of_birth 
			  when @vP7 = 'sex' 					then sex
			  when @vP7 = 'client_language' 		then client_language 
			  when @vP7 = 'physician' 				then physician 
			  when @vP7 = 'allergy'					then allergy 
			  when @vP7 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP7 = 'uda'						then isnull(uda,@uda_title)
			  when @vP7 = 'assessment_type' 		then assessment_type
			  when @vP7 = 'facility_name'			then @vFacName
			  when @vP7 = 'facility_address'		then @vFacAddress
			  when @vP7 = 'initial_admission_date'	then initial_admission_date
			  when @vP7 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP7 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP7 = 'ids'						then ids
		  else NULL end as P7
		, Case  
			  when @vP8 = 'client_name'				then client_name
			  when @vP8 = 'client_number'			then client_id_number
			  when @vP8 = 'client_location'			then location
			  when @vP8 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP8 = 'admission_date'			then admission_date
			  when @vP8 = 'date_of_birth' 			then date_of_birth 
			  when @vP8 = 'sex' 					then sex
			  when @vP8 = 'client_language' 		then client_language 
			  when @vP8 = 'physician' 				then physician 
			  when @vP8 = 'allergy'					then allergy 
			  when @vP8 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP8 = 'uda'						then isnull(uda,@uda_title)
			  when @vP8 = 'assessment_type' 		then assessment_type
			  when @vP8 = 'facility_name'			then @vFacName
			  when @vP8 = 'facility_address'		then @vFacAddress
			  when @vP8 = 'initial_admission_date'	then initial_admission_date
			  when @vP8 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP8 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP8 = 'ids'						then ids
		  else NULL end as P8
		, Case  
			  when @vP9 = 'client_name'				then client_name
			  when @vP9 = 'client_number'			then client_id_number
			  when @vP9 = 'client_location'			then location
			  when @vP9 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vP9 = 'admission_date'			then admission_date
			  when @vP9 = 'date_of_birth' 			then date_of_birth 
			  when @vP9 = 'sex' 					then sex
			  when @vP9 = 'client_language' 		then client_language 
			  when @vP9 = 'physician' 				then physician 
			  when @vP9 = 'allergy'					then allergy 
			  when @vP9 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP9 = 'uda'						then isnull(uda,@uda_title)
			  when @vP9 = 'assessment_type' 		then assessment_type
			  when @vP9 = 'facility_name'			then @vFacName
			  when @vP9 = 'facility_address'		then @vFacAddress
			  when @vP9 = 'initial_admission_date'	then initial_admission_date
			  when @vP9 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP9 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP9 = 'ids'						then ids
		  else NULL end as P9
		, Case  
			  when @vP10 = 'client_name'			then client_name
			  when @vP10 = 'client_number'			then client_id_number
			  when @vP10 = 'client_location'		then location
			  when @vP10 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP10 = 'admission_date'			then admission_date
			  when @vP10 = 'date_of_birth' 			then date_of_birth 
			  when @vP10 = 'sex' 					then sex
			  when @vP10 = 'client_language' 		then client_language 
			  when @vP10 = 'physician' 				then physician 
			  when @vP10 = 'allergy'				then allergy
			  when @vP10 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP10 = 'uda'					then isnull(uda,@uda_title)
			  when @vP10 = 'assessment_type' 		then assessment_type
			  when @vP10 = 'facility_name'			then @vFacName
			  when @vP10 = 'facility_address'		then @vFacAddress
			  when @vP10 = 'initial_admission_date'	then initial_admission_date
			  when @vP10 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP10 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP10 = 'ids'					then ids
		  else NULL end as P10
		, Case  
			  when @vP11 = 'client_name'			then client_name
			  when @vP11 = 'client_number'			then client_id_number
			  when @vP11 = 'client_location'		then location
			  when @vP11 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP11 = 'admission_date'			then admission_date
			  when @vP11 = 'date_of_birth' 			then date_of_birth 
			  when @vP11 = 'sex' 					then sex
			  when @vP11 = 'client_language' 		then client_language 
			  when @vP11 = 'physician' 				then physician 
			  when @vP11 = 'allergy'				then allergy 
			  when @vP11 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP11 = 'uda'					then isnull(uda,@uda_title)
			  when @vP11 = 'assessment_type' 		then assessment_type
			  when @vP11 = 'facility_name'			then @vFacName
			  when @vP11 = 'facility_address'		then @vFacAddress
			  when @vP11 = 'initial_admission_date'	then initial_admission_date
			  when @vP11 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP11 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP11 = 'ids'					then ids
		  else NULL end as P11
		, Case  
			  when @vP12 = 'client_name'			then client_name
			  when @vP12 = 'client_number'			then client_id_number
			  when @vP12 = 'client_location'		then location
			  when @vP12 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP12 = 'admission_date'			then admission_date
			  when @vP12 = 'date_of_birth' 			then date_of_birth 
			  when @vP12 = 'sex' 					then sex
			  when @vP12 = 'client_language' 		then client_language 
			  when @vP12 = 'physician' 				then physician 
			  when @vP12 = 'allergy'				then allergy 
			  when @vP12 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP12 = 'uda'					then isnull(uda,@uda_title)
			  when @vP12 = 'assessment_type' 		then assessment_type
			  when @vP12 = 'facility_name'			then @vFacName
			  when @vP12 = 'facility_address'		then @vFacAddress
			  when @vP12 = 'initial_admission_date'	then initial_admission_date
			  when @vP12 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP12 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP12 = 'ids'					then ids
		  else NULL end as P12
		, Case  
			  when @vP13 = 'client_name'			then client_name
			  when @vP13 = 'client_number'			then client_id_number
			  when @vP13 = 'client_location'		then location
			  when @vP13 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP13 = 'admission_date'			then admission_date
			  when @vP13 = 'date_of_birth' 			then date_of_birth 
			  when @vP13 = 'sex' 					then sex
			  when @vP13 = 'client_language' 		then client_language 
			  when @vP13 = 'physician' 				then physician 
			  when @vP13 = 'allergy'				then allergy 
			  when @vP13 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP13 = 'uda'					then isnull(uda,@uda_title)
			  when @vP13 = 'assessment_type' 		then assessment_type
			  when @vP13 = 'facility_name'			then @vFacName
			  when @vP13 = 'facility_address'		then @vFacAddress
			  when @vP13 = 'initial_admission_date'	then initial_admission_date
			  when @vP13 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP13 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP13 = 'ids'					then ids
		  else NULL end as P13
		, Case  
			  when @vP14 = 'client_name'			then client_name
			  when @vP14 = 'client_number'			then client_id_number
			  when @vP14 = 'client_location'		then location
			  when @vP14 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP14 = 'admission_date'			then admission_date
			  when @vP14 = 'date_of_birth' 			then date_of_birth 
			  when @vP14 = 'sex' 					then sex
			  when @vP14 = 'client_language' 		then client_language 
			  when @vP14 = 'physician' 				then physician 
			  when @vP14 = 'allergy'				then allergy 
			  when @vP14 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP14 = 'uda'					then isnull(uda,@uda_title)
			  when @vP14 = 'assessment_type' 		then assessment_type
			  when @vP14 = 'facility_name'			then @vFacName
			  when @vP14 = 'facility_address'		then @vFacAddress
			  when @vP14 = 'initial_admission_date'	then initial_admission_date
			  when @vP14 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP14 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP14 = 'ids'					then ids
		  else NULL end as P14
		, Case  
			  when @vP15 = 'client_name'			then client_name
			  when @vP15 = 'client_number'			then client_id_number
			  when @vP15 = 'client_location'		then location
			  when @vP15 = 'assess_date'			then isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP15 = 'admission_date'			then admission_date
			  when @vP15 = 'date_of_birth' 			then date_of_birth 
			  when @vP15 = 'sex' 					then sex
			  when @vP15 = 'client_language' 		then client_language 
			  when @vP15 = 'physician' 				then physician 
			  when @vP15 = 'allergy'				then allergy
			  when @vP15 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP15 = 'uda'					then isnull(uda,@uda_title)
			  when @vP15 = 'assessment_type' 		then assessment_type
			  when @vP15 = 'facility_name'			then @vFacName
			  when @vP15 = 'facility_address'		then @vFacAddress
			  when @vP15 = 'initial_admission_date'	then initial_admission_date
			  when @vP15 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP15 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP15 = 'ids'					then ids
		  else NULL end as P15
		, Case  
			  when @vP16 = 'client_name'			then client_name
			  when @vP16 = 'client_number'			then client_id_number
			  when @vP16 = 'client_location'		then location
			  when @vP16 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP16 = 'admission_date'			then admission_date
			  when @vP16 = 'date_of_birth' 			then date_of_birth 
			  when @vP16 = 'sex' 					then sex
			  when @vP16 = 'client_language' 		then client_language 
			  when @vP16 = 'physician' 				then physician 
			  when @vP16 = 'allergy'				then allergy
			  when @vP16 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP16 = 'uda'					then isnull(uda,@uda_title)
			  when @vP16 = 'assessment_type' 		then assessment_type
			  when @vP16 = 'facility_name'			then @vFacName
			  when @vP16 = 'facility_address'		then @vFacAddress
			  when @vP16 = 'initial_admission_date'	then initial_admission_date
			  when @vP16 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP16 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP16 = 'ids'					then ids
		  else NULL end as P16
		, Case  
			  when @vP17 = 'client_name'			then client_name
			  when @vP17 = 'client_number'			then client_id_number
			  when @vP17 = 'client_location'		then location
			  when @vP17 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP17 = 'admission_date'			then admission_date
			  when @vP17 = 'date_of_birth' 			then date_of_birth 
			  when @vP17 = 'sex' 					then sex
			  when @vP17 = 'client_language' 		then client_language 
			  when @vP17 = 'physician' 				then physician 
			  when @vP17 = 'allergy'				then allergy
			  when @vP17 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP17 = 'uda'					then isnull(uda,@uda_title)
			  when @vP17 = 'assessment_type' 		then assessment_type
			  when @vP17 = 'facility_name'			then @vFacName
			  when @vP17 = 'facility_address'		then @vFacAddress
			  when @vP17 = 'initial_admission_date'	then initial_admission_date
			  when @vP17 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP17 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP17 = 'ids'					then ids
		  else NULL end as P17
		, Case  
			  when @vP18 = 'client_name'			then client_name
			  when @vP18 = 'client_number'			then client_id_number
			  when @vP18 = 'client_location'		then location
			  when @vP18 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP18 = 'admission_date'			then admission_date
			  when @vP18 = 'date_of_birth' 			then date_of_birth 
			  when @vP18 = 'sex' 					then sex
			  when @vP18 = 'client_language' 		then client_language 
			  when @vP18 = 'physician' 				then physician 
			  when @vP18 = 'allergy'				then allergy 
			  when @vP18 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP18 = 'uda'					then isnull(uda,@uda_title)
			  when @vP18 = 'assessment_type' 		then assessment_type
			  when @vP18 = 'facility_name'			then @vFacName
			  when @vP18 = 'facility_address'		then @vFacAddress
			  when @vP18 = 'initial_admission_date'	then initial_admission_date
			  when @vP18 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP18 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP18 = 'ids'					then ids
		  else NULL end as P18
		, Case  
			  when @vP19 = 'client_name'			then client_name
			  when @vP19 = 'client_number'			then client_id_number
			  when @vP19 = 'client_location'		then location
			  when @vP19 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP19 = 'admission_date'			then admission_date
			  when @vP19 = 'date_of_birth' 			then date_of_birth 
			  when @vP19 = 'sex' 					then sex
			  when @vP19 = 'client_language' 		then client_language 
			  when @vP19 = 'physician' 				then physician 
			  when @vP19 = 'allergy'				then allergy
			  when @vP19 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP19 = 'uda'					then isnull(uda,@uda_title)
			  when @vP19 = 'assessment_type' 		then assessment_type
			  when @vP19 = 'facility_name'			then @vFacName
			  when @vP19 = 'facility_address'		then @vFacAddress
			  when @vP19 = 'initial_admission_date'	then initial_admission_date
			  when @vP19 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP19 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP19 = 'ids'					then ids
		  else NULL end as P19
		, Case  
			  when @vP20 = 'client_name'			then client_name
			  when @vP20 = 'client_number'			then client_id_number
			  when @vP20 = 'client_location'		then location
			  when @vP20 = 'assess_date'			then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')
			  when @vP20 = 'admission_date'			then admission_date
			  when @vP20 = 'date_of_birth' 			then date_of_birth 
			  when @vP20 = 'sex' 					then sex
			  when @vP20 = 'client_language' 		then client_language 
			  when @vP20 = 'physician' 				then physician 
			  when @vP20 = 'allergy'				then allergy 
			  when @vP20 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vP20 = 'uda'					then isnull(uda,@uda_title)
			  when @vP20 = 'assessment_type' 		then assessment_type
			  when @vP20 = 'facility_name'			then @vFacName
			  when @vP20 = 'facility_address'		then @vFacAddress
			  when @vP20 = 'initial_admission_date'	then initial_admission_date
			  when @vP20 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vP20 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vP20 = 'ids'					then ids
		  else NULL end as P20
		, Case  
			  when @vSubP1 = 'client_name'				then client_name
			  when @vSubP1 = 'client_number'			then client_id_number
			  when @vSubP1 = 'client_location'			then location
			  when @vSubP1 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP1 = 'admission_date'			then admission_date
			  when @vSubP1 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP1 = 'sex' 						then sex
			  when @vSubP1 = 'client_language' 			then client_language 
			  when @vSubP1 = 'physician' 				then physician 
			  when @vSubP1 = 'allergy'					then allergy
			  when @vSubP1 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP1 = 'uda'						then uda
			  when @vSubP1 = 'assessment_type' 			then assessment_type
			  when @vSubP1 = 'facility_name'			then @vFacName
			  when @vSubP1 = 'facility_address'			then @vFacAddress
			  when @vSubP1 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP1 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP1 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP1 = 'subids'					then subids
		  else NULL end as SubP1
		, Case  
			  when @vSubP2 = 'client_name'				then client_name
			  when @vSubP2 = 'client_number'			then client_id_number
			  when @vSubP2 = 'client_location'			then location
			  when @vSubP2 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP2 = 'admission_date'			then admission_date
			  when @vSubP2 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP2 = 'sex' 						then sex
			  when @vSubP2 = 'client_language' 			then client_language 
			  when @vSubP2 = 'physician' 				then physician 
			  when @vSubP2 = 'allergy'					then allergy 
			  when @vSubP2 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP2 = 'uda'						then uda
			  when @vSubP2 = 'assessment_type' 			then assessment_type
			  when @vSubP2 = 'facility_name'			then @vFacName
			  when @vSubP2 = 'facility_address'			then @vFacAddress
			  when @vSubP2 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP2 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP2 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP2 = 'subids'					then subids
		  else NULL end as SubP2
		, Case  
			  when @vSubP3 = 'client_name'				then client_name
			  when @vSubP3 = 'client_number'			then client_id_number
			  when @vSubP3 = 'client_location'			then location
			  when @vSubP3 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP3 = 'admission_date'			then admission_date
			  when @vSubP3 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP3 = 'sex' 						then sex
			  when @vSubP3 = 'client_language' 			then client_language 
			  when @vSubP3 = 'physician' 				then physician 
			  when @vSubP3 = 'allergy'					then allergy 
			  when @vSubP3 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP3 = 'uda'						then uda
			  when @vSubP3 = 'assessment_type' 			then assessment_type
			  when @vSubP3 = 'facility_name'			then @vFacName
			  when @vSubP3 = 'facility_address'			then @vFacAddress
			  when @vSubP3 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP3 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP3 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP3 = 'subids'					then subids
		  else NULL end as SubP3
		, Case  
			  when @vSubP4 = 'client_name'				then client_name
			  when @vSubP4 = 'client_number'			then client_id_number
			  when @vSubP4 = 'client_location'			then location
			  when @vSubP4 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP4 = 'admission_date'			then admission_date
			  when @vSubP4 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP4 = 'sex' 						then sex
			  when @vSubP4 = 'client_language' 			then client_language 
			  when @vSubP4 = 'physician' 				then physician 
			  when @vSubP4 = 'allergy'					then allergy 
			  when @vSubP4 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP4 = 'uda'						then uda
			  when @vSubP4 = 'assessment_type' 			then assessment_type
			  when @vSubP4 = 'facility_name'			then @vFacName
			  when @vSubP4 = 'facility_address'			then @vFacAddress
			  when @vSubP4 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP4 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP4 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP4 = 'subids'					then subids
		  else NULL end as SubP4
		, Case  
			  when @vSubP5 = 'client_name'				then client_name
			  when @vSubP5 = 'client_number'			then client_id_number
			  when @vSubP5 = 'client_location'			then location
			  when @vSubP5 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'')  + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP5 = 'admission_date'			then admission_date
			  when @vSubP5 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP5 = 'sex' 						then sex
			  when @vSubP5 = 'client_language' 			then client_language 
			  when @vSubP5 = 'physician' 				then physician 
			  when @vSubP5 = 'allergy'					then allergy 
			  when @vSubP5 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP5 = 'uda'						then uda
			  when @vSubP5 = 'assessment_type' 			then assessment_type
			  when @vSubP5 = 'facility_name'			then @vFacName
			  when @vSubP5 = 'facility_address'			then @vFacAddress
			  when @vSubP5 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP5 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP5 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP5 = 'subids'					then subids
		  else NULL end as SubP5
		, Case  
			  when @vSubP6 = 'client_name'				then client_name
			  when @vSubP6 = 'client_number'			then client_id_number
			  when @vSubP6 = 'client_location'			then location
			  when @vSubP6 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP6 = 'admission_date'			then admission_date
			  when @vSubP6 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP6 = 'sex' 						then sex
			  when @vSubP6 = 'client_language' 			then client_language 
			  when @vSubP6 = 'physician' 				then physician 
			  when @vSubP6 = 'allergy'					then allergy 
			  when @vSubP6 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP6 = 'uda'						then uda
			  when @vSubP6 = 'assessment_type' 			then assessment_type
			  when @vSubP6 = 'facility_name'			then @vFacName
			  when @vSubP6 = 'facility_address'			then @vFacAddress
			  when @vSubP6 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP6 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP6 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP6 = 'subids'					then subids
		  else NULL end as SubP6
		, Case  
			  when @vSubP7 = 'client_name'				then client_name
			  when @vSubP7 = 'client_number'			then client_id_number
			  when @vSubP7 = 'client_location'			then location
			  when @vSubP7 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP7 = 'admission_date'			then admission_date
			  when @vSubP7 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP7 = 'sex' 						then sex
			  when @vSubP7 = 'client_language' 			then client_language 
			  when @vSubP7 = 'physician' 				then physician 
			  when @vSubP7 = 'allergy'					then allergy 
			  when @vSubP7 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP7 = 'uda'						then uda
			  when @vSubP7 = 'assessment_type' 			then assessment_type
			  when @vSubP7 = 'facility_name'			then @vFacName
			  when @vSubP7 = 'facility_address'			then @vFacAddress
			  when @vSubP7 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP7 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP7 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP7 = 'subids'					then subids
		  else NULL end as SubP7
		, Case  
			  when @vSubP8 = 'client_name'				then client_name
			  when @vSubP8 = 'client_number'			then client_id_number
			  when @vSubP8 = 'client_location'			then location
			  when @vSubP8 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP8 = 'admission_date'			then admission_date
			  when @vSubP8 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP8 = 'sex' 						then sex
			  when @vSubP8 = 'client_language' 			then client_language 
			  when @vSubP8 = 'physician' 				then physician 
			  when @vSubP8 = 'allergy'					then allergy 
			  when @vSubP8 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP8 = 'uda'						then uda
			  when @vSubP8 = 'assessment_type' 			then assessment_type
			  when @vSubP8 = 'facility_name'			then @vFacName
			  when @vSubP8 = 'facility_address'			then @vFacAddress
			  when @vSubP8 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP8 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP8 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP8 = 'subids'					then subids
		  else NULL end as SubP8
		, Case  
			  when @vSubP9 = 'client_name'				then client_name
			  when @vSubP9 = 'client_number'			then client_id_number
			  when @vSubP9 = 'client_location'			then location
			  when @vSubP9 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP9 = 'admission_date'			then admission_date
			  when @vSubP9 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP9 = 'sex' 						then sex
			  when @vSubP9 = 'client_language' 			then client_language 
			  when @vSubP9 = 'physician' 				then physician 
			  when @vSubP9 = 'allergy'					then allergy 
			  when @vSubP9 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP9 = 'uda'						then uda
			  when @vSubP9 = 'assessment_type' 			then assessment_type
			  when @vSubP9 = 'facility_name'			then @vFacName
			  when @vSubP9 = 'facility_address'			then @vFacAddress
			  when @vSubP9 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP9 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP9 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP9 = 'subids'					then subids
		  else NULL end as SubP9
		, Case  
			  when @vSubP10 = 'client_name'				then client_name
			  when @vSubP10 = 'client_number'			then client_id_number
			  when @vSubP10 = 'client_location'			then location
			  when @vSubP10 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP10 = 'admission_date'			then admission_date
			  when @vSubP10 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP10 = 'sex' 					then sex
			  when @vSubP10 = 'client_language' 		then client_language 
			  when @vSubP10 = 'physician' 				then physician 
			  when @vSubP10 = 'allergy'					then allergy 
			  when @vSubP10 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP10 = 'uda'						then uda
			  when @vSubP10 = 'assessment_type' 		then assessment_type
			  when @vSubP10 = 'facility_name'			then @vFacName
			  when @vSubP10 = 'facility_address'		then @vFacAddress
			  when @vSubP10 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP10 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP10 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP10 = 'subids'					then subids
		  else NULL end as SubP10
		, Case  
			  when @vSubP11 = 'client_name'				then client_name
			  when @vSubP11 = 'client_number'			then client_id_number
			  when @vSubP11 = 'client_location'			then location
			  when @vSubP11 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP11 = 'admission_date'			then admission_date
			  when @vSubP11 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP11 = 'sex' 					then sex
			  when @vSubP11 = 'client_language' 		then client_language 
			  when @vSubP11 = 'physician' 				then physician 
			  when @vSubP11 = 'allergy'					then allergy 
			  when @vSubP11 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP11 = 'uda'						then uda
			  when @vSubP11 = 'assessment_type' 		then assessment_type
			  when @vSubP11 = 'facility_name'			then @vFacName
			  when @vSubP11 = 'facility_address'		then @vFacAddress
			  when @vSubP11 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP11 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP11 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP11 = 'subids'					then subids
		  else NULL end as SubP11
		, Case  
			  when @vSubP12 = 'client_name'				then client_name
			  when @vSubP12 = 'client_number'			then client_id_number
			  when @vSubP12 = 'client_location'			then location
			  when @vSubP12 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP12 = 'admission_date'			then admission_date
			  when @vSubP12 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP12 = 'sex' 					then sex
			  when @vSubP12 = 'client_language' 		then client_language 
			  when @vSubP12 = 'physician' 				then physician 
			  when @vSubP12 = 'allergy'					then allergy 
			  when @vSubP12 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP12 = 'uda'						then uda
			  when @vSubP12 = 'assessment_type' 		then assessment_type
			  when @vSubP12 = 'facility_name'			then @vFacName
			  when @vSubP12 = 'facility_address'		then @vFacAddress
			  when @vSubP12 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP12 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP12 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP12 = 'subids'					then subids
		  else NULL end as SubP12
		, Case  
			  when @vSubP13 = 'client_name'				then client_name
			  when @vSubP13 = 'client_number'			then client_id_number
			  when @vSubP13 = 'client_location'			then location
			  when @vSubP13 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP13 = 'admission_date'			then admission_date
			  when @vSubP13 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP13 = 'sex' 					then sex
			  when @vSubP13 = 'client_language' 		then client_language 
			  when @vSubP13 = 'physician' 				then physician 
			  when @vSubP13 = 'allergy'					then allergy 
			  when @vSubP13 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP13 = 'uda'						then uda
			  when @vSubP13 = 'assessment_type' 		then assessment_type
			  when @vSubP13 = 'facility_name'			then @vFacName
			  when @vSubP13 = 'facility_address'		then @vFacAddress
			  when @vSubP13 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP13 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP13 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP13 = 'subids'					then subids
		  else NULL end as SubP13
		, Case  
			  when @vSubP14 = 'client_name'				then client_name
			  when @vSubP14 = 'client_number'			then client_id_number
			  when @vSubP14 = 'client_location'			then location
			  when @vSubP14 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP14 = 'admission_date'			then admission_date
			  when @vSubP14 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP14 = 'sex' 					then sex
			  when @vSubP14 = 'client_language' 		then client_language 
			  when @vSubP14 = 'physician' 				then physician 
			  when @vSubP14 = 'allergy'					then allergy 
			  when @vSubP14 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP14 = 'uda'						then uda
			  when @vSubP14 = 'assessment_type' 		then assessment_type
			  when @vSubP14 = 'facility_name'			then @vFacName
			  when @vSubP14 = 'facility_address'		then @vFacAddress
			  when @vSubP14 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP14 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP14 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP14 = 'subids'					then subids
		  else NULL end as SubP14
		, Case  
			  when @vSubP15 = 'client_name'				then client_name
			  when @vSubP15 = 'client_number'			then client_id_number
			  when @vSubP15 = 'client_location'			then location
			  when @vSubP15 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP15 = 'admission_date'			then admission_date
			  when @vSubP15 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP15 = 'sex' 					then sex
			  when @vSubP15 = 'client_language' 		then client_language 
			  when @vSubP15 = 'physician' 				then physician 
			  when @vSubP15 = 'allergy'					then allergy 
			  when @vSubP15 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP15 = 'uda'						then uda
			  when @vSubP15 = 'assessment_type' 		then assessment_type
			  when @vSubP15 = 'facility_name'			then @vFacName
			  when @vSubP15 = 'facility_address'		then @vFacAddress
			  when @vSubP15 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP15 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP15 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP15 = 'subids'					then subids
		  else NULL end as SubP15
		, Case  
			  when @vSubP16 = 'client_name'				then client_name
			  when @vSubP16 = 'client_number'			then client_id_number
			  when @vSubP16 = 'client_location'			then location
			  when @vSubP16 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP16 = 'admission_date'			then admission_date
			  when @vSubP16 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP16 = 'sex' 					then sex
			  when @vSubP16 = 'client_language' 		then client_language 
			  when @vSubP16 = 'physician' 				then physician 
			  when @vSubP16 = 'allergy'					then allergy 
			  when @vSubP16 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP16 = 'uda'						then uda
			  when @vSubP16 = 'assessment_type' 		then assessment_type
			  when @vSubP16 = 'facility_name'			then @vFacName
			  when @vSubP16 = 'facility_address'		then @vFacAddress
			  when @vSubP16 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP16 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP16 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP16 = 'subids'					then subids
		  else NULL end as SubP16
		, Case  
			  when @vSubP17 = 'client_name'				then client_name
			  when @vSubP17 = 'client_number'			then client_id_number
			  when @vSubP17 = 'client_location'			then location
			  when @vSubP17 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP17 = 'admission_date'			then admission_date
			  when @vSubP17 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP17 = 'sex' 					then sex
			  when @vSubP17 = 'client_language' 		then client_language 
			  when @vSubP17 = 'physician' 				then physician 
			  when @vSubP17 = 'allergy'					then allergy 
			  when @vSubP17 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP17 = 'uda'						then uda
			  when @vSubP17 = 'assessment_type' 		then assessment_type
			  when @vSubP17 = 'facility_name'			then @vFacName
			  when @vSubP17 = 'facility_address'		then @vFacAddress
			  when @vSubP17 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP17 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP17 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP17 = 'subids'					then subids
		  else NULL end as SubP17
		, Case  
			  when @vSubP18 = 'client_name'				then client_name
			  when @vSubP18 = 'client_number'			then client_id_number
			  when @vSubP18 = 'client_location'			then location
			  when @vSubP18 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP18 = 'admission_date'			then admission_date
			  when @vSubP18 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP18 = 'sex' 					then sex
			  when @vSubP18 = 'client_language' 		then client_language 
			  when @vSubP18 = 'physician' 				then physician 
			  when @vSubP18 = 'allergy'					then allergy 
			  when @vSubP18 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP18 = 'uda'						then uda
			  when @vSubP18 = 'assessment_type' 		then assessment_type
			  when @vSubP18 = 'facility_name'			then @vFacName
			  when @vSubP18 = 'facility_address'		then @vFacAddress
			  when @vSubP18 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP18 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP18 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP18 = 'subids'					then subids
		  else NULL end as SubP18
		, Case  
			  when @vSubP19 = 'client_name'				then client_name
			  when @vSubP19 = 'client_number'			then client_id_number
			  when @vSubP19 = 'client_location'			then location
			  when @vSubP19 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP19 = 'admission_date'			then admission_date
			  when @vSubP19 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP19 = 'sex' 					then sex
			  when @vSubP19 = 'client_language' 		then client_language 
			  when @vSubP19 = 'physician' 				then physician 
			  when @vSubP19 = 'allergy'					then allergy 
			  when @vSubP19 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP19 = 'uda'						then uda
			  when @vSubP19 = 'assessment_type' 		then assessment_type
			  when @vSubP19 = 'facility_name'			then @vFacName
			  when @vSubP19 = 'facility_address'		then @vFacAddress
			  when @vSubP19 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP19 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP19 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP19 = 'subids'					then subids
		  else NULL end as SubP19
		, Case  
			  when @vSubP20 = 'client_name'				then client_name
			  when @vSubP20 = 'client_number'			then client_id_number
			  when @vSubP20 = 'client_location'			then location
			  when @vSubP20 = 'assess_date'				then  isnull(convert(varchar(10),assess_date, @vdateFormatStyle),'') + ' ' + isnull(substring(convert(varchar(20),assess_date, 120), 12, 5),'')
			  when @vSubP20 = 'admission_date'			then admission_date
			  when @vSubP20 = 'date_of_birth' 			then date_of_birth 
			  when @vSubP20 = 'sex' 					then sex
			  when @vSubP20 = 'client_language' 		then client_language 
			  when @vSubP20 = 'physician' 				then physician 
			  when @vSubP20 = 'allergy'					then allergy 
			  when @vSubP20 = 'Diagnoses'				then CASE WHEN @vis_blank = 1 THEN '' ELSE case when isnull(dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId), '') = '' then 'No Medical Diagnosis Found' else dbo.fn_prp_get_diagnosis(client_id,assess_date,@vFacId) end END
			  when @vSubP20 = 'uda'						then uda
			  when @vSubP20 = 'assessment_type' 		then assessment_type
			  when @vSubP20 = 'facility_name'			then @vFacName
			  when @vSubP20 = 'facility_address'		then @vFacAddress
			  when @vSubP20 = 'initial_admission_date'	then initial_admission_date
			  when @vSubP20 = 'score'					then CASE WHEN ISNULL(score, '') = '' THEN 'NA' ELSE convert(varchar,score) END
			  when @vSubP20 = 'score_category'			then CASE WHEN ISNULL(score_category, '') = '' THEN 'NA' ELSE score_category END
			  when @vSubP20 = 'subids'					then subids
		  else NULL end as SubP20
		, G_set_id
		, G1
		,Dense_rank() over ( ORDER BY CASE WHEN @vSort1='client_name' then client_name
										   WHEN @vSort1='client_number' then client_id_number
										   WHEN @vSort1='client_location' then location
										   ELSE ''
									  END
								  , assess_date DESC
								  , assess_id DESC
								  
								  , section_sequence
								  , sequence
								  , group_no
								  , std_subquestion_no
								  
								  , case when isnumeric(pick_list_sequence)=1 then cast(pick_list_sequence as int) end 
								  , unique_question
								 -- , case when tbWithGroupSet.control_type = 'cp' 
											
									--		then 'Focus: ' +	replace(
									--							replace(
									--							replace(
									--								focus.text1
									--								,char(10),'')
									--								,char(13),'')
									--								, ' ', '')

									--		else null
									--END
								 -- , case when tbWithGroupSet.control_type = 'cp' then question_title else null end desc		
								  ,right('00000000'+ pick_list_value,10)
								  , response 
		) as row_num
		, ROW_NUMBER() OVER ( PARTITION BY client_id, assess_date, assess_id
							  ORDER BY Case when @vSort1='client_name' then client_name
									WHEN @vSort1='client_number' then client_id_number
									WHEN @vSort1='client_location' then location
									ELSE '' end
								  , assess_date DESC
								  , assess_id DESC
								  , section_sequence
								  , sequence
								  , group_no
								  , std_subquestion_no
								  , unique_question
								 --  , case when tbWithGroupSet.control_type = 'cp' 
											
									--		then 'Focus: ' + replace(
									--							replace(
									--							replace(
									--								focus.text1
									--								,char(10),'')
									--								,char(13),'')
									--								,' ' ,'')
																	
									--		else null 
									--END
								 -- , case when tbWithGroupSet.control_type = 'cp' then question_title else null end desc
								  , case when isnumeric(pick_list_sequence)=1 then cast(pick_list_sequence as int) end 
								  , right('00000000'+ pick_list_value,10)
		) as header_row
		, @vTermFocus + replace(
																replace(
																replace(
																	focus.text1
																	,char(10),'')
																	,char(13),'')
																	,' ' ,'') as cp_focus_sort
		from tbWithGroupSet

		left outer join dbo.cp_std_need focus WITH (NOLOCK)
			on convert(varchar(20),focus.std_need_id) = tbWithGroupSet.pick_list_value
			and tbWithGroupSet.control_type = 'cp'

	)
	, tb
	as
	(

	Select TOP 100 PERCENT 
	@vFacId as fac_id
	, client_id
	, client_name
	, client_id_number
	, location
	, admission_date
	, initial_admission_date
	, mrn_number
	, sex
	, date_of_birth
	, physician
	, allergy
	, ids
	, std_assess_id
	, assess_id
	, assess_date as effective_date
	, assessment_type
	, uda
	, section_no
	, replace(replace(
		section_title
		,'&lt;', '<') 
				,'&gt;', '>') 
				as section_title
	, section_sequence
	, group_no
	,  replace(replace(group_title 
				,'&lt;', '<') 
				,'&gt;', '>') 
				as group_title
	, replace(replace( 
				group_text ,'&lt;', '<') 
				,'&gt;', '>') 
				as group_text
	, group_layout_style
	, sequence
	, std_question_no
	, std_subquestion_no
	, std_subquestion_AB
	, replace(replace(
				question_title
				,'&lt;', '<') 
				,'&gt;', '>') 
				as question_title
	, replace(replace(
				question_text
				,'&lt;', '<') 
				,'&gt;', '>') 
				as question_text
	, control_type
	, control_length
	, response_required
	, pick_list_id
	, pick_list_name
	, replace(replace(
				pick_list_value
				,'&lt;', '<') 
				,'&gt;', '>') 
				as pick_list_value
	, replace(	replace(replace(
				pick_list_description
				,'&lt;', '<') 
				,'&gt;', '>') 
				,'&amp;', '&') 
				as pick_list_description
	, pick_list_sequence		
	, pick_list_value_effective_date
	, pick_list_value_ineffective_date
	, assess_type_code
	, assess_status
	,  replace(replace(
				resp_item_value
				,'&lt;', '<') 
				,'&gt;', '>') 
				as resp_item_value
	, replace(replace(response
	,'&lt;', '<') 
				,'&gt;', '>') 
				as response

	, score 
	, score_category
	, strikeout_flag
	, strikeout_by
	, strikeout_date
	, strikeout_reason
	, include_signature_section_flag
	, signed_by
	, signed_date
	, cust_hdr
	, cust_sub_hdr
	, cust_hdr_long
	, cust_sub_hdr_long
	, @vHeaderColumnCount as header_column_count
 	, P_set_id 
	, cp_focus_sort
	, case when header_row= 1 then 
		replace (	(	  CASE WHEN @vP1_disp_name IS NULL AND P1 IS NULL THEN ' ' ELSE -- NOTE: single space is required here
						  CASE WHEN @vP1_disp_name  = 'Identifiers' then '' + isnull(P1,'')  + @vSeparator2 ELSE isnull( @vP1_disp_name,'')   + @vSeparator + isnull(P1,'') + @vSeparator2 end
						+ CASE WHEN @vP2_disp_name  = 'Identifiers' then '' + isnull(P2,'')  + @vSeparator2 ELSE isnull( @vP2_disp_name,'' )  + @vSeparator + isnull(P2,'') + @vSeparator2 END 
						+ CASE WHEN @vP3_disp_name  = 'Identifiers' then '' + isnull(P3,'')  + @vSeparator2 ELSE isnull( @vP3_disp_name,'' )  + @vSeparator + isnull(P3,'') + @vSeparator2 END 
						+ CASE WHEN @vP4_disp_name  = 'Identifiers' then '' + isnull(P4,'')  + @vSeparator2 ELSE isnull( @vP4_disp_name,'' )  + @vSeparator + isnull(P4,'') + @vSeparator2 END 
						+ CASE WHEN @vP5_disp_name  = 'Identifiers' then '' + isnull(P5,'')  + @vSeparator2 ELSE isnull( @vP5_disp_name,'' )  + @vSeparator + isnull(P5,'') + @vSeparator2 END 
						+ CASE WHEN @vP6_disp_name  = 'Identifiers' then '' + isnull(P6,'')  + @vSeparator2 ELSE isnull( @vP6_disp_name,'' )  + @vSeparator + isnull(P6,'') + @vSeparator2 END 
						+ CASE WHEN @vP7_disp_name  = 'Identifiers' then '' + isnull(P7,'')  + @vSeparator2 ELSE isnull( @vP7_disp_name,'' )  + @vSeparator + isnull(P7,'') + @vSeparator2 END 
						+ CASE WHEN @vP8_disp_name  = 'Identifiers' then '' + isnull(P8,'')  + @vSeparator2 ELSE isnull( @vP8_disp_name,'' )  + @vSeparator + isnull(P8,'') + @vSeparator2 END 
						+ CASE WHEN @vP9_disp_name  = 'Identifiers' then '' + isnull(P9,'')  + @vSeparator2 ELSE isnull( @vP9_disp_name,'' )  + @vSeparator + isnull(P9,'') + @vSeparator2 END 
						+ CASE WHEN @vP10_disp_name = 'Identifiers' then '' + isnull(P10,'') + @vSeparator2 ELSE isnull( @vP10_disp_name,'' ) + @vSeparator + isnull(P10,'')+ @vSeparator2 END 
						+ CASE WHEN @vP11_disp_name = 'Identifiers' then '' + isnull(P11,'') + @vSeparator2 ELSE isnull( @vP11_disp_name,'' ) + @vSeparator + isnull(P11,'')+ @vSeparator2 END 
						+ CASE WHEN @vP12_disp_name = 'Identifiers' then '' + isnull(P12,'') + @vSeparator2 ELSE isnull( @vP12_disp_name,'' ) + @vSeparator + isnull(P12,'')+ @vSeparator2 END 
						+ CASE WHEN @vP13_disp_name = 'Identifiers' then '' + isnull(P13,'') + @vSeparator2 ELSE isnull( @vP13_disp_name,'' ) + @vSeparator + isnull(P13,'')+ @vSeparator2 END 
						+ CASE WHEN @vP14_disp_name = 'Identifiers' then '' + isnull(P14,'') + @vSeparator2 ELSE isnull( @vP14_disp_name,'' ) + @vSeparator + isnull(P14,'')+ @vSeparator2 END 
						+ CASE WHEN @vP15_disp_name = 'Identifiers' then '' + isnull(P15,'') + @vSeparator2 ELSE isnull( @vP15_disp_name,'' ) + @vSeparator + isnull(P15,'')+ @vSeparator2 END 
						+ CASE WHEN @vP16_disp_name = 'Identifiers' then '' + isnull(P16,'') + @vSeparator2 ELSE isnull( @vP16_disp_name,'' ) + @vSeparator + isnull(P16,'')+ @vSeparator2 END 
						+ CASE WHEN @vP17_disp_name = 'Identifiers' then '' + isnull(P17,'') + @vSeparator2 ELSE isnull( @vP17_disp_name,'' ) + @vSeparator + isnull(P17,'')+ @vSeparator2 END 
						+ CASE WHEN @vP18_disp_name = 'Identifiers' then '' + isnull(P18,'') + @vSeparator2 ELSE isnull( @vP18_disp_name,'' ) + @vSeparator + isnull(P18,'')+ @vSeparator2 END 
						+ CASE WHEN @vP19_disp_name = 'Identifiers' then '' + isnull(P19,'') + @vSeparator2 ELSE isnull( @vP19_disp_name,'' ) + @vSeparator + isnull(P19,'')+ @vSeparator2 END 
						+ CASE WHEN @vP20_disp_name = 'Identifiers' then '' + isnull(P20,'') + @vSeparator2 ELSE isnull( @vP20_disp_name,'' ) + @vSeparator + isnull(P20,'')+ @vSeparator2 END 
					END),'UVWXYZZYXWVU','')
			ELSE '' end
		as P1
	, case when header_row= 1 then 
		replace ((	CASE WHEN @vSubP1_disp_name IS NULL AND SubP1 IS NULL THEN ' ' ELSE -- NOTE: single space is required here
						  CASE WHEN @vSubP1_disp_name = 'Identifiers' then '' + isnull(SubP1,'')+ @vSeparator2 ELSE isnull( @vSubP1_disp_name,'' ) + @vSeparator + isnull(SubP1,'') + @vSeparator2 end
						+ CASE WHEN @vSubP2_disp_name = 'Identifiers' then '' + isnull(SubP2,'')+ @vSeparator2 ELSE isnull( @vSubP2_disp_name,'' ) + @vSeparator + isnull(SubP2,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP3_disp_name = 'Identifiers' then '' + isnull(SubP3,'')+ @vSeparator2 ELSE isnull( @vSubP3_disp_name,'' ) + @vSeparator + isnull(SubP3,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP4_disp_name = 'Identifiers' then '' + isnull(SubP4,'')+ @vSeparator2 ELSE isnull( @vSubP4_disp_name,'' ) + @vSeparator + isnull(SubP4,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP5_disp_name = 'Identifiers' then '' + isnull(SubP5,'')+ @vSeparator2 ELSE isnull( @vSubP5_disp_name,'' ) + @vSeparator + isnull(SubP5,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP6_disp_name = 'Identifiers' then '' + isnull(SubP6,'')+ @vSeparator2 ELSE isnull( @vSubP6_disp_name,'' ) + @vSeparator + isnull(SubP6,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP7_disp_name = 'Identifiers' then '' + isnull(SubP7,'')+ @vSeparator2 ELSE isnull( @vSubP7_disp_name,'' ) + @vSeparator + isnull(SubP7,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP8_disp_name = 'Identifiers' then '' + isnull(SubP8,'')+ @vSeparator2 ELSE isnull( @vSubP8_disp_name,'' ) + @vSeparator + isnull(SubP8,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP9_disp_name = 'Identifiers' then '' + isnull(SubP9,'')+ @vSeparator2 ELSE isnull( @vSubP9_disp_name,'' ) + @vSeparator + isnull(SubP9,'') + @vSeparator2 END 
						+ CASE WHEN @vSubP10_disp_name = 'Identifiers' then '' + isnull(SubP10,'')+ @vSeparator2 ELSE isnull( @vSubP10_disp_name,'' ) + @vSeparator + isnull(SubP10,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP11_disp_name = 'Identifiers' then '' + isnull(SubP11,'')+ @vSeparator2 ELSE isnull( @vSubP11_disp_name,'' ) + @vSeparator + isnull(SubP11,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP12_disp_name = 'Identifiers' then '' + isnull(SubP12,'')+ @vSeparator2 ELSE isnull( @vSubP12_disp_name,'' ) + @vSeparator + isnull(SubP12,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP13_disp_name = 'Identifiers' then '' + isnull(SubP13,'')+ @vSeparator2 ELSE isnull( @vSubP13_disp_name,'' ) + @vSeparator + isnull(SubP13,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP14_disp_name = 'Identifiers' then '' + isnull(SubP14,'')+ @vSeparator2 ELSE isnull( @vSubP14_disp_name,'' ) + @vSeparator + isnull(SubP14,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP15_disp_name = 'Identifiers' then '' + isnull(SubP15,'')+ @vSeparator2 ELSE isnull( @vSubP15_disp_name,'' ) + @vSeparator + isnull(SubP15,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP16_disp_name = 'Identifiers' then '' + isnull(SubP16,'')+ @vSeparator2 ELSE isnull( @vSubP16_disp_name,'' ) + @vSeparator + isnull(SubP16,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP17_disp_name = 'Identifiers' then '' + isnull(SubP17,'')+ @vSeparator2 ELSE isnull( @vSubP17_disp_name,'' ) + @vSeparator + isnull(SubP17,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP18_disp_name = 'Identifiers' then '' + isnull(SubP18,'')+ @vSeparator2 ELSE isnull( @vSubP18_disp_name,'' ) + @vSeparator + isnull(SubP18,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP19_disp_name = 'Identifiers' then '' + isnull(SubP19,'')+ @vSeparator2 ELSE isnull( @vSubP19_disp_name,'' ) + @vSeparator + isnull(SubP19,'')+ @vSeparator2 END 
						+ CASE WHEN @vSubP20_disp_name = 'Identifiers' then '' + isnull(SubP20,'')+ @vSeparator2 ELSE isnull( @vSubP20_disp_name,'' ) + @vSeparator + isnull(SubP20,'')+ @vSeparator2 END 
				END),'UVWXYZZYXWVU','') 
			ELSE '' end
		as SubP1
	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, Null as G2
	, Null as G3
	,Case when @vFooter = 'footer_2' then 
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator	
--		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
--		 when isnull(@vfooter,'footer_1') = 'footer_1' then
--			client_name
--			else NULL end
		 when @vFooter = 'footer_1' then
			client_name
		else  
			signed_by			+ @vSeparator + '' + @vSeparator
	      + signed_date			+ @vSeparator + '' + @vSeparator	
		end  
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, header_row
	, print_s
	, replace(replace(replace(replace(
				ams_key
				,'&lt;', '<') 
				,'&gt;', '>') ,'&amp;', '&'), '"','&#34;')
				as ams_key
	, file_metadata_id
   	from tbWithSort
	)

	Select 
		  case when tb.std_assess_id is null then null else tb.fac_id end fac_id
		-- tb.fac_id
		,  tb.std_assess_id
		,  tb.assess_id
		,  tb.effective_date
		,  tb.assessment_type
		,  tb.uda
		,  case when tb.std_assess_id is null then '' else tb.section_no end section_no
		,  case when tb.std_assess_id is null then '' else dbo.fn_scape_characters(rtrim(tb.section_title), '<')	 end section_title
		,  tb.section_sequence
		,  tb.group_no
		, dbo.fn_scape_characters(rtrim(tb.group_title), '<')		as group_title
		
		, dbo.fn_scape_characters(rtrim(tb.group_text) , '<')	as group_text

		,  tb.group_layout_style
		,  tb.sequence
		,  tb.std_question_no
		,  tb.std_subquestion_no
		,  tb.std_subquestion_AB

		, dbo.fn_scape_characters( rtrim(tb.question_title), '<') as question_title
		--, tb.question_title

		, dbo.fn_scape_characters(	rtrim(tb.question_text), '<')		as question_text

		,  tb.control_type
		,  tb.control_length
		,  tb.response_required
		,  tb.pick_list_id
		,  tb.pick_list_name
		,  dbo.fn_scape_characters(	rtrim(tb.pick_list_value), '<')	as pick_list_value
		--,  tb.pick_list_value
		, dbo.fn_scape_characters( rtrim(
				
				tb.pick_list_description)
				, '<') as pick_list_description	

		,  tb.pick_list_sequence		
		,  tb.pick_list_value_effective_date
		,  tb.pick_list_value_ineffective_date
		,  tb.assess_type_code
		,  tb.assess_status
		
		, dbo.fn_scape_characters(	rtrim(tb.resp_item_value), '<')			as resp_item_value 

		,  tb.response
		,  tb.score 
		,  tb.score_category
		,  tb.strikeout_flag
		,  tb.strikeout_by
		,  tb.strikeout_date
		,  tb.strikeout_reason
		,  tb.include_signature_section_flag
		,  tb.signed_by

		,  tb.signed_date
		,  tb.header_column_count
		
		,  tb.P_set_id   ---0/1
		, CASE WHEN  tb.header_row = 1 THEN LEFT(P1,
				   CASE 
						WHEN charindex('Title' + @vSeparator, P1) <> 0 then charindex('Title' + @vSeparator, P1)
						WHEN charindex('Allergies' + @vSeparator, P1) <> 0 then charindex('Allergies' + @vSeparator, P1)
						WHEN charindex('Diagnoses' + @vSeparator, P1) <> 0 then charindex('Diagnoses' + @vSeparator, P1)
						ELSE len(P1) + 1 END - 1
					) -- left part
					+ isnull(cust_hdr, '') -- middle part
					+ SUBSTRING(P1,
					CASE 
						WHEN charindex('Title' + @vSeparator, P1) <> 0 then charindex('Title' + @vSeparator, P1)
						WHEN charindex('Allergies' + @vSeparator, P1) <> 0 then charindex('Allergies' + @vSeparator, P1)
						WHEN charindex('Diagnoses' + @vSeparator, P1) <> 0 then charindex('Diagnoses' + @vSeparator, P1)
						ELSE len(P1) + 1 END
					, 8000) -- right part
				ELSE ''
		  END AS P1
		, CASE WHEN  tb.header_row = 1 THEN LEFT(SubP1,
				   CASE 
						WHEN charindex('Title' + @vSeparator, SubP1) <> 0 then charindex('Title' + @vSeparator, SubP1)
						WHEN charindex('Allergies' + @vSeparator, SubP1) <> 0 then charindex('Allergies' + @vSeparator, SubP1)
						WHEN charindex('Diagnoses' + @vSeparator, SubP1) <> 0 then charindex('Diagnoses' + @vSeparator, SubP1)
						ELSE len(SubP1) + 1 END - 1
					) -- left part
					+ isnull(cust_sub_hdr, '') -- middle part
					+ SUBSTRING(SubP1,
					CASE 
						WHEN charindex('Title' + @vSeparator, SubP1) <> 0 then charindex('Title' + @vSeparator, SubP1)
						WHEN charindex('Allergies' + @vSeparator, SubP1) <> 0 then charindex('Allergies' + @vSeparator, SubP1)
						WHEN charindex('Diagnoses' + @vSeparator, SubP1) <> 0 then charindex('Diagnoses' + @vSeparator, SubP1)
						ELSE len(SubP1) + 1 END
					, 8000) -- right part
				ELSE ''
		  END AS SubP1

		, CASE WHEN  tb.header_row = 1 then reverse(stuff(reverse(cust_hdr_long),1,10,'')) else '' end P1_long
		, CASE WHEN  tb.header_row = 1 then reverse(stuff(reverse(cust_sub_hdr_long),1,10,'')) else '' end SubP1_long

		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		--, col_width
		, (case when row_num = 1 then status_code else null end )status_code 
		, (case when row_num = 1 then isnull(status_text,'')  + isnull(' Error from term:  '  + @vtermErrorMsg,'') else null end )status_text	
		,row_num
		,cp_focus_sort
		, print_s
		--, null [file_name]
		--, null pixel_height
		--, null pixel_width
		--, convert(image,null) image_data

		, pix.[file_name]
		,pix.pixel_height
		,pix.pixel_width
		, case when row_num = 1 then  pix.image_data else null end as image_data
		,dbo.fn_scape_characters(	rtrim(tb.ams_key), '<') as ams_key 
		,file_metadata as file_metadata_id
	from tb
		left outer join 
			(select cfg_pix.[file_name]
				,cfg_pix.pixel_height
				,cfg_pix.pixel_width
				,cfg_pix.image_data
				, pix_map.std_assess_id
				,cfg_pix.fac_id
		 from dbo.cfg_image cfg_pix with (nolock)
			inner join dbo.as_std_assessment_cfg_image_mapping pix_map WITH (NOLOCK)
			on cfg_pix.image_id = pix_map.image_id
			) pix
			on pix.std_assess_id = tb.std_assess_id
		OUTER APPLY (	SELECT	 STUFF(ids, 1, LEN(@vSeparator), '')
						FROM	(	SELECT @vSeparator + cast(file_metadata_id as varchar(20))
									FROM dbo.as_assessment_file_mapping m with (nolock)
									WHERE m.assess_id = tb.assess_id
									FOR XML PATH ('')
								) AS f (ids)
					) fm (file_metadata)				
			 
		
		where (@vrecnum = 0 OR header_row <= @vrecnum)  -- this condition was added to help jrxml debug the template because of too many control types and lay outs 

	Order by  row_num

	set @vgsStepEndTime=GETDATE()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'



END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(error_number() as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text + 'Error from term:  ' + isnull(@vtermErrorMsg,'')
	END 


	Select 
		  NULL as fac_id
		, NULL as std_assess_id
		, NULL as assess_id
		, NULL as effective_date
		, NULL as assessment_type
		, NULL as uda
		, NULL as section_no
		, NULL as section_title
		, NULL as section_sequence
		, NULL as group_no
		, NULL as group_title
		, NULL as group_text
		, NULL as group_layout_style
		, NULL as sequence
		, NULL as std_question_no
		, NULL as std_subquestion_no
		, NULL as std_subquestion_AB
		, NULL as question_title
		, NULL as question_text
		, NULL as control_type
		, NULL as control_length
		, NULL as response_required
		, NULL as pick_list_id
		, NULL as pick_list_name
		, NULL as pick_list_value
		, NULL as pick_list_description	
		, NULL as pick_list_sequence		
		, NULL as pick_list_value_effective_date
		, NULL as pick_list_value_ineffective_date
		, NULL as assess_type_code
		, NULL as assess_status
		, NULL as resp_item_value
		, NULL as response
		, NULL as score 
		, NULL as score_category
		, NULL as strikeout_flag
		, NULL as strikeout_by
		, NULL as strikeout_date
		, NULL as include_signature_section_flag
		, NULL as strikeout_reason
		, NULL as signed_by
		, NULL as signed_date
		, NULL as header_column_count
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as SubP1
		, NULL as P1_long
		, NULL as SubP1_long
		, NULL as P2
		, NULL as P3
		, null as print_s
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, null as cp_focus_sort
		, @status_code as status_code
		, @status_text + isnull(' Error from term:  '  + @vtermErrorMsg,'')  as status_text	
		, NULL as assess_id
		, NULL as row_num
		, null [file_name]
		, null pixel_height
		, null pixel_width
		, convert(image,null) as image_data
		, null as ams_key 
		, null as file_metadata_id
		
END CATCH 

RETURN 

END
GO
GRANT EXECUTE ON  dbo.sproc_prp_rl_ocpc_uda_report  to PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_ocpc_uda_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_ocpc_uda_report.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_scrm_list_getActivity.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Purpose: This procedure is used to return a paged, sorted list of Activities in CRM
--             
-- Written By:          Nick Kuin
--
--Parameters
--     @activityId              
--     @activityTypeId          
--     @activitySubTypeId         
--     @includeEmptySubType       - flag to search for explicit nulls for subtypes
--     @entityId                  
--     @userId                    
--     @priorityId                
--     @statusId                   
--     @categoryId                - entity type id search, ignored if null 
--     @minSchedDate              - activities after this date will displayed, ignored if null 
--     @maxSchedDate              - activities up to this date will be displayed, ignored if null
--     @sortCol                   
--     @sortOrder                
--     @offset                   
--     @limit                     
--     @accessibleLeadFacIds      -  A list of facilities in which the user has lead access to 
--     @accessibleAccountFacIds   - A list of facilities in which the user has account access to
--     @includeProxyLeads         - flag to include activities attached to proxy leads in result
--     @includeOnlySchedAndInProg - flag to include to only return scheduled and in progress activities
--  
--
--
-- Returns three result sets:
--   1. An activity or a list of activities matching the given criteria.
--   2. A list of entities (view_scrm_entity) participating in that entity.
--   3. A list of users (sec_user) participating in that entity.
--
-- Revision History:
-- 2018-05-22  Thanuja Punna  - Re-write to optimize query plan (CORE-15348)
-- 2018-06-11  Michael Dickey - Add activity owner login name to returned columns (CORE-15389)
-- 2018-06-13  Thanuja Punna  - removed count(*) to avoid table spool and introduced a single table to split integers from input parameters(CORE-17043)
-- 2019-02-04  Thanuja Punna  - added input parameter to include only scheduled activities and returning primary contact email(CORE-14172)
-- 2020-08-26  Iurie Blagodarenco - Changed FOR XML PATH to FOR JSON PATH to improve performance (CORE-69626)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_scrm_list_getActivity' and ROUTINE_TYPE = 'PROCEDURE' )
   DROP PROCEDURE dbo.sproc_scrm_list_getActivity

GO
CREATE PROCEDURE [dbo].[sproc_scrm_list_getActivity]
   @activityId                 INT =  NULL
  ,@activityTypeId             VARCHAR(MAX) =  NULL
  ,@activitySubTypeId          VARCHAR(MAX) =  NULL
  ,@includeEmptySubType        BIT = 0
  ,@entityId                   BIGINT =  NULL
  ,@userId                     VARCHAR(MAX) =  NULL
  ,@priorityId                 VARCHAR(MAX) =  NULL
  ,@statusId                   VARCHAR(MAX) =  NULL
  ,@categoryId                 VARCHAR(MAX) =  NULL
  ,@minSchedDate               DATETIME =  NULL
  ,@maxSchedDate               DATETIME =  NULL
  ,@sortCol                    VARCHAR(25) =  'activity_id'
  ,@sortOrder                  VARCHAR(4) =   'ASC'
  ,@offset                     INT = 0
  ,@limit                      INT = NULL
  ,@accessibleLeadFacIds       VARCHAR(MAX) = NULL
  ,@accessibleAccountFacIds    VARCHAR(MAX)  = NULL
  ,@includeProxyLeads          BIT = 1
  ,@includeOnlyOpenLeads	   BIT = 0
  ,@includeEmptyFacility	   BIT = 1
  ,@includeOnlySchedAndInProg  BIT = 0
  ,@DebugMe                    CHAR(1) = 'N'
  ,@status_code                INT OUT
  ,@status_text                VARCHAR(3000) OUT
AS

SET NOCOUNT ON;

----Local Variables
DECLARE  @vStep INT
		,@vActivityId					INT
		,@vActivityTypeId				VARCHAR(MAX)
		,@vActivitySubTypeId			VARCHAR(MAX)
		,@vIncludeEmptySubType			BIT
		,@vEntityId						BIGINT
		,@vUserId						VARCHAR(MAX)
		,@vPriorityId					VARCHAR(MAX)
		,@vStatusId						VARCHAR(MAX)
		,@vCategoryId					VARCHAR(MAX)
		,@vMinSchedDate					DATETIME
		,@vMaxSchedDate					DATETIME
		,@vSortCol						VARCHAR(25)
		,@vSortOrder					VARCHAR(4)
		,@vOffset						INT
		,@vLimit						INT
		,@vUserAccessibleLeadFacIds		VARCHAR(MAX)
		,@vUserAccessibleAccountFacIds	VARCHAR(MAX)
		,@vIncludeProxyLeads			BIT
		,@vIncludeOnlyOpenLeads			BIT
		,@vParticipantRoleRegId			INT
		,@vLeadExists					BIT
		,@vPlacementExists				BIT
		,@vIncludeEmptyFacility			BIT
		,@vIncludeOnlySchedAndInProg	BIT

SET @vActivityId					= @activityId
SET @vActivityTypeId				= @activityTypeId
SET @vActivitySubTypeId				= @activitySubTypeId
SET @vIncludeEmptySubType			= @includeEmptySubType
SET @vEntityId						= @entityId
SET @vUserId						= @userId
SET @vPriorityId					= @priorityId
SET @vStatusId						= @statusId
SET @vCategoryId					= @categoryId
SET @vMinSchedDate					= @minSchedDate
SET @vMaxSchedDate					= @maxSchedDate
SET @vSortCol						= @sortCol
SET @vSortOrder						= @sortOrder
SET @vOffset						= @offset
SET @vLimit							= @limit
SET @vUserAccessibleLeadFacIds		= @accessibleLeadFacIds
SET @vUserAccessibleAccountFacIds	= @accessibleAccountFacIds
SET @vIncludeProxyLeads				= @includeProxyLeads
SET @vIncludeOnlyOpenLeads			= @includeOnlyOpenLeads
SET @vIncludeEmptyFacility			= @includeEmptyFacility
SET @vIncludeOnlySchedAndInProg		= @includeOnlySchedAndInProg

CREATE TABLE #useraccessibleaccntandleads 
(
		 [entity_id] INT
		,entity_type CHAR(1)
		,mpi_id INT
		,display_name varchar (150)
		,primary_contact_id BIGINT
		,entity_state INT
		,facilities nvarchar(max)
)
CREATE NONCLUSTERED INDEX #useraccessibleaccntandleads__entityId_CL_IX ON #useraccessibleaccntandleads ([entity_id])
INCLUDE ([entity_type],[mpi_id],[display_name],[primary_contact_id],[entity_state]);

CREATE TABLE #useraccessibleaccounts
(
		[entity_id]			BIGINT,
		description			varchar(375)
);
CREATE CLUSTERED INDEX #useraccessibleaccounts__entityId_CL_IX ON #useraccessibleaccounts ([entity_id]);

CREATE TABLE #category
(		
		category_id CHAR(1)
);
CREATE CLUSTERED INDEX #category_CL_IX ON #category ([category_id]);

--holds final result set to send to client
CREATE TABLE #activity (
    total_count int,
	activity_id int,
	std_activity_type_id int,
	std_activity_status_id int,
	std_activity_priority_id int,
	std_activity_result_id int,
	subject varchar(60),
	description varchar(1000),
	scheduled_start datetime,
	scheduled_end datetime,
	direction char(1),
	activity_class char(1),
	activity_type varchar(60),
	activity_status varchar(60),
	activity_priority varchar(60), 
	priority_rank int, 
	activity_result varchar(60),
	owner_id int ,
	activity_owner varchar(50),
	activity_owner_login varchar(60),
	created_by varchar(60),
	created_date datetime,
	revision_by varchar(60),
	revision_date datetime,
	deleted char(1),
	deleted_by varchar(60),
	deleted_date datetime,
	location varchar(100),
	code char(3),
	std_activity_sub_type_id int,
	activity_subtype varchar(50),
	related_entity_name varchar (150),
	category_id CHAR(1),
	related_entity_id int,
	primary_contact_display_name varchar (102),
	facilities nvarchar(max),
	primary_contact_email varchar (75)
);

--split int table
CREATE TABLE #splitINT(
	IdType CHAR(1) NOT NULL, 
	Id INT NOT NULL, 
	PRIMARY KEY ( IdType, Id) 

)

CREATE TABLE #partitioned_facs(
       entity_id BIGINT NOT NULL,
       facility varchar(375),
       PRIMARY KEY (entity_id,facility) 
);

--handle the input parameters in temp tables

--user accessible facs for leads (L)
--#useraccessibleleadfacs
INSERT into #splitINT SELECT 'L',  Cast(items as INT) FROM dbo.Split(@vUserAccessibleLeadFacIds,',')

--user accessible facs for accounts
--#useraccessibleaccntfacs
INSERT into #splitINT SELECT 'A', Cast(items as INT) FROM dbo.Split(@vUserAccessibleAccountFacIds,',')

--#activitytype
INSERT into #splitINT SELECT 'T', Cast(items as INT) from dbo.Split(@vActivityTypeId,',')

--#activitysubtype
INSERT into #splitINT SELECT 'S', Cast(items as INT) from dbo.Split(@vActivitySubTypeId,',')

--Lead or Account entity ids
--#entity
INSERT into #splitINT SELECT 'E', Cast(items as INT) from dbo.Split(@vEntityId,',')

--#users
INSERT into #splitINT SELECT 'U', Cast(items as INT) from dbo.Split(@vUserId,',')

--#priority
INSERT into #splitINT SELECT 'P', Cast(items as INT) from dbo.Split(@vPriorityId,',')

--#status 
INSERT into #splitINT SELECT 'I', Cast(items as INT) from dbo.Split(@vStatusId,',')

INSERT into #category SELECT items from dbo.Split(@vCategoryId,',')

--all the facilities user has permission to view accounts
;WITH accessibleFacs_CTE (fac_id, regional_id, prov, name, lob)
AS 
(
	SELECT fac.fac_id, fac.regional_id, fac.prov , fac.name,null--, r.description as lob
	FROM dbo.facility fac with (nolock)
	  INNER JOIN #splitINT fl on fac.fac_id = fl.id AND fl.IdType='A'
	  --INNER JOIN regions r with (nolock) ON fac.regional_id = r.regional_id
),
crm_account_facilities
AS
(
	SELECT sa.[entity_id], eef.ext_fac_id,eef.state_code, eef.reg_id, eef.fac_id
	FROM scrm_account sa with (nolock)
		INNER JOIN dbo.emc_ext_facilities eef with (nolock) on sa.ext_fac_id = eef.ext_fac_id
)
INSERT INTO #useraccessibleaccounts ([entity_id], description) --accounts entities with user permissions
	SELECT crm.[entity_id], NULL --reg.lob--, NULL, NULL
	FROM crm_account_facilities crm
	INNER JOIN accessibleFacs_CTE reg ON crm.reg_id = reg.regional_id AND reg.regional_id IS NOT NULL
UNION
	SELECT crm.[entity_id], NULL --ISNULL (sc.lob,sc.prov) --NULL, sc.prov, NULL
	FROM crm_account_facilities crm
		INNER JOIN accessibleFacs_CTE sc ON crm.state_code = sc.prov  AND sc.prov IS NOT NULL
UNION
	SELECT crm.[entity_id], NULL --fac.name --NULL, NULL, fac.name
	FROM crm_account_facilities crm
		INNER JOIN accessibleFacs_CTE fac ON crm.fac_id = fac.fac_id 
UNION
	SELECT crm.[entity_id], NULL --'corp', NULL, NULL, NULL
	FROM crm_account_facilities crm
	WHERE crm.fac_id = -1 AND crm.state_code IS NULL AND (crm.reg_id IS NULL OR crm.reg_id = -1)

--select * from #useraccessibleaccounts

-- generated comma separated facilities for the lead's Possible Placements
INSERT INTO #partitioned_facs (entity_id, facility)
   	SELECT l.entity_id, f.name as facility
  	FROM scrm_lead l 
    	INNER JOIN dbo.scrm_possible_placement pp with (nolock) ON l.[entity_id]= pp.lead_id 
        INNER JOIN #splitINT input ON pp.fac_id = input.id AND input.IdType='L'
        INNER JOIN dbo.facility f ON pp.fac_id = f.fac_id

;WITH useraccessibleleads
AS(
		SELECT p2.entity_id,
			facilities = JSON_VALUE(
				REPLACE((SELECT _ = p1.facility 
						FROM #partitioned_facs p1 
						WHERE p1.entity_id = p2.entity_id FOR JSON PATH)
						,'"},{"_":"',','), '$[0]._'
			)
		FROM #partitioned_facs as p2
		GROUP BY p2.entity_id
	UNION
		SELECT l.[entity_id], NULL -- leads with no possible placements (so viewed by everyone)
	  	FROM dbo.scrm_lead l with (nolock) LEFT JOIN dbo.scrm_possible_placement pp with (nolock) ON l.[entity_id] = pp.lead_id
	  	WHERE @vIncludeEmptyFacility = 1 AND pp.id IS NULL
)
INSERT INTO #useraccessibleaccntandleads ([entity_id], entity_type, mpi_id,  display_name, primary_contact_id, entity_state, facilities )
SELECT accessibleEntities.[entity_id], accessibleEntities.entity_type, accessibleEntities.mpi_id, accessibleEntities.display_name, e.primary_contact_id, accessibleEntities.entity_state, accessibleEntities.facilities
FROM (
		SELECT l.[entity_id], 'L' as entity_type, mpi.mpi_id,  ISNULL(mpi.last_name + ', ' + mpi.first_name, '') as display_name, l.std_lead_state_id as entity_state, useraccessibleleads.facilities as facilities
		FROM dbo.scrm_lead l with (nolock) 
			LEFT JOIN dbo.mpi mpi with (nolock) on l.mpi_id = mpi.mpi_id
			INNER JOIN useraccessibleleads ON l.[entity_id]= useraccessibleleads.[entity_id]
	UNION
		SELECT sa.[entity_id], 'A' as entity_type, NULL, eef.name as display_name, NULL as entity_state, #useraccessibleaccounts.description as facilities
		FROM dbo.emc_ext_facilities eef with (nolock)
			LEFT JOIN dbo.scrm_account sa with (nolock) ON eef.ext_fac_id = sa.ext_fac_id
			INNER JOIN #useraccessibleaccounts ON sa.[entity_id]=#useraccessibleaccounts.[entity_id]
		WHERE eef.deleted = 'N' AND sa.[entity_id] IS NOT NULL 
	 ) accessibleEntities
INNER JOIN scrm_entity e ON accessibleEntities.[entity_id]=e.[entity_id]

--select * from #useraccessibleaccntandleads


SELECT @vParticipantRoleRegId= participant_role_id FROM scrm_std_participant_role WHERE code = 'REG'

IF(@vLimit IS NULL)
	SET @vLimit= (SELECT count(1)+1 FROM scrm_activity)

 BEGIN TRY
 
 SET @vStep=1 

 --CTE to select result set and the the total count before pagination
 ;WITH activity_data_CTE (	row_num,
						activity_id ,
						std_activity_type_id,
						std_activity_status_id,
						std_activity_priority_id,
						std_activity_result_id,
						subject,
						description,
						scheduled_start,
						scheduled_end,
						direction,
						activity_class,
						activity_type,
						activity_status,
						activity_priority,
						priority_rank,
						activity_result,
						owner_id ,
						activity_owner,
						activity_owner_login,
						created_by,
						created_date,
						revision_by,
						revision_date,
						deleted,
						deleted_by,
						deleted_date,
						location,
						code,
						std_activity_sub_type_id,
						activity_subtype,
						related_entity_name,
						category_id,
						related_entity_id,
						primary_contact_display_name,
						facilities,
						primary_contact_email)
					  
 AS 
 (
    SELECT 
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) row_num,
        a.activity_id  as activity_id,
        a.std_activity_type_id,
        a.std_activity_status_id,
        a.std_activity_priority_id,
        a.std_activity_result_id,
        a.subject,
        a.description,
        a.scheduled_start,
        a.scheduled_end,
        a.direction,
        t.class AS activity_class,
        t.description AS activity_type,
        s.description AS activity_status,
        p.description AS activity_priority,
        p.priority_rank,
        r.description AS activity_result,
        a.owner_id ,
        u.long_username AS activity_owner,
        u.loginname AS activity_owner_login,
        a.created_by,
        a.created_date,
        a.revision_by,
        a.revision_date,
        a.deleted,
        a.deleted_by,
        a.deleted_date,
        a.location,
        t.code,
        a.std_activity_sub_type_id,
        st.description AS activity_subtype,
        entities.display_name AS related_entity_name,
        entities.entity_type AS category_id,
        entities.[entity_id] AS related_entity_id,
		primary_contact_display_name = [contact].[last_name] + ', ' + [contact].[first_name],
		entities.facilities,
		[contact].[email_address] AS primary_contact_email

      FROM dbo.scrm_activity a with (nolock)
        INNER JOIN dbo.scrm_entity_activity sea with (nolock) ON sea.activity_id = a.activity_id AND sea.participant_role_id = @vParticipantRoleRegId
		INNER JOIN #useraccessibleaccntandleads entities with (nolock) ON sea.[entity_id]=entities.[entity_id]
        INNER JOIN dbo.scrm_std_activity_type t with (nolock) ON a.std_activity_type_id = t.std_activity_type_id
        INNER JOIN dbo.scrm_std_activity_status s with (nolock) ON a.std_activity_status_id = s.std_activity_status_id
        INNER JOIN dbo.scrm_std_activity_priority p with (nolock) ON a.std_activity_priority_id = p.std_activity_priority_id
        INNER JOIN dbo.sec_user u with (nolock) ON a.owner_id = u.userId
		LEFT JOIN dbo.scrm_contact contact_view with (nolock) ON contact_view.[entity_id] = entities.primary_contact_id
		LEFT JOIN dbo.contact with (nolock) ON contact_view.[contact_id] = [contact].[contact_id]
		LEFT JOIN dbo.scrm_std_activity_result r with (nolock) ON a.std_activity_result_id = r.std_activity_result_id
		LEFT JOIN dbo.scrm_std_activity_sub_type st with (nolock) ON a.std_activity_sub_type_id = st.std_activity_sub_type_id
		LEFT JOIN #splitINT atyp on a.std_activity_type_id  = atyp.id AND atyp.IdType = 'T'
		LEFT JOIN #splitINT astyp on st.std_activity_sub_type_id  = astyp.id AND astyp.IdType = 'S'
		LEFT JOIN #splitINT ent on entities.[entity_id] = ent.[id] AND ent.IdType = 'E'
		LEFT JOIN #splitINT owners on u.userid = owners.id AND owners.IdType = 'U'
		LEFT JOIN #splitINT pr on a.std_activity_priority_id = pr.id AND pr.IdType = 'P'
		LEFT JOIN #splitINT sts on a.std_activity_status_id  = sts.id AND sts.IdType = 'I'
		LEFT JOIN #category cat on  entities.entity_type = cat.category_id	

      WHERE (@vActivityId IS NULL OR a.activity_id = @vActivityId)
        AND (@vIncludeProxyLeads = 1 OR entities.mpi_id IS NOT NULL OR entities.entity_type = 'A')
		AND (@vIncludeOnlyOpenLeads = 0 OR (entities.entity_state IS NULL OR entities.entity_state = 1))
		AND (@vActivityTypeId IS NULL OR atyp.id IS NOT NULL)
		AND ((@vActivitySubTypeId IS NULL AND @vIncludeEmptySubType = 0) OR (astyp.id IS NOT NULL OR (@vIncludeEmptySubType = 1 AND st.std_activity_sub_type_id IS NULL)))				 
	    AND (@vEntityId IS NULL OR ent.[id] IS NOT NULL)
		AND (@vUserId IS NULL OR owners.id IS NOT NULL)
		AND (@vPriorityId IS NULL OR pr.id IS NOT NULL)
        AND (@vStatusId IS NULL OR sts.id IS NOT NULL)
		AND (@vCategoryId IS NULL OR cat.category_id = entities.entity_type )
        AND (@vMinSchedDate IS NULL OR a.scheduled_start >= @minSchedDate)
        AND (@vMaxSchedDate IS NULL OR a.scheduled_start < @maxSchedDate)
        AND (@vIncludeOnlySchedAndInProg = 0 OR s.description='Scheduled' OR s.description='In Progress')
	),
	activity_count_CTE
	AS
	(
	SELECT TOP (1) row_num as total_count
		FROM  activity_data_CTE
		ORDER BY row_num DESC
	)
	-- paginated list
	INSERT INTO #activity (	total_count,	
							activity_id,
							std_activity_type_id,
							std_activity_status_id,
							std_activity_priority_id,
							std_activity_result_id,
							subject,
							description,
							scheduled_start,
							scheduled_end,
							direction,
							activity_class,
							activity_type,
							activity_status,
							activity_priority,
							priority_rank,
							activity_result,
							owner_id ,
							activity_owner,
							activity_owner_login,
							created_by,
							created_date,
							revision_by,
							revision_date,
							deleted,
							deleted_by,
							deleted_date,
							location,
							code,
							std_activity_sub_type_id,
							activity_subtype,
							related_entity_name,
							category_id,
							related_entity_id,
							primary_contact_display_name,
							facilities,
							primary_contact_email
					)

		SELECT				c.total_count, 
							rs.activity_id,
							rs.std_activity_type_id,
							rs.std_activity_status_id,
							rs.std_activity_priority_id,
							rs.std_activity_result_id,
							rs.subject,
							rs.description,
							rs.scheduled_start,
							rs.scheduled_end,
							rs.direction,
							rs.activity_class,
							rs.activity_type,
							rs.activity_status,
							rs.activity_priority,
							rs.priority_rank,
							rs.activity_result,
							rs.owner_id,
							rs.activity_owner,
							rs.activity_owner_login,
							rs.created_by,
							rs.created_date,
							rs.revision_by,
							rs.revision_date,
							rs.deleted,
							rs.deleted_by,
							rs.deleted_date,
							rs.location,
							rs.code,
							rs.std_activity_sub_type_id,
							rs.activity_subtype,
							rs.related_entity_name,
							rs.category_id,
							rs.related_entity_id,
							rs.primary_contact_display_name,
							rs.facilities,
							rs.primary_contact_email
		FROM activity_data_CTE as rs 
		CROSS JOIN activity_count_CTE as c
		ORDER BY
        -- Handle Sorting
        CASE WHEN (@vSortCol = 'type' AND @vSortOrder = 'ASC')
            THEN rs.activity_type END ASC,

        CASE WHEN (@vSortCol = 'type' AND @vSortOrder = 'DESC')
            THEN rs.activity_type END DESC,
            
        CASE WHEN (@vSortCol = 'activity_id' AND @vSortOrder = 'ASC')
            THEN rs.activity_id END ASC,
        CASE WHEN (@vSortCol = 'activity_id' AND @vSortOrder = 'DESC')
            THEN rs.activity_id END DESC,
            
        CASE WHEN (@vSortCol = 'activity_owner' AND @vSortOrder = 'ASC')
            THEN rs.activity_owner END ASC,
        CASE WHEN (@vSortCol = 'activity_owner' AND @vSortOrder = 'DESC')
            THEN rs.activity_owner END DESC,
            
        CASE WHEN (@vSortCol = 'subject' AND @vSortOrder = 'ASC')
            THEN rs.subject END ASC,
        CASE WHEN (@vSortCol = 'subject' AND @vSortOrder = 'DESC')
            THEN rs.subject END DESC,
            
        CASE WHEN (@vSortCol = 'sub_type' AND @vSortOrder = 'ASC')
            THEN rs.activity_subtype END ASC,
        CASE WHEN (@vSortCol = 'sub_type' AND @vSortOrder = 'DESC')
            THEN rs.activity_subtype END DESC,
            
        CASE WHEN (@vSortCol = 'date' AND @vSortOrder = 'ASC')
            THEN rs.scheduled_start END ASC,
        CASE WHEN (@vSortCol = 'date' AND @vSortOrder = 'DESC')
            THEN rs.scheduled_start END DESC,
            
        CASE WHEN (@vSortCol = 'priority' AND @vSortOrder = 'ASC')
            THEN rs.activity_priority END ASC,
        CASE WHEN (@vSortCol = 'priority' AND @vSortOrder = 'DESC')
            THEN rs.activity_priority END DESC,
            
        CASE WHEN (@vSortCol = 'status' AND @vSortOrder = 'ASC')
            THEN rs.activity_status END ASC,
        CASE WHEN (@vSortCol = 'status' AND @vSortOrder = 'DESC')
            THEN rs.activity_status END DESC,
            
        CASE WHEN (@vSortCol = 'related_entity' AND @vSortOrder = 'ASC')
            THEN rs.related_entity_name END ASC,
        CASE WHEN (@vSortCol = 'related_entity' AND @vSortOrder = 'DESC')
            THEN rs.related_entity_name END DESC,
            
        CASE WHEN (@vSortCol = 'description' AND @vSortOrder = 'ASC')
            THEN rs.description END ASC,
        CASE WHEN (@vSortCol = 'description' AND @vSortOrder = 'DESC')
            THEN rs.description END DESC,
            
        CASE WHEN (@vSortCol = 'category' AND @vSortOrder = 'ASC')
            THEN rs.category_id END ASC,
        CASE WHEN (@vSortCol = 'category' AND @vSortOrder = 'DESC')
            THEN rs.category_id END DESC,
            
        CASE WHEN (@vSortCol = 'related_entity_id' AND @vSortOrder = 'ASC')
            THEN rs.related_entity_id END ASC,
        CASE WHEN (@vSortCol = 'related_entity_id' AND @vSortOrder = 'DESC')
            THEN rs.related_entity_id END DESC,

        CASE WHEN (@vSortCol = 'report_activity')
            THEN rs.activity_owner END ASC,
        CASE WHEN (@vSortCol = 'report_activity')
            THEN rs.created_date END ASC,
        CASE WHEN (@vSortCol = 'report_activity')
            THEN rs.subject END ASC,
			
        CASE WHEN (@vSortCol = 'lead_contact' AND @vSortOrder = 'ASC')
            THEN rs.primary_contact_display_name END ASC,
        CASE WHEN (@vSortCol = 'lead_contact' AND @vSortOrder = 'DESC')
            THEN rs.primary_contact_display_name END DESC,
			
        rs.activity_id ASC
        
		OFFSET @vOffset ROWS FETCH NEXT @vLimit ROWS ONLY

  -- Result Set 1: All activities as specified by filter parameters
  SELECT * FROM #activity

  SET @vStep=2
  -- Result Set 2: All entities associated to any of the activities in #activity
  -- The associatied entities(Leads/Contacts/Accounts) will be added to the Entity Participant field in the ActivityVo with the corresponding entityType/ids set
  -- For the entities with the role "Regarding" a primary contact with a display name
 SELECT a.activity_id,
     e.entity_id,
     e.entity_type,
     e.display_name,
     ea.response,
     ea.participant_role_id,
     r.code,
     r.description,
     a.primary_contact_display_name primary_contact_display_name,
     a.primary_contact_email primary_contact_email
  FROM #activity a
    INNER JOIN scrm_entity_activity ea ON a.activity_id = ea.activity_id
    INNER JOIN view_scrm_entity e ON ea.entity_id = e.entity_id
    LEFT JOIN scrm_std_participant_role r ON ea.participant_role_id = r.participant_role_id
  ORDER BY activity_id

  SET @vStep=3
  -- Result Set 3: All users associated to any of the activities in #activity
  SELECT a.activity_id,
     u.userId,
     u.long_username,
     ua.response
  FROM #activity a
    INNER JOIN scrm_user_activity ua ON a.activity_id = ua.activity_id
    INNER JOIN sec_user u ON ua.user_id = u.userId
  ORDER BY activity_id
  
  SET @status_code = 0

END TRY
BEGIN CATCH
  SELECT @status_text = ERROR_MESSAGE()
  SET @status_code = 1
  GOTO PgmAbend
END CATCH

--program success return
IF @status_code = 0
BEGIN
  IF @DebugMe='Y' Print 'Successful execution of stored procedure'
  RETURN
END

--program failure return
PgmAbend:
  IF @DebugMe='Y' Print 'Stored procedure failure in step:'+ CONVERT(VARCHAR(3),@vStep) + '  ' + CONVERT(VARCHAR(26),GETDATE())
  IF @DebugMe='Y' Print 'Error code: '+CONVERT(VARCHAR(3),@vStep) + '; Error description:  ' +@status_text
  RETURN @status_code  

GO

GRANT EXECUTE ON dbo.sproc_scrm_list_getActivity TO PUBLIC

GO


GO

print 'C_Branch/04_StoredProcedures/sproc_scrm_list_getActivity.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_scrm_list_getActivity.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =========================================================================================================================
--
--  Script Type: user defined store procedure
--  Target DB Type:  Client
--  Target Database:  Both
--
--  Re-Runable:  Yes
--
--  Description :  Return a list of Physician Orders and other dependent data such as schedules.
--
--	Params:			
--			@facUUIdCSV
--			@clientId
--			@facilityDateTime
--			@orderCategoryIdsCSV
--			@orderStatusCSV
--			@clientStatus
--			@changesetTypesCSV
--			@changesetStatusesCSV
--			@changesetSourceId
--			@physOrderId
--			@pageSize
--			@pageNumber
--			@sortByColumn
--			@sortByOrder
--			@includeOrders
--			@includeSchedules
--			@includeChangesets
--			@debug          - Debug param, 'Y' or 'N'
--			@status_code    - SP execution flag, 0 for success.
--			@status_text    - SP error text if error occurs.
--
-- Change History:
--   Date			Jira				Team		Author				Comment
-- -----------------------------------------------------------------------------------------------------------------------------------
--   09/28/2021     SPRT-740			Coda	    Elias Ghanem  		Created.
-- =========================================================================================================================

IF EXISTS (SELECT *
               FROM
                   dbo.sysobjects
               WHERE
                   id = object_id(N'[dbo].[sproc_sprt_order_list]')
                   AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[sproc_sprt_order_list]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sproc_sprt_order_list]			@facUUIdCSV               varchar(MAX),-- Required: CSV list of fac uuids to filter on
														@clientId				INT,-- Optional: client Id to filter on
                                                        @facilityDateTime       DATETIME,-- Required: facility date time
                                                        @orderCategoryIdsCSV	VARCHAR(100),-- Required CSV list of categegory ids to filter n
                                                        @orderStatusCSV         VARCHAR(100),-- Required: CSV list of order status ids to filter on
                                                        @clientStatus 			INT,-- Required: flag to filter on client status: -1: ALL, 0: Discharged, 1:Current(not discharged)
														@changesetTypesCSV		VARCHAR(100),-- Optional: changeset types to filter on and return
														@changesetStatusesCSV	VARCHAR(100),-- Optional: changeset statuses to filter on and return
														@changesetSourceId		INT,-- Optional: changeset sourece to filter on
                                                        @physOrderId 			INT,-- Optional: physOrderId to filter on
                                                        @pageSize 				INT,-- Required: number of phys orders per page
                                                        @pageNumber 			INT,-- Required: page number	
                                                        @sortByColumn 			VARCHAR(100),-- Required: column to sort on.
                                                        @sortByOrder  			VARCHAR(10),-- Required sort order
														@includeOrders 			INT,-- Required: flag to indicate whether orders data is returned or not: 1: orders summary, 2:orders details, 0:orders data not to be returned
														@includeSchedules 		INT,-- Required: flag to indicate whether schedules data is returned or not: 1: schedules summary, 2:schedules details, 0:schedules data not to be returned
														@includeChangesets 		INT,-- Required: flag to indicate whether changeset data is returned or not: 1: changeset summary, 2:changeset details, 0:changeset data not to be returned
														@debug              	CHAR(1)  = 'N',-- Required: flag to indicate whether to print debug data or not
														@status_code        	INT  = 0 OUT,
                                                        @status_text        	VARCHAR(3000) OUT



/***********************************************************************************************

Purpose:
This procedure provides data shown on Resident' Order Chart
This procedure does not use VIEW_PHO_PHYS_ORDER

*************************************************************************************************/

AS
BEGIN TRY
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

DECLARE @step                       			int,
		@step_label								varchar(100),
        @error_code                 			int

SET @step = 0
SET @step_label = 'Starting...'
SET @error_code = 0

DECLARE @facIds TABLE
(
	fac_id int  not null
)

DECLARE @orderCategoryIds TABLE
(
	order_category_id INT  NOT NULL
)

DECLARE @orderStatus TABLE
(
	status INT NOT NULL
)

DECLARE @changesetTypes TABLE
(
	changeset_type_id INT NOT NULL
)

DECLARE @changesetStatuses TABLE
(
	status_id INT NOT NULL
)

DECLARE @facInfo TABLE
(
	fac_id INT,
	facility_time datetime,
	IsDischargeEnabled  BIT
)

CREATE TABLE #orders_data
  ( 
	phys_order_id             	INT, 
	fac_id                    	INT, 
	client_id                 	INT, 
	order_verified            	VARCHAR(1),
	order_status				INT,
	active_flag               	CHAR(1), 
	draft                     	BIT, 
	hold_date                 	DATETIME, 
	hold_date_end             	DATETIME, 
	end_date                  	DATETIME, 
	discontinued_date         	DATETIME, 
	order_category_id         	INT, 
	controlled_substance_code 	INT,
	
	physician_id INT,
	pharmacy_id INT,
	route_of_admin INT,
	created_by VARCHAR(60),
	created_date DATETIME,
	revision_by VARCHAR(60),
	revision_date DATETIME,
	start_date DATETIME,
	strength VARCHAR(30),
	form VARCHAR(50),
	description VARCHAR(500),
	directions VARCHAR(1000),
	related_generic VARCHAR(250),
	communication_method INT,
	prescription VARCHAR(50),
	order_date DATETIME,
	completed_date DATETIME,
	origin_id INT,
	drug_strength VARCHAR(100),
	drug_strength_uom VARCHAR(10),
	drug_name VARCHAR(500),
	order_class_id INT,
	resident_last_name varchar(50),
	resident_first_name varchar(50)	 
  ) ;

CREATE TABLE #tempresult 
  ( 
	phys_order_id             INT, 
	fac_id                    INT, 
	client_id                 INT, 
	order_verified            VARCHAR(1), 
	active_flag               CHAR(1), 
	draft                     BIT, 
	hold_date                 DATETIME, 
	hold_date_end             DATETIME, 
	end_date                  DATETIME, 
	discontinued_date         DATETIME, 
	order_category_id         INT, 
	controlled_substance_code INT,
	facility_time datetime,
	IsDischargeEnabled  BIT,
	
	physician_id INT,
	pharmacy_id INT,
	route_of_admin INT,
	created_by VARCHAR(60),
	created_date DATETIME,
	revision_by VARCHAR(60),
	revision_date DATETIME,
	start_date DATETIME,
	strength VARCHAR(30),
	form VARCHAR(50),
	description VARCHAR(500),
	directions VARCHAR(1000),
	related_generic VARCHAR(250),
	communication_method INT,
	prescription VARCHAR(50),
	order_date DATETIME,
	completed_date DATETIME,
	origin_id INT,
	drug_strength VARCHAR(100),
	drug_strength_uom VARCHAR(10),
	drug_name VARCHAR(500),
	order_class_id INT,
	resident_last_name varchar(50),
	resident_first_name varchar(50)
  ) ;
CREATE CLUSTERED INDEX _tempresult_order_id ON #tempresult( phys_order_id );  

CREATE TABLE #vpos
	(
	phys_order_id int NOT NULL,
	fac_id int NOT NULL,
	order_status int NOT NULL,
	order_relationship int NULL,
	status_reason int NULL
	)

SET @step = @step + 1	
SET @step_label = 'Parse CSV parameters into table vairables'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
	
INSERT INTO @facIds (fac_id)
SELECT f.fac_id FROM facility f INNER JOIN dbo.Split(@facUUIdCSV, ',') uuids ON uuids.items = f.fac_uuid


INSERT INTO @orderCategoryIds (order_category_id)
SELECT * FROM dbo.Split(@orderCategoryIdsCSV, ',')	
DELETE FROM @orderCategoryIds where order_category_id=1 or order_category_id=3030

INSERT INTO @orderStatus (status)
SELECT * FROM dbo.Split(@orderStatusCSV, ',');

INSERT INTO @changesetTypes (changeset_type_id)
SELECT * FROM dbo.Split(@changesetTypesCSV, ',');

INSERT INTO @changesetStatuses (status_id)
SELECT * FROM dbo.Split(@changesetStatusesCSV, ',');

	
SET @step = @step + 1	
SET @step_label = 'Check for required parameters...'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF NOT EXISTS(SELECT 1 FROM @facIds)
BEGIN
	raiserror ('facUUIdCSV is required. At least one facUUId must be provided.', 16, 1)
END
IF NOT EXISTS(SELECT 1 FROM @orderCategoryIds)
BEGIN
	raiserror ('orderCategoryIdsCSV is required. At least one orderCategoryId must be provided.', 16, 1)
END
IF NOT EXISTS(SELECT 1 FROM @orderStatus)
BEGIN
	raiserror ('orderStatusCSV is required. At least one orderStatus must be provided.', 16, 1)
END	
IF @facilityDateTime IS NULL
BEGIN
	raiserror ('facilityDateTime is required.', 16, 1)
END
IF @clientStatus IS NULL OR @clientStatus NOT IN (-1, 0, 1)
BEGIN
	raiserror ('clientStatus is required. Allowed values are: -1, 0, 1.', 16, 1)
END	
IF @pageSize IS NULL OR @pageSize <= 0
BEGIN
	raiserror ('pageSize is required and should be a positive number.', 16, 1)
END	
IF @pageNumber IS NULL or @pageNumber <= 0
BEGIN
	raiserror ('pageNumber is required and should be a positive number.', 16, 1)
END	
IF @sortByColumn IS NULL
BEGIN
	raiserror ('sortByColumn is required.', 16, 1)
END	
IF @sortByOrder IS NULL
BEGIN
	raiserror ('sortByOrder is required.', 16, 1)
END
IF (( EXISTS(SELECT 1 FROM @changesetTypes) OR EXISTS(SELECT 1 FROM @changesetStatuses)) AND
	(NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses)))
BEGIN
	raiserror ('changesetTypesCSV and changesetStatusesCSV should be both set or both empty', 16, 1)
END
IF @changesetSourceId IS NOT NULL AND (NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses))
BEGIN
	raiserror ('If changesetSourceId is set, both changesetTypesCSV and changesetStatusesCSV should be set', 16, 1)
END
IF @includeOrders IS NULL OR @includeOrders NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeOrders is required. Allowed values are: 0, 1, 2', 16, 1)
END	
IF @includeSchedules IS NULL OR @includeSchedules NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeSchedules is required. Allowed values are: 0, 1, 2', 16, 1)
END
IF @includeChangesets IS NULL OR @includeSchedules NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeChangesets is required. Allowed values are: 0, 1, 2', 16, 1)
END
IF @includeChangesets IN (1, 2) AND (NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses))
BEGIN
	raiserror ('If includeChangesets value is 1 or 2, both changesetTypesCSV and changesetStatusesCSV should be set', 16, 1)
END
		
SET @step = @step + 1
SET @step_label = 'Prepare facility info'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
INSERT INTO @facInfo	
	(fac_id,
	facility_time,
	IsDischargeEnabled
	)
	SELECT f.fac_id, 
	dbo.fn_facility_getCurrentTime(f.fac_id),
	CASE WHEN cp.value = 'Y' THEN 1 ELSE 0 END
	FROM @facIds f	
	LEFT JOIN configuration_parameter cp ON cp.fac_id = f.fac_id AND cp.name='discharge_order_enable'
	
	
SET @step = @step + 1
SET @step_label = 'Insert into #tempresult'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

INSERT INTO #tempresult
	( 
	phys_order_id, 
	fac_id, 
	client_id, 
	order_verified, 
	active_flag, 
	draft, 
	hold_date, 
	hold_date_end, 
	end_date, 
	discontinued_date, 
	order_category_id, 
	controlled_substance_code,
	facility_time,
	IsDischargeEnabled,
	
	physician_id,
	pharmacy_id,
	route_of_admin,
	created_by,
	created_date,
	revision_by,
	revision_date,
	start_date,
	strength,
	form,
	description,
	directions,
	related_generic,
	communication_method,
	prescription,
	order_date,
	completed_date,
	origin_id,
	drug_strength,
	drug_strength_uom,
	drug_name,
	order_class_id,
	resident_last_name,
	resident_first_name
	)
	SELECT
		o.phys_order_id, 
		o.fac_id, 
		o.client_id, 
		o.order_verified, 
		o.active_flag, 
		o.draft, 
		o.hold_date, 
		o.hold_date_end, 
		o.end_date, 
		o.discontinued_date, 
		o.order_category_id, 
		o.controlled_substance_code,
		fi.facility_time,
		fi.IsDischargeEnabled,
		o.physician_id,
		o.pharmacy_id,
		o.route_of_admin,
		o.created_by,
		o.created_date,
		o.revision_by,
		o.revision_date,
		o.start_date,
		o.strength,
		o.form,
		o.description,
		o.directions,
		o.related_generic,
		o.communication_method,
		o.prescription,
		o.order_date,
		o.completed_date,
		o.origin_id,
		o.drug_strength,
		o.drug_strength_uom,
		o.drug_name,
		o.order_class_id,
		m.last_name,
		m.first_name
	FROM pho_phys_order o
	INNER JOIN @facIds f ON f.fac_id = o.fac_id
	INNER JOIN @facInfo fi ON fi.fac_id = f.fac_id
	INNER JOIN @orderCategoryIds cat ON cat.order_category_id = o.order_category_id
	INNER JOIN clients c ON c.client_id = o.client_id
	INNER JOIN mpi m ON m.mpi_id = c.mpi_id
	WHERE (@physOrderId IS NULL OR o.phys_order_id = @physOrderId) AND ISNULL(o.active_flag, 'Y') = 'Y'
	AND (@clientId IS NULL OR o.client_id = @clientId)
	AND (@clientStatus = -1 OR (@clientStatus = 1 AND (c.discharge_date IS NULL OR c.discharge_date > @facilityDateTime)) OR (@clientStatus = 0 AND c.discharge_date <= @facilityDateTime))

SET @step = @step + 1	
SET @step_label = 'Applying changeset filtering if needed'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

IF EXISTS(SELECT 1 FROM @changesetTypes) OR EXISTS (SELECT 1 FROM @changesetStatuses) OR @changesetSourceId IS NOT NULL
	BEGIN
	MERGE #tempresult AS TARGET
	USING (select o.phys_order_id
	FROM #tempresult o	
	INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
	INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
	INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
	INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
	WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId
	) AS SOURCE
	ON (TARGET.phys_order_id = SOURCE.phys_order_id) 
	WHEN NOT MATCHED BY SOURCE 
	THEN DELETE; 
END

SET @step = @step + 1	
SET @step_label = 'Calculating orders statuses'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
insert into #vpos
exec sproc_sprt_pho_getOrderStatus  @debug,@status_code out,@status_text out


SET @step = @step + 1	
SET @step_label = 'Insert into #orders_data'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
INSERT INTO #orders_data
	( 
	phys_order_id, 
	fac_id, 
	client_id, 
	order_verified,
	order_status,
	active_flag, 
	draft, 
	hold_date, 
	hold_date_end, 
	end_date, 
	discontinued_date, 
	order_category_id, 
	controlled_substance_code,
	physician_id,
	pharmacy_id,
	route_of_admin,
	created_by,
	created_date,
	revision_by,
	revision_date,
	start_date,
	strength,
	form,
	description,
	directions,
	related_generic,
	communication_method,
	prescription,
	order_date,
	completed_date,
	origin_id,
	drug_strength,
	drug_strength_uom,
	drug_name,
	order_class_id,
	resident_last_name,
	resident_first_name
	)
	SELECT
		temp.phys_order_id, 
		temp.fac_id, 
		temp.client_id, 
		temp.order_verified,
		vpos.order_status,
		temp.active_flag, 
		temp.draft, 
		temp.hold_date, 
		temp.hold_date_end, 
		temp.end_date, 
		temp.discontinued_date, 
		temp.order_category_id, 
		temp.controlled_substance_code,
		temp.physician_id,
		temp.pharmacy_id,
		temp.route_of_admin,
		temp.created_by,
		temp.created_date,
		temp.revision_by,
		temp.revision_date,
		temp.start_date,
		temp.strength,
		temp.form,
		temp.description,
		temp.directions,
		temp.related_generic,
		temp.communication_method,
		temp.prescription,
		temp.order_date,
		temp.completed_date,
		temp.origin_id,
		temp.drug_strength,
		temp.drug_strength_uom,
		temp.drug_name,
		temp.order_class_id,
		temp.resident_last_name,
		temp.resident_first_name
	FROM @orderStatus stat
	INNER JOIN #vpos vpos ON vpos.order_status = stat.status
	INNER JOIN #tempresult temp ON temp.phys_order_id = vpos.phys_order_id	


SET @step = @step + 1
SET @step_label = 'Apply pagination'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @sortByOrder='desc'
BEGIN
	;WITH TMP AS
	(
		SELECT ROW_NUMBER() OVER(ORDER BY
									 CASE
										WHEN @sortByColumn = 'fac_id' THEN CONVERT(VARCHAR(50), o.fac_id)
										WHEN @sortByColumn = 'description' THEN o.description
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_first_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									DESC,
									CASE
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_last_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									DESC,
									o.phys_order_id DESC) AS rn FROM #orders_data o
	)
	DELETE FROM TMP WHERE @pageSize > 0 AND (rn <= (@pageSize * (@pageNumber-1)) OR rn > (@pageSize * @pageNumber))
END
ELSE
BEGIN
	;WITH TMP AS
	(
		SELECT ROW_NUMBER() OVER(ORDER BY
										CASE
										WHEN @sortByColumn = 'fac_id' THEN CONVERT(varchar(50), o.fac_id)
										WHEN @sortByColumn = 'description' THEN o.description										
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_first_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									ASC,
									CASE
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_last_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									ASC,
									o.phys_order_id DESC) AS rn FROM #orders_data o
	)
	DELETE FROM TMP WHERE @pageSize > 0 AND (rn <= (@pageSize * (@pageNumber-1)) OR rn > (@pageSize * @pageNumber))

END


    /****************************************
    return final result
    ****************************************/
SET @step = @step + 1	
SET @step_label = 'Return final results...'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

SET @step = @step + 1	
SET @step_label = 'Return orders'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeOrders = 1
BEGIN
	SELECT
	o.phys_order_id,
	o.fac_id,
	o.client_id,
	o.order_status,
	o.description,
	o.resident_first_name,
	o.resident_last_name	
	FROM #orders_data o
	ORDER BY o.fac_id, o.phys_order_id ASC
END
ELSE
BEGIN
	IF @includeOrders = 2
	BEGIN
		SELECT
		o.phys_order_id,
		o.fac_id,
		o.client_id,
		o.physician_id,
		o.order_category_id,
		o.communication_method,
		o.route_of_admin,
		o.order_status,
		o.description,
		o.resident_first_name,
		o.resident_last_name,
		o.created_by,
		o.created_date,
		o.revision_by,
		o.revision_date
		FROM #orders_data o
		ORDER BY o.fac_id, o.phys_order_id ASC
	END
	ELSE
		SELECT 'ORDER DATA NOT REQUESTED'
END

SET @step = @step + 1	
SET @step_label = 'Return schedules'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeSchedules = 1
BEGIN
	SELECT
	o.phys_order_id,
	s.order_schedule_id,
	s.schedule_directions
	FROM #orders_data o
	INNER JOIN PHO_ORDER_SCHEDULE s ON s.phys_order_id = o.phys_order_id
	WHERE s.deleted = 'N'
	ORDER BY o.fac_id, o.phys_order_id, s.order_schedule_id
END
ELSE
BEGIN
	IF @includeSchedules = 2	
	BEGIN	
		SELECT
		os.phys_order_id,
		os.order_schedule_id,
		os.schedule_template,
		os.dose_value,
		os.dose_uom_id,
		os.alternate_dose_value,
		os.dose_low,
		os.quantity_per_dose,
		os.quantity_uom_id,
		os.need_location_of_admin,
		os.sliding_scale_id,
		os.apply_to,
		os.apply_remove_flag,
		os.std_freq_id,
		os.schedule_type,
		os.repeat_week,
		os.mon,
		os.tues,
		os.wed,
		os.thurs,
		os.fri,
		os.sat,
		os.sun,
		os.xxdays,
		os.xxmonths,
		os.xxhours,
		os.date_of_month,
		os.date_start,
		os.date_stop,
		os.days_on,
		os.days_off,
		os.pho_std_time_id,
		os.related_diagnosis,
		os.indications_for_use,
		os.additional_directions,
		os.administered_by_id,
		os.schedule_start_date,
		os.schedule_end_date,
		os.schedule_end_date_type_id,
		os.schedule_duration,
		os.schedule_duration_type_id,
		os.schedule_dose_duration,
		os.prn_admin,
		os.prn_admin_value,
		os.prn_admin_units,
		os.schedule_directions,
		os.created_by,
		os.created_date,
		os.revision_by,
		os.revision_date,		
		--os.std_freq_time_label,
		--os.until_finished,
		--os.order_type_id,
		--os.extended_end_date,
		--os.extended_count,
		--os.prescriber_schedule_start_date,		
		ps.order_schedule_id,
		ps.schedule_id,
		ps.start_time,
		ps.end_time,
		ps.std_shift_id,
		ps.remove_time,
		ps.remove_duration,
		ps.nurse_action_notes
		FROM #orders_data o
		INNER JOIN PHO_ORDER_SCHEDULE os ON os.phys_order_id = o.phys_order_id
		INNER JOIN PHO_SCHEDULE ps ON ps.order_schedule_id = os.order_schedule_id
		WHERE os.deleted = 'N' and ps.deleted = 'N'
		ORDER BY o.fac_id, o.phys_order_id, os.order_schedule_id		
	END
	ELSE
		SELECT 'SCHEDULES DATA NOT REQUESTED'
END

SET @step = @step + 1	
SET @step_label = 'Return changeset'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeChangesets = 1
BEGIN
	SELECT
	o.phys_order_id,
	cs.phys_order_changeset_id,
	cs.changeset_type_id,
	cs.current_status_id,
	cs.changeset_source_id
	FROM #orders_data o
	INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
	INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
	INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
	INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
	WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId	
END
ELSE
BEGIN
	IF @includeChangesets = 2
	BEGIN
		SELECT
		o.phys_order_id,
		cs.phys_order_changeset_id,
		cs.changeset_type_id,
		cs.current_status_id,
		cs.changeset_source_id,
		cs.changeset_data,
		cs.resulting_phys_order_id,
		cs.aggregate_changeset_id,
		csstat.status_source,
		csstat.status_by,
		csstat.status_date
		FROM #orders_data o
		INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
		INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
		INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
		INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
		WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId	
	END
	ELSE
		SELECT 'CHANGESET DATA NOT REQUESTED'
END

    SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Done'
    IF @debug='Y'
        PRINT @status_text
    SET @status_code = 0
    GOTO PgmSuccess
END TRY
--error trapping
BEGIN CATCH
    --SELECT @error_code = @@error, @status_text = 'Error at step:'+convert(varchar(3),@step)+', '+ERROR_MESSAGE()
	SELECT @error_code = @@error, @status_text = 'Error at step:' + convert(varchar(3),@step) + ' <' + @step_label + '>, '+ERROR_MESSAGE()

    SET @status_code = 1

    GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:

IF @status_code = 0
BEGIN
    IF @debug='Y' PRINT 'Successfull execution of stored procedure'
    RETURN @status_code
END

--program failure return
PgmAbend:

--IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '   ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + ' <' + @step_label + '>   ' + convert(varchar(26),getdate())
    IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@error_code) + '; Error description:    ' +@status_text
    RETURN @status_code

GO
GRANT EXECUTE ON sproc_sprt_order_list TO public
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_pho_getOrderStatus.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =========================================================================================================================
--
--  Script Type: user defined store procedure
--  Target DB Type:  Client
--  Target Database:  Both
--
--  Re-Runable:  Yes
--
--  Description :  Get Order Status for a preselected list of orders inserted beforehand into #tempresult
--
-- Change History:
--   Date			Jira				Team		Author				Comment
-- -----------------------------------------------------------------------------------------------------------------------------------
--   09/28/2021     SPRT-740			Coda	    Elias Ghanem  		Created.
-- =========================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_sprt_pho_getOrderStatus]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_sprt_pho_getOrderStatus]
GO

CREATE
proc [dbo].[sproc_sprt_pho_getOrderStatus]
(
    @debug          char(1)  = 'N',
    @status_code    int  out,
    @status_text    varchar(3000) out
)
AS
BEGIN

SET NOCOUNT ON

DECLARE @step           int,
        @error_code     int
   
CREATE TABLE #tempResult_local
(
	phys_order_id int,
	fac_id int,
	client_id int,
	order_verified varchar(1),
	active_flag char(1),
	draft bit,
	hold_date datetime,
	hold_date_end datetime,
	end_date datetime,
	discontinued_date datetime,
	order_category_id int,
	controlled_substance_code int,
	created_date datetime,
	order_class_id tinyint,
	facility_time datetime,
	IsDischargeEnabled  BIT
)

CREATE TABLE #adminOrder
(
	admin_order_id int,
	created_date datetime,
	effective_date datetime,
	ineffective_date datetime,
	related_phys_order_id int ,
	order_verified char,
	order_relationship_id int,
	facility_date datetime
)

CREATE CLUSTERED INDEX #adminOrder_IX on #adminOrder
(
	related_phys_order_id,
	effective_date,
	created_date,
	admin_order_id,
	ineffective_date,
	order_verified,
	order_relationship_id
)

BEGIN TRY

SET @status_code = 0

SET @step = 1
SET @status_text = CONVERT(VARCHAR(26), GETDATE(), 13) + ' Insert data in #tempResult_local'
IF @debug='Y' PRINT @status_text	
INSERT INTO #tempResult_local (phys_order_id,fac_id,client_id,order_verified,active_flag,
	draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code, facility_time, IsDischargeEnabled)
	select phys_order_id,fac_id,client_id,order_verified,active_flag,
	draft,hold_date,hold_date_end,end_date,discontinued_date,order_category_id, controlled_substance_code, facility_time, IsDischargeEnabled from #tempresult
	
SET @step = 1.1
SET @status_text = CONVERT(VARCHAR(26), GETDATE(), 13) + ' Update data in #tempResult_local based on IsDischargeEnabled'
IF @debug='Y' PRINT @status_text	
UPDATE tl 
	set tl.created_date = p.created_date, tl.order_class_id = p.order_class_id
FROM #tempResult_local tl
	INNER JOIN pho_phys_order p ON p.phys_order_id = tl.phys_order_id AND p.order_class_id = 2
	WHERE tl.IsDischargeEnabled = 1


SET @step = 2
SET @status_text = CONVERT(VARCHAR(26), GETDATE(), 13) + ' Insert admin orders'
IF @debug='Y' PRINT @status_text

  INSERT into #adminOrder(admin_order_id,created_date,effective_date,ineffective_date,related_phys_order_id,order_verified,order_relationship_id,facility_date)
	SELECT
		pao.admin_order_id,pao.created_date,pao.effective_date,pao.ineffective_date, pro.related_phys_order_id,po.order_verified,pro.order_relationship_id,ppo.facility_time
	FROM
		dbo.pho_related_order pro
		INNER JOIN dbo.pho_admin_order pao ON pao.phys_order_id = pro.phys_order_id
		INNER JOIN #tempResult_local ppo ON ppo.phys_order_id = pro.related_phys_order_id
		--inner join #clients c on ppo.client_id = c.client_id
		INNER JOIN pho_phys_order po ON po.phys_order_id = pao.phys_order_id
	WHERE
		ISNULL(pro.deleted,'N')='N'
		AND pao.deleted='N'
		AND pao.exclude_eom_status_calculation=0

--------------------------------------------------
  SET @step = 3
  SET @status_text = CONVERT(VARCHAR(26), GETDATE(), 13) + ' select order statuses'
  IF @debug='Y' PRINT @status_text  
  
    SELECT
    --data.relationship_code,
    ppo.phys_order_id,
    ppo.fac_id,
    CASE
		WHEN
			ppo.IsDischargeEnabled = 1
            AND ppo.order_class_id IS NOT NULL AND ppo.order_class_id=2
			AND ppo.created_date < (SELECT c.admission_date FROM clients c WHERE c.client_id = ppo.client_id)
        THEN 12 -- historical completed

		WHEN 
			ISNULL(ppo.active_flag, 'Y') = 'Y' 
			AND esign.phys_order_id IS NOT NULL
		THEN (CASE WHEN ppo.controlled_substance_code IN (2,3,4,5,6) AND esign.marked_to_sign_contact_id IS NULL THEN 10 -- Pending Mark To Sign
              ELSE 11 -- Pending Order Signature
              END) 
             
        WHEN
            (
                (
                    data.relationship_code = 'DC' --admin order is Discontinue
                    AND ISNULL(data.adminOrderVerified,'Y') = 'Y' --admin order is verified.
                )
                OR
                ( ppo.discontinued_date IS NOT NULL AND ppo.discontinued_date < ppo.facility_time )
            )
            AND ISNULL(ppo.active_flag, 'Y') = 'Y'
        THEN 2 -- discontinued
        
    	WHEN
            (
                ppo.order_verified = 'N'
                or
                (data.adminOrderVerified = 'N' OR ISNULL(unverifiedOrders.oneOrderVerified,'N') = 'Y')
            )
            AND ISNULL(ppo.active_flag, 'Y') = 'Y'
        THEN 8 -- unconfirmed

		WHEN 
			ISNULL(ppo.order_verified,'Y') = 'Y' AND
			ISNULL(ppo.active_flag, 'Y') = 'Y' AND
			clinrev.created_date IS NOT NULL
			
		THEN 9 -- order verified, pending clinical review.

        WHEN
            ppo.draft = 0 -- not draft
            AND ISNULL(ppo.order_verified,'Y') = 'Y'  -- order is verified
            AND
                (
                    (data.relationship_code IS NULL or data.relationship_code NOT IN ('H','DC')) -- no admin orders
                    AND
                    ISNULL(data.adminOrderVerified, 'Y') = 'Y' --admin order is verified or doesn't exist.
                )
            AND
            (
                ppo.hold_date IS NULL
                OR (ppo.hold_date > ppo.facility_time AND ppo.hold_date_end IS NULL)
                OR (ppo.facility_time NOT BETWEEN  ppo.hold_date and ppo.hold_date_end)
            )
            AND (ppo.end_date IS NULL OR (ppo.end_date > ppo.facility_time or poes.phys_order_id IS NOT NULL))-- not completed
            AND ( ppo.discontinued_date IS NULL OR ppo.discontinued_date > ppo.facility_time )
            AND ISNULL(ppo.active_flag, 'Y') = 'Y'
        THEN 1 --active

        WHEN
            ppo.draft = 0 -- not draft
            AND ISNULL(ppo.order_verified,'Y') = 'Y'-- order is verified
            AND
                (
                    (
                        ((ppo.hold_date <= ppo.facility_time AND ppo.hold_date_end IS NULL)
                        OR (ppo.facility_time BETWEEN  ppo.hold_date AND ppo.hold_date_end))
                        AND ISNULL(data.adminOrderVerified,'Y') = 'Y'
                    )
                    OR
                    (
                        data.relationship_code = 'H' --admin order is hold
                        AND ISNULL(data.adminOrderVerified,'Y') = 'Y' --admin order is verified.
                    )
                )
            AND (ppo.end_date IS NULL OR (ppo.end_date > ppo.facility_time or poes.phys_order_id IS NOT NULL))--not completed
            AND ( ppo.discontinued_date IS NULL OR ppo.discontinued_date > ppo.facility_time )
            AND ISNULL(ppo.active_flag, 'Y') = 'Y'
        THEN 5 -- onhold

		WHEN
            ppo.end_date IS NOT NULL AND ppo.end_date <= ppo.facility_time
            AND ISNULL(ppo.active_flag, 'Y') = 'Y'
        THEN 3 -- completed

        WHEN
            ppo.active_flag = 'N' -- should only by queued orders.
        THEN -1
        ELSE -1
    END
    AS order_status,
    (
        CASE
            WHEN ISNULL(unverifiedOrders.oneOrderVerified,'N') = 'Y'
            THEN
                unverifiedOrders.order_relationship_id
            ELSE
                data.order_relationship_id
        END
    ) AS  order_relationship,
    --data.order_relationship_id as order_relationship,
    (CASE  -- for  unconfirmed pharmacy orders return extra order status reason
        WHEN ((ppo.order_verified = 'N' OR (ISNULL(unverifiedOrders.oneOrderVerified,'N') = 'Y' OR data.adminOrderVerified = 'N' ) ) AND ISNULL(ppo.active_flag, 'Y') = 'Y' )
        then
            case
        
             when ISNULL(unverifiedOrders.oneOrderVerified,'N') = 'Y'
                    THEN
                        CASE
                            WHEN (unverifiedOrders.relationship_code = 'H')  THEN -1
                            WHEN (unverifiedOrders.relationship_code = 'R') THEN -2
                            WHEN (unverifiedOrders.relationship_code = 'DC') THEN -3
                            WHEN  ppo.order_category_id = 3022 AND  posp.reason_binary_code IS NOT NULL THEN posp.reason_binary_code
                         END
                    ELSE
                        CASE

                            WHEN (data.relationship_code = 'H' OR unverifiedOrders.relationship_code = 'H')  THEN -1
                            WHEN (data.relationship_code = 'R' OR unverifiedOrders.relationship_code = 'R') THEN -2
                            WHEN (data.relationship_code = 'DC' OR unverifiedOrders.relationship_code = 'DC') THEN -3
                            WHEN  ppo.order_category_id = 3022 and  posp.reason_binary_code IS NOT NULL THEN posp.reason_binary_code
                            ELSE NULL
                        END   
            END
        ELSE NULL
    END) AS status_reason

FROM
    #tempResult_local ppo
    LEFT JOIN
    (
        --done as an sub select because of performance.
        SELECT
            por.relationship_code,
            adm.order_verified as adminOrderVerified,
            maxAdminOrder.related_phys_order_id,
            por.order_relationship_id
        FROM
        (
            --this query returns the max created date for the max effective date before the specific date.
            SELECT
                adm.related_phys_order_id,
                adm.effective_date,
                MAX(adm.created_date) created_date
            FROM
            (
                --this query returns the max effective date before the specific date.
                SELECT
                    related_phys_order_id,
                    MAX(effective_date) effective_date
                FROM
                    #adminOrder
                WHERE
                    effective_date<=facility_date
                GROUP BY
                    related_phys_order_id
            )AS maxAdminEffDate
            INNER JOIN #adminOrder adm ON
                maxAdminEffDate.related_phys_order_id = adm.related_phys_order_id
                AND maxAdminEffDate.effective_date = adm.effective_date
            GROUP BY adm.related_phys_order_id, adm.effective_date
        )AS maxAdminOrder
        INNER JOIN #adminOrder adm ON
                 maxAdminOrder.related_phys_order_id = adm.related_phys_order_id
                AND maxAdminOrder.effective_date = adm.effective_date
                AND maxAdminOrder.created_date = adm.created_date
        INNER JOIN dbo.pho_order_relationship por ON
                por.order_relationship_id = adm.order_relationship_id
        WHERE
             (ISNULL(adm.ineffective_date,adm.facility_date)>=adm.facility_date OR ISNULL(adm.order_verified, 'Y')='N')
    )AS DATA ON data.related_phys_order_id = ppo.phys_order_id

    LEFT JOIN
    (
                --This query returns and Pending administrative order for a given Phys order.
                --If any order has an associated Pending Confirmation Admin order, the status of that
                -- Order will be Pending Confirmation. Incase there are more then 1 pending confirmation Admin orders
                -- we will take the later of the two (max effective_date, then admin_order_id if there are multiple admin orders with the same effective_date).
                SELECT adm.related_phys_order_id, por.order_relationship_id,por.relationship_code,'Y' AS oneOrderVerified
                 FROM
                    #adminOrder adm
                    INNER JOIN (
                        SELECT MAX(admin_order_id) admin_order_id, ao.related_phys_order_id FROM (
                            SELECT related_phys_order_id, MAX(effective_date) effective_date FROM
                            #adminOrder
                            WHERE order_verified = 'N'
                            GROUP BY related_phys_order_id
                        ) maxDate
                        INNER JOIN #adminOrder ao
                            ON maxDate.related_phys_order_id = ao.related_phys_order_id
                            AND maxDate.effective_date = ao.effective_date
                        GROUP BY ao.related_phys_order_id
                    ) maxId ON maxId.admin_order_id = adm.admin_order_id
                    INNER JOIN dbo.pho_order_relationship por on por.order_relationship_id = adm.order_relationship_id

        )AS unverifiedOrders on unverifiedOrders.related_phys_order_id = ppo.phys_order_id
		
        -- join to the clinical review table
        LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=ppo.phys_order_id AND clinrev.reviewed_date is NULL
        LEFT JOIN pho_phys_order_esignature esign ON esign.phys_order_id=ppo.phys_order_id AND esign.sign_contact_id IS NULL
    LEFT JOIN pho_order_pending_reason posp ON posp.phys_order_id = ppo.phys_order_id 
    LEFT JOIN pho_phys_order_extended_schedule poes ON poes.phys_order_id = ppo.phys_order_id
    WHERE
    ppo.order_category_id <> 1
    AND ppo.order_category_id <> 3030


SET @step = 4
SET @status_text = CONVERT(VARCHAR(26), GETDATE(), 13) + ' Done'
IF @debug='Y' PRINT @status_text  

SET @status_text = null;

END TRY

--error trapping
BEGIN CATCH

    SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()

    SET @status_code = 1

    GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
    IF @debug='Y' PRINT 'Successfull execution of stored procedure'
    RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '  ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:    ' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON [sproc_sprt_pho_getOrderStatus] TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_sprt_pho_getOrderStatus.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_pho_getOrderStatus.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_update_data_assertion_result.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**
* This procedure updates data assertion results
*
    @id : Data Assertion table PK to be updated
    @sp_proc_name  : Optional, stored procedure that has done Data Assertions. This is typically null since the value is the same as when the row originally added.
    @env_name : Optional, Environment name in which the stored proc is originating. This is typically null since the value is the same as when the row originally added.
    @org_id : Optional,Client Organization Id in which the stored proc is originating. This is typically null since the value is the same as when the row originally added.
    @org_code : Optional, Client Organization code in which the stored proc is originating. This is typically null since the value is the same as when the row originally added.
    @status : status of the current Data Assertion record,
    @message : message of the current Data Assertion record,
    @start_time : Optional, starting time of Data Assertion. If not specified current date/time will be used.
    @end_time : end time of Data Assertion.

    Returns: 0 when successful
*/

IF EXISTS (SELECT 1 FROM SYSOBJECTS WHERE NAME = 'sproc_update_data_assertion_result')
    BEGIN
        DROP PROCEDURE sproc_update_data_assertion_result
    END
GO

CREATE PROCEDURE [dbo].[sproc_update_data_assertion_result] (
    @sp_proc_name varchar(255),
    @env_name varchar(255),
    @org_id int,
	@start_time datetime2(3),
    @status varchar(20),
    @message varchar(max),
	@end_time datetime2(3)
)

AS
BEGIN
    BEGIN TRY
            DECLARE @SQLString NVARCHAR(4000);
            DECLARE @ParmDefinition NVARCHAR(4000);
            DECLARE @data_assertion_db  NVARCHAR(500);

			SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'true' AND name = 'DATA_ASSERTION'
			IF (@data_assertion_db IS NULL)
				BEGIN
					SELECT @data_assertion_db = data_source FROM sys.servers WHERE is_linked = 'false'
				END
			ELSE
				BEGIN
					SET @data_assertion_db = 'DATA_ASSERTION'
				END

            SET @SQLString =
                        N'UPDATE [' +  @data_assertion_db + '].[DataAssertion].[dbo].[da_procedure_results]
					SET [status] = @status
					,[message] = @message
					,[end_time] = @end_time
					WHERE sp_proc_name = @sp_proc_name AND
					env_name  = @env_name AND
					org_id = @org_id AND
					start_time = @start_time'
            SET @ParmDefinition = N'
			@sp_proc_name varchar(255),
			@env_name varchar(255),
			@org_id int,
			@status varchar(20),
			@message varchar(max),
			@start_time datetime2(3),
			@end_time datetime2(3)';
            EXECUTE sp_executesql @SQLString, @ParmDefinition,
                    @sp_proc_name = @sp_proc_name,
                    @env_name = @env_name,
                    @org_id = @org_id,
                    @status = @status,
                    @message = @message,
                    @start_time = @start_time,
                    @end_time = @end_time
        RETURN 0
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_STATE() AS ErrorState,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
grant execute on [dbo].[sproc_update_data_assertion_result] to public
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_update_data_assertion_result.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_update_data_assertion_result.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**
**	Purpose:	The purpose of this procedure is to create a new MDS 3.0 assessment and return the newly
**				created assess_id from the assessment table.
**				This version changes the parameter list primarily due to revision v2.00
**
**  Target Env: US Only
**
**	Parameters:
**			@facId				- Facility id
**			@clientId			- Client id
**			@createdDate		- created date
**			@createdBy			- created by
**			@assessDate			- This is the assess date the user enters.
**			@provState			- Province/State
**			@ruralUrban			- 'U' if facility is urban, 'R' if facility is rural
**			@positDesc			- Position Description
**			@longUsername		- Long username
**	        @rugsPayer		    - post-October 2019 RUGS Insurance Payer workflow
**			@A0200				- Question A0200
**			@A0300A				- Question A0300A
**			@A0300B				- Question A0300B
**			@A0310A				- Question A0310A
**			@A0310B				- Question A0310B
**			@A0310C				- Question A0310C
**			@A0310D				- Question A0310D
**			@A0310E				- Question A0310E
**			@A0310F				- Question A0310F
**			@A0310G				- Question A0310G
**			@A0310G1			- Question A0310G1
**			@A0310H				- Question A0310H
**			@A2200				- Question A2200
**			@mdcrStartDate		- Medicare start date
**			@rapsType			- raps type
**			@autoPopulateFlag	- Is a flag to determine if to do the auto populate
**			@operationFlag		- Is a flag to determine if we're copying or creating a new assessment. Can be 'Y' or 'N'
**			@copyFromAssessId	- Is the assess_id of the assessment to copy from.
**			@hc_no_id_param		- Resident Number = -2 this set by Admin general conf.
**			@debug				- Flag to print debug statements.
**			@status_code		- Return value if the procedure ran correctly, 1 if error, 0 if success.
**			@status_text		- Error message if status_code is 1.
**
******************************************************************************************************/
IF EXISTS (	SELECT *
			FROM sys.objects
			WHERE object_id = OBJECT_ID(N'[dbo].[sproc_mds_dml_createMDS3Assessment_v2]')
			  AND OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[sproc_mds_dml_createMDS3Assessment_v2]
GO

CREATE PROCEDURE [dbo].[sproc_mds_dml_createMDS3Assessment_v2]
(
	@facId				int
	,@clientId			int
	,@createdDate		datetime
	,@createdBy			varchar(60)
	,@assessDate		datetime
	,@provState			char(2)
	,@ruralUrban		varchar(5)
	,@positDesc			varchar(254)
	,@longUsername		varchar(60)
	,@rugsPayer		    char(1)
	,@A0200				char(1)
	,@A0300A			char(1)
	,@A0300B			char(1)
	,@A0310A			varchar(2)
	,@A0310B			varchar(2)
	,@A0310C			char(1)
	,@A0310D			char(1)
	,@A0310E			char(1)
	,@A0310F			varchar(2)
	,@A0310G			char(1)
	,@A0310G1			char(1)
	,@A0310H			char(1)
	,@A2200				varchar(8)
	,@mdcrStartDate		datetime
	,@rapsType			char(1)
	,@autoPopulateFlag	char(1)
	,@operationFlag		char(1)
	,@copyFromAssessId	int
	,@hc_no_id_param	int
	,@debug				char(1) = 'N'
	,@status_code		int				OUTPUT
	,@status_text		varchar(3000)	OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@step				int = 0
		,@error_code		int = 0
		,@stdAssessId		int = 11
		,@assessId			int
		,@acknowledged		char(1)
		,@nonAutoAcknowledged char(1)
		,@actionQK			varchar(10)
		,@actionVal			char(1)
		,@cmiSetFed			varchar(5)
		,@cmiSetState		varchar(5)
		,@calcTypeState		varchar(5)
		,@altCmiSetState	varchar(5)
		,@altCalcTypeState	varchar(5)
		,@ard				varchar(8)
		,@isc				varchar(10) = '--'	-- default to invalid
		,@populateKey		varchar(16) = NULL
		,@Jan1900			datetime    = '1900-01-01'
		,@Oct2010			datetime    = '2010-10-01'
		,@Apr2012			datetime    = '2012-04-01'
		,@Oct2016			datetime    = '2016-10-01'
		,@Oct2019			datetime    = '2019-10-01'
		,@Oct2020			datetime    = '2020-10-01'
		,@NppA0310C 		char(1) = @A0310C
-- Return params for Gen Response use		
		,@rfaA0200			char(1) = ''
		,@rfaA0300A			char(1) = ''
		,@rfaA0300B			char(1) = ''
		,@rfaA0310A			varchar(2) = ''
		,@rfaA0310B			varchar(2) = ''
		,@rfaA0310C			char(1) = ''
		,@rfaA0310D			char(1) = ''
		,@rfaA0310E			char(1) = ''
		,@rfaA0310F			varchar(2) = ''
		,@rfaA0310G			char(1) = ''
		,@rfaA0310G1		char(1) = ''
		,@rfaA0310H			char(1) = ''
		,@rfaA1600			varchar(8) = ''
	;

	SELECT
		@status_code  = 0
		,@status_text = ''
	;
	IF (@rugsPayer is NULL)
	BEGIN
	    SET @rugsPayer = '0';  -- 0 = No 
	END

	BEGIN TRY
		SET @ard = CONVERT(varchar(8), @assessDate, 112);

		IF (@debug= 'Y')
			PRINT 'BEGIN STEP determine valid assess type ' + CONVERT(varchar(26), GETDATE(), 109);

		-- get assess type code from input values
		IF (@operationFlag = 'I')
		BEGIN
			SET @isc = 'XX';
		END
		ELSE IF (@assessDate < @Oct2016) 
		BEGIN
		-- A0300A, A0300B, & A0310H are not applicable
			EXEC [dbo].[sproc_mds_list_determineMDS3AssessType_v2]
				@assessDate, @rugsPayer, @A0200, '0', NULL, @A0310A, @A0310B, @A0310C, @A0310D, @A0310F, NULL,
				@isc OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;
		END
		ELSE
		BEGIN
			-- set default values
		    IF (@assessDate < @Oct2019) 
			BEGIN
			  SET @A0300A = '0';
			  SET @A0300B = null;
			END
			ELSE
			BEGIN
			  If (@rugsPayer = '0')
			  Begin
			    SET @A0310C = null;
			  End
			  SET @A0310D = null;
			END
		
			EXEC [dbo].[sproc_mds_list_determineMDS3AssessType_v2]
				@assessDate, @rugsPayer, @A0200, @A0300A, @A0300B, @A0310A, @A0310B, @A0310C, @A0310D, @A0310F, @A0310H,
				@isc OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;
		END

		
		IF (@status_code <> 0)
		BEGIN
			IF (@debug = 'Y')
				PRINT 'FAILED determine valid assess type, ' + @status_text + '  ' + CONVERT(varchar(26), GETDATE(), 109);
			RETURN;
		END

		IF (@debug = 'Y')
			PRINT 'END STEP select as_std_assess_type_code_map, ISC: ' + @isc + '   ' + CONVERT(varchar(26), GETDATE(), 109);
			

		-- if we have an invalid assess type selection then don't create an assessment and return 1
		IF (@isc IS NULL OR @isc = '--')
		BEGIN
			SELECT
				@status_code  = 1
				,@status_text = 'Invalid assess type'
			;

			RETURN;
		END

		-- if the final assessDate is before the MDS 3.0 implementation date,
		-- don't create an assessment and return 2
		IF (@assessDate < @Oct2010)
		BEGIN
			SELECT
				@status_code  = 2
				,@status_text = 'Assess date before Oct 1, 2010'
			;

			RETURN;
		END

		-- if the original admission date is before 1900-01-01,
		-- don't create an assessment and return 3
		IF EXISTS (	SELECT *
					FROM [dbo].[clients]
					WHERE client_id = @clientId
					  AND original_admission_date < @Jan1900
					)
		BEGIN
			SELECT
				@status_code  = 3
				,@status_text = 'The admission date entered for this resident is invalid. Please correct it prior to creating the MDS.'
			;

			RETURN;
		END

		-- get the RUG config parameters to copy into the assessment
		EXEC [dbo].[sproc_as_getStateRugConfiguration]
			@provstate, @facId, @cmiSetState OUTPUT, @calcTypeState OUTPUT, @altCmiSetState OUTPUT,
			@altCalcTypeState OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END

		-- Set the Federal CMI set depending on whether the facility is Rural or Urban
		SET @cmiSetFed =
				CASE @ruralUrban
					WHEN 'U' THEN 'E02'
					WHEN 'R' THEN 'E01'
					ELSE 'E02'
				END;

		IF (@debug = 'Y')
			PRINT 'BEGIN STEP INSERT into as_assessment ' + CONVERT(varchar(26), GETDATE(), 109);

		-- get new assess id from global primary keys table.
		EXEC [dbo].[get_next_primary_key]
			'as_assessment', 'assess_id', @assessId OUTPUT, 1;

		-- create response for the questions shown in the create new MDS popup

		IF (@A0310F IN ('10', '11', '12'))
			SET @populateKey = 'A2000'
		ELSE IF (@A0310F = '01')
			SET @populateKey = 'A1600'
		;

		-- when creating corrections we need to have everything as signed, even the auto-populated responses
		IF (@operationFlag = 'M')
		BEGIN
			SET @acknowledged = 'S'
			SET @nonAutoAcknowledged = 'S';
		END
		ELSE
		BEGIN
			SET @acknowledged = 'Y'
			SET @nonAutoAcknowledged = 'N';
		END
		;

		IF (@assessDate < @Apr2012)
			SET @actionQK = 'X0100'
		ELSE
			SET @actionQK = 'A0050'
		;

		SET @actionVal =
				CASE @operationFlag
					WHEN 'I' THEN '3'
					WHEN 'M' THEN '2'
					ELSE '1'
				END;

		BEGIN TRANSACTION MDS3A
			-- create as_assessment row
			INSERT INTO [dbo].[as_assessment] (
				fac_id
				,client_id
				,assess_id
				,assess_date
				,prov_state
				,std_assess_id
				,assess_type_code
				,created_date
				,created_by
				,revision_date
				,revision_by
				,edited_date
				,edited_by
				,status
				,raps_type
				,cmi_set_state
				,calc_type_state
				,alt_cmi_set_state
				,alt_calc_type_state
				,cmi_set_fed
				,primary_reason_code
				,secondary_reason_code
			) VALUES (
				@facId
				,@clientId
				,@assessId
				,@assessDate
				,@provState
				,@stdAssessId
				,@isc
				,@createdDate
				,@createdBy
				,@createdDate
				,@createdBy
				,@createdDate
				,@createdBy
				,'In Progress'
				,@rapsType
				,@cmiSetState
				,@calcTypeState
				,@altCmiSetState
				,@altCalcTypeState
				,@cmiSetFed
				,@A0310A
				,@A0310B
			);

			-- Use the federal CMI set (and calculation type) for now
			INSERT INTO [dbo].[as_assessment_insurance_rug] (
				assess_id
				,cmi_set_ins
			) VALUES (
				@assessId
				,@cmiSetFed
			);

		-- Set the Federal PDPM CMI set 
			DECLARE @cmiFedPdpm int;
			SELECT @cmiFedPdpm=model_id
			FROM WESREFERENCE..as_std_pdpm_model 
			WHERE short_desc = 'pdpm'
				and std_assess_id = 11
				and deleted = 'N'
				and effective_date < @assessDate
				and (ineffective_date is null or @assessDate < ineffective_date)
        
        -- set whether state is using PDPM for OBRA assessments.  
        -- Null for pre @Oct2020 unless special.
            declare @statePdpmObraCd  [char](1);  
            select @statePdpmObraCd = s.[STATE_PDPM_OBRA_CD]  
            from [WESREFERENCE]..[as_std_pdpm_state]  s 
            where s.prov_state = @provState
              and s.deleted = 'N'
              and s.effective_date <= @assessDate
              and (s.ineffective_date is null or s.ineffective_date >= @assessDate)
            ;
            if (@statePdpmObraCd is null and @assessDate >= @Oct2020)
            begin
                set @statePdpmObraCd = '0';
            end
			
		-- insert the new row to hold this asmt's PDPM data
			INSERT INTO [dbo].[as_assessment_pdpm] ( 
				  [assess_id]  ,[model_id]    ,[STATE_PDPM_OBRA_CD]
			) VALUES (
				  @assessId    ,@cmiFedPdpm   ,@statePdpmObraCd
			);

			IF (@debug = 'Y')
				PRINT 'BEGIN STEP INSERT into as_assessment_section ' + CONVERT(varchar(26), GETDATE(), 109);

			-- create sections
			INSERT INTO [dbo].[as_assessment_section] (
				section_code
				,sequence
				,assess_id
				,fac_id
			)
			SELECT
				DISTINCT(stdSect.section_code)
				,stdSect.sequence
				,@assessId
				,@facId
			FROM [dbo].[as_std_question_assessment_type_active_date_range] stdQuesAssType
				INNER JOIN [dbo].[as_std_question] stdQues
					ON  stdQues.std_assess_id = stdQuesAssType.std_assess_id
					AND stdQues.question_key  = stdQuesAssType.question_key
				INNER JOIN [dbo].[as_std_section] stdSect
					ON  stdSect.std_assess_id = stdQues.std_assess_id
					AND stdSect.section_code  = stdQues.section_code
				LEFT JOIN [dbo].[as_std_question_state_code] stdQuesState
					ON  stdQuesState.std_assess_id         = stdQues.std_assess_id
					AND stdQuesState.question_key          = stdQues.question_key
					AND stdQuesState.assess_type_code      = stdQuesAssType.assess_type_code
					AND stdQuesState.parent_effective_date = stdQuesAssType.effective_date
				WHERE stdQuesAssType.std_assess_id    =  @stdAssessId
				  AND stdQuesAssType.assess_type_code =  @isc
				  AND stdQuesAssType.effective_date   <= @assessDate
				  AND (stdQuesAssType.ineffective_date IS NULL OR stdQuesAssType.ineffective_date >= @assessDate)
				  AND (	(stdQuesState.prov_code IS NULL AND stdSect.section_code <> 'S')
						OR
						(stdQuesState.prov_code = @provState
						AND stdQuesState.effective_date <= @assessDate
						AND (stdQuesState.ineffective_date IS NULL OR stdQuesState.ineffective_date >= @assessDate)
						)
					  )
			;

			IF (@isc <> 'OSA')
			BEGIN
				INSERT INTO [dbo].[as_response] (
					assess_id
					,question_key
					,item_value
					,acknowledged
					,created_date
					,position_desc
					,revision_date
					,revision_by
					,long_username
				) VALUES
				 (@assessId, 'A0310A',  @A0310A,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310B',  @A0310B,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310E',  @A0310E,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310F',  @A0310F,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				;
			END

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			 (@assessId, @actionQK, @actionVal, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Submission Parameters')
			,(@assessId, 'X1100E',  '^',        @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,@populateKey
				,@ard
				,@acknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @populateKey IS NOT NULL
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310C'
				,case when @assessDate < @Oct2019 then @A0310C else @NppA0310C end
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate < @Oct2019 or (@isc='NPP' and @assessDate >= @Oct2019)
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310D'
				,@A0310D
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate < @Oct2019
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310G'
				,@A0310G
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Apr2012 and @isc <> 'OSA')
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310G1'
				,@A0310G1
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2019 and @isc in ('NC','NQ','NP','ND','SP','SD','NPP'))
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310H'
				,@A0310H
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2016 and @isc <> 'IPA' and @isc <> 'OSA')
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0300A'
				,@A0300A
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate >= @Oct2019
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0300B'
				,@A0300B
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2019 and @isc = 'OSA')
			;

			-- Insert A2200 and A2300 when applicable
			DECLARE  @A2200_Ack char(1)='N'
					,@A2200_UserName varchar(60)='System Populated - Validation Edit';
			IF (@A0310A='05' or @A0310A='06' or @operationFlag='M')
			BEGIN
				SET @A2200_Ack = @acknowledged;
				SET @A2200_UserName = @longUsername;
			END

			--Add A2200
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) SELECT
				@assessId, 'A2200', @A2200, @A2200_Ack, @createdDate, @positDesc, @createdDate, @createdBy, @A2200_UserName
			  FROM dbo.as_std_question_assessment_type_active_date_range stdQuesAssType
			  WHERE stdQuesAssType.std_assess_id = @stdAssessId
			    AND stdQuesAssType.assess_type_code = @isc
				AND stdQuesAssType.effective_date <= @assessDate
				AND stdQuesAssType.question_key = 'A2200'
			;
			
			--Add A2300
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) SELECT
			    @assessId, 'A2300', @ard, @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername
			  FROM dbo.as_std_question_assessment_type_active_date_range stdQuesAssType
			  WHERE stdQuesAssType.std_assess_id = @stdAssessId
			    AND stdQuesAssType.assess_type_code = @isc
				AND stdQuesAssType.effective_date <= @assessDate
				AND stdQuesAssType.question_key = 'A2300'
			;
			
			-- insert an entry into the as_mds3_resident_header_info
			INSERT INTO [dbo].[as_mds3_resident_header_info] (
				assess_id
				,admit_date
				,payer_id
				,mdcr_start_date
			)
			SELECT TOP 1
				@assessId
				,c.original_admission_date
				,ci.primary_payer_id
				,@mdcrStartDate
			FROM [dbo].[clients] c
				LEFT JOIN [dbo].[census_item] ci
					ON  ci.client_id = c.client_id
					AND ci.deleted   = 'N'
					AND CAST(ci.effective_date AS date) <= @assessDate
					AND (ci.ineffective_date IS NULL OR ci.ineffective_date > @assessDate)
					AND (ci.record_type IS NULL      OR ci.record_type = 'C')
			WHERE c.client_id = @clientId
			ORDER BY ci.effective_date DESC
			;

			-- Default the A2400a..c responses
			IF (@operationFlag = 'N')
			BEGIN
				-- defaults
				DECLARE
					@A2400A		varchar(30) = '0'
					,@A2400B	varchar(8)  = '^'
					,@A2400C	varchar(8)  = '^'
				;

				EXEC dbo.sproc_mds_dml_getMDS3A2400	@facId, @clientId, @assessId, @debug,	
								@A2400A	out, @A2400B out, @A2400C out, @status_code out, @status_text out;

				IF (@status_code <> 0)
				BEGIN
					SET @status_code = -1;
					RETURN;
				END
				
				INSERT INTO [dbo].[as_response] (
					assess_id
					,question_key
					,item_value
					,acknowledged
					,created_date
					,position_desc
					,revision_date
					,revision_by
					,long_username
				) VALUES
				 (@assessId, 'A2400A', @A2400A, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				,(@assessId, 'A2400B', @A2400B, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				,(@assessId, 'A2400C', @A2400C, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				;
			END

			-- TODO: Add error handling to this sproc
			EXEC [dbo].[sproc_mds_dml_insert_lineage]
				@assessId, @copyFromAssessId, @operationFlag;

		COMMIT TRANSACTION MDS3A

		IF (@debug = 'Y')
			PRINT 'END STEP								' + CONVERT(varchar(26), GETDATE(),109);
	END TRY

	-- error trapping
	BEGIN CATCH
		IF (@@TRANCOUNT > 0)
			ROLLBACK TRANSACTION MDS3A;

		SELECT
			@error_code   = ERROR_NUMBER()
			,@status_text = ERROR_MESSAGE()
			,@status_code = -1
		;

		GOTO PgmAbend;
	END CATCH

	IF (@copyFromAssessId IS NOT NULL)
	BEGIN
		UPDATE [dbo].[as_assessment] SET
			submission_req =
				(SELECT case when (@isc = 'NPP') or (@rugsPayer='1' and @A0310B='01') then 'N' else submission_req end
				 FROM [dbo].[as_assessment]
				 WHERE assess_id = @copyFromAssessId)
		WHERE assess_id = @assessId
		;
	END

	IF (@operationFlag = 'N' OR (@autoPopulateFlag = 'Y' AND @operationFlag <> 'X'))
	BEGIN
		-- Always auto populate for new assessments, or when copying and auto populate on copy has been selected.

		-- auto populate resident profile, weights & vitals, immunization
		EXEC [dbo].[sproc_mds_dml_autopopulateMDS3]
			@facId, @assessId, @assessDate, @clientId, @createdDate, @createdBy, @positDesc,
			'ALL', @hc_no_id_param, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END

		UPDATE a SET
			submission_req =
				CASE
					WHEN @isc = 'NPP' THEN 'N' -- do not submit NPP RUGs Payer 
					WHEN @isc = 'NP' AND @rugsPayer='1' AND @A0310B='01' THEN 'N'  -- do not submit NP RUGs Payer 
					WHEN r.item_value IS NULL AND submission_req in ('Y', 'N') THEN submission_req
					WHEN r.item_value = '3' OR r.item_value = '2' THEN 'Y'
					ELSE 'N'
				END
		FROM [dbo].[as_assessment] a
			LEFT JOIN [dbo].[as_response] r
				ON  r.assess_id    = a.assess_id
				AND r.question_key = 'A0410'
		WHERE a.assess_id = @assessId
		;
	END

	IF (@operationFlag IN ('C', 'X', 'M'))
	BEGIN
		EXEC [dbo].[sproc_mds_dml_copyMDS3AssessmentResponses]
			@facId, @copyFromAssessId, @assessId, @createdDate, @createdBy, @positDesc, @longUsername,
			@operationFlag, @autoPopulateFlag, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END
	END

	IF (@operationFlag IN ('X', 'M', 'I'))
	BEGIN
		UPDATE [dbo].[as_assessment] SET
			status = CASE @operationFlag
						WHEN 'X' THEN 'Incomplete'
						WHEN 'M' THEN 'Modified'
						WHEN 'I' THEN 'Inactivated'
					 END
			,revision_by   = @createdBy
			,revision_date = @createdDate
		WHERE assess_id = @copyFromAssessId
		;

		IF (@operationFlag IN ('M', 'I'))
		BEGIN
			UPDATE [dbo].[as_assessment] SET
				incorrect_assess_id = @copyFromAssessId
			WHERE assess_id = @assessId
			;

			EXEC [dbo].[sproc_mds_dml_populateCorrectionAssessment]
				@assessId, @copyFromAssessId, @operationFlag, @createdDate, @createdBy, @positDesc,
				@longUsername, @debug, @status_code OUTPUT, @status_text OUTPUT;

			IF (@status_code <> 0)
			BEGIN
				SET @status_code = -1;
				RETURN;
			END
		END
	END

	/*	Insert SHORT STAY fields while creating a new assessment for effective date,
		for correct ISC type and if fields were not already present in the as_response
		table because of the change ARD type function or for copy
	*/
	IF EXISTS (	SELECT *
				FROM [dbo].[as_assessment] asmt
					INNER JOIN [dbo].[as_std_question_assessment_type_active_date_range] qat
						ON  qat.std_assess_id     = asmt.std_assess_id
						AND qat.assess_type_code  = asmt.assess_type_code
						AND qat.effective_date   <= asmt.assess_date
				WHERE asmt.std_assess_id = @stdAssessId
				  AND asmt.assess_id     = @assessId
				  AND qat.question_key   = 'A_SHORTA'
				)
	BEGIN
		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTA'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTA', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END

		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTB'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTB', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END

		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTC'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTC', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END
	END

	-- if correction record is created, set the acknowledged = 'S' (signed) for SS fields, we found issue in VA
	IF (@operationFlag = 'M')
	BEGIN
		UPDATE [dbo].[as_response] SET
			acknowledged = 'S'
		WHERE assess_id = @assessId
		  AND question_key IN ('A_SHORTA', 'A_SHORTB', 'A_SHORTC')
		;
	END
	
	-- Get saved RFA values for Gen Response use
	Select @rfaA0200=coalesce(Item_Value,'')   from as_response where assess_id=@assessId and question_key='A0200';
	Select @rfaA0300A=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0300A';
	Select @rfaA0300B=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0300B';
	Select @rfaA0310A=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310A';
	Select @rfaA0310B=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310B';
	Select @rfaA0310C=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310C';
	Select @rfaA0310D=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310D';
	Select @rfaA0310E=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310E';
	Select @rfaA0310F=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310F';
	Select @rfaA0310G=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310G';
	Select @rfaA0310G1=coalesce(Item_Value,'') from as_response where assess_id=@assessId and question_key='A0310G1';
	Select @rfaA0310H=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310H';
	Select @rfaA1600=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A1600';

	-- return the assess_id and assess_date that was inserted into as_assessment
	SELECT @assessId as assess_id, @isc as isc
		,@rfaA0200 as a0200, @rfaA0300A as a0300a, @rfaA0300B as a0300b, @rfaA0310A as a0310a, @rfaA0310B as a0310b, @rfaA0310C as a0310c
		,@rfaA0310D as a0310d, @rfaA0310E as a0310e, @rfaA0310F as a0310f, @rfaA0310G as a0310g, @rfaA0310G1 as a0310g1, @rfaA0310H as a0310h
		,@rfaA1600 as a01600
	;
	

	-- program success return
	PgmSuccess:
	IF (@status_code = 0)
	BEGIN
		IF (@debug = 'Y')
			PRINT 'Successful execution of stored procedure';

		RETURN @status_code;
	END

	-- program failure return
	PgmAbend:
	IF (@debug = 'Y')
	BEGIN
		PRINT 'Stored procedure failure in step: ' + CONVERT(varchar(3), @step) + ' ' + CONVERT(varchar(26), GETDATE());
		PRINT 'Error code: ' + CONVERT(varchar(10), @error_code) + '; Error description: ' + @status_text;
	END

	RETURN @status_code;
END
GO

GRANT EXECUTE ON dbo.sproc_mds_dml_createMDS3Assessment_v2 TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_getMDS3A2400.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**	Created By: Roger Cauvin
**	Created Date: 01/20/16
**
**	Purpose:	The purpose of this procedure is to get the values for A2400 fields
**
**
**	Parameters:
**			@facId				- Facility id
**			@clientId			- Client id
**			@assessId			- Current Assessment's primary key
**			@debug				- Flag to print debug statements.
**			@A2400A				- Return A2400A value
**			@A2400B				- Return A2400B value
**			@A2400C				- Return A2400C value
**			@status_code		- Return value if the procedure ran correctly, 1 if error, 0 if success.
**			@status_text		- Return Error message if status_code is 1.
**
*****************************************************************************************************/
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_mds_dml_getMDS3A2400]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[sproc_mds_dml_getMDS3A2400]
GO

CREATE PROCEDURE dbo.sproc_mds_dml_getMDS3A2400
(
	@facId				int,
	@clientId			int,
	@assessId			int,
	@debug				char(1)  = 'N',
	@A2400A				varchar(30)   output,
	@A2400B				varchar(8)    output,
	@A2400C				varchar(8)    output,
	@status_code		int           output, 
	@status_text		varchar(3000) output
)
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@facIdLocal		int = @facId
		,@clientIdLocal	int = @clientId
		,@assessIdLocal	int = @assessId

		,@step			int = 0
		,@error_code	int = 0
		,@assessDate	datetime
		,@a2000			varchar(8)  -- Assessment discharge date
		,@partaPayer	varchar(20) = 'Medicare A'
		,@admissionDate	datetime    = NULL
		,@defaultDate	datetime    = '12-31-9999'

		,@admissionDateEntryTrackingCandidate		datetime = NULL
		,@currentCensusAdmissionDateCandidate		datetime = NULL
		,@priorCensusAdmissionDateCandidate			datetime = NULL
		,@latestPotentialDisch						datetime = NULL
		,@admissionDateDischargeInferedTiCandidate	datetime = NULL
		,@latestDischargeDate						datetime = NULL
		,@dischargeDate								datetime = NULL
		,@medicareEffectiveDate						datetime = NULL
		,@medicareIneffectiveDate					datetime = NULL
		,@maxInterruptedStayDays					int = 3
		
		,@currentCensusResetInitAdmissionFlag		char = ''    -- most recent admission census_item.reset_original_admission_date
		,@currentCensusStartMcareStayFlag 			char = ''    -- most recent admission census_item.medicare_admission_day
		,@priorCensusResetInitAdmissionFlag 		char = ''    -- previous admission census_item.reset_original_admission_date
		,@priorCensusStartMcareStayFlag     		char = ''    -- previous admission census_item.medicare_admission_day
	;

	-- Default the A2400a..c responses
	SELECT
		@A2400A       = '0'
		,@A2400B      = '^'
		,@A2400C      = '^'
		,@status_code = 0
		,@status_text = ''
	;

	BEGIN TRY
		IF (@debug = 'Y')
		BEGIN
			PRINT '@facIdLocal = '    + CONVERT(varchar(10), @facIdLocal);
			PRINT '@clientIdLocal = ' + CONVERT(varchar(10), @clientIdLocal);
			PRINT '@assessIdLocal = ' + CONVERT(varchar(10), @assessIdLocal);

			PRINT 'STEP 0: get assess and A2000 dates from assessment - ' + CONVERT(varchar(26), GETDATE(), 109);
		END

		-- get assess_date and A2000 discharge date from assessment
		SELECT
			@assessDate = a.assess_date
			,@a2000     = r.item_value
		FROM dbo.as_assessment a
			LEFT JOIN dbo.as_response r
				ON  r.assess_id    = a.assess_id
				AND r.question_key = 'A2000'
		WHERE a.assess_id = @assessIdLocal
		;

		IF (@debug = 'Y')
			PRINT 'STEP 1: get most recent admission date from census - ' + CONVERT(varchar(26), GETDATE(), 109);

		-- Find the latest Entry Tracking for MDS3.0 Assessments before assessDate
		SELECT TOP(1)
			@admissionDateEntryTrackingCandidate = ass.assess_date
		FROM dbo.as_assessment ass
			INNER JOIN dbo.as_response a0310f
				ON  a0310f.assess_id    = ass.assess_id
				AND a0310f.question_key = 'A0310F'
				AND a0310f.item_value   = '01' -- Make sure it is Entry
		WHERE ass.std_assess_id = 11
		  AND ass.client_id     = @clientIdLocal
		  AND ass.fac_id        = @facIdLocal
		  AND ass.assess_date   < @assessDate
		  AND ass.deleted      <> 'Y'
		  AND (ass.strikeout_flag IS NULL OR ass.strikeout_flag <> 'Y')
		  AND ass.assess_type_code IN ('ST', 'NT')
		  AND ass.status NOT IN ('INCOMPLETE', 'INACTIVATED', 'MODIFIED')
		ORDER BY ass.assess_date DESC
		;

		IF (@debug = 'Y' AND ISNULL(@admissionDateEntryTrackingCandidate, 0) <> 0)
		BEGIN
			PRINT '(1.0) @assessDate = ' + CONVERT(varchar(26), @assessDate, 101);
			PRINT '(1.0) @admissionDateEntryTrackingCandidate = ' + CONVERT(varchar(26), @admissionDateEntryTrackingCandidate, 101);
		END

		SELECT TOP(1)
			 @currentCensusAdmissionDateCandidate = CAST(ci.effective_date AS date)
			,@currentCensusResetInitAdmissionFlag = COALESCE(ci.reset_original_admission_date, 'N')
			,@currentCensusStartMcareStayFlag     = COALESCE(ci.medicare_admission_day, 'N')
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
		WHERE ci.fac_id     = @facIdLocal
		  AND ci.client_id  = @clientIdLocal
		  AND ci.deleted    = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND act.action_type = 'Admission'
		  AND CAST(ci.effective_date AS date) <= @assessDate
		ORDER BY ci.effective_date DESC
		;

		SELECT TOP(1)
			 @priorCensusAdmissionDateCandidate = CAST(ci.effective_date AS date)
			,@priorCensusResetInitAdmissionFlag = COALESCE(ci.reset_original_admission_date, 'N')
		    ,@priorCensusStartMcareStayFlag     = COALESCE(ci.medicare_admission_day, 'N')
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
		WHERE ci.fac_id     = @facIdLocal
		  AND ci.client_id  = @clientIdLocal
		  AND ci.deleted    = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND act.action_type = 'Admission'
		  AND CAST(ci.effective_date AS date) < @currentCensusAdmissionDateCandidate
		ORDER BY ci.effective_date DESC
		;
		SELECT TOP(1)
			@latestDischargeDate = ci.effective_date
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
		WHERE ci.fac_id    = @facIdLocal
		  AND ci.client_id = @clientIdLocal
		  AND ci.deleted   = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND (act.action_type = 'Discharge' OR act.action_type = 'Leave' OR ci.status_code_id = 17)
		  AND CAST(ci.effective_date AS date) <= @assessDate
		ORDER BY ci.effective_date DESC		
		
		IF (@priorCensusAdmissionDateCandidate is NULL)
		BEGIN
		  SET @priorCensusAdmissionDateCandidate = @currentCensusAdmissionDateCandidate;
		  SET @priorCensusResetInitAdmissionFlag = @currentCensusResetInitAdmissionFlag;
		  SET @priorCensusStartMcareStayFlag = @currentCensusStartMcareStayFlag;
		END
		

		IF (@debug = 'Y' AND ISNULL(@priorCensusAdmissionDateCandidate, 0) <> 0)
			PRINT '(1.1) @priorCensusAdmissionDateCandidate = ' + CONVERT(varchar(26), @priorCensusAdmissionDateCandidate, 101);
		IF (@debug = 'Y' AND ISNULL(@currentCensusAdmissionDateCandidate, 0) <> 0)
			PRINT '(1.1) @currentCensusAdmissionDateCandidate = ' + CONVERT(varchar(26), @currentCensusAdmissionDateCandidate, 101);

		SELECT TOP(1)
			@latestPotentialDisch = COALESCE(TRY_CAST(a2000.item_value AS datetime), ass.assess_date)
		FROM dbo.as_assessment ass
			INNER JOIN dbo.as_response a0310f
				ON  a0310f.assess_id    = ass.assess_id
				AND a0310f.question_key = 'A0310F'
				AND a0310f.item_value   = '11' -- Discharge Return Anticipated
			LEFT JOIN dbo.as_response a2000
				ON  a2000.assess_id    = ass.assess_id
				AND a2000.question_key = 'A2000'
		WHERE ass.std_assess_id = 11
		  AND ass.client_id     = @clientIdLocal
		  AND ass.fac_id        = @facIdLocal
		  AND ass.assess_date  <= @assessDate
		  AND ass.deleted      <> 'Y'
		  AND (ass.strikeout_flag IS NULL OR ass.strikeout_flag <> 'Y')
		  AND ass.assess_type_code NOT IN ('NT', 'ST')
		  AND ass.status NOT IN ('INCOMPLETE', 'INACTIVATED', 'MODIFIED')
		ORDER BY ass.assess_date DESC
		;
		IF (@latestPotentialDisch is NULL)
		  SET @latestPotentialDisch = @latestDischargeDate
		;

		IF (@debug = 'Y' AND ISNULL(@latestPotentialDisch, 0) <> 0)
			PRINT '(1.2) @latestPotentialDisch = ' + CONVERT(varchar(26), @latestPotentialDisch, 101);

		SELECT TOP(1)
			 @admissionDateDischargeInferedTiCandidate  = CAST(ci.effective_date AS date)
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
		WHERE ci.fac_id    = @facIdLocal
		  AND ci.client_id = @clientIdLocal
		  AND ci.deleted   = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND act.action_type in ('Discharge', 'Return from Leave')
		  AND @latestPotentialDisch <= CAST(ci.effective_date AS date)
		  AND CAST(ci.effective_date AS date) <= @assessDate
		ORDER BY ci.effective_date ASC
		; -- Find the effective_date closest to lastestPotentialDisch (ascending)
		IF (@admissionDateDischargeInferedTiCandidate is NULL)
		  SET @admissionDateDischargeInferedTiCandidate = @latestPotentialDisch
		;
		
		IF (@debug = 'Y' AND ISNULL(@admissionDateDischargeInferedTiCandidate, 0) <> 0)
			PRINT '(1.3) @admissionDateDischargeInferedTiCandidate = ' + CONVERT(varchar(26), @admissionDateDischargeInferedTiCandidate, 101);
		IF (@debug = 'Y' AND ISNULL(@admissionDateDischargeInferedTiCandidate, 0) <> 0)
			PRINT '(1.3)  Admission Discharge Days Diff = ' + CAST((DATEDIFF(day, @admissionDateDischargeInferedTiCandidate, @currentCensusAdmissionDateCandidate)-1) as varchar(10));
		


		-- Find the maximum Date of the AdmissionDate Candidates.
		SET @admissionDate = @admissionDateEntryTrackingCandidate;

		IF  ((@admissionDate IS NULL OR @admissionDate < @currentCensusAdmissionDateCandidate)
			AND @currentCensusAdmissionDateCandidate <= @assessDate)
		BEGIN
			IF (@currentCensusStartMcareStayFlag = 'Y' or 
			     DATEDIFF(day, @admissionDateDischargeInferedTiCandidate, @currentCensusAdmissionDateCandidate) > (@maxInterruptedStayDays -1)) -- m-n-1 days - discharge is day 1
				SET @admissionDate = @currentCensusAdmissionDateCandidate;
			ELSE IF (@priorCensusStartMcareStayFlag = 'Y')
				SET @admissionDate = @priorCensusAdmissionDateCandidate;
		END

		IF (@debug = 'Y') AND (ISNULL(@admissionDate, 0) <> 0)
			PRINT '(1.3) @admissionDate = ' + CONVERT(varchar(26), @admissionDate, 101);

		IF ((@admissionDate IS NULL OR @admissionDate < @admissionDateDischargeInferedTiCandidate)
			AND (@admissionDate IS NULL OR @admissionDate < @latestPotentialDisch)
			AND @admissionDateDischargeInferedTiCandidate <= @assessDate) -- Sometimes Return Anticipated are performed as Real DD/AA entries
		BEGIN
			IF (@currentCensusStartMcareStayFlag = 'Y' or 
			     DATEDIFF(day, @admissionDateDischargeInferedTiCandidate, @currentCensusAdmissionDateCandidate) > (@maxInterruptedStayDays -1)) -- m-n-1 days - discharge is day 1
				SET @admissionDate = @admissionDateDischargeInferedTiCandidate;
			ELSE IF (@priorCensusStartMcareStayFlag = 'Y')
				SET @admissionDate = @priorCensusAdmissionDateCandidate;
		END


		IF (@debug = 'Y')
		BEGIN
			IF (ISNULL(@admissionDate, 0) <> 0)
				PRINT '(1.4) @admissionDate = ' + CONVERT(varchar(26), @admissionDate, 101);
			IF (ISNULL(@admissionDate, 0) = 0)
				PRINT '(1.4) @admissionDate IS NULL';

			PRINT 'STEP 2: determine A2400a..b responses from billing - ' + CONVERT(varchar(26), GETDATE(), 109);
		END

		-- Get the effective date of the current (last) start of Medicare
		SELECT TOP(1)
			@medicareEffectiveDate = ci.effective_date
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
			INNER JOIN dbo.ar_lib_payers alp
				ON  alp.payer_id   = ci.primary_payer_id
				AND alp.deleted    = 'N'
				AND alp.payer_type = @partaPayer
		WHERE ci.fac_id    = @facIdLocal
		  AND ci.client_id = @clientIdLocal
		  AND ci.deleted   = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND ( (act.action_type IN ('Admission', 'Return from Leave')
					AND CAST(ci.effective_date AS date) = @admissionDate)
				OR
				(act.action_type = 'Internal Transfer'
					AND act.short_desc = 'PC'
					AND CAST(ci.effective_date AS date) >= @admissionDate
					AND CAST(ci.effective_date AS date) <= @assessDate)
			  )
		ORDER BY ci.effective_date DESC
		;

		IF (@debug = 'Y' AND ISNULL(@medicareEffectiveDate, 0) <> 0)
			PRINT '(2.0) @medicareEffectiveDate = ' + convert(varchar(26),@medicareEffectiveDate,101);
		IF (@debug = 'Y' AND ISNULL(@medicareEffectiveDate, 0) = 0)
			PRINT '(2.0) @medicareEffectiveDate IS NULL';

		-- If there is no current medicare date, then return with the default values
		IF (ISDATE(@medicareEffectiveDate) = 0)
			GOTO PgmSuccess;

		SELECT
			@A2400A  = '1'
			,@A2400B = CONVERT(VARCHAR(8), @medicareEffectiveDate, 112)
		;

		IF (@debug = 'Y')
			PRINT 'STEP 3: determine A2400c responses from billing - ' + CONVERT(varchar(26), GETDATE(), 109);

		-- get last Discharge (STOP BILLING) census history record if exists
		SELECT TOP(1)
			@dischargeDate = ci2.effective_date
		FROM dbo.census_item ci
			INNER JOIN dbo.census_codes act
				ON  act.item_id    = ci.action_code_id
				AND act.deleted    = 'N'
				AND act.table_code = 'ACT'
			LEFT JOIN dbo.census_item ci2
				ON  ci2.census_id = ci.census_id
				AND ci2.deleted   = 'N'
				AND CAST(COALESCE(DATEADD(DAY, -1, ci2.ineffective_date), @defaultDate) AS date) <= CAST(@assessDate AS date)
		WHERE ci.fac_id    = @facIdLocal
		  AND ci.client_id = @clientIdLocal
		  AND ci.deleted   = 'N'
		  AND ISNULL(ci.record_type, 'C') = 'C'
		  AND (act.action_type = 'Discharge' OR ci.status_code_id = 17)
		  AND ci.effective_date >= @medicareEffectiveDate
		  AND CAST(ci.effective_date AS date) <= @assessDate
		ORDER BY ci.effective_date DESC
		;

		-- get last Medicare billing history record, if exists
		SELECT TOP(1)
			@medicareIneffectiveDate = ci2.ineffective_date
		FROM dbo.census_item ci
			INNER JOIN dbo.ar_lib_payers alp
				ON  alp.payer_id  = ci.primary_payer_id
			LEFT JOIN dbo.census_item ci2
				ON  ci2.census_id = ci.census_id
				AND CAST(COALESCE(DATEADD(DAY, -1, ci2.ineffective_date), @defaultDate) AS date) <= CAST(@assessDate AS date)
		WHERE ci.fac_id = @facIdLocal and ci.client_id = @clientIdLocal
			and ci.deleted = 'N' and ci.record_type = 'R'
			and (ci.effective_date >= @medicareEffectiveDate) and (convert(date, ci.effective_date) <= @assessDate)
			and alp.payer_type = @partaPayer
		ORDER BY ci.effective_date DESC
		;

		DECLARE @subsequentNonMedicarePayer int = 0;

		-- "next" billing history record of last Medicare billing history (according to ARD)
		--   if still MedicareA, then set Ongoing
		--   if not MedicareA, then set subsequentNoneMedicarePayer to 1 (true)
		SELECT TOP(1)
			@medicareIneffectiveDate = CASE WHEN alp.payer_type = @partaPayer THEN NULL
																 ELSE @medicareIneffectiveDate
																 END
		  ,@subsequentNonMedicarePayer = CASE WHEN alp.payer_type != @partaPayer THEN 1
													           ELSE 0
													           END
		FROM dbo.census_item ci
			INNER JOIN dbo.ar_lib_payers alp
				ON alp.payer_id = ci.primary_payer_id
		WHERE ci.fac_id      = @facIdLocal
		  AND ci.client_id   = @clientIdLocal
		  AND ci.deleted     = 'N'
		  AND ci.record_type = 'R'
		  AND @medicareIneffectiveDate IS NOT NULL
		  AND ci.effective_date = @medicareIneffectiveDate
		;

		IF (ISDATE(@a2000) = 1
			AND @medicareIneffectiveDate IS NULL
			AND @dischargeDate IS NOT NULL)
		BEGIN
			SET @medicareIneffectiveDate = @dischargeDate;
		END

		SET @A2400C = COALESCE(
					CONVERT(
						varchar(8)
						,CASE WHEN ISDATE(@a2000) = 1 AND @subsequentNonMedicarePayer = 0
						  THEN CAST(@medicareIneffectiveDate AS date)
							ELSE CAST(DATEADD(DAY, -1, @medicareIneffectiveDate) AS date)
						 END
						,112)
					, '--------')
		;
	END TRY

	--error trapping
	BEGIN CATCH
		SELECT
			@error_code   = ERROR_NUMBER()
			,@status_text = ERROR_MESSAGE()
			,@status_code = 1
		;

		GOTO PgmAbend;
	END CATCH

	--program success return
	PgmSuccess:
		IF (@status_code = 0)
		BEGIN
			IF (@debug = 'Y')
				PRINT 'Successful execution of stored procedure';

			RETURN @status_code;
		END

	--program failure return
	PgmAbend:
		IF (@debug='Y')
		BEGIN
			PRINT 'Stored procedure failure in step:' + convert(varchar(3), @step) + '	' + CONVERT(varchar(26), GETDATE());
			PRINT 'Error code: ' + CONVERT(varchar(10), @error_code) + '; Error description:	' + @status_text;
		END

		RETURN @status_code;
END
GO

GRANT EXECUTE ON dbo.sproc_mds_dml_getMDS3A2400 TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_getMDS3A2400.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_getMDS3A2400.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking (script, timestamp, upload) values ('..\Update db version.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO
SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


insert into pcc_db_version (db_version_code, db_upload_by)
values ('4.4.7_C', 'upload_history')


GO

print '..\Update db version.sql --****SCRIPT DONE****'

GO

insert into upload_tracking (script, timestamp, upload) values ('..\Update db version.sql',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking (script,timestamp,upload) values ('UPLOAD END',getdate(),'4.4.7_06_CLIENT_C_Branch_US.sql')
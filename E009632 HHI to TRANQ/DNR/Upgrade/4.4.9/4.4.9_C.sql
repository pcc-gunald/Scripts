SET NOCOUNT ON
GO

SET DEADLOCK_PRIORITY HIGH
GO


insert into upload_tracking (script, timestamp, upload) values ('UPLOAD_START',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_del.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE-97372:            ePrescribe: Secure All Audit Logs/Tables
--
-- Written By:          Ramin Shojaei
-- 
-- Script Type:         DDL 
-- Target DB Type:      CLIENT
-- Target ENVIRONMENT:   all
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script Function:  safe guard table 
-- =================================================================================
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_del]'))
DROP TRIGGER [dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_del]
GO

CREATE TRIGGER [dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_del]
   ON [dbo].[pho_phys_order_esignature_order_snapshot_CDN]
   FOR DELETE
AS 
BEGIN

--CONTEXT_INFO code 0xDC1000000 added to bypass trigger execution for EI (Data Service) Process
IF CONTEXT_INFO() = 0xDC1000000 RETURN

SET NOCOUNT ON

    raiserror ('Delete not allowed', 16, 1);
    rollback;
    EXEC	[dbo].[sproc_logDbAttack]		N'D', 'Try to delete eSignature order info (CDN).', 101 -- pho_phys_order_esignature_order_snapshot_CDN
END    
GO


GO

print 'C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_del.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_del.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_upd.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE-97372:            ePrescribe: Secure All Audit Logs/Tables
-- 
-- Written By:          Ramin Shojaei
-- 
-- Script Type:         DDL 
-- Target DB Type:      CLIENT
-- Target ENVIRONMENT:   all
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script Function:  safe guard table 
-- =================================================================================
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_upd]'))
DROP TRIGGER [dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_upd]
GO

CREATE TRIGGER [dbo].[tp_pho_phys_order_esignature_order_snapshot_CDN_upd]
   ON [dbo].[pho_phys_order_esignature_order_snapshot_CDN]
   FOR UPDATE
AS 

SET NOCOUNT ON

    raiserror ('Update not allowed', 16, 1);
    rollback;
    EXEC	[dbo].[sproc_logDbAttack]		N'U', 'Try to update  eSignature order CDN info.', 101 -- pho_phys_order_esignature_order_snapshot_CDN

GO




GO

print 'C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_upd.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_esignature_order_snapshot_CDN_upd.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_new_entry_ins.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**  Created By:Maciek Sliwa
**  Created Date: 09/08/2011
**
**  Purpose: This trigger updates the pho_phys_order_new_entry table whenever a new phys order is created a
**           and multiple schedules option is turned on
**           Also for the verbal and telephone orders it will create an order to sign record if the feature is enabled
**
Revision History:
2014-06-04  Mike Gillan  Added order_type_id to pho_order_schedule due to PCC-57494

2018-10-17 Assigned CONTEXT_INFO() changes for Data Service EI Process
		   Code 0xDC1000000 will set Context Infor from Data Service Delete/Insert transaction
*****************************************************************************************************/
if exists (select name from sysobjects where name = 'tp_pho_phys_order_new_entry_ins')
begin
    drop trigger tp_pho_phys_order_new_entry_ins
end
GO
     
CREATE TRIGGER tp_pho_phys_order_new_entry_ins ON dbo.pho_phys_order FOR INSERT NOT FOR REPLICATION
 
AS
BEGIN

	IF CONTEXT_INFO() = 0xDC1000000 RETURN
	   
	SET NOCOUNT ON
 
	declare @facId int;
	declare @communicationMethod int;
	declare @orderSignatureEnabledDate datetime;
	declare @ePrescribeEnabled varchar(50);
	declare @cdnEPrescribeEnabled varchar(50);
	declare @country_id int;
	declare @categoryId int;

	select @facId = i.fac_id, @communicationMethod = i.communication_method, @country_id = f.country_id, @categoryId = order_category_id from inserted i inner join facility f on f.fac_id = i.fac_id;


	IF(1 = dbo.fn_get_new_phys_order_entry_parameter(@facId)) -- means configuration is turned on
	BEGIN
		insert into dbo.pho_phys_order_new_entry (phys_order_id)
		select phys_order_id
		from inserted

		-- IF The order signature is enabled, then check for the order communication method, and create a order to sign record if it is verbal or telephone
		SELECT @orderSignatureEnabledDate=CONVERT(datetime,cp.value) FROM dbo.configuration_parameter cp WHERE cp.name = 'order_sign_enable_date' AND cp.fac_id = @facId;
		SELECT @ePrescribeEnabled=cp.value FROM dbo.configuration_parameter cp WHERE cp.name IN ('enable_eprescribe_workflow') AND cp.fac_id = @facId;
		SELECT @cdnEPrescribeEnabled=cp.value FROM dbo.configuration_parameter cp WHERE cp.name IN ('enable_cdn_eprescribe_workflow') AND cp.fac_id = @facId;
		IF @ePrescribeEnabled IS NULL
		BEGIN
		   SET @ePrescribeEnabled = 'N';
		END

		IF (@orderSignatureEnabledDate < getdate())
		BEGIN
			IF ( @communicationMethod in (3025,3026) or (@communicationMethod = 2141 and (@ePrescribeEnabled='N' or @categoryId=3030) ) )
			BEGIN
				insert into dbo.pho_phys_order_to_sign (phys_order_id, client_id)
				select phys_order_id, client_id
				from inserted        ;
			END
		END

		-- if the facility ePrescribe is enabledand the order is eprescribe order create the esignature
		IF (@ePrescribeEnabled='Y' and @communicationMethod = 2141 and @categoryId<>3030)
		BEGIN
			insert into dbo.pho_phys_order_esignature (phys_order_id)
			select phys_order_id
			from inserted        ;
		END

		-- create the esignature if the facility is Canadian, eprescribe enabled and the order is pharmacy and communication method is prescriber entered.
		IF (@cdnEPrescribeEnabled='Y' and @communicationMethod = 2141 and @categoryId = 3022)
		BEGIN
			insert into dbo.pho_phys_order_esignature (phys_order_id)
			select phys_order_id
			from inserted;
		END
    
	END 
	else
	BEGIN
		--when EOM is not on, we still need a record in order schedule to join to schedules.
		insert into pho_order_schedule(phys_order_id,order_type_id,fac_id,deleted,created_by,created_date,revision_by,revision_date)
		select
			phys_order_id,
			order_type_id,
			fac_id,
			'N',
			created_by,
			created_date,
			revision_by,
			revision_date
		from 
			inserted
	END
END
Go

GO

print 'C_Branch/01_Triggers/tp_pho_phys_order_new_entry_ins.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/01_Triggers/tp_pho_phys_order_new_entry_ins.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/02_Functions/fn_xmlToDrugClassification.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
** Created By: Sumith Poladi
** CORE-94362
** Created Date:2021-12-08
**
**  Purpose: To return a table with all the Drug Classification values which have been passed in as XML.
**
 */
set ansi_nulls on
go

set quoted_identifier on
go

if exists (select 1 from sysobjects where name = 'fn_xmlToDrugClassification')
BEGIN
drop function fn_xmlToDrugClassification
END
go

create function fn_xmlToDrugClassification (@all_top_drug_classifications xml)
    returns TABLE
    as
RETURN
select id.value('(./classId/text())[1]', 'varchar(10)') as classid
     , id.value('(./descDisplay/text())[1]', 'varchar(65)') as descdisplay
from @all_top_drug_classifications.nodes('drugClassification') as ParamValues(id)
go


GO

print 'C_Branch/02_Functions/fn_xmlToDrugClassification.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/02_Functions/fn_xmlToDrugClassification.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.079_sproc_prp_lab_diagnostic_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-29374       :   script to create sproc_prp_lab_diagnostic_report Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_lab_diagnostic_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 

-- 
-- =================================================================================

/***********************************************************************************
Revision History:
2012-04-10  Aditi Iyer		Initial creation of this stored proc
2012-05-30  Ritch Moore		- PCC-30565  Changed non client_id=-1 where clause to handle non-intelligent census (record_type is null or record_type = 'C')
2012-06-05 Rolly Sanchez	- PCC-30666 (3.6.0)	support data aging  
2012-06-14 Aditi Iyer		- PCC-31058 (3.6.0) updated the store proc to support updated store proc of chart codes
2012-06-20 Rolly Sanchez	- PCC-29463 (3.6.0) Removed Row_type 1 from the final output
2012-06-25 Rolly Sanchez	- PCC-31395 (3.6.0) Updated to supports different schedule types
2012-06-29 Rolly Sanchez	- PCC-30981 (3.6.1) show future discharge date as discharge
2012-08-17 Aditi Iyer		- PCC-32575(3.6.1) Updating the Grouping functionality as per new structure
2012-08-22 Aditi Iyer		- PCC-33539(3.6.1) Only one P1_header_id and remove P2_header_id and P3_header_id
2012-09-05 Rolly Sanchez	- PCC-34029(3.6.1) Report should show future dated discharge clients as discharge
2012-09-07 Rolly Sanchez	- PCC-34109(3.6.1) field that has wider width should comes first
2012-09-26 Rolly Sanchez	- PCC-34419(3.6.1.1) PRP'rized temp table
2013-01-16 Rolly Sanchez	- PCC-37679(3.6.3) use rm.report_id instead of rep.report_id because this is directly called by the report
2013-02-07 Ritch Moore		- PCC-38177(3.6.3) added STAT logic
2013-05-30 Rolly Sanchez	- PCC-42828(3.7.0.1) Add administrative orders blank result to support new order summary report
2013-12-10 Rolly Sanchez	- PCC-50905(3.7.2.2) change order summary formatting from style to b-tag
2015-01-12 Henny Ehghaghi	- PCC-69261 (3.7.6) Fixed followup chart code issue
2015-03-18 Henny Ehghaghi	- PCC-73095 (3.7.6.2) Fixed followup chart code issue that cause "No Data Found"
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2017-08-22 Hemanth Reddy	PCC-102383 (3.7.14) updated to support the date format based on the execution user's default facility.
2017-11-07 Dom Christie	    CORE-2125 (3.7.14.1) Performance Optimization
2018-06-23 Dom Christie	    CORE-19252 (3.7.16.2) Changes for the Resident Header in the report 
2018-07-30 Dom Christie	    CORE-16753 (3.7.16.2) Removed SSN  from the output
***********************************************************************************/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_lab_diagnostic_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_lab_diagnostic_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_lab_diagnostic_report

  @report_id int 
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/*******************************************************************************
Purpose: To get a list of fields to display for custom reporting model
						   
Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_lab_diagnostic_report
 @report_id =  '-14' 
,@fac_id =  '1' 
,@field_list = ''
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;pho_communication_method=3209,3026,2141,3027,3025;pho_admin_record_daily=3;pho_schedule_date=01/01/2022,05/30/2022'
,@sort_list =  '' 
,@execution_user_login =  '_system_' 
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null
Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;
DECLARE  @vStep int
		,@vErr varchar(max)
		--Facility Related variables, also used in capturing execution Statistics 
, @vFacIDs int	
, @vFacWarningMsg varchar(max)
 ,@vgs_execution_user varchar(60)
 , @vFacId int
select @vStep = 1
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	
	Select @vStep = 2;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @PRP_FacList 
	SET  @vFacId = @vFacIds ----Only one FacId is expected at a time
--declare Standard local variables required for any store proc

Declare @PRP_FacList as table(FacId int)


DECLARE 
		@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint
		,@vReportType SMALLINT
		,@vcnt int

 --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	,@vFilterList varchar(max)
	
	

	, @vAgingStrategyID smallint ---variable that will define where to retrieve the data (rolly)
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int


---selection param-----	
		
	DECLARE @paramCommunication VARCHAR(400)
			,@paramUnit VARCHAR(45)
			,@paramFloor VARCHAR(270)
			,@paramStatus VARCHAR(25)
			,@paramAdmin VARCHAR(100)
			,@paramDate VARCHAR(50)
		    ,@vgsParamValue1 varchar(300) 
		    ,@sel_param varchar(1250) 

	
-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		

		 ,@vgs_fill_end_time datetime

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC 
declare @vTermClient varchar(50)


		


-----variables for each column in the report
Declare 
	    @vFooter varchar(50)	
		,@vP1_disp_name varchar(100)   --- display name for group header 0/3

		,@vPHDR1  varchar(50) ---- page level group 1 header type

		

		

DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_communication_method bit
	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date_end varchar(10)
	,@vfil_schedule_date datetime	
	,@vfil_schedule_date2 datetime	
	,@vfil_unit bit
	,@isunit INT
	,@isfloor INT


Declare @reportingdays smallint;

Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max),flag int);

DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );



CREATE TABLE #Pho_phys_order 
  ( 
     phys_order_id        INT  , 
     fac_id               INT  , 
     std_freq_id          INT , 
     client_id            INT  , 
     start_date           DATETIME , 
     end_date             DATETIME , 
     strength             VARCHAR(30) , 
     form                 VARCHAR(50) , 
     route_of_admin       INT , 
     description          VARCHAR(500) , 
     related_generic      VARCHAR(250) , 
     supplementary_notes  VARCHAR(500) ,   
	 communication_method INT , 
     diet_type            INT ,  
     std_order_id         INT , 
     discontinued_date    DATETIME , 
	 diet_supplement      INT , 
     active_flag          CHAR(1) , 
     order_date           DATETIME  ,     
     order_verified       CHAR(1) , 
     draft                BIT  , 
     order_category_id    INT  ,      
     order_type_id        INT , 
     is_new_order         VARCHAR(1)  , 
     order_schedule_id    INT,
	 client_id_number VARCHAR(35),
	 client_name VARCHAR(200) ,
	 location VARCHAR(500),
	 sex CHAR(1),
	 dob CHAR(10),
	 payer_type VARCHAR(20),
	 physician_id int,
	 related_diagnosis   VARCHAR(250)
	
	
  ) 

CREATE TABLE #view_prp_pho_schedule(
	schedule_id int
	,fac_id int
	,phys_order_id int
	,start_time varchar(4)
	,end_time varchar(4)
	,schedule_label varchar(5)
	,std_freq_id          INT 
	,order_schedule_id int
	,schedule_type int
	,schedule_start_date datetime
	,schedule_end_date datetime
	);



CREATE TABLE #PRP_Orders ( 
			  client_id int
			, phys_order_id int
			, order_schedule_id int
			, std_freq_id int
			, schedule_date datetime
			, admin_time  varchar(20)
			, client_name varchar(200) 
			, client_location varchar(500)
			, client_id_number varchar(35)
			, sex CHAR(1)
		    , dob CHAR(10)
		    , payer_type VARCHAR(20)
			, physician_id int
			, related_diagnosis   VARCHAR(250)
		
	
);

-----Hold ordes data 
Create Table #PRP_HoldOrders
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_phys_order_id int	--- administrative order id for hold
);

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #PRP_ClientList( 
		  client_id int
		, client_id_number varchar(35)
		, client_name varchar(200) 
		, location varchar(500)
		,sex CHAR(1)
		,dob CHAR(10)
		,payer_type VARCHAR(20)
		,unit_desc VARCHAR(35)
		,floor_desc VARCHAR(256)
	
);


BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	
	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	
	SET @vFilterList  = @filter_list;

SET @vFooter='footer_2'

	 SELECT @vTermClient=(CASE WHEN ISNULL(ac.term_client,'') = '' 
	                          THEN 'Client' 
							  ELSE UPPER(SUBSTRING(ac.term_client,1,1)) + LOWER(SUBSTRING(ac.term_client,2,50)) END)
     FROM ar_configuration ac
	 WHERE FAC_ID=@vFacID

	
	

	---------Code to select the date format based on the country for the default facility of executing user--------------------
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login
	
	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	
	---------------------------------------------------------***********---------------------------------------------------------

	if @debug_me='Y' 
	begin
	select 'the param space' as sp_i
	end


	

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);


	select @vStep = 14
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR ' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');

	


	select @vStep = 30
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)

	---shred columns filters + add overwrite_run_time=0 filters directly from the table
	Insert into @PRP_tbFilters_temp
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
	From		dbo.prp_report_filter 	  repfilter    with (nolock)
	inner join	dbo.prp_ref_report_filter refrepfilter with (nolock) on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
	inner join	dbo.prp_ref_column		  refcol	   with (nolock) on refcol.ref_column_id			= refrepfilter.ref_column_id
	inner JOIN  dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = repfilter.report_id 
	Where rm.report_id =  @vReportId and repfilter.run_time_option = '0'

	if @debug_me='Y' Select 'test' t,* from @PRP_tbFilters_temp;
		

	select @vStep = 35
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types ' + convert(varchar(26),getdate(),109)




	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from @PRP_tbFilters_temp where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	-----DATE TIME


	SELECT @vfil_schedule_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_schedule_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))  
		  ,@vfil_schedule_date_end=Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))  
	from @PRP_tbFilters_temp where filter_name like  'pho_schedule_date%';

	Set @vfil_schedule_date2 = @vfil_schedule_date+1
	Set @vfil_schedule_date  = @vfil_schedule_date_type
	Set @reportingdays		 = datediff(dd,@vfil_schedule_date, @vfil_schedule_date2 );

	-- schedule details retrieval strategy -- (rolly)
	select @vAgingStrategyID = strategy from 
		fn_pho_getScheduleDetailsQueryStrategy(@vfil_schedule_date, @vfil_schedule_date2)


	select @vStep = 37
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' schedule details strategy id ' + cast(@vAgingStrategyID as varchar(5)) + ' ' +  convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' start date ' + cast( @vfil_schedule_date as varchar(20)) + ' end date ' + cast( cast( @vfil_schedule_date2 as varchar(20)) as varchar(20))
 
	---shred column filters value for all integers value
	Insert into #PRP_Filters
	Select  a.filter_name, b.items
	from @PRP_tbFilters_temp a
	cross apply ( Select items from dbo.split(a.filter_value,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */ 
	  'client_floor'
	, 'pho_admin_record_daily'   
	, 'pho_communication_method'
	, 'client_unit'
	);

	select @vStep = 39
	--if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)
	--Create Clustered Index _temp_filters_idx on #PRP_Filters( filter_name, filter_value) ;
	if @debug_me='Y' SELECT 'test' t,* FROM #PRP_Filters










	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1 
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)
		

		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@max_codes = 16 --- hard coded
		,@with_followup_codes = '0' --- followup codes not required
		,@debug_me = 'n'
		,@status_code = NULL 
		,@status_text = NULL

		--delete from @PRP_ChartCodes where flag >1

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from @PRP_tbFilters_temp where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';
	
	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END





	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #PRP_ClientList
		(
			  client_id 
			, client_name 
			, location 
			, client_id_number 
			,sex
			,dob
			,payer_type
		
			
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, rtrim(ltrim(isnull(room_desc,'')))  + ' ' + rtrim(ltrim(isnull(bed_desc,''))) as location
			, c.client_id_number 
			,ISNULL(m.sex,'')sex
			,ISNULL(CONVERT(char(10), m.date_of_birth, @vDateFormatStyle), '') dob
			,loc.payer_type
		
		from ( Select client_id, mpi_id, client_id_number from dbo.clients  with (nolock) 
				left join #PRP_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N' 
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
--PCC-34029 old code AND (@vfil_client_status = '-1' or (clients.discharge_date is not null or clients.discharge_date >= @vReportDate) ) 
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join (  Select * from 
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id, 
					         	payer_type,
					            c.client_id
							
					        
	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock) 
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')    
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17) 
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id

		Left join #PRP_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'	and fil_floor.filter_value = f.floor_id
		Left join #PRP_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'		and fil_unit.filter_value  = u.unit_id
		
		WHERE	((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #PRP_ClientList
		(
			  client_id 
			, client_name 
			, location 
			, client_id_number 
			,sex
			,dob
			,payer_type
			
			
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, c.client_id_number 
			,ISNULL(m.sex,'')sex
			,ISNULL(CONVERT(char(10), m.date_of_birth, @vDateFormatStyle), '') dob
			,loc.payer_type
		
		
		from ( Select client_id, client_id_number , mpi_id from dbo.clients  with (nolock) 
				left join #PRP_Filters fil_client_id		
					on fil_client_id.filter_name='client_id' and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
				AND ((@vfil_client_id = '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
-- pcc-34029 added this line
				AND clients.discharge_date is null
			 ) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
	

		Left join #PRP_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		

		WHERE 	
			    ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 52
	--if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #PRP_ClientList' + convert(varchar(26),getdate(),109)
	

	if @debug_me='Y'  select * from #PRP_ClientList



SET @sel_param=''

IF @client_id='-1'
BEGIN
SET @vgsParamValue1='All'
END
ELSE
BEGIN
SELECT 	 @vgsParamValue1= client_name  
FROM   #PRP_ClientList 
END


SELECT @isunit=filter_value 
FROm @PRP_tbFilters_temp
WHERE  filter_name='client_unit'


SELECT @isfloor=filter_value 
FROm @PRP_tbFilters_temp
WHERE  filter_name='client_floor'

IF @isunit=-1
BEGIN
SET @paramUnit= 'Unit: All'
END
ELSE
BEGIN
SELECT 	 @paramUnit= 'Unit: '+unit_desc  
FROM   unit u  
WHERE u.unit_id=@isunit
END


IF @isfloor=-1
BEGIN
SET @paramFloor='Floor: All'
END
ELSE
BEGIN
SELECT 	 @paramFloor= 'Floor: '+floor_desc  
FROM    [floor] f
WHERE F.floor_id=@isfloor
END

SELECT @paramStatus='Status: '+ CASE WHEN filter_value=0 THEN 'Current' 
                                                        WHEN filter_value=1 THEN 'Discharged' 
														WHEN filter_value=-1 THEN 'All' 
														END
FROM @PRP_tbFilters_temp
WHERE filter_name='client_status'

SELECT @paramAdmin='Admin Record: '+ LTRIM(description)
FROM pho_administration_record pd INNER JOIN #PRP_Filters pf 
ON filter_value=pd.administration_record_id
WHERE filter_name='pho_admin_record_daily'


SELECT  @paramCommunication = COALESCE(@paramCommunication + ', ', '') + item_description
FROM common_code cc INNER JOIN #PRP_Filters pf 
ON pf.filter_value=cc.item_id
WHERE item_Code='phocom'
AND filter_name='pho_communication_method'


SELECT @paramDate='Schedule Date: ' + CONVERT(VARCHAR(10),@vfil_schedule_date,@vDateFormatStyle) +' - '+CONVERT(VARCHAR(10),@vfil_schedule_date2-1,@vDateFormatStyle) 

SELECT @sel_param= @vgsParamValue1+ '    ' + @paramUnit + '    ' + @paramFloor + '    ' + @paramStatus + '    ' +@paramAdmin+ '    ' +
                   CASE WHEN @paramCommunication IS NULL OR @paramCommunication=''
				         THEN  + '    ' +@paramDate
						 ELSE + '    ' + 'Communication Method: '+ @paramCommunication + '    ' +@paramDate
						 END






--IF @combinedString IS NULL OR @combinedString=''
--BEGIN


--END
--ELSE
--BEGIN
--SELECT @combinedString='   Communication Method: '+ STUFF(@combinedString,1,1,'') +'   '+'  Schedule Date: ' +   CONVERT(VARCHAR(10),@vfil_schedule_date,@vDateFormatStyle)+' - '+ CONVERT(VARCHAR(10),@vfil_schedule_date2-1,@vDateFormatStyle) 
--END





	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);



	------Getting filtered orders from view_pho_phys_order

	
	INSERT INTO 	#Pho_phys_order


SELECT 
phys_order_id
      ,po.fac_id
      ,std_freq_id
      ,po.client_id
      ,start_date
      ,end_date
      ,strength
      ,form
      ,route_of_admin
      ,po.description
      ,related_generic
      ,supplementary_notes  
	   ,communication_method   
      ,diet_type    
      ,std_order_id
      ,discontinued_date     
	  ,diet_supplement
      ,active_flag
      ,order_date 
      ,order_verified
      ,draft
      ,po.order_category_id  
      ,po.order_type_id
      ,is_new_order
      ,order_schedule_id
	  ,client_id_number 
	  ,client_name 
	  ,location 
	  ,sex 
	  ,dob 
	  ,payer_type 
	  ,physician_id
	  ,related_diagnosis
	 
	  FROM

(
	SELECT p.phys_order_id ,   
    
       p.fac_id  ,
       CASE
           WHEN n.phys_order_id IS NOT NULL THEN s.std_freq_id
           ELSE p.std_freq_id
       END AS std_freq_id ,
       p.client_id ,     
       CASE
           WHEN n.phys_order_id IS NOT NULL THEN s.schedule_start_date
           ELSE p.start_date
       END AS start_date ,
       CASE
           WHEN n.phys_order_id IS NOT NULL THEN s.schedule_end_date
           ELSE p.end_date
       END AS end_date ,
       p.strength ,
       p.form ,
       p.route_of_admin ,
       p.description ,
       p.related_generic ,
       CASE
           WHEN n.phys_order_id IS NOT NULL THEN s.additional_directions
           ELSE p.supplementary_notes
       END AS supplementary_notes ,
       p.communication_method ,
       p.diet_type ,
    
       p.std_order_id ,
       p.discontinued_date ,   
	   p.diet_supplement , 
       p.active_flag ,
       p.order_date ,     
       p.order_verified ,
       p.draft ,
       p.order_category_id ,    
	   p.order_type_id,
	   p.physician_id,
       CASE
           WHEN n.phys_order_id IS NOT NULL THEN 'Y'
           ELSE 'N'
       END AS is_new_order,
       s.order_schedule_id,
      related_diagnosis
	 
	 
FROM pho_phys_order p
LEFT JOIN pho_phys_order_new_entry n ON n.phys_order_id=p.phys_order_id
LEFT JOIN pho_order_schedule s ON s.phys_order_id = p.phys_order_id
LEFT JOIN configuration_parameter cp ON p.fac_id = cp.fac_id
AND cp.name='pho_is_using_new_phys_order_form'


)
po
INNER JOIN #PRP_ClientList  c WITH (NOLOCK )
ON c.client_id = po.client_id 
inner join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		inner join dbo.pho_administration_record adminrec with (nolock) 
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  
																then ot.administration_record_id 
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					
		inner join #PRP_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'		
				and adminrec_fil.filter_value = adminrec.administration_record_id
		INNER JOIN pho_order_category cat 
ON cat.order_category_id=ot.order_category_id
AND cat.order_category_id IN (3024,3028)

WHERE
 (po.discontinued_date >= @vfil_schedule_date  or po.discontinued_date is null )
AND ((po.start_date is not null and po.start_date < @vfil_schedule_date2) or (po.start_date is null and po.order_date < @vfil_schedule_date2) ) 
AND (po.end_date is null or po.end_date >= @vfil_schedule_date)
AND    po.draft = 0  
AND ISNULL(po.order_verified,'Y')='Y' 
AND  (po.active_flag = 'Y' or po.active_flag is null)     
AND po.fac_id = @vFacId

	 INSERT INTO #view_prp_pho_schedule
 
	select 
         s.schedule_id
        ,case when n.phys_order_id is not null then os.fac_id else s.fac_id end as fac_id       
        ,os.phys_order_id as phys_order_id
        ,s.start_time
        ,s.end_time  
        ,left(isnull(s.[schedule_label],shift.description),15)schedule_label
        ,os.std_freq_id      
        ,os.order_schedule_id   
        ,case when n.phys_order_id is not null then os.schedule_type else s.schedule_type end as schedule_type
        ,os.schedule_start_date
		,os.schedule_end_date
    from #Pho_phys_order  po 
    INNER JOIN  pho_schedule s  on  s.phys_order_id=po.phys_order_id  
    INNER JOIN pho_order_schedule os on  s.fac_id=os.fac_id  
	LEFT JOIN pho_phys_order_new_entry n  on po.phys_order_id = n.phys_order_id

	LEFT OUTER JOIN dbo.cp_std_shift shift with (nolock)
	 on shift.std_shift_id = s.[std_shift_id]
  WHERE 
         s.fac_id= @vfacid
	 and os.order_schedule_id=s.order_schedule_id
	 and s.order_schedule_id=po.order_schedule_id;  






	if @vAgingStrategyID in (0, 1, 2)	-- data from transaction table
	BEGIN
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders from transaction table ' + convert(varchar(26),getdate(),109)

	
			Insert into #PRP_Orders
			(
				  client_id
				, phys_order_id 
				, order_schedule_id
				, std_freq_id
				, schedule_date
				, admin_time
				, client_name
				, client_location
				, client_id_number
				, sex 
	            , dob 
	            , payer_type 
				, physician_id
				, related_diagnosis
				

		)
		Select    po.client_id
				, po.phys_order_id 
				, po.order_schedule_id
				, po_sch.std_freq_id
				, case when po_sch.schedule_type in(24,26) -- IF ONE TIME ONLY or STAT then use effective date because that is schedule date
					   then po_sch_detail.effective_date   
					else  po_sch_detail.schedule_date   --- else schedule_date
				  end as schedule_date
				, isnull(po_sch.schedule_label,po_sch.start_time)  as admin_time
				, po.client_name
				, po.location
				, po.client_id_number
				, po.sex 
	            , po.dob 
	            , po.payer_type 
				, physician_id
				, related_diagnosis
				

		From #Pho_phys_order po


		Left Join #view_prp_pho_schedule po_sch with (nolock) 
				on po_sch.phys_order_id = po.phys_order_id
					and po_sch.order_schedule_id = po.order_schedule_id 
		Left Join dbo.pho_schedule_details po_sch_detail with (nolock) 
			on po_sch_detail.pho_schedule_id = po_sch.schedule_id 
				and po_sch_detail.deleted = 'n' 
		

		left join #PRP_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		where 

			 ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			----OTO or PRN/CMPX/UNscheduled Valid Orders/ schedule_date to fall in range and should not be on hold
			and ((po_sch.schedule_type in(24,26) and (po_sch_detail.schedule_date_end >= @vfil_schedule_date and po_sch_detail.schedule_date < @vfil_schedule_date2) ) -- OTO
                               or (po_sch_detail.schedule_date is null and po_sch.schedule_type in(8,9))   --- PRN/CMPX
                               or (po_sch_detail.schedule_date >= @vfil_schedule_date     and po_sch_detail.schedule_date < @vfil_schedule_date2)) --- Routine

			and (po_sch_detail.chart_code <> 'H' or po_sch_detail.chart_code is null ) 

 
	END

	
	if @vAgingStrategyID in (1, 2, 3, 4)	-- data from history table
	BEGIN
	select @vStep = 61
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders from history table ' + convert(varchar(26),getdate(),109)

		
	Insert into #PRP_Orders
			(
				  client_id
				, phys_order_id 
				, order_schedule_id
				, std_freq_id
				, schedule_date
				, admin_time
				, client_name
				, client_location
				, client_id_number
				, sex 
	            , dob 
	            , payer_type 
				, physician_id
				, related_diagnosis
				

		)
		Select    po.client_id
				, po.phys_order_id 
				, po.order_schedule_id
				, po_sch.std_freq_id
				, case when po_sch.schedule_type in(24,26) -- IF ONE TIME ONLY or STAT then use effective date because that is schedule date
					   then po_sch_detail.effective_date   
					else  po_sch_detail.schedule_date   --- else schedule_date
				  end as schedule_date
				, isnull(po_sch.schedule_label,po_sch.start_time)  as admin_time
				, po.client_name
				, po.location
				, po.client_id_number
				, po.sex 
	            , po.dob 
	            , po.payer_type 
				, physician_id
				, related_diagnosis
				


		From #Pho_phys_order po
		


		Left Join #view_prp_pho_schedule po_sch with (nolock) 
				on po_sch.phys_order_id = po.phys_order_id
					and po_sch.order_schedule_id = po.order_schedule_id 
		Left Join dbo.pho_schedule_details_history po_sch_detail with (nolock) 
			on po_sch_detail.pho_schedule_id = po_sch.schedule_id 
				and po_sch_detail.deleted = 'n' 
		

		left join #PRP_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		where 

			 ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			----OTO or PRN/CMPX/UNscheduled Valid Orders/ schedule_date to fall in range and should not be on hold
			and ((po_sch.schedule_type in(24,26) and (po_sch_detail.schedule_date_end >= @vfil_schedule_date and po_sch_detail.schedule_date < @vfil_schedule_date2) ) -- OTO
                               or (po_sch_detail.schedule_date is null and po_sch.schedule_type in(8,9))   --- PRN/CMPX
                               or (po_sch_detail.schedule_date >= @vfil_schedule_date     and po_sch_detail.schedule_date < @vfil_schedule_date2)) --- Routine

			and (po_sch_detail.chart_code <> 'H' or po_sch_detail.chart_code is null ) 

			
	END



	if @vAgingStrategyID in (2, 4, 5)	-- data from aging view
	BEGIN
	select @vStep = 62
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders from aging view ' + convert(varchar(26),getdate(),109)

	Insert into #PRP_Orders
			(
				  client_id
				, phys_order_id 
				, order_schedule_id
				, std_freq_id
				, schedule_date
				, admin_time
				, client_name
				, client_location
				, client_id_number
				, sex 
	            , dob 
	            , payer_type 
				, physician_id
				, related_diagnosis
				

		)
		Select    po.client_id
				, po.phys_order_id 
				, po.order_schedule_id
				, po_sch.std_freq_id
				, case when po_sch.schedule_type in(24,26) -- IF ONE TIME ONLY or STAT then use effective date because that is schedule date
					   then po_sch_detail.effective_date   
					else  po_sch_detail.schedule_date   --- else schedule_date
				  end as schedule_date
				, isnull(po_sch.schedule_label,po_sch.start_time)  as admin_time
				, po.client_name
				, po.location
				, po.client_id_number
				, po.sex 
	            , po.dob 
	            , po.payer_type 
				, physician_id
				, related_diagnosis
				


		From  #Pho_phys_order po
	


		Left Join #view_prp_pho_schedule po_sch with (nolock) 
				on po_sch.phys_order_id = po.phys_order_id
					and po_sch.order_schedule_id = po.order_schedule_id 
		Left Join dbo.view_pho_schedule_details_aging po_sch_detail with (nolock) 
			on po_sch_detail.pho_schedule_id = po_sch.schedule_id 
				and po_sch_detail.deleted = 'n' 
		

		left join #PRP_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		where 
			 ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			----OTO or PRN/CMPX/UNscheduled Valid Orders/ schedule_date to fall in range and should not be on hold
			and ((po_sch.schedule_type in(24,26) and (po_sch_detail.schedule_date_end >= @vfil_schedule_date and po_sch_detail.schedule_date < @vfil_schedule_date2) ) -- OTO
                               or (po_sch_detail.schedule_date is null and po_sch.schedule_type in(8,9))   --- PRN/CMPX
                               or (po_sch_detail.schedule_date >= @vfil_schedule_date     and po_sch_detail.schedule_date < @vfil_schedule_date2)) --- Routine

			and (po_sch_detail.chart_code <> 'H' or po_sch_detail.chart_code is null ) 
		
			
 
	END





	if @debug_me = 'y' Select * from #PRP_Orders; 

	-----FILTERING ORDERS based on administrative orders for HOLD
	BEGIN
		
		select @vStep = 68
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' FILTERING ORDERS BASED ON ADMINSITRATIVE ORDERS FOR HOLD ' + convert(varchar(26),getdate(),109)
		;WITh adminhold
		AS
		(Select
						 pro.related_phys_order_id Original_phys_order_id	
				, pro.phys_order_id as admin_phys_order_id
				, pao.effective_date
				, pao.ineffective_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				, pro.order_relationship_id
			
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock ) 
				on pro.phys_order_id = pao.phys_order_id 
					and  isnull(pro.deleted,'N')='N' 
					and isnull(pao.deleted,'N')='N'  
					and pao.exclude_eom_status_calculation=0
						
			
			WHERE  pro.fac_id = @vFacID
		)

		, tb2 as

(

  Select adminhold.original_phys_order_id
	, adminhold.admin_phys_order_id
	, adminhold.effective_date
	, adminhold.order_relationship_id
	, case when nextrow.effective_date < adminhold.ineffective_date or adminhold.ineffective_date is null  then nextrow.effective_date else adminhold.ineffective_date end as ineffective_date
	
	From adminhold

		left outer join adminhold as nextrow on nextrow.Original_phys_order_id = adminhold.Original_phys_order_id and nextrow.row_num = adminhold.row_num+1

)



		Insert into #PRP_HoldOrders
		Select  p.original_phys_order_id		
				,case when day_date < effective_date then effective_date else day_date end as effective_date
				,case when datediff(hh,day_date,ineffective_date )<24 then ineffective_date else dateadd(dd,1,day_date) end as ineffective_date 
				,  p.admin_phys_order_id 
			from  tb2   p 
			inner join (Select distinct phys_order_id from #PRP_Orders  ) po on p.original_phys_order_id = po.phys_order_id
		inner join dbo.date_dim d with (nolock) 
								on (( day_date >= p.effective_date and (day_date < p.ineffective_date or p.ineffective_date is null))
									or datediff(hh,[day_date], p.effective_date)  between 0 and 24)  -- including  first day
								and d.day_date >= @vfil_schedule_date and d.day_date < @vfil_schedule_date2
								where p.order_relationship_id = 1
			


		DELETE #PRP_Orders 
		From #PRP_Orders  po 
		inner join #PRP_HoldOrders ho with (nolock) on po.phys_order_id = ho.Phys_order_id
		and po.schedule_date >= ho.effective_date and  po.schedule_date < ho.ineffective_date 

			
		----entire period on hold -  PRN/OTO
		DELETE #PRP_Orders
		From #PRP_Orders po
		inner join ( Select phys_order_id, count(*)  as total_hold_days
						from #PRP_HoldOrders with (nolock) 
						where datediff(hh, effective_date, ineffective_date) = 24 -- entire day holds
						group by phys_order_id having count(*) =  @reportingdays 
					) ho on po.phys_order_id = ho.phys_order_id
			and po.schedule_date is null -- PRN and OTO , if OTO is administered then schedule_date will have effective_date
	END

	if @debug_me='Y'  Select * From #PRP_HoldOrders;




	Set @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)
	
		SELECT @vcnt=COUNT(*) FROM #PRP_Orders
		IF @vcnt<1
		BEGIN
			SELECT 
			--NULL as row_type		,
			  NULL as fac_id		
			, NULL as administrative_details		
			, NULL as page_footer
			, @vTermClient as term_client	
			, NULL as  client_id
			, NULL as  location
			, NULL as  client_id_number
			, NULL as   client_name
			, NULL as   sex
			, NULL as   dob
			, NULL as   payer_type
			, NULL as   ordered_by
			, NULL as  related_diagnosis
			, NULL as   order_desc
			, NULL as   initials_blank
			, NULL as   schedule_time
			, NULL as   schedule_date
			, NULL as   std_freq_desc
			, NULL as   additional_directions
			, NULL as  actual_schedule_date	
			, NULL as   row_id
			, @sel_param as   selected_param	
			, NULL as status_code
			, NULL as status_text	
			, NULL as phys_order_id
			, NULL as row_num
			, NULL as include_healthcard

			END
			ELSE
			BEGIN
	

					;with smry
					AS
					(SELECT order_schedule_id,
					supplementary_notes,
					client_id,
					po.fac_id,
					phys_order_id,
					Case 



					---Pharmacy Order Description = Medication + (Generic) + Form + Dose + ROA + Frequency (line break)  

					when order_category_id =  3022 and is_new_order = 'N'  then --- Legacy Pharmacy Orders

					ltrim( rtrim(isnull(po.[description],''))

					+  isnull(' ('+  rtrim(ltrim(Case rtrim(po.related_generic) when '' then NULL else  po.related_generic  end )) + ')','') + 

					+  isnull(' ' + rtrim(ltrim(po.form)),'')

					+  isnull(' ' + rtrim(ltrim(po.strength)),'')

					+  isnull(' ' + rtrim(ltrim(roa.pcc_route_of_admin)),'')

					+  isnull(' ' + rtrim(ltrim(pho_std_time.[description])),''))   --- frequency

					when  order_category_id =  3031 then -----diet

					rtrim(ltrim(diet_type.item_description)) + ' diet ' 

					when  order_category_id = 3032 then --- supplement

					supp.item_description 

					else 

					po.[description]
				
					+  isnull(' ('+  rtrim(ltrim(Case rtrim(po.related_generic) when '' then NULL else  po.related_generic  end )) + ')','')



					end 

					as [description]
					,
					std_freq_id
					FROM #Pho_phys_order po
		
					Outer Apply ( select pho_std_time_id

					from (  Select pho_std_time_id

					, row_number() OVER ( PARTITION BY ORDER_SCHEDULE_ID ORDER BY ORDER_SCHEDULE_ID ) as row_num 

					From dbo.pho_schedule with (nolock)

					where pho_schedule.Order_schedule_id = po.Order_schedule_id and pho_schedule.deleted='n' and po.is_new_order='n' ) sch_inner where row_num = 1

					) sch

		
					Left Join dbo.view_prp_pho_route_of_admin roa with (nolock) 

					on roa.route_of_admin_id = po.route_of_admin

					Left outer join dbo.pho_std_time with (nolock)

					on pho_std_time.pho_std_time_id = sch.pho_std_time_id
					Left Outer Join  dbo.common_code diet_type with (nolock) 

					on diet_type.item_id = po.diet_type and diet_type.item_code = 'phodyt'

					and po.order_category_id = 3031 -- diet 
					Left outer join dbo.common_code supp with (nolock) 

					on supp.item_id = po.diet_supplement and supp.item_code = 'phosup'

					and po.order_category_id = 3032  -- supplement

					)
	

	
					,tbBase
					as
					(
					Select 
					po.fac_id
					, convert(varchar,po.client_id)		as client_id --- required for building group id 
					, o.client_name 
					, o.client_location as location
					, o.client_id_number
					, o.sex 
					, o.dob 
					, o.payer_type 				
					, isnull(c.last_name + ', ' ,'') + isnull( c.first_name,'')  + ' ' + isnull(c.middle_name,'') + ' - ' + 'NPI#: '+ LTRIM(ISNULL(s.identifier_npi,'')) as ordered_by
					, o.related_diagnosis
					, po.phys_order_id -----phys_order_id  is for QA testing only
					,  

					--po.[description] 
					replace(
					replace (
					replace (
					replace(
					replace( isnull(' ' + 	po.[description] ,'') , '& ', '&amp;')
					, '<', '&lt;')
					, '>', '&gt;')
					, '"', '&quot;')
					, '''', '&apos;')


					as order_desc
					, isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as holdsmry

					, replicate('_',9)  as initials_blank
					, o.admin_time											 as schedule_time
					, convert(char(10), o.schedule_date,@vDateFormatStyle )	 as schedule_date --@vDateFormatStyle
					, stdfreq.description									 as std_freq_desc
					---, Case @vPHDR1 when  'header_0' then @vP1_disp_name + @vSeparator+ P1  else NULL end  as P1
					, replace(
					replace (
					replace (
					replace(
					replace( isnull(' ' + po.supplementary_notes,'') , '& ', '&amp;')
					, '<', '&lt;')
					, '>', '&gt;')
					, '"', '&quot;')
					, '''', '&apos;')								as additional_directions

					,CONVERT(date,ISNULL(o.schedule_date, '1900-01-01 00:00:00.000'))actual_schedule_date
					From  #PRP_Orders o with (nolock )
					inner join smry po with (nolock) on o.phys_order_id = po.phys_order_id
					and o.order_schedule_id = po.order_schedule_id

					left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id 
					left join dbo.contact c on c.contact_id=o.physician_id
					left join staff s on c.contact_id=s.contact_id
					outer apply (Select * From 
					(
					select ' On hold' 
					+ case when a1.ineffective_date is null 
					then ' starting '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
					else ' from '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
					end 
					from 
					(
					Select  min(ho.effective_date) as effective_date
					, max(ho.ineffective_date) as ineffective_date 
					from #PRP_HoldOrders ho with (nolock) 
					where ho.phys_order_id = o.phys_order_id 
					group by  ho.phys_order_id , ho.admin_phys_order_id

						
					) a1
					order by effective_date FOR XML PATH('')
					) a ( summary )
					) hold_dates

					)
					,tbWithSort
					AS
					(
					SELECT * 
					,DENSE_RANK() over (  ORDER BY				actual_schedule_date) as row_num
					,ROW_NUMBER() OVER ( ORDER BY actual_schedule_date,client_name,order_desc)row_id
			
					from tbBase
					)

					SELECT   @vTermClient  term_client,
					Case when @vFooter = 'footer_2' then 
					(Select top 1 
					case when charindex ('(Refer to the last page of the report for a complete list of chart codes)[$]',	chart_codes)>0  then 
					'(Some codes not shown)[$]'+replace(chart_codes,'(Refer to the last page of the report for a complete list of chart codes)[$]','') 
					else chart_codes end chart_codes from @PRP_ChartCodes )
					else NULL end 
					as page_footer,

					phys_order_id,
					fac_id,
					client_id,
					location,
					client_id_number,
					client_name,
					sex,
					dob,
					payer_type,
					ordered_by,
					related_diagnosis,
					order_desc+' '+holdsmry  order_desc,
					initials_blank,
					schedule_time,
					schedule_date,
					std_freq_desc,
					additional_directions,
					actual_schedule_date,
					row_num,
					row_id,
					@sel_param as  selected_param,

					NULL status_code,
					NULL status_text,
					0 as include_healthcard
	
					FROM tbWithSort
	
					ORDER BY row_num,row_id
	


Set @rows_returned = @@ROWCOUNT;

END
	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 
			--NULL as row_type		,
			NULL as fac_id		
			, NULL as administrative_details		
			, NULL as page_footer
			, @vTermClient as term_client	
			, NULL as  client_id
			, NULL as  location
			, NULL as  client_id_number
			, NULL as   client_name
			, NULL as   sex
			, NULL as   dob
			, NULL as   payer_type
			, NULL as   ordered_by
			, NULL as  related_diagnosis
			, NULL as   order_desc
			, NULL as   initials_blank
			, NULL as   schedule_time
			, NULL as   schedule_date
			, NULL as   std_freq_desc
			, NULL as   additional_directions
			, NULL as  actual_schedule_date	
			, NULL as   row_id
			, @sel_param as   selected_param	
			, @status_code as status_code
			, @status_text as status_text	
			, NULL as phys_order_id
			, NULL as row_num
			, NULL as include_healthcard
			
END CATCH 

RETURN 

END
GO
GRANT EXECUTE ON  dbo.sproc_prp_lab_diagnostic_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/PRP2.079_sproc_prp_lab_diagnostic_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.079_sproc_prp_lab_diagnostic_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-26335       :   script to create sproc_prp_order_based_report Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:
2011-12-14  Aditi Iyer       Initial creation of this stored proc

2011-12-30 Aditi Iyer       Filter List, sort_list and some other information is pending also performance testing is pending 
2012-02-21 Aditi Iyer		Updated the store proc to support 3.5.2 Med Admin Audit Report
							excluding PRN / ONE TIME ONLY except it is documented  from Med Admin Audit report
							when documentation Type filter is used, it should take care or Pending Confirmation and ON Hold orders
2012-03-09 Aditi Iyer	    updated the store proc to send standard date time format for med admin audit report 	
2012-03-12	Aditi Iyer		PCC- 28737 commented Completed_date filters 
							,updated date filters logic						
							, updated the order_summary with isnull() so in case desc is null, it will show directions for ENTREAL FEED 

<  there were few updates between>

2012-03-09 Aditi Iyer       updated the store proc to change date time format for med admin audit report.
2012-03-19 Ritch Moore		PCC-28890 - add Hold/Resume/Discontinued to pending confirmation where applicable
2012-03-19 Ritch Moore		PCC-28913 Updated the 'pho_medication_class'
2012-03-21 Aditi Iyer		updated the store proc to fix the issue where PRN type of Orders were not included in Lab abd Diagnostic Report 
							due to schedule_date condition - fixed
							updated the store proc to incoporate the changes made to store hold orders - PCC-28687	

2012-03-22 Aditi Iyer		cleanng up the store proc after 3.5.2.1 delete commented lines and doing CRT
2012-03-26 Aditi Iyer		Updated the store proc to put One TIme Only in PRN Group for Lab and Diagnostic Report PCC-28969
2012-03-26 Aditi Iyer		Updated the store proc to use pho-order_status_schedule_date for lab and diagnostic report 
2012-03-26 Ritch Moore		PCC-29101 - added support for pho_order_desc filter
2012-03-28 Ritch Moore		PCC-29110 - added holds to order_desc
2012-03-28 Aditi Iyer		fix the issue for PRN/OTO for lab and diagnostic to look at the status 
2012-04-02 Aditi Iyer       Updated the order_summary to espace special characters when using for XML
2012-04-10 Ritch Moore		PCC-29294 - added support for pho_std_order, pho_facility_time_code, pho_std_frequency & pho_unsched_order filters
2012-04-10 Aditi Iyer		PCC-29429 - Updated the store proc to display Perform date only for documented Time for Med Admin Audit Report
										Also removed joins to cont_address, address and staff as T?V ORder form is not based on RTM Report
2012-04-11 Ritch Moore		Revised unscheduled orders filter
2012-04-11 Aditi Iyer       PCC-29374 updated store proc to branch out Lab & diagnostic report
2012-04-13 Ritch Moore		PCC-29530 Added pho_administered_date_time
2012-04-19	Aditi Iyer		Sending emotyString for P1 for Pset_id if not found instead of null
2012-04-24 Ritch Moore		PCC-29294 - fixed issue with pho_facility_time_code filter
2012-04-25 Aditi Iyer		pcc-29794  -- updated the store proc to change the way to get a list of clients to improve performance
2012-04-27 Aditi Iyer		PCC-29749(3.5.2.5)  updated store proc for mulitple - non duplicate route of admin 
2012-04-30 Aditi Iyer		PCC-29748(3.5.2.5)  updated for medication class- multiple values..
2012-04-30 Aditi Iyer		PCC-29464(3.5.2.5)  updated to brach out Med Admin Audit Report
2012-05-03 Aditi iyer		PCC-30039(3.5.2.5)  updated to clean up code since it is not supporting Med Admin audit Report 
2012-05-15 Aditi Iyer		PCC-30331(3.5.2.5)  updated to handle the med review date as single digit month : 5/15/012
2012-05-17 Aditi Iyer		PCC-30373(3.5.2.6)  updated to handle Order Status just 'Pending confirmation' w/o any relationship_id
2012-05-17 Aditi Iyer		PCC-30225(3.5.2.6)  updated the store proc to accommodate changes for View All Orders
2012-05-18 Rolly Sanchez	PCC-30035(3.5.2.6)  updated to branch out legacyorders with report option store proc
2012-05-30 Rolly Sanchez	PCC-27652(3.5.2.7)	Updated to include struck out orders
												assigned max_end_date to completed date
												dropped completed_date from the query so it won't create confusion
												use the renamed view
2012-05-31 Rolly Sanchez	PCC-30565(3.5.2.7) added for non intelligence census (record_type = 'C' or record_type is null) 
2012-06-05 Aditi Iyer		PCC-30848(3.6.0) added resident name for footer_1
2012-06-13 Aditi Iyer	    PCC-31057(3.5.2.8) Fixed the issue with Permanent Source Filter
2012-06-21 Rolly Sanchez	PCC-31217(3.6.0) Include all active orders within date range on med review report
2012-06-25 Rolly Sanchez	PCC-29463(3.6.0) Removed Row_type 1 from the final output
2012-06-25 Rolly Sanchez	PCC-31407(3.6.0) Excluded order with pending confirmation
2012-06-29 Rolly Sanchez	PCC-30981(3.6.1) Future dated discharge
2012-07-20 Aditi Iyer		PCC-32575(3.6.1) Updating the Grouping functionality as per new structure
2012-07-30 Rolly Sanchez	PCC-32674(3.6.1) Support medication class multiple selection
2012-08-03 Rolly Sanchez	PCC-32698(3.6.1) Support consolidated orders @vfil_consolidated_order
2012-08-08 Rolly Sanchez	PCC-29834(3.6.1) get report name from prp_rm_report table
2012-08-16 Rolly Sanchez	PCC-31559(3.6.1) drop join to pho_schedule_details_view
2012-08-17 Rolly Sanchez	PCC-33486(3.6.1) Update footer return to make it backward compatible
2012-08-22 Aditi Iyer		PCC-33539(3.6.1) Only one P1_header_id and remove P2_header_id and P3_header_id
2012-08-24 Aditi Iyer		PCC-31559(3.6.1) drop the reference of following columns:
														pho_time_code_info
														pho_shift
														pho_shift_2
														pho_shift_3
														client_name_2
														client_name_3
														pho_assignment
														pho_assignment_2
														pho_assignment_3
														pho_documented_date_time
														facility_info
														client_location_unit
														pho_order_summary_sch_dates
														pho_administered_date_time
														pho_order_type_consolidated - remove as a column, it still exists as a filter

2012-08-29 Rolly Sanchez	PCC-33869(3.6.1) output is not sorting properly when order category/type/desc is selected
2012-09-05 Rolly Sanchez	PCC-34029(3.6.1) Report should show future dated discharge clients as discharge	
2012-09-05 Rolly Sanchez	PCC-34048(3.6.1) when running custom report the group header display ${cli_client} instead of local terminology
2012-09-06 Rolly Sanchez	PCC-34089(3.6.1) when running custom report some group header is missing
2012-09-07 Aditi Iyer		PCC-34121(3.6.1) remove unnecessary fields to display and filters:
							PCC-34099(3.6.0.3.7) Medication Review Report taking too long to print the results. ( Issue recorded in one particular ORG )
													removed @vfil_supply_last_reorder_date_type( pho_supply_last_reorder_date )  filter
									pho_supply_last_reorder_date : remove 
							Filters: 
								pho_admin_record_daily 
								pho_supply_last_reorder_date
2012-09-07 Rolly Sanchez	Sort
								pho_order_category: Added
2012-09-07 Rolly Sanchez	PCC-34109(3.6.1) field that has wider width should comes first
2012-09-13 Rolly Sanchez	PCC-34419(3.6.1.1) Drop fn_pho_getOrderStatus create temp table in replacement
											   audit trace was drop from view_prp_pho_phys_order_schedule so need to add here
											   Add error catching after calling sproc_pho_getOrderStatus
											   PRP'rized temp table
2012-09-21 Rolly Sanchez	PCC-34521(3.6.1.1) Join it to Audit info when needed	
											   increased order_desc from 500 to 1000
2012-09-24 Rolly Sanchez	PCC-34254(3.6.2) Allow "-1," for pho_medication_class filter
2012-10-02 Rolly Sanchez	PCC-34842(3.6.2) changed the character length in temp table for all descriptions base from its source
2012-11-08 Rolly Sanchez	PCC-35129(3.6.2) change on how we parse med review date range though there was no problem with the old code 
											 it was changed to have consistency with selection_003 SP (filter band) 
2012-11-22 Rolly Sanchez	PCC-35121(3.6.2.2) fixed sort by option. this fixed refer to retrieving @vsort1~@vsort4
												fixed final sort when user selected physician and location as sort option and client status = both
												Added client ID on sort to fix a scenario where a room/bed of newly discharge patient was assigned to other patient
												CRT feedback
2012-11-27 Ritch Moore		PCC-36596 - Added join to new clients_attribute table for new allergy storage
2012-11-27 Ritch Moore		PCC-36597 - Added join to new clients_attribute table for new allergy storage
2012-01-16 Rolly Sanchez	PCC-37679 (3.6.3) use rm.report_id instead of rep.report_id because this is directly called by the report
2013-02-04 Rolly Sanchez	PCC-38180 (3.6.3) Added STAT on schedule template
2013-02-04 Rolly Sanchez	PCC-38779 (3.6.3) Optimized call to pho_getorderstatus SP
2013-02-15 Rolly Sanchez	PCC-39234 (3.6.3) call generic metadata for report metadata
												fixed sorting call to generic metadata
2013-03-20 Rolly Sanchez	PCC-40678 (3.6.3.1.1) Resident Header missing on Order Summary Report
												  Added is null when building P1 ( page header)
												  added default label for MRN	
2013-04-26 Rolly Sanchez	PCC-40888 (3.6.3.4)   Added struck out medication class 
2013-05-27 Rolly Sanchez	PCC-42828 (3.7.0.2)	  added logic for including administrative order trails on the report for order summary report
2013-06-19 Ritch Moore		PCC-41625 (3.7.0.2)	removed join to view_prp_pho_administrative_order and used view definition fileterd directly
2013-06-20 Ritch Moore		PCC-42633 (3.7.0.2)	added order_schedule_id to #PRP_Orders and carried through to the result set
2013-08-01 Rolly Sanchez	PCC-42904 (3.7.1) added drug protocol warning on order listing report
2013-12-10 Rolly Sanchez	PCC-50905 (3.7.2.2) change order summary formatting from style to b-tag
2013-12-16 Ritch Moore		PCC-48424 (3.7.3) add condition around order summary update for Order Listing (report_id=0) to not concatonate schedule directions
2014-04-10 Dom Christie     PCC-53333 (3.7.4) Rolled back the ICD 10 changes 
2014-04-14 Henny Ehghaghi PCC-56015  (3.7.4) Adding Drug Protocol Warning 
2014-07-31 Amro Saada		PCC-59694 (3.7.5)	Added filters and fields for Order Listing report to include order signature audit details	
2014-08-27 Amro Saada		PCC-59694 (3.7.5)	Rolled back changes for Order Listing report to include order signature audit details.	
2014-09-22 Dom Christie     PCC-63646 (3.7.5)   Added the logic for StatusCode 9 to print Pending Clinical Review
2014-09-24 Dom Christie     PCC-63646 (3.7.5)   Fixed the typo for Pending Clinical Review
2014-10-16 Dom Christie     PCC-63650  (3.7.5.1) Merged the Generic Metadata into this proc, added the join to pho_order_clinical_review table for getting reviews, 
                                                 ALso to grab the users based on the review by joining to sec_user table. The review table does not have the audit id like 
												 confirmation or revision by hence after confirming with Hitesh, directly joining to sec_user based on the reviewed_by column
2014-10-30 Dom Christie     PCC-66158 (3.7.5.1) Now the Long Username will be displayed for the Reviewed By mapping the Review By from pho_order_clinical_review                                                 table to the loginname from sec_user. This is unlike Confirmed By and Created By logic since for Review there is                                                 no mapping available to cp_Sec_user tables 												 
2014-12-19 H Ehghaghi 	   PCC-68297	(3.7.6)		 Adding  Orders Pending Signature Status 
2015-01-16 H Ehghaghi 	   PCC-69380	(3.7.6)		 Adding  Orders Pending Signature Status 
2015-01-20 H Ehghaghi 	   PCC-69765	(3.7.6)		 fixed Signed Date  that  not displayed correctly when not in the filter
2015-03-27  Dom Christie    PCC-72490 (3.7.7)	ICD10 Imeplementation using the Date range, end date if supplied or the system date as the end date to pass to the fucntion which returns the daignosis.
                                                    This logic aaplies for the SUmmary report
2015-03-27  Dom Christie    PCC-72489 (3.7.7)	ICD10 Imeplementation using the Date range, end date if supplied or the ON or AFTER DATE as the end date to pass to the fucntion which returns the daignosis
                                                    This logic applies for the Medication Reivew Report

2015-07-17	H Ehghaghi		PCC-79358 (3.7.8)  ADD 	include admin order desplay for order listing and  medication class
2015-03-27  Dom Christie    PCC-85623 (3.7.8.2) FIlter out the Discharged order based on the class id=2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2016-10-05  Dom Christie    PCC-100688 (3.7.12) Added the phys order id in the output, metadata also added for the same
2016-10-27  H Ehghaghi    PCC-101991 (3.7.11.1) Support ability to run report for multiple selected patients
2017-08-15  H Billapati   PCC-118719 (3.7.14) Fixing the Date Format to support UK Facilitues for Med Review, Order Listing, All Orders and Order Summary Report
2017-10-25  Dom Christie  CORE-5162  3.7.14.1  Added the filter to only include the orders with NULL Indication to use
2018-09-24  Dom Christie  CORE-22472  3.7.17.1 Added the ability for multiple Order By filter.
2018-10-09  Dom Christie  CORE-23122  3.7.17.1 Added Filter On Order Listing Report To Report On Electronically Transmitted Orders That Are Missing Related Diagnosis
2019-04-09  Mustafa Behrainwala CORE-36623 3.7.18.3 Report does not consider orders with indefinate schedule end date.
2021-01-04  Sree Nagha (naghas) CORE-98327  4.4.9   Update sproc to use SOP Drug Library Topclasses data instead of MMDB
-- ================================================================================= */



IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_order_based_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
--, @env varchar(5) = 'USAR'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @all_top_drug_classification	XML
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************



Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_report
 @report_id =  '0'--'-13'
,@fac_id =  '1'
,@field_list =  '-12,-13,-72,-77'
--,@field_list = '0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36'
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=0;pho_include_related_diagnosis=1;pho_order_date_range=11/01/2018,12/31/2018'--;pho_order_date_range=06/01/2013,06/30/2013'
,@sort_list =  '0=-1'
,@execution_user_login =  '_system_'
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @venv varchar(20)
	, @vSP_ClientId int
    , @vParentReportId int
	, @vWV_transfer int
	, @vEnableSignature char(1)
	, @vordered_by VARCHAR (1500)
	, @vordered_by_all SMALLINT
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)
		,@vCountryCode char(2)
		,@vdateFormatStyle smallint; --getting the format style based on the country
-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare @term_admission varchar(50)
     , @term_client varchar(50)
     ,@vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)
    , @footer varchar(50)
    , @header varchar(50)



-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit
		,@vDrugWarningMessage bit
		,@vDrugAllergyMessage bit
		,@vDrugBlackBoxMessage bit
		,@vDrugInteractionMessage bit
		,@vDrugDoseMessage bit



----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vIncludeIndication BIT
,@vIncludeRelatedDiagnosis BIT
,@vfil_client_id bit
     ,  @vfil_client_id_str bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime




	,@vfil_reviewed_by varchar(60)
	,@vfil_reviewed_date_type varchar(10)
	,@vfil_reviewed_date datetime
	,@vfil_reviewed_date2 datetime

	,@vfil_signed_by varchar(60)
	,@vfil_signed_date_type varchar(10)
	,@vfil_signed_date datetime
	,@vfil_signed_date2 datetime

	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime
	,@ICDDate datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_range varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime


	,@vfil_asof_order varchar(100)  ---as of date setting for order summary report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime


	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'

	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime
	, @vfil_drug_warning bit
	,@vfacadjusteddate DATETIME



Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

Declare @ordered_by TABLE ( items INT );
Declare @Med_Review_Date TABLE ( items varchar(10), row_num smallint);
CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


Create table #PRP_drug_severity_level (severity varchar(50), severity_id varchar(10));
CREATE table #Prp_drug_warning (phys_order_id int, warning_desc varchar(900))



CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			,reviewed_by varchar(60)
			,reviewed_date datetime
			,reviewed_by_long_username varchar(50)
			,signed_by varchar(60)
			,signed_date datetime
			,signed_by_long_username varchar(50)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary nvarchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
            , controlled_substance_code int
			, order_schedule_id int
			, drug_warning varchar(max)
			, Esigned_flag char(1)

);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #PRP_Holds
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted


CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
);


Create Clustered Index _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;

CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;

--DECLARE @common_code TABLE (item_id int, item_code varchar(20), item_description varchar(200));

DECLARE @tpmAllTopDrugClassification TABLE (
		classid varchar(10),
		descdisplay varchar(65)
);

BEGIN TRY

    insert into @tpmAllTopDrugClassification
    select classid, descdisplay from fn_xmlToDrugClassification(@all_top_drug_classification);

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	SET @vfil_drug_warning = '0'
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';
	SET @vFacID		  = @fac_id;
     SELECT  @vfacadjusteddate= dbo.fn_adjust_time_fac_time_zone(@vFacID,GETDATE())
	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	--SET @venv		  = @env
	SET @vSortList	  = @sort_list;
	---------Code to select the date format based on the country--------------------
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)

	---------------------------------***********------------------------------------

	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	--if @venv='USRA' and @vEnableSignature='Y'
	-- BEGIN
	--	INSERT INTO	@common_code (item_id , item_code , item_description )
	--	SELECT pho_std_label_id,'phocom',description from pho_std_label	where environment='USRA' and type='comm_method' ;
	-- END
	--ELSE IF	((@venv='USRA' and @vEnableSignature='N') or @venv='N')
	--BEGIN
	--   INSERT INTO	@common_code (item_id , item_code , item_description )
	--	SELECT pho_std_label_id,'phocom',description from pho_std_label	where environment='CDN' and type='comm_method'	;
	--END


--------------------As Per the New Change, the Metadata SP is not part of this Sp hence the entire section below here is the copy paste of the
--------------------Generic Metadata SP with required tweaks here and there


	---exec dbo.sproc_prp_generic_metadata
	SET @report_id = @VreportId
	SET @fac_id = @VfacId
	SET @field_list = @vFieldList
	SET @filter_list = @vFilterList
	SET @sort_list = @Vsortlist
	SET @execution_user_login = @execution_user_login
	SET @rows_returned = null




-- handle resident listing field to display differently

	if @vReportId = -81 or ((select parent_report_id FROM dbo.prp_rm_report WITH (NOLOCK ) WHERE report_id  = @vReportId) = -81)
	BEGIN
		SELECT  @vFieldList = substring (items , charindex(':', items ) + 1, len(items ))
		 from dbo.Split(@field_list,';')
		WHERE substring(items, 1, charindex(':', items )-1 ) = 'metadata'
	END

	select @vWV_transfer = charindex('wv_transfer',@vFilterList)


	select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @report_id --and parent_report_id = -9


	/* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */

	select @vStep = 2
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting facility terminology information... ' + convert(varchar(26),getdate(),109)

	Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		--, @vTermAdmission = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc)


SET @vTermClient=@term_client
SET @vTermAdmission=@term_admission;


-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select
		sequence,
		sort_by_name,
		group_level,
		display_name,
		ref_report_sort_by_id,
		 row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT  group_level
	,column_name
	,display_name
	,ref_report_sort_by_id
	from tbSort


	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


	/* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */

	select @vStep = 4
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting list of columns based on @field_list, pre-difined fields with column width and exclude some fields when they are part of report header ... ' + convert(varchar(26),getdate(),109)

	INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id


			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id

			LEFT OUTER JOIN

					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl

					on excl.ref_report_column_id = refrepcol.ref_report_column_id




		WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay

	/* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */

	select @vStep = 5
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting sorting information... ' + convert(varchar(26),getdate(),109)

	------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */


	select @vStep = 6
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' pre-define and user selected filter information... ' + convert(varchar(26),getdate(),109)



	INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select 555,* from #PRP_Filters




	SELECT @vordered_by=filter_value FROM #PRP_Filters WHERE filter_name='pho_med_prof'
	if @debug_me='Y' begin select '@vordered_by',@vordered_by end

	IF @vordered_by IS NULL
	BEGIN
	INSERT INTO @ordered_by
	SELECT -1
	END
	ELSE
	BEGIN

	INSERT INTO @ordered_by
	SELECT items from dbo.Split(@vordered_by,',')
	END

	if @debug_me='Y'
	begin
	 select @vordered_by_all,'ordby',* from @ordered_by
	 end

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */

	select @vStep = 7
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + 'Header and footer information... ' + convert(varchar(26),getdate(),109)


	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---


SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission






	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);


	select @vStep = 7

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_minor' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Minor', '1')
		end


	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_moderate' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Moderate', '2')
		end

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_severe' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Severe', '3')
		end








	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';


	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');

	set  @vEnableSignature = isnull((select  value  FROM [dbo].[configuration_parameter] WITH (NOLOCK)
						 WHERE [name] = 'order_sign_enable' and (fac_id = @vFacId ))  ,'N');


	select @vStep = 18
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info','pho_reviewed_by','pho_reviewed_date','pho_signed_by','pho_signed_date') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;
	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		   +  isnull(@vCol2,'')
		   + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END

	-- check if drug warning message was selected

	set @vDrugAllergyMessage     = CASE WHEN charindex('pho_drug_allergy',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugInteractionMessage = CASE WHEN charindex('pho_drug_interaction',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugBlackBoxMessage    = CASE WHEN charindex('pho_black_box',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugDoseMessage        = CASE WHEN charindex('pho_dose_check',@vFilterList) > 0 THEN 1 ELSE 0 END
	set @vDrugWarningMessage     =
	   CASE  WHEN @vDrugDoseMessage=1 or @vDrugBlackBoxMessage=1 or @vDrugInteractionMessage=1 or @vDrugAllergyMessage= 1 THEN 1
	         ELSE 0 END;




	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 25
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 35
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	SELECT @vfil_supply_reorder = filter_value from #PRP_Filters where filter_name = 'pho_supply_reorder';

	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_created_by = filter_value from #PRP_Filters where filter_name = 'pho_created_by' ;

	SELECT @vfil_confirmed_by = filter_value from #PRP_Filters where filter_name = 'pho_confirmed_by' ;

	SELECT @vfil_reviewed_by = filter_value from #PRP_Filters where filter_name = 'pho_reviewed_by';

	--SELECT @vfil_signed_by = filter_value from #PRP_Filters where filter_name = 'pho_signed_by';

	SELECT @vfil_pho_fac_time_code = filter_value from #PRP_Filters where filter_name = 'pho_facility_time_code' ;

	SELECT @vfil_pho_std_freq = filter_value from #PRP_Filters where filter_name = 'pho_std_frequency' ;

	SELECT	@vfil_consolidated_order  = filter_value from #PRP_Filters where filter_name = 'pho_order_type_consolidated' ;

	SELECT @vfil_pho_unsched_order = filter_value from #PRP_Filters where filter_name = 'pho_unsched_order' ;
	if @vfil_pho_unsched_order is null Set @vfil_pho_unsched_order  = '0';

		SELECT @vIncludeIndication = filter_value from #PRP_Filters where filter_name = 'pho_include_indication_for_use' ;

		IF @vIncludeIndication IS NULL
		BEGIN
		SET @vIncludeIndication=0
		END

	SELECT @vIncludeRelatedDiagnosis = filter_value from #PRP_Filters where filter_name = 'pho_include_related_diagnosis' ;
	IF @vIncludeRelatedDiagnosis IS NULL
		BEGIN
		SET @vIncludeRelatedDiagnosis=0
		END


	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter

	--administrative order selected
	SELECT @vIncludeAdminOrder = filter_value from #PRP_Filters where filter_name = 'pho_include_admin_order' ;



	SELECT @vfil_view_all_orders = filter_value from #PRP_Filters where filter_name = 'pho_view_all_orders'

	--Removed conversion into varchar since @vfil_view_all_orders_lookback_date is a datetime variable step 35
	if @vfil_view_all_orders  is not null Set @vfil_view_all_orders_lookback_date = dateadd(d,-@vfil_view_all_orders,@vReportDate);


	if @debug_me = 'y' Select @vfil_view_all_orders_lookback_date  as vfil_view_all_orders_lookback_date

	if @debug_me = 'y' Select @vfil_consolidated_order  as vfil_consolidated_order


	-----DATE TIME

	SELECT @vfil_confirmed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_confirmed_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_confirmed_date%'; -- range
	IF @vfil_confirmed_date_type = 'ON'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
	end

	Else if @vfil_confirmed_date_type = 'BEFORE'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date
		Set @vfil_confirmed_date = '1900-01-01'
	end

	Else if @vfil_confirmed_date_type = 'AFTER'
	begin
		Set @vfil_confirmed_date  = @vfil_confirmed_date+1
		Set @vfil_confirmed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_confirmed_date_type) = 1
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
		SEt @vfil_confirmed_date  = @vfil_confirmed_date_type
	end


	SELECT @vfil_created_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_created_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_created_date%';
	IF @vfil_created_date_type = 'ON'
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
	end

	Else if @vfil_created_date_type = 'BEFORE'
	begin
		Set @vfil_created_date2 = @vfil_created_date
		Set @vfil_created_date = '1900-01-01'
	end

	Else if @vfil_created_date_type = 'AFTER'
	begin
		Set @vfil_created_date  = @vfil_created_date+1
		Set @vfil_created_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_created_date_type) = 1
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
		SEt @vfil_created_date  = @vfil_created_date_type
	end





	SELECT @vfil_reviewed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_reviewed_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_reviewed_date%';
	IF @vfil_reviewed_date_type = 'ON'
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date+1
	end

	Else if @vfil_reviewed_date_type = 'BEFORE'
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date
		Set @vfil_reviewed_date = '1900-01-01'
	end

	Else if @vfil_reviewed_date_type = 'AFTER'
	begin
		Set @vfil_reviewed_date  = @vfil_reviewed_date+1
		Set @vfil_reviewed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_reviewed_date_type) = 1
	begin
		Set @vfil_reviewed_date2 = @vfil_reviewed_date+1
		SEt @vfil_reviewed_date  = @vfil_reviewed_date_type
	end

   SELECT @vfil_signed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_signed_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_signed_date%';
	IF @vfil_signed_date_type = 'ON'
	begin
		Set @vfil_signed_date2 = @vfil_signed_date+1
	end

	Else if @vfil_signed_date_type = 'BEFORE'
	begin
		Set @vfil_signed_date2 = @vfil_signed_date
		Set @vfil_signed_date = '1900-01-01'
	end

	Else if @vfil_signed_date_type = 'AFTER'
	begin
		Set @vfil_signed_date  = @vfil_signed_date+1
		Set @vfil_signed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_signed_date_type) = 1
	begin
		Set @vfil_signed_date2 = @vfil_signed_date+1
		SEt @vfil_signed_date  = @vfil_signed_date_type
	end

	SELECT @vfil_supply_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_order_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_order_date%';

	IF @vfil_supply_order_date_type = 'ON'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
	end

	Else if @vfil_supply_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date
		Set @vfil_supply_order_date = '1900-01-01'
	end

	Else if @vfil_supply_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_order_date  = @vfil_supply_order_date+1
		Set @vfil_supply_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_supply_order_date_type) = 1
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
		SEt @vfil_supply_order_date  = @vfil_supply_order_date_type
	end



	SELECT @vfil_supply_last_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_last_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_last_order_date%';

	IF @vfil_supply_last_order_date_type = 'ON'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
	end

	Else if @vfil_supply_last_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date
		Set @vfil_supply_last_order_date = '1900-01-01'
	end

	Else if @vfil_supply_last_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_last_order_date  = @vfil_supply_last_order_date+1
		Set @vfil_supply_last_order_date2 = '9999-12-31'
	end

	Else if isDate(@vfil_supply_last_order_date_type) = 1
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
		SEt @vfil_supply_last_order_date  = @vfil_supply_last_order_date_type
	end


	SELECT @vfil_discontinued_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_discontinued_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_discontinued_date%';
	IF @vfil_discontinued_date_type = 'ON'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
	end
	Else if @vfil_discontinued_date_type = 'BEFORE'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date
		Set @vfil_discontinued_date = '1900-01-01'
	end

	Else if @vfil_discontinued_date_type = 'AFTER'
	begin
		Set @vfil_discontinued_date  = @vfil_discontinued_date+1
		Set @vfil_discontinued_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_discontinued_date_type) = 1
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
		SEt @vfil_discontinued_date  = @vfil_discontinued_date_type
	end


	SELECT @vfil_order_end_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_end_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_end_date%';
	IF @vfil_order_end_date_type = 'ON'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
	end

	Else if @vfil_order_end_date_type = 'BEFORE'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date
		Set @vfil_order_end_date = '1900-01-01'
	end

	Else if @vfil_order_end_date_type = 'AFTER'
	begin
		Set @vfil_order_end_date  = @vfil_order_end_date+1
		Set @vfil_order_end_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_end_date_type) = 1
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
		SEt @vfil_order_end_date  = @vfil_order_end_date_type
	end





	SELECT @vfil_hold_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_hold_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_hold_date%';
	IF @vfil_hold_date_type = 'ON'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date+1
	end

	Else if @vfil_hold_date_type = 'BEFORE'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date
		Set @vfil_hold_date = '1900-01-01'
	end

	Else if @vfil_hold_date_type = 'AFTER'
	begin
		Set @vfil_hold_date  = @vfil_hold_date+1
		Set @vfil_hold_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_hold_date_type) = 1
	begin
		Set @vfil_hold_date2 = @vfil_order_end_date+1
		SEt @vfil_hold_date  = @vfil_hold_date_type
	End




	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SET @ICDDate=@vfil_order_date
		SEt @vfil_order_date  = @vfil_order_date_type
	End




	SELECT @vfil_order_start_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_start_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_start_date%';

	IF @vfil_order_start_date_type = 'ON'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
	end

	Else if @vfil_order_start_date_type = 'BEFORE'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_order_start_date_type = 'AFTER'
	begin
		Set @vfil_order_start_date  = @vfil_order_start_date+1
		Set @vfil_order_start_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_start_date_type) = 1
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
		SEt @vfil_order_start_date  = @vfil_order_start_date_type
	END



	SELECT @vfil_asof_order = filter_value	from #PRP_Filters where filter_name like  'pho_admin_order_asof_date%';

	if @vfil_asof_order is not null
	begin
		set @vfil_asof_order_date_d1 = @vfil_asof_order
		set @vfil_asof_order_date_d2 = @vfil_asof_order_date_d1 + 1

	end

	if @debug_me='Y' select  @vfil_asof_order_date_d1 asof_date1, @vfil_asof_order_date_d2 asof_date2


-- this block is for setting up the date range to include administrative orders in the report
-- SELECT @vfil_admin_order_date_range = filter_value from #PRP_Filters where filter_name = 'custom_order_date_range' ;

--
--	if @vfil_admin_order_date_range is not null
--		begin
--
--
--			if Charindex(@vDelim,@vfil_admin_order_date_range) > 0
--			begin
--				SELECT @vfil_order_date	= Left(@vfil_admin_order_date_range,Charindex(@vDelim,@vfil_admin_order_date_range)-1)
--					  ,@vfil_order_date2 = dateadd(dd,1,Right(@vfil_admin_order_date_range, len(@vfil_admin_order_date_range)-Charindex(@vDelim,@vfil_admin_order_date_range)) )
--					  ,@vfil_order_date_type = '1'
--			end
--
--			else
--			begin
--				set @vfil_order_date = @vfil_admin_order_date_range
--				set @vfil_order_date2 = @vfil_order_date + 1
--				set @vfil_order_date_type = '1'
--
--			end
--
--
--		end

	if @vIncludeAdminOrder = 1	 and @vReportId=0
		begin

			SET @vfil_admin_order_date_range_d1 = @vfil_order_date
			SET @vfil_admin_order_date_range_d2 = @vfil_order_date2


		end





	----Special filters date range for med review report


	;with tb
		as
		(
			select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
			cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
			where a.filter_name = 'pho_start_end_date_range_review'

		)
	select
		 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
		,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
		,@vfil_start_end_date_range_review  = '1'

	from tb

--		where row_num < 3

------Dates FOR ICD---
IF @vReportId=-10
BEGIN

SELECT @ICDDate=getdate()
END

------

	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' startdate ' + cast(@vfil_start_end_date_range_d1  as varchar(30)) + ' end date ' + cast(@vfil_start_end_date_range_d2  as varchar(30))

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' order_startdate ' + cast(@vfil_order_date  as varchar(30)) + ' order end date ' + cast(@vfil_order_date2  as varchar(30))


	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin','pho_signed_by','pho_order_status') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	, 'pho_drug_allergy','pho_drug_interaction','pho_black_box','pho_dose_check','pho_signed_by'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 39
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 40
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_admin_record%')		SET @vfil_administration_record= '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_administered_by')		SET @vfil_administered_by_id = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';


	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_type')				SET @vfil_order_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_permanent_source')		SET @vfil_permanent_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like  'pho_source%')			SET @vfil_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_route_of_admin')			SET @vfil_route_of_admin = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_schedule_template')		SET @vfil_schedule_template = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_type')				SET @vfil_diet_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_texture')			SET @vfil_diet_texture = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_fluid_consistency')		SET @vfil_fluid_consistency = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_supplement')		SET @vfil_diet_supplement = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_phys_order_id')			SET @vfil_physOrderId = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_std_order')				SET @vfil_pho_std_order = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name
	 in ('pho_drug_allergy','pho_drug_interaction','pho_black_box','pho_dose_check'))				SET @vfil_drug_warning = '1'

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_signed_by')			SET @vfil_signed_by = '1';


   update #PRP_Multi_Filters
	 set filter_value=
	case filter_name
	 when 'pho_drug_allergy' then 1
	 when 'pho_drug_interaction' then 2
	 when 'pho_black_box' then 3
	 when 'pho_dose_check' then 4
	 else filter_value
	 end ;


	if @debug_me='Y' Print 'drug_warning ' + convert(varchar , @vfil_drug_warning)

	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);
	--select @vClientIDs


	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b

		if (select count(*) from #PRP_Multi_Filters where filter_name='client_id')>1
	     set  @vfil_client_id_str=1
		else set  @vfil_client_id_str=0
	END

		-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(c.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (c.allergy ='To Be Determined' or  c.allergy='' or c.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select clients.client_id, mpi_id, client_id_number
							, clients.admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, photo_date, photo_small , allergy

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				INNER  JOIN dbo.clients_attribute ca WITH (NOLOCK)
						on clients.client_id = ca.client_id
				where clients.fac_id = @vFacID
				 and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND ((@vfil_client_status = '-1')
					OR (@vfil_client_status = 1 AND clients.discharge_date is not null  AND clients.discharge_date <@vfacadjusteddate ) )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id

		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vdateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vdateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vdateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(c.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (c.allergy ='To Be Determined' or  c.allergy='' or c.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select clients.client_id, mpi_id, client_id_number
							, clients.admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, photo_date, photo_small , allergy

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				INNER  JOIN dbo.clients_attribute ca WITH (NOLOCK)
						on clients.client_id = ca.client_id
				where clients.fac_id = @vFacID
				 and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = 0 AND (clients.discharge_date IS NULL OR clients.discharge_date > @vfacadjusteddate ) )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id

		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.effective_date asc  ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)
					   AND c.effective_date <= @vfacadjusteddate
				      AND (c.ineffective_date>= @vfacadjusteddate or c.ineffective_date is null)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )

		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 52
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select * from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 53
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;


	------Getting filtered orders from view_pho_phys_order
	select @vStep = 58
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);

	if  @vScheduleLevel = '1' or @vfil_pho_unsched_order = '1' or isnull(@vfil_pho_fac_time_code,'0')<>'0'
	BEGIN
		if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'

	;
	with tb
	as (


	select
				po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				,clinical.reviewed_by
				,clinical.reviewed_date
				,null as   [reviewed_by_long_username]
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then sg.cp_sec_user_audit_id
					when  esg.sign_user_id is not null then esg.sign_user_id
				  end signed_by
				, case
				    when  esg.sign_date is null then null
					--when sg.signature_date is not null and @vfil_signed_date_type is null and esg.sign_date is null then sg.signature_date
					when  esg.sign_date is not null then esg.sign_date
				  end   signed_date
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then isnull(secaudit.long_username , secaudit.loginname )
					when  esg.sign_user_id is not null then isnull(esu.long_username,esu.loginname)
				   end	  [signed_by_long_username]
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then
						replace(po.directions, '<', '&lt;')
						else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1'  then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date
				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				, po.order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				,case
				    when  esg.sign_user_id is null then 'N'
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then 'T'
					when  esg.sign_user_id is not null then 'E'
				 end Eflag
	from view_prp_pho_phys_order_schedule po
		inner join pho_phys_order class on class.phys_order_id=po.phys_order_id and order_class_id=1
			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId
		    left join pho_order_clinical_review	clinical
			       on clinical.phys_order_id=po.phys_order_id

			--left join pho_phys_order_sign	sg 	 with (nolock)
			--       on sg.phys_order_id=po.phys_order_id
			----left join dbo.pho_phys_order_useraudit useraudit with (nolock)
			----	on useraudit.phys_order_id = sg.phys_order_id
			--left join dbo.cp_sec_user_audit secaudit with (nolock)
			--	on secaudit.cp_sec_user_audit_id = sg.cp_sec_user_audit_id 	and secaudit.fac_id = @vFacId

			left join pho_phys_order_esignature	esg 	 with (nolock)
			       on esg.phys_order_id=po.phys_order_id
			left join sec_user esu with (nolock)
			   on esu.userid=esg.sign_user_id


	 where po.draft='0'
		and	po.order_category_id  <> 3030  ----exclude administrative orders
		AND (( @vIncludeIndication=1 AND po.communication_method=3209 AND (po.indications_for_use IS NULL OR po.indications_for_use='')  ) OR @vIncludeIndication=0)
		AND (( @vIncludeRelatedDiagnosis=1 AND po.communication_method=3209 AND (po.diagnoses IS NULL OR po.diagnoses ='')  ) OR @vIncludeRelatedDiagnosis=0)

	union all

	select   null as administered_by_id
		, ppo.alter_med_src
		, ppo.client_id
		, ppo.communication_method
		, ppo.completed_by
		, ppo.max_end_date
		, ppo.confirmed_by
		, ppo.confirmed_by_long_username
		, ppo.confirmed_date
		, ppo.created_by
		, ppo.created_by_long_username
		, ppo.created_date
		,NULL AS reviewed_by
		,NULL AS reviewed_date
		,NULL AS reviewed_by_long_username
		,NULL AS signed_by
		,NULL AS signed_date
		,NULL AS [signed_by_long_username]
		, ppo.diet_type
		, ppo.diet_texture
		, ppo.diet_supplement
		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
		, ppo.discontinued_date
		, ppo.end_date
		, ppo.fac_id
		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
		, ppo.hold_date
		, ppo.hold_date_end
		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
		, ppo.order_category_id
		, ppo.order_date
		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
		, ppo.order_status
		, null as order_relationship
		, ppo.order_type_id
		, ppo.pharmacy_id
		, ppo.phys_order_id
		, ppo.physician_id
		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
		, ppo.resume_date
		, ppo.revision_by
		, ppo.revision_by as revision_long_username
		, ppo.revision_date
		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
		, null schedule_template
		, ppo.[start_date]
		, ppo.std_order_id
		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
		, ppo.date_ordered as supply_order_date
		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
		, ppo.last_reorder_date as supply_last_reorder_date
		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
		, ppo.fluid_consistency
		, ppo.active_flag
		, ppo.order_verified
		, ppo.draft
		, ppo.std_freq_id
		, ppo.description
		, null as order_schedule_id
		, ppo.last_reorder_date
		, ppo.date_ordered
		, ppo.diagnoses
		, ppo.route_of_admin as route_of_admin
        , null as controlled_substance_code
		,'N' Eflag
	 from dbo.view_prp_pho_phys_order_strike_out ppo
	 INNER JOIN (SELECT phys_order_id FROM pho_phys_order_audit WHERE order_class_id=1 AND event_type='S') audit  ON audit.phys_order_id=ppo.phys_order_id


			inner join #clients clients  with (nolock)
					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
					AND ppo.fac_id = @vFacId
					and @vfil_order_status_strikeout = 1

			where ppo.order_category_id  not in ( -1, 3030)
			AND  (( @vIncludeIndication=1 AND  ppo.communication_method=3209 AND (ppo.indications_for_use IS NULL OR ppo.indications_for_use ='')) OR @vIncludeIndication=0)
			AND  (( @vIncludeRelatedDiagnosis=1 AND  ppo.communication_method=3209 AND (ppo.diagnoses IS NULL OR ppo.diagnoses ='')) OR @vIncludeRelatedDiagnosis=0)
	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				, order_schedule_id
				,reviewed_by
			    ,reviewed_date
				,reviewed_by_long_username
				,signed_by
			    ,signed_date
				,signed_by_long_username
				,Esigned_flag
		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				, po_sch.std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				, po.order_schedule_id
				,po.reviewed_by
			    ,po.reviewed_date
				,po.reviewed_by_long_username
				,po.signed_by
				,po.signed_date
				,po.signed_by_long_username
				,po.eflag
		From tb po with (nolock)

		left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id



		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id

		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left OUTER JOIN ( SELECT allergy.phys_order_id,
		                         allergy.allergy_id,
								 allergy.cp_sec_user_audit_id,
								 allergy.acknowledgement_date,
								 allergy.pn_id
								  FROM  dbo.pho_phys_order_allergy_acknowledgement allergy WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_allergy' AND f.filter_value = 1 -- order with drug allergy
						) algry
					on po.phys_order_id = algry.phys_order_id

		left OUTER JOIN ( SELECT DrugtoDrug.id,
		                         DrugtoDrug.phys_order_id,
								 DrugtoDrug.phys_order_id2,
								 DrugtoDrug.order_supply_id,
								 DrugtoDrug.order_supply_id2,
								 DrugtoDrug.cp_sec_user_audit_id,
		                         DrugtoDrug.acknowledgement_date,
								 DrugtoDrug.severity_code
			 FROM  dbo.pho_phys_order_drug_acknowledgement DrugtoDrug WITH (NOLOCK)
							INNER JOIN #PRP_drug_severity_level lvl WITH (NOLOCK)
								ON lvl.severity_id = DrugtoDrug.severity_code
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_interaction' AND f.filter_value = 2 -- order with drug to drug interaction
						) DtoD
					on po.phys_order_id = DtoD.phys_order_id

		left OUTER JOIN ( SELECT bb.phys_order_id,
		                         bb.order_supply_id,
								 bb.[file_name],
								 bb.cp_sec_user_audit_id,
								 bb.acknowledgement_date
								  FROM  dbo.pho_phys_order_blackbox_acknowledgement bb WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_black_box' AND f.filter_value = 3 -- order with black box warning
						) blackbox
					on po.phys_order_id = blackbox.phys_order_id

		left OUTER JOIN ( SELECT overdose.phys_order_id,
		                         overdose.over_dose
								   FROM  dbo.pho_phys_order_dose_check_acknowledgement overdose WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_dose_check' AND f.filter_value = 4 -- order with max dosage
									AND overdose.over_dose = 1
						) over_dose
					on po.phys_order_id = over_dose.phys_order_id

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		INNER JOIN @ordered_by ordby ON (ordby.items = po.physician_id OR ordby.items = -1)

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa		on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		left join #PRP_Multi_Filters schtemp	on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		left join #PRP_Multi_Filters dt			on dt.filter_name		= 'pho_diet_type'				and dt.filter_value = po.diet_type
		left join #PRP_Multi_Filters dtxt		on dtxt.filter_name		= 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		left join #PRP_Multi_Filters dsup		on dsup.filter_name		= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		left join #PRP_Multi_Filters fc			on fc.filter_name		= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	on OrderId.filter_name	= 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id

		left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'		and sgb.filter_value =po.signed_by
				   		where  (po.active_flag = 'Y' or po.active_flag is null)
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )




			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )
			AND ((@vfil_signed_by  = '1'	and po.signed_by is not null) or @vfil_signed_by  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)


			-- drug protocol warning
			and (@vfil_drug_warning = '1' AND (algry.phys_order_id IS NOT NULL  or DtoD.phys_order_id  is NOT NULL
												or blackbox.phys_order_id IS NOT NULL or over_dose.phys_order_id is NOT null)
					or @vfil_drug_warning = '0' )

			--,reviewed_by varchar(60)
			--,reviewed_date datetime
			------DATE FILTERS
			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
					else 0 end

           		AND 1 = Case when (@vfil_reviewed_date_type  is NULL) then 1
						 when po.reviewed_date  >= @vfil_reviewed_date and po.reviewed_date < @vfil_reviewed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_signed_date_type  is NULL) then 1
						 when po.signed_date  >= @vfil_signed_date and po.signed_date < @vfil_signed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
					else 0 end
			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_order_date_type is NULL) then 1
						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
					else 0 end
--			-- asof date filter
			AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
							then 1
					else 0 end

			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
						when  po.start_date >= @vfil_order_start_date and   po.start_date< @vfil_order_start_date2 then 1
						else 0 end

			AND 1  = case
					when (@vfil_order_end_date_type  is NULL or (@vfil_order_end_date_type='NODATE' and po.end_date is null)) then 1
					when (@vfil_order_end_date_type = 'ON' and po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'BEFORE' and po.end_date < @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'AFTER' and (po.end_date is null or po.end_date >=@vfil_order_end_date)) then 1
					else 0 end


			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
						else 0 end



			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
						else 0 end


			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
					else
					---show all orders
					case when
						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)

						) ---handling with or without schedules
						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
						and isnull(po.active_flag,'y') = 'y'   --- valid order
                              and po.order_verified = 'Y'   -----no pending

						then 1 else

						0 end
				   end


	END

	ELSE -- no schedule level or schedule detail level
	BEGIN

	;
	with tb1
	as (

	select
				po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, null  	as confirmed_by
				, null  	as confirmed_by_long_username
				, null		as confirmed_date
				, po.created_by      as [created_by]
				, null      as [created_by_long_username]
				, po.created_date
				,clinical.reviewed_by
	        	,clinical.reviewed_date
				,NULL AS reviewed_by_long_username
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then sg.cp_sec_user_audit_id
					when esg.sign_user_id is not null then esg.sign_user_id
				  end signed_by
				, case
				    when  esg.sign_date is null then null
					--when sg.signature_date is not null and @vfil_signed_date_type is null and esg.sign_date is null then sg.signature_date
					when  esg.sign_date is not null then esg.sign_date
				  end   signed_date
				, case
				    when  esg.sign_user_id is null then null
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then isnull(secaudit.long_username , secaudit.loginname )
					when  esg.sign_user_id is not null then isnull(esu.long_username,esu.loginname)
				  end	  [signed_by_long_username]

				--,sg.cp_sec_user_audit_id signed_by
				--,sg.signature_date  signed_date
				--,isnull(secaudit.long_username , secaudit.loginname ) 	  [signed_by_long_username]
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then
					replace(po.directions, '<', '&lt;')
					else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1'   then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date
				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc
				, NULL as order_status--OrderStatus.order_status
				, null as order_relationship--OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				,po.revision_by       as [revision_by]
				,null       as [revision_by_long_username]
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				, po.order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
                , po.controlled_substance_code
				, case
				    when esg.sign_user_id is null then 'N'
					--when sg.cp_sec_user_audit_id is not null and esg.sign_user_id is null then 'T'
					when  esg.sign_user_id is not null then 'E'
				  else null end Eflag

		from view_prp_pho_phys_order_schedule po
			inner join pho_phys_order class on class.phys_order_id=po.phys_order_id and order_class_id=1
				inner join #clients clients  with (nolock)
						on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients
								AND po.fac_id = @vFacId
				left join pho_order_clinical_review	clinical
			        on clinical.phys_order_id=po.phys_order_id

				--left join pho_phys_order_sign	sg 	 with (nolock)
			 --       on sg.phys_order_id=po.phys_order_id
				----left join dbo.pho_phys_order_useraudit useraudit with (nolock)
				----	on useraudit.phys_order_id = sg.phys_order_id
				--left join dbo.cp_sec_user_audit secaudit with (nolock)
				--	on secaudit.cp_sec_user_audit_id = sg.cp_sec_user_audit_id 	and secaudit.fac_id = @vFacId

				left join pho_phys_order_esignature	esg 	 with (nolock)
					   on esg.phys_order_id=po.phys_order_id
				left join sec_user esu with (nolock)
				   on esu.userid=esg.sign_user_id
		where  po.draft='0'
			and po.order_category_id  <> 3030
 AND (( @vIncludeIndication=1  AND po.communication_method=3209 AND ( po.indications_for_use IS NULL OR po.indications_for_use='')) OR @vIncludeIndication=0)
  AND (( @vIncludeRelatedDiagnosis=1  AND po.communication_method=3209 AND (po.diagnoses IS NULL OR po.diagnoses='')) OR @vIncludeRelatedDiagnosis=0)
		union all

		select   null as administered_by_id
			, ppo.alter_med_src
			, ppo.client_id
			, ppo.communication_method
			, ppo.completed_by
			, ppo.max_end_date
			, ppo.confirmed_by
			, ppo.confirmed_by_long_username
			, ppo.confirmed_date
			, ppo.created_by
			, ppo.created_by_long_username
			, ppo.created_date
			,NULL AS reviewed_by
		    ,NULL AS reviewed_date
			,NULL AS reviewed_by_long_username
			,NULL AS signed_by
		    ,NULL AS signed_date
			,NULL AS signed_by_long_username
			, ppo.diet_type
			, ppo.diet_texture
			, ppo.diet_supplement
			, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
			, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
			, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_descf
			, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
			, ppo.discontinued_date
			, ppo.end_date
			, ppo.fac_id
			, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
			, ppo.hold_date
			, ppo.hold_date_end
			, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
			, ppo.order_category_id
			, ppo.order_date
			,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
			, ppo.order_status
			, null as order_relationship
			, ppo.order_type_id
			, ppo.pharmacy_id
			, ppo.phys_order_id
			, ppo.physician_id
			, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
			, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
			, ppo.resume_date
			, ppo.revision_by
			, ppo.revision_by as revision_long_username
			, ppo.revision_date
			, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
			, null schedule_template
			, ppo.[start_date]
			, ppo.std_order_id
			, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
			, ppo.date_ordered as supply_order_date
			, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
			, ppo.last_reorder_date as supply_last_reorder_date
			, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
			, ppo.fluid_consistency
			, ppo.active_flag
			, ppo.order_verified
			, ppo.draft
			, ppo.std_freq_id
			, ppo.description
			, null as order_schedule_id
			, ppo.last_reorder_date
			, ppo.date_ordered
			, ppo.diagnoses
			, ppo.route_of_admin as route_of_admin
            ,null as controlled_substance_code
			,'N' eflag

		 from dbo.view_prp_pho_phys_order_strike_out ppo
		   INNER JOIN (SELECT phys_order_id FROM pho_phys_order_audit WHERE order_class_id=1 AND event_type='S') audit  ON audit.phys_order_id=ppo.phys_order_id

				inner join #clients clients  with (nolock)
						on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
						AND ppo.fac_id = @vFacId
						and @vfil_order_status_strikeout = 1

		where ppo.order_category_id  not in ( -1, 3030)
		AND (( @vIncludeIndication=1  AND ppo.communication_method=3209 AND (ppo.indications_for_use IS NULL OR ppo.indications_for_use='')) OR @vIncludeIndication=0)
		AND (( @vIncludeRelatedDiagnosis=1  AND ppo.communication_method=3209 AND (ppo.diagnoses IS NULL OR ppo.diagnoses='')) OR @vIncludeRelatedDiagnosis=0)
		)

		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, schedule_date
				, documented_date
				, documented_by
				, administered_date
				, order_verified
				, active_flag
                , controlled_substance_code
				, order_schedule_id
				,reviewed_by
			    ,reviewed_date
				,reviewed_by_long_username
				,signed_by
			    ,signed_date
				,signed_by_long_username
				,Esigned_flag

		)
		Select

				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, po.order_category_id
				, po.order_date

				, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

					 --po.[description]
						replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;')
																			, '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
						+ '</b>' else NULL end as order_desc


				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, NULL as std_freq_id
				, NULL as schedule_date
				, NULL as documented_date
				, NULL as documented_by
				, NULL as administered_date
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				, po.order_schedule_id
				,po.reviewed_by
			    ,po.reviewed_date
				,po.reviewed_by_long_username
				,po.signed_by
			    ,po.signed_date
				,po.signed_by_long_username
				,po.eflag

		From tb1 po with (nolock)

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock) on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left OUTER JOIN ( SELECT allergy.phys_order_id,
		                         allergy.allergy_id,
								 allergy.cp_sec_user_audit_id,
								 allergy.acknowledgement_date,
								 allergy.pn_id    FROM  dbo.pho_phys_order_allergy_acknowledgement allergy WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_allergy' AND f.filter_value = 1 -- order with drug allergy
						) algry
					on po.phys_order_id = algry.phys_order_id

		left OUTER JOIN ( SELECT DrugtoDrug.id,
		                         DrugtoDrug.phys_order_id,
								 DrugtoDrug.phys_order_id2,
								 DrugtoDrug.order_supply_id,
								 DrugtoDrug.order_supply_id2,
								 DrugtoDrug.cp_sec_user_audit_id,
								 DrugtoDrug.acknowledgement_date,
								 DrugtoDrug.severity_code
		                         FROM  dbo.pho_phys_order_drug_acknowledgement DrugtoDrug WITH (NOLOCK)
							INNER JOIN #PRP_drug_severity_level lvl WITH (NOLOCK)
								ON lvl.severity_id = DrugtoDrug.severity_code
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_drug_interaction' AND f.filter_value = 2 -- order with drug to drug interaction
						) DtoD
					on po.phys_order_id = DtoD.phys_order_id

		left OUTER JOIN ( SELECT bb.phys_order_id,
		                         bb.order_supply_id,
								 bb.[file_name],
								 bb.cp_sec_user_audit_id,
								 bb.acknowledgement_date FROM  dbo.pho_phys_order_blackbox_acknowledgement bb WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_black_box' AND f.filter_value = 3 -- order with black box warning
						) blackbox
					on po.phys_order_id = blackbox.phys_order_id

		left OUTER JOIN ( SELECT overdose.phys_order_id,
		                          overdose.over_dose FROM  dbo.pho_phys_order_dose_check_acknowledgement overdose WITH (NOLOCK)
							INNER join #PRP_Multi_Filters f ON f.filter_name = 'pho_dose_check' AND f.filter_value = 4 -- order with max dosage
									AND overdose.over_dose = 1
						) over_dose
					on po.phys_order_id = over_dose.phys_order_id


		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method
	     INNER JOIN @ordered_by ordby ON (ordby.items = po.physician_id OR  ordby.items = -1)



		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		left join #PRP_Multi_Filters dt	 on dt.filter_name = 'pho_diet_type'				and dt.filter_value = po.diet_type
		left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		left join #PRP_Multi_Filters dsup	 on dsup.filter_name	= 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		left join #PRP_Multi_Filters fc	 on fc.filter_name	= 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id
		left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'		and sgb.filter_value =po.signed_by

		where  (po.active_flag = 'Y' or po.active_flag is null)
			----MULTIPLE VALUES SUPPORTED
			AND	((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )



			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )
			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )

			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )
			AND ((@vfil_physOrderId  = '1'			and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order  = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )
			AND ((@vfil_signed_by  = '1'	and po.signed_by is not null) or @vfil_signed_by  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )
			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)
			-- drug protocol warning
			and (@vfil_drug_warning = '1' AND (algry.phys_order_id IS NOT NULL  or DtoD.phys_order_id  is NOT NULL
												or blackbox.phys_order_id IS NOT NULL or over_dose.phys_order_id is NOT null)
				or @vfil_drug_warning = '0' )




			------DATE FILTERS
			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
					else 0 end

           AND 1 = Case when (@vfil_reviewed_date_type  is NULL) then 1
						 when po.reviewed_date  >= @vfil_reviewed_date and po.reviewed_date < @vfil_reviewed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_signed_date_type  is NULL) then 1
						 when po.signed_date  >= @vfil_signed_date and po.signed_date < @vfil_signed_date2 then 1
					else 0 end

			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
					else 0 end
			AND 1 = case when (@vfil_order_date_type is NULL) then 1
						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
					else 0 end
			-- asof date filter
			AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d2 )
							then 1
					else 0 end

			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
						else 0 end

			AND 1  = case
					when (@vfil_order_end_date_type  is NULL or (@vfil_order_end_date_type='NODATE' and po.end_date is null)) then 1
					when (@vfil_order_end_date_type = 'ON' and po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'BEFORE' and po.end_date < @vfil_order_end_date2) then 1
					when (@vfil_order_end_date_type = 'AFTER' and (po.end_date is null or po.end_date >=@vfil_order_end_date)) then 1
					else 0 end


			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
						else 0 end


			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
						else 0 end


			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
					else
					---show all orders
					case when
						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
						) ---handling with or without schedules
						and (po.end_date is null  or po.end_date>= @vfil_start_end_date_range_d1)
						and (po.discontinued_date is null or po.discontinued_date >=@vfil_start_end_date_range_d1)
						and isnull(po.active_flag,'y') = 'y'   --- valid order
                        and po.order_verified = 'Y'   -----no pending

						then 1 else 0 end
				   end

	END

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)

	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status

if @debug_me = 'y'  select 'Orders' Orders, * From #prp_orders

-- get all orders for that facility/client

if (@client_id <> '-1' and @vfil_client_id_str=0) set @vSP_ClientId = @client_id

DECLARE @vSelectedDate datetime
set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vSelectedDate
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


	-- delete orders if they are not part of the filter
		delete  pr
		from #prp_orders pr
			left join #PRP_Multi_Filters os			on os.filter_name		= 'pho_order_status'		and os.filter_value = pr.order_status
			where (@vfil_order_status = '1'  and os.filter_value is null)
			or ((@vfil_view_all_orders is not null AND
					((pr.order_status = 2/*Discontinued*/ and pr.discontinued_date < @vfil_view_all_orders_lookback_date)
					 or (pr.order_status = 3/*Completed*/ and pr.completed_date < @vfil_view_all_orders_lookback_date)
					)))



	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null or  @vfil_reviewed_by is not null or  @vfil_signed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )
				,reviewed_by=secuser_reviewed.loginname
				,reviewed_by_long_username=secuser_reviewed.long_username
				--,signed_by= case when po.Esigned_flag='T' then   cpsecuser_signed.loginname
				--                 when po.Esigned_flag='E' then   secuser_signed.loginname
				--			else null end
			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by
                left join dbo.sec_user secuser_reviewed
				   on secuser_reviewed.loginname=po.reviewed_by


				--left join dbo.sec_user secuser_signed
				--   on secuser_signed.userid=po.signed_by

				--left join dbo.cp_sec_user_audit cpsecuser_signed with (nolock)
				--	on cpsecuser_signed.cp_sec_user_audit_id = po.signed_by




	end

	if  @vfil_created_by is not null or @vfil_confirmed_by is not null or @vfil_reviewed_by is not null or @vfil_signed_by is not null
	begin
		delete #PRP_Orders
			from #PRP_Orders po
			left join #PRP_Multi_Filters sgb      on sgb.filter_name		= 'pho_signed_by'
			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
							     and ((po.reviewed_by = @vfil_reviewed_by and po.reviewed_by is not null) or @vfil_reviewed_by is null)
								  AND ((@vfil_signed_by  = '1'	and po.signed_by is not null and sgb.filter_value =po.signed_by) or @vfil_signed_by  is null )
							)



	end
	if @debug_me = 'y' Select * from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retrieving administrative orders ' + convert(varchar(26),getdate(),109)

--	 get all administrative orders instead of just hold orders

--	Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)
--	Select  p.original_phys_order_id,p.effective_date,p.ineffective_date, p.order_relationship_id, p.relationship, p.reason, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
--	from  [dbo].view_prp_pho_administrative_order  p with (nolock)
--	inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on p.original_phys_order_id = po.phys_order_id
--	left OUTER JOIN dbo.contact ct WITH (NOLOCK )
--			on ct.contact_id = p.physician_id

-- eliminated usage of view_prp_pho_administrative_order
	;With tb1
	as
	(
	Select

		 pro.related_phys_order_id Original_phys_order_id
		, pro.order_related_id
		, pro.phys_order_id as admin_phys_order_id
		, pro.order_relationship_id
		, pao.effective_date
		, pao.ineffective_date
		, pao.physician_id
		, pao.reason
		, pao.created_date as admin_order_created_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
		from dbo.pho_related_order  pro with (nolock )
		inner Join dbo.pho_admin_order pao  with (nolock )
		on pro.phys_order_id = pao.phys_order_id

		inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
		where
		      (pro.deleted IS NULL OR pro.deleted = 'N')
			and  (pao.deleted IS NULL OR pao.deleted = 'N')
			and pao.exclude_eom_status_calculation=0
			AND pro.fac_id = @vFacID

			AND 1= CASE
			  when 	@vIncludeAdminOrder=1 and @vReportId=0   and pao.effective_date < @vfil_admin_order_date_range_d2
			and (pao.ineffective_date is null or pao.ineffective_date >= @vfil_admin_order_date_range_d1)   then 1
		      when 	@vIncludeAdminOrder=1 and @vReportId<>0 then 1
			else 0 end

	)
	, tb2 as
	(
	  Select tb1.original_phys_order_id
		, tb1.order_related_id
		, tb1.admin_phys_order_id
		, tb1.order_relationship_id
		, tb1.effective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
		, tb1.physician_id
		, tb1.reason
		, tb1.admin_order_created_date
		, nextrow.admin_phys_order_id as next_admin_phys_order_id
		From tb1
			left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
	)

	Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

	Select  tb2.original_phys_order_id
		, tb2.effective_date
		, tb2.ineffective_date
		, tb2.order_relationship_id
		, Case tb2.order_relationship_id
				when 1 then 'hold'
				when 2 then 'resume'
				when 3 then 'discontinue'
				else 'unknown'
			  end as relationship
		, tb2.reason
		, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
	 From tb2

	 left OUTER JOIN dbo.contact ct WITH (NOLOCK )
				on ct.contact_id = tb2.physician_id



	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 finished retrieving administrative orders ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #PRP_Holds

	if @debug_me='Y' select  555,@vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end

	if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		IF @vReportId=0
				update #PRP_Orders set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
		else
		begin
			Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
										+ replace ( replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
				from #PRP_Orders o
				Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
								(
									Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
										from dbo.view_prp_pho_phys_order_schedule po with (nolock)
										where po.phys_order_id = o.phys_order_id
										order by po.start_date
										FOR XML PATH (''), TYPE
								) a ( order_summary )
					) OrderSumm

				update #PRP_Orders
					set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
					where order_status = 4
		end
	END



	-- fill in temp table for all drug warning
	if @vDrugWarningMessage = '1'
		begin

		select @vStep = 65
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating drug warning ' + convert(varchar(26),getdate(),109)
      if @vDrugAllergyMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug Allergy: ' + isnull(sec_user.long_username + ', ', '')  + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, algy.acknowledgement_date , @vdateFormatStyle), '') + ' '  + isnull(convert(VARCHAR, algy.acknowledgement_date , 108), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_allergy_acknowledgement algy WITH (NOLOCK)
			on po.phys_order_id = algy.phys_order_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on algy.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id

      if @vDrugBlackBoxMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Black Box: ' + isnull(sec_user.long_username + ', ', '')  + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, bb.acknowledgement_date , @vdateFormatStyle), '') +' ' +  isnull(convert(VARCHAR, bb.acknowledgement_date , 108 ), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_blackbox_acknowledgement  bb WITH (NOLOCK)
			on po.phys_order_id = bb.phys_order_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on bb.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id

      if @vDrugInteractionMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug to Drug Interaction: ' +  isnull(sec_user.long_username + ', ', '') + isnull(sec_user.designation_desc + ', ','') + isnull(convert(VARCHAR, dd.acknowledgement_date , @vdateFormatStyle), '') + ' ' + isnull(convert(VARCHAR, dd.acknowledgement_date , 108), '')  from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_drug_acknowledgement  dd WITH (NOLOCK)
			on po.phys_order_id = dd.phys_order_id
		inner JOIN #PRP_drug_severity_level lvl with (NOLOCK )
			ON dd.severity_code = lvl.severity_id
		left outer JOIN dbo.cp_sec_user_audit sec_user WITH (NOLOCK)
			on dd.cp_sec_user_audit_id = sec_user.cp_sec_user_audit_id


       if @vDrugDoseMessage= '1'
		insert INTO #Prp_drug_warning
		SELECT distinct po.phys_order_Id, 'Drug Exceeded Maximum Dosage: '   from #PRP_Orders po with (NOLOCK)
		inner JOIN dbo.pho_phys_order_dose_check_acknowledgement  dd WITH (NOLOCK)
			on po.phys_order_id = dd.phys_order_id
			and dd.over_dose = 1


		Update #PRP_Orders Set drug_warning = isnull(o.drug_warning,'')  --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
									+ replace(replace( replace ( replace ( replace( replace( isnull('' + ltrim(isnull(warn.warn_desc,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
			from #PRP_Orders o
			Cross Apply (	Select warn_desc.value('.','varchar(max)') as warn_desc from
							(
								Select    warning_desc + char(13)
									from #Prp_drug_warning po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.warning_desc
									FOR XML PATH (''), TYPE
							) a ( warn_desc )
				) warn

		if @debug_me='Y' select * from #Prp_drug_warning
		end







	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	if @debug_me = 'y' Select * from #PRP_Orders;



	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vdateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vdateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vdateFormatStyle)			as created_date

		,  po.reviewed_by_long_username				     	as reviewed_by
		, convert(char(10),po.reviewed_date,@vdateFormatStyle)			as reviewed_date

		,  po.signed_by_long_username				     	as signed_by
		, convert(char(10),po.signed_date,@vdateFormatStyle)			as signed_date

--		, po.directions									as directions
		, replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vdateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		,CONVERT(VARCHAR,po.phys_order_id) fod_phys_order_id ---new req for field to display
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,@vdateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
            when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status in (10,11) then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'')
		, isnull(po.order_desc,'') + isnull((replace (replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
							),'')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vdateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vdateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vdateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vdateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vdateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vdateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		, po.order_schedule_id
		, po.drug_warning
		, medication_class.descdisplay medication_class
		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join common_code cc on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #PRP_Holds ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								    convert(char(10),effective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								    isnull(convert(char(10),ineffective_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								   reason + char(9) +
								    ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #PRP_Holds ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

				outer apply( select medication.value('.','varchar(max)') as descdisplay From
				  (SELECT  atdc.descdisplay+', '
	                from (select prf.phys_order_id, phys_order_ext_lib_rec_id
							  from dbo.pho_order_ext_lib_med_ref prf with (nolock) where  prf.phys_order_id=po.phys_order_id
								union
							 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id
							   from  dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) where  pref_audit.phys_order_id=po.phys_order_id
							) poelmr
					INNER JOIN  (
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
						) classes
			         ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
			         LEFT JOIN @tpmAllTopDrugClassification atdc on atdc.classid= classes.class_id
					order by poelmr.phys_order_ext_lib_rec_id,atdc.descdisplay FOR XML PATH(''), TYPE
					) a (medication)

				) medication_class

--			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
--							(
--								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
--									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
--									where po.phys_order_id = o.phys_order_id
--									order by po.start_date
--									FOR XML PATH (''), TYPE
--							) a ( order_summary )
--				) OrderSumm

		--Left join (	 SELECT poelmr.phys_order_id,poelmr.phys_order_ext_lib_rec_id,classes.class_id,gpi.descdisplay from
		--					(select prf.phys_order_id, phys_order_ext_lib_rec_id
		--					  from #PRP_Orders po
		--					  left join dbo.pho_order_ext_lib_med_ref prf with (nolock) on po.phys_order_id=prf.phys_order_id
		--						union
		--					 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id
		--					   from #PRP_Orders po
		--					   left join dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) on po.phys_order_id=pref_audit.phys_order_id
		--					) poelmr
		--				INNER JOIN  (
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
		--							UNION
		--							SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
		--					) classes
		--		 ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
		--		 left join [mmdb].[dbo].mmw_cls_gpi gpi on gpi.classid= classes.class_id
		--			   ) medication_class	on medication_class.phys_order_id = po.phys_order_id

	)
	, tbWithGroupSet
	as
	(
		Select

		fac_id
		,client_id
		,client_id_str --- required for building group id
		,client_name
		,admission_date
		,discharge_date
		,deceased_date
		,gender
		,allergy
		,location
		,date_of_birth
		,client_physician_id
		,client_physician
		,client_pharmacy
		,mrn_number
		,client_id_number
		,fac_name
		,fac_address
		,fac_tel
		,additional_directions
		,administration_record
		,administered_by
		,advanced_directive
		,communication_method
		,completed_by
		,completed_date
		,confirmed_by
		,confirmed_date
		,created_by
		,created_date
		,reviewed_by
		,reviewed_date
		,signed_by
		,signed_date
		,directions
		,discontinued_date
		,discontinued_by
		,discontinued_reason
		,order_end_date
		,hold_date
		,hold_date_end
		,hold_by
		,hold_reason
		,hold_start_end_date
		,indications_for_use
		,phys_order_id
		,physician_id
		,physician
		,order_category_id
		,order_category
		,order_date
		,order_date_time
		,order_desc
		,order_status
		,order_summary
		,order_schedule_summary
		,order_type_id
		,order_type
		,permanent_source
		,pharmacy
		,related_diagnoses
		,resume_date
		,resume_by
		,resume_reason
		,revision_by
		,revision_date
		,route_of_admin
		,schedule_template
		,order_start_date
		,related_generic
		,order_type_seq
		,diet_type_desc
		,diet_texture_desc
		,fluid_consistency_desc
		,diet_supplement_desc
		,supply_reorder
		,supply_order_date
		,supply_last_order_date
		,supply_last_reorder_date
		,initials_blank
		,notes_blank
		,renew_blank
		,stop_blank
		,schedule_time
		,schedule_date
		,schedule_date_time
		,std_freq_desc
		,documented_date
		,documented_by
		,administered_date
		,administrative_details
		,order_schedule_id
		,drug_warning
		,medication_class
		,fod_phys_order_id




		      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
			  when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
			  when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
		      when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
              when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
			  when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
              when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)


			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician
              when 'phys_order_id'              then fod_phys_order_id
			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')
		      when 'pho_reviewed_by'			then reviewed_by
			  when 'pho_reviewed_date'			then reviewed_date
			  when 'pho_signed_by'			    then signed_by
			  when 'pho_signed_date'			then signed_date
			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date
			  when 'drug_warning_message'           then drug_warning
			  when 'pho_medication_class'			then left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1)

			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			, order_schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id,G1,G2,G3, G_set_id
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,ISNULL(@ICDDate,@vgs_start_time),@vFacId) ,'')

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	, order_schedule_id
   	from tbWithSort
	Order by row_num
	)
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code 
		, (case when row_num = 1 then status_text else null end )status_text			
		, phys_order_id
		, order_schedule_id
		, row_num
		,0 include_healthcard
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics
 

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text	
		, NULL as phys_order_id
		, NULL as order_schedule_id
		, NULL as row_num
		, NULL include_healthcard
END CATCH 
END
RETURN 

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.080_sproc_prp_order_based_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-42829       :   script to create sproc_prp_order_based_review_report Procedure  
--						-- @vFieldListfphysician
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_review_report for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:
2013-06-14  Rolly Sanchez       Initial creation of this stored proc
2013-06-27  Rolly Sanchez		PCC-44173 display correct start date and end date on the report
2013-07-03	Rolly Sanchez		PCC-44190 (3.7.0.3) Add group header on order review report
2013-07-05	Rolly Sanchez		PCC-44443 (3.7.0.3) when include admin order is check it will get admin orders first before physician order
2013-07-11  Rolly Sanchez		PCC-44692 (3.7.0.3)	Skip admin order deletion when it's selected
2013-08-09	Rolly Sanchez		PCC-45617 (3.7.1) handle multiple hold and indefinite hold
2013-12-11  Rolly Sanchez		PCC-50905 (3.7.2.1.3) replace style with b-tag formatting
2014-10-01  H Ehghaghi          PCC-64988 (3.7.5)   Added the logic for StatusCode 9 to print Pending Clinical Review
2014-12-19  H Ehghaghi 		    PCC-68305 (3.7.6)	Adding  Orders Pending Signature Status
2015-04-09  Dom Christie	    PCC-72489 (3.7.7)	Added logic to pring the ICD 10 codes for the dates passed from the report set up page, if no date passed as per the requirement
                                                    the current date will be used to pass to the fucntion. If "Active Order As of" is selected then that date will be the end date, as
													per the requirement. 
													This check in will also include the store proc change by Henny that was meant to remove the generic metadata.

2015-04-10  H Ehghaghi	    PCC-74340 (3.7.7)	  fixed Terminology
2015-05-04  Dom Christie    PCC-75399 (3.7.7)  Removed the logic of Using the end date from the date range for the Order Review Report
                                               and started using the system date to check the ICD codes to display.
2015-11-23 Dom Christie 	PCC-85634(3.7.8.2) Fitlering out the Discharge orders using classid=2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2017-09-06  Hemanth Reddy	PCC-102383 (3.7.14)	Changes to support UK Date Format.
-- ================================================================================= */


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_review_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_review_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_order_based_review_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************


Sample Execution Script:
---Select * from prp_report_column


Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_review_report
 @report_id =  '-1007'--'-13'
,@fac_id =  '1'
,@field_list =  ''
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;pho_order_date_range=01/01/2015,12/30/2021'

,@sort_list =  '0=-1'
,@execution_user_login =  '_system_'
,@rows_returned = null
,@debug_me = 'y'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int
		,@ICDDate datetime
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint;

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @vSP_ClientId varchar(50)
;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)

-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	, @term_admission varchar(50)
    , @term_client varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)





-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit
		,@vIncludeHealthCardNo BIT


----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime


	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_type varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime

	,@vfil_asof_order varchar(100)  ---as of date setting for order review report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime

	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'

	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime
	, @authorization_date varchar(50)
	, @vfil_dur_between_reviews varchar(10)
	, @vfil_dur_units int


	set @vfil_dur_between_reviews = (select top 1 value from configuration_parameter where name='pho_dur_between_review' and fac_id = @fac_id)
	set @vfil_dur_units = (select top 1 value from configuration_parameter where name='pho_dur_units' and fac_id = @fac_id)


Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));

CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary varchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
			, order_schedule_id int
            , controlled_substance_code int
);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #PRP_Holds
(phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
		, next_review_date1 datetime
		, next_review_date2 datetime
		, special_instruction VARCHAR(500)
		,health_card VARCHAR(30)
);
CREATE CLUSTERED INDEX _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;
CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

CREATE CLUSTERED INDEX _orderreview_prp_pho_phys_order_phys_order_startdate_idx on #prp_orders (phys_order_id, [start_date]);
CREATE CLUSTERED INDEX _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;

  declare  @vParentReportId int

		, @vWV_transfer int
		, @vFac_Id int
		, @footer varchar(50)
        , @header varchar(50)

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	SET @ICDDate=getdate()
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;-----+ ';pho_order_status=1';
	SET @visemc		  = @is_emc
	SET @vSortList	  = @sort_list;


	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end


	/*---------Code to select the date format based on the country for the default facility of executing user--------------------*/
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	/*---------------------------------------------------------***********---------------------------------------------------------*/

	------------------------------


	--set @vFac_Id =@VfacId

    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9
    /* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */
     Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	 from [dbo].fn_prp_get_terminology(@vFacID,@visemc) ;

	 SET @vTermClient=@term_client
     SET @vTermAdmission=@term_admission;

-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;

	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping



    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN
					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	IF EXISTS (SELECT 1 FROM #PRP_Filters WHERE filter_name='include_healthcare_order'
	AND filter_value=1) 
	BEGIN 
	SET @vIncludeHealthCardNo=1
	END
	ELSE
	BEGIN
	SET @vIncludeHealthCardNo=0
	END

	 


	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---



SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission


	-------------------------




	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';

	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');


	select @vStep = 18
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;
	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		   +  isnull(@vCol2,'')
		   + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END


	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;

	set @vOrderSummary = '1'

	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 25
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 35
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	SELECT @vfil_supply_reorder = filter_value from #PRP_Filters where filter_name = 'pho_supply_reorder';

	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	---NON INTEGER VALUES AND SINGLE SELECTION


	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_created_by = filter_value from #PRP_Filters where filter_name = 'pho_created_by' ;

	SELECT @vfil_confirmed_by = filter_value from #PRP_Filters where filter_name = 'pho_confirmed_by' ;

	SELECT @vfil_pho_fac_time_code = filter_value from #PRP_Filters where filter_name = 'pho_facility_time_code' ;

	SELECT @vfil_pho_std_freq = filter_value from #PRP_Filters where filter_name = 'pho_std_frequency' ;

	SELECT	@vfil_consolidated_order  = filter_value from #PRP_Filters where filter_name = 'pho_order_type_consolidated' ;

	SELECT @vfil_pho_unsched_order = filter_value from #PRP_Filters where filter_name = 'pho_unsched_order' ;
	if @vfil_pho_unsched_order is null Set @vfil_pho_unsched_order  = '0';

	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter

	--administrative order selected
	SELECT @vIncludeAdminOrder = filter_value from #PRP_Filters where filter_name like '%include_admin_order%' ;



	SELECT @vfil_view_all_orders = filter_value from #PRP_Filters where filter_name = 'pho_view_all_orders'
	if @vfil_view_all_orders  is not null Set @vfil_view_all_orders_lookback_date = convert(varchar, @vReportDate-@vfil_view_all_orders,101 );

	if @debug_me = 'y' Select @vfil_view_all_orders_lookback_date  as vfil_view_all_orders_lookback_date

	if @debug_me = 'y' Select @vfil_consolidated_order  as vfil_consolidated_order


	-----DATE TIME

	SELECT @vfil_confirmed_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_confirmed_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_confirmed_date%'; -- range
	IF @vfil_confirmed_date_type = 'ON'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
	end

	Else if @vfil_confirmed_date_type = 'BEFORE'
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date
		Set @vfil_confirmed_date = '1900-01-01'
	end

	Else if @vfil_confirmed_date_type = 'AFTER'
	begin
		Set @vfil_confirmed_date  = @vfil_confirmed_date+1
		Set @vfil_confirmed_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_confirmed_date_type) = 1
	begin
		Set @vfil_confirmed_date2 = @vfil_confirmed_date+1
		SEt @vfil_confirmed_date  = @vfil_confirmed_date_type
	end


	SELECT @vfil_created_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_created_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_created_date%';
	IF @vfil_created_date_type = 'ON'
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
	end

	Else if @vfil_created_date_type = 'BEFORE'
	begin
		Set @vfil_created_date2 = @vfil_created_date
		Set @vfil_created_date = '1900-01-01'
	end

	Else if @vfil_created_date_type = 'AFTER'
	begin
		Set @vfil_created_date  = @vfil_created_date+1
		Set @vfil_created_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_created_date_type) = 1
	begin
		Set @vfil_created_date2 = @vfil_created_date+1
		SEt @vfil_created_date  = @vfil_created_date_type
	end



	SELECT @vfil_supply_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_order_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_order_date%';

	IF @vfil_supply_order_date_type = 'ON'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
	end

	Else if @vfil_supply_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date
		Set @vfil_supply_order_date = '1900-01-01'
	end

	Else if @vfil_supply_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_order_date  = @vfil_supply_order_date+1
		Set @vfil_supply_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_supply_order_date_type) = 1
	begin
		Set @vfil_supply_order_date2 = @vfil_supply_order_date+1
		SEt @vfil_supply_order_date  = @vfil_supply_order_date_type
	end



	SELECT @vfil_supply_last_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_supply_last_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_supply_last_order_date%';

	IF @vfil_supply_last_order_date_type = 'ON'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
	end

	Else if @vfil_supply_last_order_date_type = 'BEFORE'
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date
		Set @vfil_supply_last_order_date = '1900-01-01'
	end

	Else if @vfil_supply_last_order_date_type = 'AFTER'
	begin
		Set @vfil_supply_last_order_date  = @vfil_supply_last_order_date+1
		Set @vfil_supply_last_order_date2 = '9999-12-31'
	end

	Else if isDate(@vfil_supply_last_order_date_type) = 1
	begin
		Set @vfil_supply_last_order_date2 = @vfil_supply_last_order_date+1
		SEt @vfil_supply_last_order_date  = @vfil_supply_last_order_date_type
	end


	SELECT @vfil_discontinued_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_discontinued_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_discontinued_date%';
	IF @vfil_discontinued_date_type = 'ON'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
	end
	Else if @vfil_discontinued_date_type = 'BEFORE'
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date
		Set @vfil_discontinued_date = '1900-01-01'
	end

	Else if @vfil_discontinued_date_type = 'AFTER'
	begin
		Set @vfil_discontinued_date  = @vfil_discontinued_date+1
		Set @vfil_discontinued_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_discontinued_date_type) = 1
	begin
		Set @vfil_discontinued_date2 = @vfil_discontinued_date+1
		SEt @vfil_discontinued_date  = @vfil_discontinued_date_type
	end


	SELECT @vfil_order_end_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_end_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_end_date%';
	IF @vfil_order_end_date_type = 'ON'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
	end

	Else if @vfil_order_end_date_type = 'BEFORE'
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date
		Set @vfil_order_end_date = '1900-01-01'
	end

	Else if @vfil_order_end_date_type = 'AFTER'
	begin
		Set @vfil_order_end_date  = @vfil_order_end_date+1
		Set @vfil_order_end_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_end_date_type) = 1
	begin
		Set @vfil_order_end_date2 = @vfil_order_end_date+1
		SEt @vfil_order_end_date  = @vfil_order_end_date_type
	end





	SELECT @vfil_hold_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_hold_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'pho_hold_date%';
	IF @vfil_hold_date_type = 'ON'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date+1
	end

	Else if @vfil_hold_date_type = 'BEFORE'
	begin
		Set @vfil_hold_date2 = @vfil_hold_date
		Set @vfil_hold_date = '1900-01-01'
	end

	Else if @vfil_hold_date_type = 'AFTER'
	begin
		Set @vfil_hold_date  = @vfil_hold_date+1
		Set @vfil_hold_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_hold_date_type) = 1
	begin
		Set @vfil_hold_date2 = @vfil_order_end_date+1
		SEt @vfil_hold_date  = @vfil_hold_date_type
	End




	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'custom_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1

		SEt @vfil_order_date  = @vfil_order_date_type
	End




	SELECT @vfil_order_start_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_start_date		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  'pho_start_date%';

	IF @vfil_order_start_date_type = 'ON'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
	end

	Else if @vfil_order_start_date_type = 'BEFORE'
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_order_start_date_type = 'AFTER'
	begin
		Set @vfil_order_start_date  = @vfil_order_start_date+1
		Set @vfil_order_start_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_start_date_type) = 1
	begin
		Set @vfil_order_start_date2 = @vfil_order_start_date+1
		SEt @vfil_order_start_date  = @vfil_order_start_date_type
	END


	SELECT @vfil_asof_order = filter_value	from #PRP_Filters where filter_name like  'pho_admin_order_asof_date%';

	if @vfil_asof_order is not null
	begin
		set @vfil_asof_order_date_d1 = @vfil_asof_order

		set @vfil_asof_order_date_d2 = @vfil_asof_order_date_d1 + 1

	end


SELECT @vfil_admin_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_admin_order_date_range_d1		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like  '%pho_admin_order_date_range%';

	IF @vfil_admin_order_date_type = 'ON'
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1+1
	end

	Else if @vfil_admin_order_date_type = 'BEFORE'
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1
		Set @vfil_order_start_date = '1900-01-01'
	end

	Else if @vfil_admin_order_date_type = 'AFTER'
	begin
		Set @vfil_admin_order_date_range_d1  = @vfil_admin_order_date_range_d1+1
		Set @vfil_admin_order_date_range_d2 = '9999-12-31'
	end

	Else if isdate(@vfil_admin_order_date_type) = 1
	begin
		Set @vfil_admin_order_date_range_d2 = @vfil_admin_order_date_range_d1+1
		SEt @vfil_admin_order_date_range_d1  = @vfil_admin_order_date_type
	END

	-- Set the Authorization date for the header
	set @authorization_date = case when @vfil_asof_order is not null then 'As of ' + CONVERT(varchar, @vfil_asof_order_date_d1 , 101)
	when @vfil_order_date is not null then CONVERT(varchar, @vfil_order_date , 101) + ' - ' + CONVERT(varchar, dateadd(dd, -1 , @vfil_order_date2) , 101)
	else null
	end


	----Special filters date range for med review report


	;with tb
		as
		(
			select d.items, row_number() over (order by (select 0)) as row_num from #PRP_Filters a
			cross apply (select items from dbo.split(isnull(Stuff(a.filter_value, charindex(',,',a.filter_value),2,',12/30/9999,'),a.filter_value),',' )) d
			where a.filter_name = 'pho_start_end_date_range_review'

		)
	select
		 @vfil_start_end_date_range_d1 = (case when row_num = 1 then items else @vfil_start_end_date_range_d1 end )
		,@vfil_start_end_date_range_d2 = (case when row_num = 2 then dateadd(dd,1,items) else @vfil_start_end_date_range_d2 end )
		,@vfil_start_end_date_range_review  = '1'
	from tb

--		where row_num < 3

	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' startdate ' + cast(@vfil_start_end_date_range_d1  as varchar(30)) + ' end date ' + cast(@vfil_start_end_date_range_d2  as varchar(30))

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' order_startdate ' + cast(@vfil_order_date  as varchar(30)) + ' order end date ' + cast(@vfil_order_date2  as varchar(30))


	select @vStep = 37
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin','pho_order_status') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_med_prof'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 39
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 40
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_admin_record%')		SET @vfil_administration_record= '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_administered_by')		SET @vfil_administered_by_id = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_communication_method')	SET @vfil_communication_method = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_med_prof')				SET @vfil_physician  = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_type')				SET @vfil_order_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_permanent_source')		SET @vfil_permanent_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name like  'pho_source%')			SET @vfil_source  = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_route_of_admin')			SET @vfil_route_of_admin = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_schedule_template')		SET @vfil_schedule_template = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_type')				SET @vfil_diet_type = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_texture')			SET @vfil_diet_texture = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_fluid_consistency')		SET @vfil_fluid_consistency = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_diet_supplement')		SET @vfil_diet_supplement = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_phys_order_id')			SET @vfil_physOrderId = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_std_order')				SET @vfil_pho_std_order = '1';




	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 42
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END




	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
			, next_review_date1
			, next_review_date2
			, special_instruction
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender
			, CASE WHEN (c.next_review_date is null) then getdate() else c.next_review_date end next_review_date1
			, CASE WHEN (c.next_review_date is null) then
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, getdate())
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, getdate())
			else
				dateadd(dd, @vfil_dur_units + 1, getdate())
			end

			else
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, c.next_review_date)
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, c.next_review_date)
			else
				dateadd(dd, @vfil_dur_units + 1, c.next_review_date)
			end

			end next_review_date2
			,null



			from ( Select client_id, mpi_id, client_id_number
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id
							, next_review_date

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		inner join (  Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
			, next_review_date1
			, next_review_date2
			, special_instruction
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end +
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender
			, CASE WHEN (c.next_review_date is null) then getdate() else c.next_review_date end next_review_date1
			, CASE WHEN (c.next_review_date is null) then
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, getdate())
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, getdate())
			else
				dateadd(dd, @vfil_dur_units + 1, getdate())
			end

			else
			case when @vfil_dur_between_reviews = 'months' then
				dateadd(MM, @vfil_dur_units, c.next_review_date)
			when @vfil_dur_between_reviews = 'weeks' then
				dateadd(dd, (@vfil_dur_units * 7) + 1, c.next_review_date)
			else
				dateadd(dd, @vfil_dur_units + 1, c.next_review_date)
			end

			end next_review_date2
			,null


		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id


		WHERE 	c.fac_id =  @vFacID
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	--select @vStep = 52
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select * from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 53
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END





	-- Update clients to have special instructions from care proile
	UPDATE #clients
	SET special_instruction=value FROM  #clients c
	INNER JOIN care_profile_value_single single
	ON single.client_id=c.client_id
	INNER JOIN  wesreference.dbo.care_profile_question que
    on single.question_id = que.question_id
    and question_text= 'Special Instructions'


	---update health card number


	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;


	------Getting filtered orders from view_pho_phys_order
	select @vStep = 58
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);


		if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'
		-- Please keep commented line of codes as we might need it as the scope of the SP grows


	if @vIncludeAdminOrder = 1
	begin

	--	 get all administrative orders instead of just hold orders
		;With tb1
		  as
		  (
		  Select

				pro.related_phys_order_id Original_phys_order_id
				, pro.order_related_id
				, pro.phys_order_id as admin_phys_order_id
				, pro.order_relationship_id
				, pao.effective_date
				, pao.ineffective_date
				, pao.physician_id
				, pao.reason
				, pao.created_date as admin_order_created_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock )
				on pro.phys_order_id = pao.phys_order_id
					  and  isnull(pro.deleted,'N')='N'
					  and isnull(pao.deleted,'N')='N'
					  and pao.exclude_eom_status_calculation=0
				inner join dbo.pho_phys_order  po WITH (NOLOCK) on  pro.related_phys_order_id = po.phys_order_id ---AND po.order_class_id=1
				INNER join #clients c with (NOLOCK)  on po.client_id = c.client_id
		  )
		  , tb2 as
		  (
			Select tb1.original_phys_order_id
				, tb1.order_related_id
				, tb1.admin_phys_order_id
				, tb1.order_relationship_id
				, tb1.effective_date
				, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
				, tb1.physician_id
				, tb1.reason
				, tb1.admin_order_created_date
				, nextrow.admin_phys_order_id as next_admin_phys_order_id
				From tb1
					  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		  )

		  Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

		  Select  tb2.original_phys_order_id
				, tb2.effective_date
				, tb2.ineffective_date
				, tb2.order_relationship_id
				, Case tb2.order_relationship_id
							when 1 then 'hold'
							when 2 then 'resume'
							when 3 then 'discontinue'
							else 'unknown'
						end as relationship
				, tb2.reason
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
		  From tb2
				left OUTER JOIN dbo.contact ct WITH (NOLOCK )
							on ct.contact_id = tb2.physician_id

			where

				( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))


		--select 'myholds' myholds,* from #PRP_Holds
		;
		with tb
		as (


		select
			NULL administered_by_id
				--po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.end_date as max_end_date
				--, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
--				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
--				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
--				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc

				, NULL  as diet_supplement_desc
				, NULL  as diet_texture_desc
				, null as  diet_type_desc



				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then



				po.directions


				else NULL end as directions
				, po.discontinued_date
				, isnull(po.discontinued_date, po.end_date  ) end_date
				, po.fac_id
				--, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, NULL fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				--, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, NULL indications_for_use
				, po.order_category_id
				, po.order_date
				--, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc

				 ,Case

						when  order_category_id =  3031 then -----diet
							rtrim(ltrim(diet_type.item_description)) + ' diet '
						when  order_category_id = 3032 then --- supplement
							supp.item_description
						else
							po.[description]
						end
					as order_desc


				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
--				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
--				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, NULL related_diagnoses
				, NULL related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				--, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, NULL route_of_admin_desc
				--, po.schedule_template
				, NULL schedule_template
				, po.[start_date]
				, po.std_order_id
				--, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, NULL as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				--, po.order_schedule_id
				, NULL order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
				, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				, clients.next_review_date1
				, clients.next_review_date2
	from dbo.pho_phys_order po

			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId

			Left outer join dbo.common_code supp with (nolock)
				on supp.item_id = po.diet_supplement and supp.item_code = 'phosup'
				and po.order_category_id = 3032  -- supplement
			Left Outer Join  dbo.common_code diet_type with (nolock)
				on diet_type.item_id = po.diet_type and diet_type.item_code = 'phodyt'
				and po.order_category_id = 3031 -- diet  --- texture and consistency are stored in the directions...


	 where po.draft='0'
	 AND po.order_class_id=1
		 AND po.order_verified = 'Y'
		and	po.order_category_id  <> 3030  ----exclude administrative orders


--	union all
--
--	select   null as administered_by_id
--		, ppo.alter_med_src
--		, ppo.client_id
--		, ppo.communication_method
--		, ppo.completed_by
--		, ppo.max_end_date
--		, ppo.confirmed_by
--		, ppo.confirmed_by_long_username
--		, ppo.confirmed_date
--		, ppo.created_by
--		, ppo.created_by_long_username
--		, ppo.created_date
--		, ppo.diet_type
--		, ppo.diet_texture
--		, ppo.diet_supplement
--		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
--		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
--		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
--		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
--		, ppo.discontinued_date
--		, ppo.end_date
--		, ppo.fac_id
--		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
--		, ppo.hold_date
--		, ppo.hold_date_end
--		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
--		, ppo.order_category_id
--		, ppo.order_date
--		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
--		, ppo.order_status
--		, null as order_relationship
--		, ppo.order_type_id
--		, ppo.pharmacy_id
--		, ppo.phys_order_id
--		, ppo.physician_id
--		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
--		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
--		, ppo.resume_date
--		, ppo.revision_by
--		, ppo.revision_by as revision_long_username
--		, ppo.revision_date
--		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
--		, null schedule_template
--		, ppo.[start_date]
--		, ppo.std_order_id
--		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
--		, ppo.date_ordered as supply_order_date
--		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
--		, ppo.last_reorder_date as supply_last_reorder_date
--		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
--		, ppo.fluid_consistency
--		, ppo.active_flag
--		, ppo.order_verified
--		, ppo.draft
--		, ppo.std_freq_id
--		, ppo.description
--		, null as order_schedule_id
--		, ppo.last_reorder_date
--		, ppo.date_ordered
--		, ppo.diagnoses
--		, ppo.route_of_admin as route_of_admin
--		, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
--	 from dbo.view_prp_pho_phys_order_strike_out ppo
--			inner join #clients clients  with (nolock)
--					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
--					AND ppo.fac_id = @vFacId
--					and @vfil_order_status_strikeout = 1
--			where ppo.order_category_id  not in ( -1, 3030)

	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				--, order_schedule_id


		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				,	'<b>'+

							--po.[description]
							replace(
										replace (
										replace (
										replace(
											replace( isnull(' ' + 	po.order_desc  ,'') , '& ', '&amp;')
											, '<', '&lt;')
											, '>', '&gt;')
											, '"', '&quot;')
											, '''', '&apos;')

							+ '</b>'
				--, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				--, po_sch.std_freq_id
				, NULL std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				--, po.order_schedule_id

		From tb po with (nolock)
			inner JOIN #prp_holds ho
			ON po.phys_order_id = ho.phys_order_id
		--left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		--left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		--left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
		--left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		--left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		--left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


		where  (po.active_flag = 'Y' or po.active_flag is null)
			and row_num = 1
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
--			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
--			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

--			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
--			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
--			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
--			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			--AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			--AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			--AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)

			-- date filters
			and 1 = CASE WHEN @vfil_order_date2 IS NULL THEN 1
				when
				(po.discontinued_date >= @vfil_order_date  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < @vfil_order_date2 OR  po.order_date < @vfil_order_date2 ) )
								or (po.start_date is null and po.order_date < @vfil_order_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= @vfil_order_date )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
				else 0 end


		AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							 --and (po.resume_date IS NULL or po.resume_date < @vfil_asof_order_date_d2)
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d1 )
							then 1
					else 0 end
		-- this is the case of authorization date
		AND 1 = case when(@vfil_order_date2 is not NULL or @vfil_asof_order is not NULL) then 1
			when 	(po.discontinued_date >= po.next_review_date1  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < po.next_review_date2 OR  po.order_date < po.next_review_date2 ) )
								or (po.start_date is null and po.order_date < po.next_review_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= po.next_review_date1 )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
							  else 0 end
--
--
--			------DATE FILTERS
--			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
--						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
--						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
--					else 0 end
--			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
--						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
--						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
--					else 0 end
--
--			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
--						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
--						else 0 end
--
--			AND 1  = case when (@vfil_order_end_date_type  is NULL) then 1
--						when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
--						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
--						else 0 end
--
--
--
--			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
--						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
--						else 0 end
--
--			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
--					else
--					---show all orders
--					case when
--						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
--								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
--						) ---handling with or without schedules
--						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
--						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
--						and isnull(po.active_flag,'y') = 'y'   --- valid order
--                              and po.order_verified = 'Y'   -----no pending
--
--						then 1 else 0 end
--				   end



	end
	else

	Begin
		;
		with tb
		as (


		select
			NULL administered_by_id
				--po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.end_date as max_end_date
				--, po.max_end_date
			    , null      as confirmed_by
				, null  	as confirmed_by_long_username
				, null	    as confirmed_date
				,po.created_by as [created_by]
				,null as [created_by_long_username]
				, po.created_date
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
--				, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
--				, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
--				, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc

				, NULL  as diet_supplement_desc
				, NULL  as diet_texture_desc
				, null as  diet_type_desc



				, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then



				po.directions


				else NULL end as directions
				, po.discontinued_date
				, isnull(po.discontinued_date, po.end_date  ) end_date
				, po.fac_id
				--, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
				, NULL fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				--, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
				, NULL indications_for_use
				, po.order_category_id
				, po.order_date
				--, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then po.[description] else NULL end as order_desc

				 ,Case

						when  order_category_id =  3031 then -----diet
							rtrim(ltrim(diet_type.item_description)) + ' diet '
						when  order_category_id = 3032 then --- supplement
							supp.item_description
						else
							po.[description]
						end
					as order_desc


				, null as order_status --OrderStatus.order_status as order_status
				, null as order_relationship --OrderStatus.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
--				, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
--				, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
				, NULL related_diagnoses
				, NULL related_generic
				, po.resume_date
				,po.revision_by as [revision_by]
				,null as [revision_by_long_username]
				, po.revision_date
				--, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
				, NULL route_of_admin_desc
				--, po.schedule_template
				, NULL schedule_template
				, po.[start_date]
				, po.std_order_id
				--, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
				, NULL as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				--, po.order_schedule_id
				, NULL order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
				, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
                , po.controlled_substance_code
				--, po.order_verified
				--, po.active_flag
				, clients.next_review_date1
				, clients.next_review_date2

	from dbo.pho_phys_order po

			inner join #clients clients  with (nolock)
					on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
							AND po.fac_id = @vFacId

			Left outer join dbo.common_code supp with (nolock)
				on supp.item_id = po.diet_supplement and supp.item_code = 'phosup'
				and po.order_category_id = 3032  -- supplement
			Left Outer Join  dbo.common_code diet_type with (nolock)
				on diet_type.item_id = po.diet_type and diet_type.item_code = 'phodyt'
				and po.order_category_id = 3031 -- diet  --- texture and consistency are stored in the directions...


	 where po.draft='0'
	 AND po.order_class_id=1
		 AND po.order_verified = 'Y'
		and	po.order_category_id  <> 3030  ----exclude administrative orders


--	union all
--
--	select   null as administered_by_id
--		, ppo.alter_med_src
--		, ppo.client_id
--		, ppo.communication_method
--		, ppo.completed_by
--		, ppo.max_end_date
--		, ppo.confirmed_by
--		, ppo.confirmed_by_long_username
--		, ppo.confirmed_date
--		, ppo.created_by
--		, ppo.created_by_long_username
--		, ppo.created_date
--		, ppo.diet_type
--		, ppo.diet_texture
--		, ppo.diet_supplement
--		, Case when @vDietInfo = '1' then ppo.diet_supplement_desc else NULL end as diet_supplement_desc
--		, Case when @vDietInfo = '1' then ppo.diet_texture_desc else NULL end as diet_texture_desc
--		, Case when @vDietInfo = '1' then ppo.diet_type_desc else NULL end as  diet_type_desc
--		, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then ppo.directions else NULL end as directions
--		, ppo.discontinued_date
--		, ppo.end_date
--		, ppo.fac_id
--		, Case when @vDietInfo = '1' then  ppo.fluid_consistency_desc else NULL end as fluid_consistency_desc
--		, ppo.hold_date
--		, ppo.hold_date_end
--		, Case when @vIndicationsForUse  = '1' then ppo.indications_for_use else NULL end as indications_for_use
--		, ppo.order_category_id
--		, ppo.order_date
--		,Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then ppo.[description] else NULL end as order_desc
--		, ppo.order_status
--		, null as order_relationship
--		, ppo.order_type_id
--		, ppo.pharmacy_id
--		, ppo.phys_order_id
--		, ppo.physician_id
--		, (Case when @vRelatedDiagnoses = '1' then ppo.diagnoses		 else NULL end) as related_diagnoses
--		, (Case when @vRelatedGeneric = '1'   then ppo.related_generic else NULL end) as related_generic
--		, ppo.resume_date
--		, ppo.revision_by
--		, ppo.revision_by as revision_long_username
--		, ppo.revision_date
--		, Case when @vRouteOfAdmin = '1' then ppo.route_of_admin_desc else NULL end as route_of_admin_desc
--		, null schedule_template
--		, ppo.[start_date]
--		, ppo.std_order_id
--		, Case when @vAdditionaldirections = 1 then ppo.supplementary_notes else NULL end as supplementary_notes
--		, ppo.date_ordered as supply_order_date
--		, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
--		, ppo.last_reorder_date as supply_last_reorder_date
--		, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
--		, ppo.fluid_consistency
--		, ppo.active_flag
--		, ppo.order_verified
--		, ppo.draft
--		, ppo.std_freq_id
--		, ppo.description
--		, null as order_schedule_id
--		, ppo.last_reorder_date
--		, ppo.date_ordered
--		, ppo.diagnoses
--		, ppo.route_of_admin as route_of_admin
--		, row_number() over ( partition by Phys_order_id order BY end_date desc) as row_num
--	 from dbo.view_prp_pho_phys_order_strike_out ppo
--			inner join #clients clients  with (nolock)
--					on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
--					AND ppo.fac_id = @vFacId
--					and @vfil_order_status_strikeout = 1
--			where ppo.order_category_id  not in ( -1, 3030)

	)


		Insert into #PRP_Orders
			( administered_by_id
				, alter_med_src
				, client_id
				, communication_method
				, completed_by
				, completed_date
				, confirmed_by
				, confirmed_by_long_username
				, confirmed_date
				, created_by
				, created_by_long_username
				, created_date
				, diet_supplement_desc
				, diet_texture_desc
				, diet_type_desc
				, directions
				, discontinued_date
				, end_date
				, fac_id
				, fluid_consistency_desc
				, hold_date
				, hold_date_end
				, indications_for_use
				, order_category_id
				, order_date
				, order_desc
				, order_status
				, order_relationship
				, order_type_id
				, pharmacy_id
				, phys_order_id
				, physician_id
				, related_diagnoses
				, related_generic
				, resume_date
				, revision_by
				, revision_by_long_username
				, revision_date
				, route_of_admin
				, schedule_template
				, [start_date]
				, std_order_id
				, supplementary_notes ---- addditional directions
				, supply_order_date
				, supply_last_order_date
				, supply_last_reorder_date
				, supply_reorder
				, std_freq_id
				, order_verified
				, active_flag
                , controlled_substance_code
				--, order_schedule_id


		)

		Select
				 po.administered_by_id
				, po.alter_med_src
				, po.client_id
				, po.communication_method
				, po.completed_by
				, po.max_end_date
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc
				, po.diet_texture_desc
				, po.diet_type_desc
				, po.directions
				, po.discontinued_date
				, po.end_date
				, po.fac_id
				, po.fluid_consistency_desc
				, po.hold_date
				, po.hold_date_end
				, po.indications_for_use
				, po.order_category_id
				, po.order_date
				,	'<b>'+

							--po.[description]
							replace(
										replace (
										replace (
										replace(
											replace( isnull(' ' + 	po.order_desc  ,'') , '& ', '&amp;')
											, '<', '&lt;')
											, '>', '&gt;')
											, '"', '&quot;')
											, '''', '&apos;')

							+ '</b>'
				--, po.order_desc
				, po.order_status
				, po.order_relationship
				, po.order_type_id
				, po.pharmacy_id
				, po.phys_order_id
				, po.physician_id
				, po.related_diagnoses
				, po.related_generic
				, po.resume_date
				, po.revision_by
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc
				, po.schedule_template
				, po.[start_date]
				, po.std_order_id
				, po.supplementary_notes
				, po.supply_order_date
				, po.supply_last_order_date
				, po.supply_last_reorder_date
				, po.supply_reorder
				--, po_sch.std_freq_id
				, NULL std_freq_id
				, po.order_verified
				, po.active_flag
                , po.controlled_substance_code
				--, po.order_schedule_id

		From tb po with (nolock)

		--left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock)
					on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																then ot.administration_record_id
																else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end

		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method

		left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		left join #PRP_Multi_Filters ot_fil		on ot_fil.filter_name	= 'pho_order_type'			and ot_fil.filter_value = po.order_type_id
		left join #PRP_Multi_Filters ps			on ps.filter_name		= 'pho_permanent_source'	and ps.filter_value = po.alter_med_src

		left join #PRP_Multi_Filters pharm		on pharm.filter_name	like  'pho_source%'			and pharm.filter_value = po.pharmacy_id
		left join #PRP_Multi_Filters roa			on roa.filter_name		= 'pho_route_of_admin'		and roa.filter_value = po.route_of_admin
		--left join #PRP_Multi_Filters schtemp		on schtemp.filter_name  = 'pho_schedule_template'	and schtemp.filter_value = po.schedule_template

		--left join #PRP_Multi_Filters dt	 on dt.filter_name   = 'pho_diet_type'				and dt.filter_value = po.diet_type
		--left join #PRP_Multi_Filters dtxt	 on dtxt.filter_name = 'pho_diet_texture'			and dtxt.filter_value = po.diet_texture
		--left join #PRP_Multi_Filters dsup	 on dsup.filter_name = 'pho_diet_supplement'		and dsup.filter_value = po.diet_supplement
		--left join #PRP_Multi_Filters fc	 on fc.filter_name	 = 'pho_fluid_consistency'		and fc.filter_value = po.fluid_consistency

		left join #PRP_Multi_Filters OrderId	 on OrderId.filter_name	 = 'pho_phys_order_id'		and OrderId.filter_value = po.phys_order_id
		left join #PRP_Multi_Filters stdOrderId	 on stdOrderId.filter_name	 = 'pho_std_order'		and stdOrderId.filter_value = po.std_order_id


		where  (po.active_flag = 'Y' or po.active_flag is null)
			and row_num = 1
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_administered_by_id  = '1'	 and ad.filter_value is not null)			or @vfil_administered_by_id  is null )
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )

			AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )


			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

			AND ((@vfil_order_type  = '1'			 and ot_fil.filter_value is not null) or @vfil_order_type  is null )
			AND ((@vfil_permanent_source  = '1'		 and ps.filter_value is not null) or @vfil_permanent_source  is null )

			AND ((@vfil_source  = '1'				 and pharm.filter_value is not null) or @vfil_source is null )
--			AND ((@vfil_route_of_admin  = '1'		 and roa.filter_value is not null) or @vfil_route_of_admin  is null )
--			AND ((@vfil_schedule_template   = '1'	 and schtemp.filter_value is not null) or @vfil_schedule_template  is null )

--			AND ((@vfil_diet_type  = '1'			and dt.filter_value is not null) or @vfil_diet_type  is null )
--			AND ((@vfil_diet_texture  = '1'			and dtxt.filter_value is not null) or @vfil_diet_texture  is null )
--			AND ((@vfil_fluid_consistency  = '1'	and fc.filter_value is not null) or @vfil_fluid_consistency  is null )
--			AND ((@vfil_diet_supplement  = '1'		and dsup.filter_value is not null) or @vfil_diet_supplement  is null )

			AND ((@vfil_physOrderId   = '1'		and OrderId.filter_value is not null) or @vfil_physOrderId  is null )
			AND ((@vfil_pho_std_order	 = '1'		and stdOrderId.filter_value is not null) or @vfil_pho_std_order  is null )

			---SINGLE VALUE FILTERS
			AND (@vfil_supply_reorder =  Case when po.last_reorder_date is null then '0' else '1' end    or @vfil_supply_reorder is null)

			AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
			AND (@vfil_consolidated_order is null or @vfil_consolidated_order = ot.con_order_flag)

			--AND (@vfil_pho_fac_time_code   = po_sch.pho_std_time_id or @vfil_pho_fac_time_code  is null )
			--AND (@vfil_pho_std_freq   = po.std_freq_id or @vfil_pho_std_freq  is null )

			--AND (@vfil_pho_unsched_order='0' or po_sch.order_schedule_id is null)

			-- date filters
			and 1 = CASE WHEN @vfil_order_date2 IS NULL THEN 1
				when
				(po.discontinued_date >= @vfil_order_date  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < @vfil_order_date2 OR  po.order_date < @vfil_order_date2 ) )
								or (po.start_date is null and po.order_date < @vfil_order_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= @vfil_order_date )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
				else 0 end


		AND 1 = case when (@vfil_asof_order is NULL) then 1
						when  (/*po.order_date >= @vfil_asof_order_date_d1  and */ po.order_date < @vfil_asof_order_date_d2 or (
							  ((po.start_date is not null and po.start_date < @vfil_asof_order_date_d2 )
								or (po.start_date is null and po.order_date < @vfil_asof_order_date_d2 ) )))
							 and (po.discontinued_date >= @vfil_asof_order_date_d1  or po.discontinued_date is null )
							 --and (po.resume_date IS NULL or po.resume_date < @vfil_asof_order_date_d2)
							and (po.active_flag = 'Y' or po.active_flag is null)
							and (po.end_date is null or po.end_date >= @vfil_asof_order_date_d1 )
							then 1
					else 0 end

					-- authorization date
		AND 1 = case when(@vfil_order_date2 is not NULL or @vfil_asof_order is not NULL) then 1
			when 	(po.discontinued_date >= po.next_review_date1  or po.discontinued_date is null )
                              and ((po.start_date is not null and ( po.start_date < po.next_review_date2 OR  po.order_date < po.next_review_date2 ) )
								or (po.start_date is null and po.order_date < po.next_review_date2 ) ) ---handling with or without schedules
                              and (po.end_date is null or po.end_date >= po.next_review_date1 )
                              and (po.active_flag = 'Y' or po.active_flag is null) THEN 1
							  else 0 end
--
--
--			------DATE FILTERS
--			AND 1 = Case when (@vfil_confirmed_date_type  is NULL) then 1
--						 when po.confirmed_date  >= @vfil_confirmed_date and po.confirmed_date < @vfil_confirmed_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_created_date_type  is NULL) then 1
--						 when po.created_date >= @vfil_created_date and  po.created_date < @vfil_created_date2 then 1
--					else 0 end
--			AND 1 = Case when (@vfil_discontinued_date_type  is NULL) then 1
--						 when  po.discontinued_date >= @vfil_discontinued_date and po.discontinued_date < @vfil_discontinued_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_hold_date_type  is NULL) then 1
--						 when  po.hold_date >= @vfil_hold_date and po.hold_date  < @vfil_hold_date2 then 1
--					else 0 end
--			AND 1 = case when (@vfil_order_date_type is NULL) then 1
--						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1
--					else 0 end
--
--			AND 1 = case when (@vfil_order_start_date_type  is NULL) then 1
--						when  po.start_date >= @vfil_order_start_date and  po.start_date< @vfil_order_start_date2 then 1
--						else 0 end
--
--			AND 1  = case when (@vfil_order_end_date_type  is NULL) then 1
--						when po.end_date >=@vfil_order_end_date and po.end_date< @vfil_order_end_date2 then 1
--					else 0 end
--
--
--			AND 1 = Case when (@vfil_supply_order_date_type  is NULL) then 1
--						 when po.date_ordered >=  @vfil_supply_order_date and  po.date_ordered < @vfil_supply_order_date2 then 1
--						else 0 end
--
--
--
--			AND 1 = Case when (@vfil_supply_last_order_date_type  is NULL) then 1
--						 when isnull(po.last_reorder_date,po.date_ordered) >=  @vfil_supply_last_order_date and isnull(po.last_reorder_date,po.date_ordered) < @vfil_supply_last_order_date2 then 1
--						else 0 end
--
--			AND 1 = Case when @vfil_start_end_date_range_review is null then 1
--					else
--					---show all orders
--					case when
--						((po.start_date is not null and po.start_date < @vfil_start_end_date_range_d2  )
--								or (po.start_date is null and po.order_date < @vfil_start_end_date_range_d2)
--						) ---handling with or without schedules
--						and (po.end_date is null  or po.end_date >= @vfil_start_end_date_range_d1)
--						and (po.discontinued_date is null or po.discontinued_date >= @vfil_start_end_date_range_d1)
--						and isnull(po.active_flag,'y') = 'y'   --- valid order
--                              and po.order_verified = 'Y'   -----no pending
--
--						then 1 else 0 end
--				   end




	end


	UPDATE p
SET order_category_id=9
FROM #prp_orders p 
INNER JOIN (SELECT o_std.std_phys_order_id, o_std.advanced_directive 
                                from  dbo.pho_std_phys_order o_std   WITH (NOLOCK )
                                WHERE o_std.advanced_directive = 'Y'
                                UNION
                                SELECT n_std.std_order_id as std_phys_order_id , 'Y' advanced_directive 
                                FROM dbo.pho_std_order n_std WITH (NOLOCK )
                                where n_std.advanced_directive = 1 
								) ad
								ON  p.std_order_id=ad.std_phys_order_id and ad.advanced_directive='Y'
WHERE order_category_id=3029

if @debug_me='Y' select @vfil_asof_order_date_d1 asof_date1, @vfil_asof_order_date_d2 asof_date2
if @debug_me = 'y'  select 'upt #prp_orders',* From #prp_orders






if isnull(@vIncludeAdminOrder ,0) = 0
	begin
	;WITH
	adminAction
	as
	(

	SELECT admin_order.*,po.phys_order_id as po1 FROM #prp_orders po
			INNER join
			(select ro.related_phys_order_id,pao.phys_order_id, pao.effective_date, pao.ineffective_date, order_relationship_id  from dbo.pho_related_order ro
			inner join pho_admin_order pao
			on ro.phys_order_id = pao.phys_order_id
			--and order_relationship_id = 1
			 ) admin_order

			on po.phys_order_id = admin_order.related_phys_order_id

			where
				(admin_order.effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
				AND (admin_order.ineffective_Date > isnull(@vfil_asof_order_date_d2,@vfil_order_date2)))
				or (admin_order.ineffective_Date IS null and admin_order.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2) )

			--and order_relationship_id < 3

		)
		,holdcte1
		as
		(SELECT * FROM adminAction where order_relationship_id in ( 1)
			AND ((ineffective_date IS null and (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)))
					OR (effective_date <= isnull(@vfil_asof_order_date_d1,@vfil_order_date)
						AND (ineffective_Date >isnull(@vfil_asof_order_date_d2,@vfil_order_date2))
						))
		)
		,resumecte
		as (select *  FROM adminaction where order_relationship_id IN( 2))
		,holdcte
		as(
		select h.* FROM holdcte1 h
		LEFT OUTER join resumecte r
		on r.related_phys_order_id = h.related_phys_order_id
			and r.effective_date >= h.effective_date
		WHERE r.related_phys_order_id IS NULL

	)


	delete #prp_orders
	from #prp_orders p, holdcte h
	where p.phys_order_id  =  h.related_phys_order_id

end

if @debug_me = 'y'  select 'afterdelete' afterdelete, * From #prp_orders

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)

	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status

if @debug_me = 'y'  select * From #tempResult


-- get all orders for that facility/client

if (@vClientIDs <> '-1' and charindex(',',convert(varchar,@vClientIDs))= 0)
begin
set @vSP_ClientId = @vClientIDs
end
else
begin
set @vSP_ClientId = null
end

--DECLARE @vSelectedDate datetime
--set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vgs_start_time
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


-- if asof date was selected only
--if @vfil_asof_order_date is not null
--begin
--	delete FROM #PRP_PhoOrderStatus
--	where order_status <> 1
--
--end



	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status


	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id
		----INNER JOIN #PRP_Multi_Filters pf

		----WHERE filter_name like  '%pho_order_status%'
	IF @vfil_order_status=1
	BEGIN
	DELETE p from #prp_orders p
    left JOIN  	#PRP_Multi_Filters pf
	ON pf.filter_value=p.order_status AND  filter_name like  '%pho_order_status%'	
    WHERE pf.filter_value IS NULL
		

	END
		


	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus;
	if @debug_me = 'y'  select 'afterdeleted#prp_orders',* From #prp_orders;



	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )

			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by



	end



--	if  @vfil_created_by is not null or @vfil_confirmed_by is not null
--	begin
--		delete #PRP_Orders
--			from #PRP_Orders po
--			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
--							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
--							)
--
--
--
--	end

	if @debug_me = 'y' Select 'add phys' add_phys,* from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retriving hold orders ' + convert(varchar(26),getdate(),109)


--get all administrative orders instead of just hold orders

	TRUNCATE table #PRP_Holds

	;With tb1
      as
      (
      Select

            pro.related_phys_order_id Original_phys_order_id
            , pro.order_related_id
            , pro.phys_order_id as admin_phys_order_id
            , pro.order_relationship_id
            , pao.effective_date
            , pao.ineffective_date
            , pao.physician_id
            , pao.reason
            , pao.created_date as admin_order_created_date
            , row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
            from dbo.pho_related_order  pro with (nolock )
            inner Join dbo.pho_admin_order pao  with (nolock )
            on pro.phys_order_id = pao.phys_order_id
                  and  isnull(pro.deleted,'N')='N'
                  and isnull(pao.deleted,'N')='N'
                  and pao.exclude_eom_status_calculation=0
            inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
      )
      , tb2 as
      (
        Select tb1.original_phys_order_id
            , tb1.order_related_id
            , tb1.admin_phys_order_id
            , tb1.order_relationship_id
            , tb1.effective_date
            , case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
            , tb1.physician_id
            , tb1.reason
            , tb1.admin_order_created_date
            , nextrow.admin_phys_order_id as next_admin_phys_order_id
            From tb1
                  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
      )

      Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

      Select  tb2.original_phys_order_id
            , tb2.effective_date
            , tb2.ineffective_date
            , tb2.order_relationship_id
            , Case tb2.order_relationship_id
                        when 1 then 'hold'
                        when 2 then 'resume'
                        when 3 then 'discontinue'
                        else 'unknown'
                    end as relationship
            , tb2.reason
            , isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
      From tb2
            left OUTER JOIN dbo.contact ct WITH (NOLOCK )
                        on ct.contact_id = tb2.physician_id

		where
			( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))







	if @debug_me='Y' select  'hold'as PRP_Holds, * from #PRP_Holds

	if @debug_me='Y' select  @vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end

	if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' +
				replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')

				--ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
			from #PRP_Orders o
			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
							(
								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.start_date
									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

			update #PRP_Orders
				set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
				where order_status = 4

	END


	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	if @debug_me = 'y' Select 'updteforHold' updteforHold, * from #PRP_Orders;

	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number
		, c.next_review_date1
		, c.next_review_date2
		, c.special_instruction

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vDateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vDateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vDateFormatStyle)			as created_date

		--, po.directions									as directions
				, replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vDateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician
		, CASE WHEN oc.category_desc='Pharmacy' THEN '1'
		       WHEN oc.category_desc='Diagnostic' THEN '2'
			   WHEN oc.category_desc='Laboratory' THEN '3'
			   WHEN oc.category_desc ='Dietary' OR  oc.category_desc ='Dietary - Diet' THEN '4'
			   WHEN oc.category_desc = 'Supplements' OR oc.category_desc ='Dietary - Supplements' THEN '5'
			   WHEN oc.category_desc='Enteral - Feed' THEN '6'
			   WHEN oc.category_desc='Other' AND po.order_category_id<>9 THEN '7'
		ELSE  convert(varchar,po.order_category_id)	
		  END
		       
		
		
					 as order_category_id -----required for builiding group id
		, CASE WHEN po.order_category_id=9 THEN 'Advanced Directive' ELSE  oc.category_desc		END							 as order_category
		---,oc.category_desc		 as order_category
		, convert(char(10),po.order_date,@vDateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
			when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status  in (10,11) then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
		, isnull(po.order_desc,'') +
				replace(
				replace (
				replace (
				replace(
					replace( isnull(' ' + po.directions,'') , '& ', '&amp;')
					, '<', '&lt;')
					, '>', '&gt;')
					, '"', '&quot;')
					, '''', '&apos;')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vDateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vDateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vDateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vDateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vDateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vDateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		--, po.order_schedule_id
		,health_card
		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id
		

		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join dbo.common_code cc with (nolock ) on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #PRP_Holds ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								convert(char(10),effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								isnull(convert(char(10),ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								replace(replace(reason,char(13),' '), char(10), ' ') + char(9) +
								ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #PRP_Holds ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details


	)
	, tbWithGroupSet
	as
	(
		Select *,  
		
		CASE WHEN order_status='Active' THEN 'A'
		     WHEN order_status='On Hold' THEN 'B'
			 WHEN order_status='Completed' THEN 'C'
		     WHEN order_status='Discontinued' THEN 'D' 
			 ELSE order_status
		END status_ordering 
	      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_summary--order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date


			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date




			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			, next_review_date1
			, next_review_date2
			, special_instruction
			,health_card
			--, order_Schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id, G_set_id, status_ordering, order_summary, G1, G2, G3
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+ 'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,@ICDDate,@vFacId) ,'') + @vSeparator
							+ 'Special Instructions' + @vSeparator +   ISNULL(NULLIF(special_instruction, ''), 'No special instructions to display') + @vSeparator
							+ 'Authorization Date' + @vSeparator + ISNULL(NULLIF(@authorization_date, '' ),  CONVERT(varchar, next_review_date1, 101) + ' - ' + CONVERT(varchar, dateadd(dd, -1, next_review_date2), 101))

			else Null end
		as P1
	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	--, order_schedule_id
   	from tbWithSort
	Order by row_num
	)
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code
		, (case when row_num = 1 then status_text else null end )status_text
		, phys_order_id
		--, order_schedule_id
		, row_num
		,@vIncludeHealthCardNo include_healthcard
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics


	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY

BEGIN CATCH
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END


	Select
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text
		, NULL as phys_order_id
		--, NULL as order_schedule_id
		, NULL as row_num
		,NULL as include_healthcard
END CATCH
END
RETURN

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_review_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/PRP2.081_sproc_prp_order_based_review_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_apply_payments_to_invoice.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


	-- =================================================================================
-- Jira #:
--
-- Written By:           David Bretzlaff
-- Reviewed By:
--
-- Script Type:          Stored Procedure
-- Target DB Type:       CLIENT
-- Target ENVIRONMENT:   BOTH
--
--
-- Re-Runable:           YES
--
-- Where tested:         172.16.10.119,1689 (Avengers DEV DB)
--						 ORG: agrd
--
-- Staging Recommendations/Warnings:
--
-- Description of Script Function:
-- Distribute the specified cash transaction against charges associated with the specified invoice

-- Steps:
---------------------------------------------------------------
-- 010: populate charges
--		get all charges with the specified invoice_id (exclude adjustment of type writeoff or refund)
---------------------------------------------------------------
-- 020: populate cash
--		get the amount from the specified payment transaction
--		get all amounts from negative charges
---------------------------------------------------------------
-- 030: populate #charge_payment applying cash from #cash table
--		only apply against positive charges (negative charges will be handled later in the process)
---------------------------------------------------------------
-- 040: populate #charge_payment for negative charges
--		take the total negative charges that was applied against positive charges,
--		and distribute it among the negative charges (these will be the entries against the
--		negative charges in the charge_payment table)
---------------------------------------------------------------
-- 050. remaining cash after applying to charges (cash > charges)
--		Pay all remaining cash to the last transaction
---------------------------------------------------------------
-- 060: creating charge payment for all fully paid or partially paid charges:
---------------------------------------------------------------
-- Execution sample:
--Org: abhow

--DECLARE @TableVar ArInvoicePaymentTableType
--INSERT INTO @TableVar
--VALUES
--(1421693,		-1,			null,			null,			null,		25.00),
--(1439286,		-1,			null,			null,			null,		75.00);

--DECLARE @status_code int, @status_text varchar(3000)
--EXEC dbo.sproc_ar_apply_payments_to_invoice 32, 21783806, @TableVar, 'test user', 'N', @status_code, @status_text
-- =================================================================================

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id(N'sproc_ar_apply_payments_to_invoice'))
BEGIN
    DROP PROCEDURE sproc_ar_apply_payments_to_invoice;
END
GO

IF EXISTS (SELECT * FROM sys.types WHERE is_table_type = 1 AND name = 'ArInvoicePaymentTableType')
BEGIN
	DROP TYPE [dbo].[ArInvoicePaymentTableType]
END
GO

CREATE TYPE [dbo].[ArInvoicePaymentTableType] AS TABLE(
		[invoice_id] [int] NOT NULL,
		[payer_id] [int] NOT NULL,
		[claim_effective_from_date] [datetime] NULL,
		[claim_effective_to_date] [datetime] NULL,
		[care_level] [varchar](5) NULL,
		[amount] [decimal](20,2) NULL DEFAULT ((0)),
		[amount_for_auto_writeoff] [decimal](20,2) NULL DEFAULT ((0)),
		[apply_to_year_month] [datetime] NULL
	)

GRANT EXEC ON TYPE::[dbo].[ArInvoicePaymentTableType] TO [public]
GO

CREATE PROCEDURE sproc_ar_apply_payments_to_invoice
	( @facId INT
	, @paymentTransactionId int
	, @InvoicePaymentTable ArInvoicePaymentTableType READONLY
	, @user varchar(60)
	, @appliedPaymentId_CSV varchar(max)
	, @writeOffFlag bit = 0
	, @chargesExcludeId_CSV varchar(max)
	, @zeroTransactionsFlag bit = 0
	, @DebugMe CHAR(1) = 'N'
	, @status_code int  out
	, @status_text varchar(3000) out
    )
AS
DECLARE @error_code INT
       ,@manual BIT = 0
       ,@clientId INT = NULL
       ,@payerId INT = NULL
	   ,@result_message varchar(200) = NULL
       ,@postingDate DATETIME = NULL
       ,@cashAppTransitionDate DATE = NULL

SET NOCOUNT ON

DECLARE @curDate DATETIME = getDate()
DECLARE @step VARCHAR(5) = '0'
DECLARE @totalCash TABLE (invoice_id int not null, payer_id int not null,apply_to_year_month datetime not null, total_cash decimal(20,2) not null)
DECLARE @effectiveDate DATETIME
DECLARE @appliedPaymentId INT
DECLARE @appliedPaymentReservedIdsTmp TABLE (id int identity(1,1), applied_payment_id int)
DECLARE @chargeTransactionsExcludeIdsTmp TABLE (transaction_id int)
DECLARE @blockSize int
DECLARE @excludedTxTotalAmount [decimal](20,2) = 0

--------------------------------------------------------------
-- temp tables
--------------------------------------------------------------


CREATE TABLE #charge
(
  id int identity,
  transaction_id INT NOT NULL,
  client_id INT NOT NULL,
  payer_id INT NOT NULL,
  amount DECIMAL(20, 2) NOT NULL,
  effective_date DATETIME NOT NULL,
  charge_paid_status CHAR(1) NOT NULL DEFAULT 'N',
  invoice_id int not null,
  apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE CLUSTERED INDEX #charge__id_IDX on #charge(id)

CREATE TABLE #cashTxDistribution
(
	transaction_id int,
	distribution_tx_id int,
	payer_id int,
	effective_date DATETIME NULL
)

CREATE TABLE #cash
(
  id int identity,
  transaction_id int NOT NULL,
  client_id int NOT NULL,
  payer_id int NOT NULL,
  amount decimal(20, 2) NOT NULL,
  effective_date DATETIME NULL,
  invoice_id int not null,
  apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE CLUSTERED INDEX #cash__id_IDX on #cash(id)

CREATE TABLE #charge_payment
(
   invoice_id int not null,
  effective_date datetime not null,
  client_id int not null,
  transaction_id bigint not null,
  payer_id int not null,
  total_cash DECIMAL(20, 2) not null,
  charge_rank int not null,
  cumulative_applied_amount DECIMAL(20, 2) not null,
  cumulative_charge_amount DECIMAL(20, 2) not null,
  charge_amount DECIMAL(20, 2) not null,
  cash_remaining DECIMAL(20, 2) not null,
  cash_applied DECIMAL(20, 2) not null,
  cash_tx_id int not null,
  charge_paid_status char(1) NOT NULL DEFAULT 'N',
  apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #invoicePayment (
	invoice_id int NOT NULL,
	client_id int NOT NULL,
	payer_id int NOT NULL,
	claim_from_date datetime NULL,
	claim_to_date datetime NULL,
	care_level varchar(5) NULL,
	amount decimal(20,2) NULL DEFAULT (0),
	manual_flag char(1) NOT NULL DEFAULT(0)
	)
-- TODO Test with index and without; CREATE CLUSTERED INDEX #invoice_id__IDX on #invoicePayment(invoice_id)

CREATE TABLE #transactionsPaymentTmp
	(
	  id INT IDENTITY(1,1) NOT NULL,
	  charge_transaction_id INT NOT NULL,
	  payment_transaction_id INT NOT NULL,
	  amount DECIMAL(20,2) NULL DEFAULT (0),
	  amount_for_auto_writeoff [decimal](20,2) NULL
	)

CREATE TABLE #newUnappliedCashTx (
	payer_id int NOT NULL,
	effective_date datetime NULL,
	amount DECIMAL(20,2) NULL DEFAULT (0),
	transaction_id int not null
	)

CREATE TABLE #arUnappliedCashTmp (
	transaction_id INT NOT NULL
	, payer_id int NOT NULL
	, amount DECIMAL(20, 2) NOT NULL
	, effective_date DATETIME NOT NULL
	)

CREATE TABLE #arUnappliedCashPaymentTmp
   (
	payer_id int NOT NULL,
	effective_date datetime NULL,
	transaction_id int not null,
	amount DECIMAL(20, 2) not null,
	total_payment DECIMAL(20, 2) not null,
	charge_rank int not null,
	cumulative_payment_amount DECIMAL(20, 2) not null,
	payment_remaining DECIMAL(20, 2) not null,
	payment_applied DECIMAL(20, 2) not null,
	cash_tx_id int not null
   )

CREATE TABLE #appliedPaymentHistoryTmp (
	ident int identity(1,1), -- addtional field to take increment
	applied_payment_id int NOT NULL,
	fac_id int NOT NULL,
	deleted char(1) NOT NULL,
	created_by varchar(60) NOT NULL,
	created_date datetime NOT NULL,
	revision_by varchar(60) NULL,
	revision_date datetime NULL,
	deleted_by varchar(60) NULL,
	deleted_date datetime NULL,
	transaction_id int NOT NULL,
	client_id int NOT NULL,
	payer_id int NOT NULL,
	current_period_date datetime NULL,
	applied_to_date datetime NOT NULL,
	applied_date datetime NULL,
	distribution_id int NOT NULL,
	amount money NOT NULL,
	OpenClose_Flag char(1) NOT NULL,
	writeoff_amount money NULL,
	include_transaction_payment BIT NULL -- bit value 1 represent payment is against post-transition charges and added in ar_transactions_payment
	)

CREATE TABLE #chargeStatus(
	transaction_id INT NOT NULL, 
	effective_date DATETIME,
	client_id INT NOT NULL,
	payer_id INT NOT NULL,
	invoice_id INT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	paid_status_code CHAR(1),
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #chargeStatus2(
	transaction_id INT NOT NULL, 
	effective_date DATETIME,
	client_id INT NOT NULL,
	payer_id INT NOT NULL,
	invoice_id INT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	paid_status_code CHAR(1),
	care_level varchar(5),
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #partiallyPaidCharge(
	transaction_id INT NOT NULL, 
	amount DECIMAL(20,2) DEFAULT(0.00)
)

CREATE TABLE #unappliedCashAvailable(
	transaction_id INT NOT NULL, 
	payer_id INT NOT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	effective_date DATETIME
)

CREATE TABLE #unappliedCashPaymentMap(
	transaction_id INT NOT NULL, 
	payer_id INT NOT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	effective_date DATETIME,
	OrderPerPayerId INT NOT NULL,
	TotalAvailableCashAmountForPayerId DECIMAL(20,2) DEFAULT(0.00),
	TotalPayment DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_effective_date DATETIME,
	cash_tx_id INT
)

CREATE TABLE #unappliedCashPayment(
	payer_id INT NOT NULL,
	effective_date DATETIME,
	transaction_id INT NOT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	TotalAvailableCashAmountForPayerId DECIMAL(20,2) DEFAULT(0.00),
	total_payment DECIMAL(20,2) DEFAULT(0.00),
	charge_rank INT NOT NULL,
	cumulative_applied_amount DECIMAL(20,2) DEFAULT(0.00),
	cumulative_payment_amount DECIMAL(20,2) DEFAULT(0.00),
	payment_remaining DECIMAL(20,2) DEFAULT(0.00),
	paymentApplied DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_effective_date DATETIME,
	cash_tx_id INT NOT NULL
)

CREATE TABLE #unappliedCashPaymentByChargeRank(
	payer_id int NOT NULL,
	effective_date datetime NULL,
	transaction_id int not null,
	amount DECIMAL(20, 2) not null,
	total_payment DECIMAL(20, 2) not null,
	charge_rank int not null,
	cumulative_payment_amount DECIMAL(20, 2) not null,
	payment_remaining DECIMAL(20, 2) not null,
	payment_applied DECIMAL(20, 2) not null,
	cash_tx_id int not null,
	row_num INT NOT NULL
)

CREATE TABLE #remainingUnappliedCash(
	payer_id INT NOT NULL,
	transaction_id INT NOT NULL, 
	effective_date DATETIME,
	charge_rank INT NOT NULL,
	cr DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_id INT NOT NULL,
	mr INT 
)

CREATE TABLE #chargeCashMap(
	id int,
	transaction_id INT NOT NULL,
	client_id INT NOT NULL,
	payer_id INT NOT NULL,
	amount DECIMAL(20, 2) NOT NULL,
	effective_date DATETIME NOT NULL,
	charge_paid_status CHAR(1) NOT NULL DEFAULT 'N',
	invoice_id int not null,
	OrderPerInvoiceId INT NOT NULL,
	TotalChargeAmountForInvoiceId  DECIMAL(20,2) DEFAULT(0.00),
	TotalCash DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_id INT NOT NULL,
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #chargeCashPayment(
	invoice_id INT NOT NULL,
	effective_date DATETIME,
	client_id INT NOT NULL,
	transaction_id INT NOT NULL,
	payer_id INT NOT NULL,
	TotalChargeAmountForInvoiceId DECIMAL(20,2) DEFAULT(0.00),
	total_cash DECIMAL(20,2) DEFAULT(0.00),
	charge_rank INT NOT NULL,
	cumulative_applied_amount DECIMAL(20,2) DEFAULT(0.00),
	cumulative_charge_amount DECIMAL(20,2) DEFAULT(0.00),
	charge_amount DECIMAL(20,2) DEFAULT(0.00),
	cash_remaining DECIMAL(20,2) DEFAULT(0.00),
	CashApplied DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_id INT NOT NULL,
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #paymentByChargeRank(
	invoice_id int not null,
	effective_date datetime not null,
	client_id int not null,
	transaction_id INT not null,
	payer_id int not null,
	total_cash DECIMAL(20, 2) not null,
	charge_rank int not null,
	cumulative_applied_amount DECIMAL(20, 2) not null,
	cumulative_charge_amount DECIMAL(20, 2) not null,
	charge_amount DECIMAL(20, 2) not null,
	cash_remaining DECIMAL(20, 2) not null,
	cash_applied DECIMAL(20, 2) not null,
	cash_tx_id int not null,
	charge_paid_status char(1) NOT NULL DEFAULT 'N',
	row_num INT,
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #unappliedCashFromPaymentByChargeRank(
	invoice_id INT NOT NULL,
	transaction_id INT NOT NULL,
	client_id INT NOT NULL, 
	payer_id INT NOT NULL,
	charge_rank INT NOT NULL,
	cr DECIMAL(20,2) DEFAULT(0.00),
	cash_tx_id INT NOT NULL,
	mr INT NOT NULL,
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #remainingCashByRank(
	transaction_id INT NOT NULL, 
	effective_date datetime, 
	invoice_id INT NOT NULL, 
	payer_id INT NOT NULL, 
	row_num INT NOT NULL,
	apply_to_year_month datetime NOT NULL DEFAULT 0
)

CREATE TABLE #aphTmp(
	applied_payment_id INT NOT NULL,
	fac_id INT NOT NULL,
	deleted CHAR(1),
	created_by VARCHAR(60),
	created_date DATETIME,
	revision_by VARCHAR(60),
	revision_date DATETIME,
	transaction_id INT NOT NULL,
	client_id INT NOT NULL,
	payer_id INT NOT NULL,
	applied_to_date DATETIME,
	distribution_id INT NOT NULL,
	amount DECIMAL(20,2) DEFAULT(0.00),
	OpenClose_flag CHAR(1),
	writeoff_amount DECIMAL(20,2) NULL,
	include_transaction_payment BIT NULL
)

CREATE TABLE #manualClaims
(
	invoice_id int not null,
	client_id int not null,
	payer_id int not null,
	claim_from_date datetime not null,
	claim_to_date datetime not null
)

	BEGIN TRY

		-- Create table with invoice and payment information
		INSERT INTO #invoicePayment (invoice_id, client_id, claim_from_date, claim_to_date, care_level, amount, manual_flag, payer_id)
		SELECT p.invoice_id, i.client_id, p.claim_effective_from_date, claim_effective_to_date, p.care_level, p.amount * -1, i.manual_flag,
			CASE	WHEN c.claim_responsible_payer_code = 'a' THEN COALESCE(c.pcc_primary_payer_id, i.payer_id)
				WHEN c.claim_responsible_payer_code = 'b' THEN c.pcc_secondary_payer_id
				WHEN c.claim_responsible_payer_code = 'c' THEN c.pcc_tertiary_payer_id
				ELSE i.payer_id END as payer_id
		FROM @InvoicePaymentTable p
		JOIN ar_invoice i on i.invoice_id = p.invoice_id and i.deleted='N'
		LEFT JOIN ar_invoice_claim c on c.invoice_id = i.invoice_id

		INSERT INTO #manualClaims
		SELECT i.invoice_id, i.client_id, i.payer_id, p.claim_effective_from_date, p.claim_effective_to_date
		FROM ar_invoice i
		JOIN @InvoicePaymentTable p ON i.invoice_id = p.invoice_id
		WHERE  i.fac_id = @facId
		AND i.deleted = 'N'
		AND i.manual_flag = 'Y'
		AND i.client_id IS NOT NULL
		AND i.payer_id IS NOT NULL


		select top 1 @clientId = client_id from ar_transactions where transaction_id = @paymentTransactionId

		INSERT INTO #cashTxDistribution
		select transaction_id, distribution_tx_id, payer_id, effective_date
		from ar_transactions
		where fac_id=@facId AND client_id = @clientId AND deleted = 'N'
			AND COALESCE(distribution_tx_id,transaction_id) = @paymentTransactionId

		select top 1 @effectiveDate = effective_date from #cashTxDistribution where transaction_id = @paymentTransactionId

		-- Create cash transaction for unapplied cash if applicable
		DECLARE @recordCount int = 0
		DECLARE @createdUnappliedCashNumber int = 0

		SET  @recordCount = (SELECT COUNT(*) FROM @InvoicePaymentTable WHERE invoice_id=-1)
		IF  @DebugMe = 'Y'
		BEGIN
			SELECT 'unapplied cash distributing records', @recordCount
		END

		IF @recordCount > 0
		BEGIN

			INSERT INTO #newUnappliedCashTx(
				payer_id
				,effective_date
				,amount
				,transaction_id
				)
			SELECT t.payer_id
				, t.effective_date
				, p.amount * -1
				, t.transaction_id
			FROM #cashTxDistribution t
			JOIN @InvoicePaymentTable p ON p.payer_id=t.payer_id
			WHERE p.invoice_id=-1

			IF  @DebugMe = 'Y'
			BEGIN
				SELECT 'unapplied cash transaction', * FROM #newUnappliedCashTx
			END

		END

		-- If coinsurance, do not split. Coinsurance claims are never split in cases of
		-- Medicare or Other payers on a Medicaid claim (ex. NY Medicaid)
		; WITH claimInfo AS (
			SELECT new_care_level =
					(CASE WHEN c.claim_responsible_payer_code IN ('b','c')
							AND i.original_invoice_id IS NOT NULL
							AND i.transaction_flag = 'N'
					THEN NULL ELSE p.care_level END)
					, c.claim_responsible_payer_code, i.transaction_flag, i.original_invoice_id, p.invoice_id
					FROM ar_invoice_claim c
					JOIN ar_invoice i on i.invoice_id = c.invoice_id
					JOIN #invoicePayment p on p.invoice_id = c.invoice_id
		),
		invoicesWithCareLevels AS (
			SELECT invoice_id =
				(CASE WHEN ci.original_invoice_id IS NOT NULL THEN ci.original_invoice_id ELSE ci.invoice_id END)
			FROM claimInfo ci
			WHERE ci.new_care_level IS NOT NULL
		)
		UPDATE i
		SET i.invoice_id = icl.invoice_id
		FROM invoicesWithCareLevels icl
		JOIN #invoicePayment i on i.invoice_id = icl.invoice_id

		---------------------------------------------------------------
		-- 010: populate charges
		-- get all charges with the specified invoice_id
		---------------------------------------------------------------
		SET @step = '10'

        -- Get posting date
        SELECT @postingDate = DATEFROMPARTS(posting_year,posting_month,1)
        FROM ar_configuration
        WHERE fac_id = @facId
        
        -- Get cash application transition date
        SELECT @cashAppTransitionDate = 
               (SELECT CONVERT(DATE, value, 23)
                FROM configuration_parameter
                WHERE fac_id = -1 AND name = 'cash_application_transition_date')

		-- if null then default the date so all charges will be included
		IF @cashAppTransitionDate is null
		BEGIN
			SET @cashAppTransitionDate = '1900-01-01'
		END


		INSERT INTO @chargeTransactionsExcludeIdsTmp(transaction_id) SELECT value FROM pcc__csvToTableOfIntMax(@chargesExcludeId_CSV)

		INSERT INTO #chargeStatus2 (transaction_id, effective_date, client_id, payer_id, invoice_id, amount, paid_status_code, care_level, apply_to_year_month)
			-- Include transactions on claims
			SELECT t.transaction_id, t.effective_date,t.client_id,t.payer_id, t.invoice_id, t.amount, t.paid_status_code, t.care_level, 0 as apply_to_year_month
			FROM ar_transactions t
			LEFT JOIN #invoicePayment i on i.invoice_id = t.invoice_id
			WHERE t.deleted = 'N' AND t.client_id > 0 AND t.payer_id > 0
			AND t.transaction_date is not NULL
			AND t.fac_id = @facId
			AND t.transaction_type <> 'C'
			AND t.invoice_id = i.invoice_id
			union all
			-- Include manual cash from 835 imports
			SELECT distinct t.transaction_id, t.effective_date,t.client_id,t.payer_id, i.invoice_id, t.amount, t.paid_status_code, t.care_level,0 as apply_to_year_month
			FROM ar_transactions t
			JOIN #manualClaims i on i.client_id = t.client_id and i.payer_id = t.payer_id
			WHERE t.deleted = 'N' AND t.client_id > 0 AND t.payer_id > 0
			AND t.transaction_date is not NULL
			AND t.transaction_date < @postingDate
			AND t.fac_id = @facId
			AND t.transaction_type <> 'C'
			AND t.invoice_id = -999
			AND t.effective_date >= i.claim_from_date
			AND t.effective_date <= i.claim_to_date
			union all
			-- Include Balance Forward transactions
			SELECT t.transaction_id, t.effective_date,t.client_id,t.payer_id, t.invoice_id, t.amount, t.paid_status_code, t.care_level, tvp.apply_to_year_month
			FROM ar_transactions t
			LEFT JOIN @InvoicePaymentTable tvp on tvp.payer_id = t.payer_id and tvp.invoice_id = -999
			WHERE t.deleted = 'N' AND t.client_id > 0 AND t.payer_id > 0
			AND t.transaction_date is not NULL
            AND t.transaction_date < @postingDate
			AND t.fac_id = @facId
			AND t.transaction_type <> 'C'
			AND t.invoice_id = -999
			AND t.client_id = @clientId AND t.payer_id = tvp.payer_id
			and t.effective_date >= tvp.apply_to_year_month and t.effective_date < DATEADD(MONTH,1,tvp.apply_to_year_month)
            AND t.effective_date >= @cashAppTransitionDate
			union ALL
			-- Include unbilled transactions
			SELECT t.transaction_id, t.effective_date,t.client_id,t.payer_id, -2 as invoice_id, t.amount, t.paid_status_code, t.care_level, tvp.apply_to_year_month
			FROM ar_transactions t
			LEFT JOIN @InvoicePaymentTable tvp 
				on tvp.payer_id = t.payer_id
			WHERE t.deleted = 'N' AND t.client_id > 0 AND t.payer_id > 0
			AND t.transaction_date is not NULL
            AND t.transaction_date < @postingDate
			AND t.fac_id = @facId
			AND t.transaction_type <> 'C'
			AND t.invoice_id is null
			AND t.client_id = @clientId 
			AND t.payer_id = tvp.payer_id
			and tvp.invoice_id = -2
			and t.effective_date >= tvp.apply_to_year_month and t.effective_date < DATEADD(MONTH,1,tvp.apply_to_year_month)
            AND t.effective_date >= @cashAppTransitionDate
		
		INSERT INTO #chargeStatus (transaction_id, effective_date, client_id, payer_id, invoice_id, amount, paid_status_code, apply_to_year_month)
			SELECT t.transaction_id, t.effective_date,t.client_id,t.payer_id, t.invoice_id, t.amount, t.paid_status_code, t.apply_to_year_month
			FROM #chargeStatus2 t
			LEFT JOIN #invoicePayment i on i.invoice_id = t.invoice_id
			LEFT JOIN @chargeTransactionsExcludeIdsTmp ce on ce.transaction_id = t.transaction_id
			WHERE (i.care_level IS NULL OR t.care_level=i.care_level)
			AND ce.transaction_id IS NULL

		INSERT INTO #partiallyPaidCharge (transaction_id, amount)
			SELECT p.charge_transaction_id as transaction_id, SUM(COALESCE(p.amount,0)) as amount
			FROM ar_transactions_payment p
			JOIN #chargeStatus c ON c.transaction_id = p.charge_transaction_id
			WHERE ISNULL(c.paid_status_code,'N') <> 'F'
			GROUP BY charge_transaction_id
			HAVING SUM(COALESCE(p.amount,0)) <> 0

		INSERT INTO #charge
		(
			transaction_id, client_id, payer_id, amount, effective_date, invoice_id, charge_paid_status, apply_to_year_month
		)
		SELECT c.transaction_id,c.client_id,c.payer_id,
			CASE
			WHEN c.paid_status_code = 'F' THEN 0.0
			ELSE isnull(c.amount,0) + isnull(p.amount,0) 
			END AS amount,
			c.effective_date,
			c.invoice_id,
			isnull(c.paid_status_code,'N'),
			c.apply_to_year_month
		FROM #chargeStatus c
		LEFT JOIN #partiallyPaidCharge p ON c.transaction_id = p.transaction_id
		ORDER by effective_date, transaction_id

		IF  @DebugMe = 'Y'
		BEGIN
			select '#charge', * from #charge
		END

		IF EXISTS(select 1 from #invoicePayment WHERE invoice_id NOT IN (SELECT DISTINCT(invoice_id) FROM #charge ))
		OR EXISTS(SELECT 1 FROM #newUnappliedCashTx WHERE amount<0)
		OR EXISTS(SELECT 1 from @InvoicePaymentTable t 
				JOIN #cashTxDistribution d ON t.payer_id=d.payer_id
				LEFT JOIN #charge c ON c.invoice_id = t.invoice_id AND t.apply_to_year_month = c.apply_to_year_month AND t.payer_id = c.payer_id
				WHERE t.invoice_id = -2 AND c.invoice_id IS NULL)
		OR EXISTS(SELECT 1 from @InvoicePaymentTable t
				JOIN #cashTxDistribution d ON t.payer_id=d.payer_id
				LEFT JOIN #charge c ON c.invoice_id = t.invoice_id AND t.apply_to_year_month = c.apply_to_year_month AND t.payer_id = c.payer_id
				WHERE t.invoice_id = -999 AND c.invoice_id IS NULL AND t.apply_to_year_month IS NOT NULL) -- exclude -999 charges from manual claims

		BEGIN
			IF  @DebugMe = 'Y'
			BEGIN
				select 'no charges found, applying to unapplied cash'
			END
			-- If there are no charges to be paid, then put it all towards unapplied cash

			DECLARE @unappliedCashFromNoChargesFound TABLE
			(
			    transaction_id INT
			    ,payer_id INT
			    ,amount MONEY
			    ,effective_date DATETIME
			)

			-- Create unapplied cash records for Invoices where there are no valid charges to pay
			INSERT INTO @unappliedCashFromNoChargesFound
			    ([transaction_id]
			    ,[payer_id]
			    ,[amount]
			    ,[effective_date]
			    )
			SELECT t.transaction_id, p.payer_id, p.amount, t.effective_date
				FROM #invoicePayment p
				JOIN #cashTxDistribution t ON t.payer_id=p.payer_id
				WHERE invoice_id NOT IN (SELECT DISTINCT(invoice_id) FROM #charge )
                
			-- Create unapplied cash record for Unbilled months where there are no valid charges to pay
			INSERT INTO @unappliedCashFromNoChargesFound
			    ([transaction_id]
			    ,[payer_id]
			    ,[amount]
			    ,[effective_date]
			    )
			SELECT t.transaction_id, p.payer_id, -1 * p.amount, t.effective_date
			FROM @InvoicePaymentTable p
			JOIN #cashTxDistribution t ON t.payer_id=p.payer_id
			LEFT JOIN #charge c ON c.invoice_id = p.invoice_id AND p.apply_to_year_month = c.apply_to_year_month AND p.payer_id = c.payer_id
			WHERE p.invoice_id = -2 AND c.invoice_id IS NULL

			-- Create unapplied cash record for Marked As Billed months where there are no valid charges to pay
			INSERT INTO @unappliedCashFromNoChargesFound
			    ([transaction_id]
			    ,[payer_id]
			    ,[amount]
			    ,[effective_date]
			    )
			SELECT t.transaction_id, p.payer_id, -1 * p.amount, t.effective_date
			FROM @InvoicePaymentTable p
			JOIN #cashTxDistribution t ON t.payer_id=p.payer_id
			LEFT JOIN #charge c ON c.invoice_id = p.invoice_id AND p.apply_to_year_month = c.apply_to_year_month AND p.payer_id = c.payer_id
			WHERE p.invoice_id = -999 AND c.invoice_id IS NULL AND p.apply_to_year_month IS NOT NULL

			;WITH x AS 
			(
			    SELECT transaction_id, payer_id, amount, effective_date
			    FROM #newUnappliedCashTx
			    WHERE amount<0
			    UNION ALL
			    SELECT transaction_id, payer_id, amount, effective_date
			    FROM @unappliedCashFromNoChargesFound
			)
			INSERT INTO #arUnappliedCashTmp
			    ([transaction_id]
			    ,[payer_id]
			    ,[amount]
			    ,[effective_date]
			    )
			SELECT transaction_id, payer_id, SUM(amount), effective_date
			FROM x
			GROUP BY transaction_id, payer_id, effective_date

			IF EXISTS(SELECT 1 FROM @unappliedCashFromNoChargesFound)
			BEGIN
			    SELECT @result_message = '1' --'Payment processed, however there were no payable charges found.'
			END
		END

		IF EXISTS(SELECT 1 FROM #charge) OR EXISTS(SELECT 1 FROM #newUnappliedCashTx WHERE amount>0)
		BEGIN

			---------------------------------------------------------------
			-- 020: populate cash
			-- get the amount from the specified payment transaction
			-- get all amounts from negative charges
			---------------------------------------------------------------
			SET @step = '20'

			-- Create unapplied cash entries for new unapplied cash transactions
			IF EXISTS(SELECT 1 FROM #newUnappliedCashTx WHERE amount>0)
			BEGIN
				INSERT INTO #unappliedCashAvailable (transaction_id, payer_id, amount, effective_date)
					SELECT max(t.transaction_id) as transaction_id
						, t.payer_id
						, (sum(t.amount)*-1) amount
						, t.effective_year_month as effective_date
					FROM dbo.view_ar_unapplied_cash t
					JOIN #newUnappliedCashTx p ON t.payer_id = p.payer_id
					WHERE t.fac_id = @facId AND t.client_id=@clientId AND t.posting_date IS NOT NULL AND p.amount>0
					group by t.payer_id, t.effective_year_month 

				INSERT INTO #unappliedCashPaymentMap 
					(transaction_id, payer_id, amount, effective_date, OrderPerPayerId, 
						TotalAvailableCashAmountForPayerId, TotalPayment, cash_tx_effective_date, cash_tx_id)
					SELECT  a.transaction_id, a.payer_id, a.amount, a.effective_date,
							ROW_NUMBER() OVER
								(PARTITION BY a.payer_id ORDER BY a.effective_date asc)
								OrderPerPayerId,
							SUM(a.amount) OVER
								(PARTITION BY a.payer_id)
								TotalAvailableCashAmountForPayerId
							,b.amount TotalPayment
							,b.effective_date cash_tx_effective_date
							,b.transaction_id cash_tx_id
					FROM #unappliedCashAvailable a
					JOIN #newUnappliedCashTx b ON b.payer_id = a.payer_id
					WHERE a.amount>0 AND b.amount>0

				INSERT INTO #unappliedCashPayment 
					(payer_id, effective_date, transaction_id, amount, TotalAvailableCashAmountForPayerId, total_payment, charge_rank, 
						cumulative_applied_amount, cumulative_payment_amount, payment_remaining, paymentApplied, cash_tx_effective_date, cash_tx_id)
					SELECT
						x.payer_id,
						min(x.effective_date) as effective_date,
						min(y.transaction_id) as transaction_id,
						min(y.amount) as amount,
						y.TotalAvailableCashAmountForPayerId,
						y.TotalPayment as total_payment,
						y.OrderPerPayerId as charge_rank,
						CASE WHEN y.TotalPayment < SUM(x.amount) THEN y.TotalPayment
							ELSE SUM(x.amount)
							END cumulative_applied_amount,
							SUM(x.amount) as cumulative_payment_amount,
						(y.TotalPayment - SUM(x.amount)) as payment_remaining,
						MIN(y.amount) -
						CASE WHEN y.TotalPayment - SUM(x.amount) < 0 THEN
							   ABS(y.TotalPayment - SUM(x.amount))
							ELSE 0
							END paymentApplied,
						min(x.cash_tx_effective_date) cash_tx_effective_date,
						min(x.cash_tx_id) as cash_tx_id
					FROM    #unappliedCashPaymentMap y
					  JOIN    #unappliedCashPaymentMap x ON x.payer_id = y.payer_id
							AND x.OrderPerPayerId <= y.OrderPerPayerId
					GROUP   BY
						x.payer_id,
						y.OrderPerPayerId,
						y.TotalAvailableCashAmountForPayerId,
						y.TotalPayment

				INSERT INTO #arUnappliedCashPaymentTmp
				   (
					payer_id,
					effective_date,
					transaction_id,
					amount,
					total_payment,
					charge_rank,
					cumulative_payment_amount,
					payment_remaining,
					payment_applied,
					cash_tx_id
				   )
				SELECT cp.payer_id
					, ca.effective_date
					, cp.transaction_id
					, cp.amount
					, cp.total_payment
					, cp.charge_rank
					, cp.cumulative_payment_amount
					, cp.payment_remaining
					, CASE WHEN cp.paymentApplied < 0 THEN 0
						ELSE cp.paymentApplied
						END AS payment_applied
					, cp.cash_tx_id
					FROM #unappliedCashPayment cp
					JOIN #unappliedCashAvailable ca ON ca.transaction_id=cp.transaction_id AND ca.amount=cp.amount

				IF  @DebugMe = 'Y'
				BEGIN
					SELECT 'unapplied cash #arUnappliedCashPaymentTmp', * FROM #arUnappliedCashPaymentTmp
				END

				INSERT INTO #arUnappliedCashTmp
				   ([transaction_id]
				   ,[payer_id]
				   ,[amount]
				   ,[effective_date]
				   )
				SELECT cash_tx_id, payer_id, payment_applied, effective_date
					FROM #arUnappliedCashPaymentTmp
					WHERE payment_applied>0

				IF  @DebugMe = 'Y'
				BEGIN
					SELECT 'unapplied cash transaction temp table', * FROM #arUnappliedCashTmp
				END

				INSERT INTO #unappliedCashPaymentByChargeRank 
					(payer_id, effective_date, transaction_id, amount, total_payment, charge_rank, 
						cumulative_payment_amount, payment_remaining, payment_applied, cash_tx_id, row_num)
					SELECT payer_id, effective_date, transaction_id, amount, total_payment, charge_rank, 
						cumulative_payment_amount, payment_remaining, payment_applied, cash_tx_id, 
						ROW_NUMBER() over (partition by payer_id order by charge_rank desc,payment_remaining desc) AS row_num
					FROM #arUnappliedCashPaymentTmp
				
				INSERT INTO #remainingUnappliedCash (payer_id, transaction_id, effective_date, charge_rank, cr, cash_tx_id, mr)
					SELECT payer_id, max(transaction_id) as transaction_id, effective_date,
						charge_rank, sum(payment_remaining) as cr, min(cash_tx_id) as cash_tx_id, min(row_num) as mr
						from #unappliedCashPaymentByChargeRank
						WHERE payment_remaining > 0
							and payment_applied > 0
					group by payer_id, charge_rank, effective_date

				INSERT INTO #arUnappliedCashTmp
				(
				   [transaction_id]
				   ,[payer_id]
				   ,[amount]
				   ,[effective_date]
				)
					SELECT cash_tx_id, payer_id, cr, @effectiveDate
					FROM #remainingUnappliedCash  
					WHERE mr = 1

				-- insert only if taking money out and there is no money to take out
				INSERT INTO #arUnappliedCashTmp
				(
				   [transaction_id]
				   ,[payer_id]
				   ,[amount]
				   ,[effective_date]
				)
					SELECT p.transaction_id
					, p.payer_id
					, p.amount
					, p.effective_date
					FROM #newUnappliedCashTx p
					LEFT JOIN #unappliedCashPaymentMap t 
					   ON t.payer_id = p.payer_id 
					   and t.cash_tx_id = p.transaction_id
					WHERE t.payer_id IS NULL AND p.amount > 0
	
				IF  @DebugMe = 'Y'
				BEGIN
					SELECT 'unapplied cash transaction-with remaining', * FROM #arUnappliedCashTmp
				END
			END

			INSERT INTO #cash
			(
				transaction_id, client_id, payer_id, amount, invoice_id, effective_date
			)
			select dist.transaction_id, i.client_id, i.payer_id, i.amount * -1, i.invoice_id, @effectiveDate
			from #invoicePayment i
			join #cashTxDistribution dist on dist.payer_id = i.payer_id

			IF  @DebugMe = 'Y'
			BEGIN
				select '#cash after adding payment transaction', * from #cash
			END

			INSERT INTO #cash
			(
				transaction_id, client_id, payer_id, amount, invoice_id, effective_date, apply_to_year_month
			)
			select dist.transaction_id, @clientId, i.payer_id, i.amount, i.invoice_id, @effectiveDate, apply_to_year_month
			from @InvoicePaymentTable i
			join #cashTxDistribution dist on dist.payer_id = i.payer_id
			where i.invoice_id = -999

			IF  @DebugMe = 'Y'
			BEGIN
				select '#cash after adding balance forwards', * from #cash
			END

			INSERT INTO #cash
			(
				transaction_id, client_id, payer_id, amount, invoice_id, effective_date, apply_to_year_month
			)
			select dist.transaction_id, @clientId, i.payer_id, i.amount, i.invoice_id, @effectiveDate, apply_to_year_month
			from @InvoicePaymentTable i
			join #cashTxDistribution dist on dist.payer_id = i.payer_id
			where i.invoice_id = -2

			IF  @DebugMe = 'Y'
			BEGIN
				select '#cash after adding unbilled', * from #cash
			END

			INSERT INTO #cash
			(
				transaction_id, client_id, payer_id, amount, effective_date, invoice_id, apply_to_year_month
			)
			SELECT dist.transaction_id, client_id, c.payer_id, amount * -1, c.effective_date, invoice_id, c.apply_to_year_month
			FROM #charge c
			JOIN #cashTxDistribution dist on dist.payer_id = c.payer_id
			WHERE amount < 0

			IF  @DebugMe = 'Y'
			BEGIN
				select '#cash after adding negative charges', * from #cash
			END

			---------------------------------------------------------------
			-- 030: populate #charge_payment for negative charges
			-- take the total negative charges that is to be applied against positive charges,
			-- and distribute it among the negative charges (these will be the entries against the
			-- negative charges in the charge_payment table)
			---------------------------------------------------------------
			SET @step = '030'

			-- insert payments for negative charges
			INSERT INTO #charge_payment (
			  invoice_id,
			  effective_date,
			  client_id,
			  transaction_id,
			  payer_id,
			  total_cash,
			  charge_rank,
			  cumulative_applied_amount,
			  cumulative_charge_amount,
			  charge_amount,
			  cash_remaining,
			  cash_applied,
			  cash_tx_id,
			  charge_paid_status
			)
			SELECT invoice_id,
					c.effective_date,
					client_id,
					c.transaction_id,
					c.payer_id,
					amount ,
					1,
					amount,
					amount,
					amount,
					0,
					amount,
					dist.transaction_id,
					'F'
			FROM #charge c
			JOIN #cashTxDistribution dist on dist.payer_id = c.payer_id
			WHERE amount < 0

			IF  @DebugMe = 'Y'
			BEGIN
				select '#charge_payment after negative charges',* from #charge_payment
			END

			INSERT INTO @totalCash(invoice_id, payer_id,apply_to_year_month, total_cash)
			SELECT invoice_id, payer_id,apply_to_year_month, sum(amount) as total_cash
			FROM #cash
			GROUP BY invoice_id, payer_id, apply_to_year_month

			IF  @DebugMe = 'Y'
			BEGIN
				select 'total cash per invoice per payer per apply month', * from @totalCash
			END

			-----------------------------
			-- 034: populate #charge_payment applying cash from #cash table
			-- only apply against positive charges (negative charges were handled earlier in the process)
			---------------------------------------------------------------
			SET @step = '040'

				INSERT INTO #chargeCashMap 
					(id, transaction_id, client_id, payer_id, amount, effective_date, charge_paid_status, invoice_id, 
						OrderPerInvoiceId, TotalChargeAmountForInvoiceId, TotalCash, cash_tx_id, apply_to_year_month)
				SELECT  a.id, a.transaction_id, a.client_id, a.payer_id, a.amount, a.effective_date, a.charge_paid_status, a.invoice_id,
						ROW_NUMBER() OVER
							(PARTITION BY a.invoice_id, a.payer_id, a.apply_to_year_month ORDER BY a.effective_date asc, a.transaction_id asc)
							OrderPerInvoiceId,
						SUM(a.amount) OVER
							(PARTITION BY a.invoice_id, a.payer_id, a.apply_to_year_month)
							TotalChargeAmountForInvoiceId,
						isnull(b.amount,0) TotalCash,
						b.transaction_id as cash_tx_id,
						isnull(a.apply_to_year_month,-1) as apply_to_year_month
				FROM    #charge a
				JOIN    (	select min(transaction_id) as transaction_id, min(client_id) as client_id, min(payer_id) as payer_id, sum(amount) as amount, invoice_id, apply_to_year_month
							from #cash
							group by invoice_id, payer_id, apply_to_year_month)
						b ON
						b.invoice_id = a.invoice_id 
							and b.payer_id = a.payer_id
							and b.apply_to_year_month = a.apply_to_year_month
				JOIN @totalCash tc ON
						tc.invoice_id = a.invoice_id
						 and tc.payer_id = a.payer_id
						 and tc.apply_to_year_month = a.apply_to_year_month
				WHERE tc.total_cash > 0	-- only apply when there is cash to apply
				AND a.amount > 0	-- only apply against positive charges

				INSERT INTO #chargeCashPayment 
					(invoice_id, effective_date, client_id, transaction_id, payer_id, TotalChargeAmountForInvoiceId, total_cash,	
						charge_rank, cumulative_applied_amount, cumulative_charge_amount, charge_amount, cash_remaining, CashApplied, cash_tx_id, apply_to_year_month)
				SELECT
						x.invoice_id,
						min(x.effective_date) as effective_date,
						min(x.client_id) as client_id,
						min(y.transaction_id) as transaction_id,
						x.payer_id,
						y.TotalChargeAmountForInvoiceId,
						y.TotalCash as total_cash,
						y.OrderPerInvoiceId as charge_rank,
						CASE WHEN y.TotalCash < SUM(x.amount) THEN y.TotalCash
							ELSE SUM(x.amount)
							END cumulative_applied_amount,
							SUM(x.amount) as cumulative_charge_amount,
						MIN(y.amount) as charge_amount,
						(y.TotalCash - SUM(x.amount)) as cash_remaining,
						MIN(y.amount) -
						CASE WHEN y.TotalCash - SUM(x.amount) < 0 THEN
							   ABS(y.TotalCash - SUM(x.amount))
							ELSE 0
							END CashApplied,
						min(x.cash_tx_id) as cash_tx_id,
						x.apply_to_year_month
				FROM    #chargeCashMap y
				JOIN	#chargeCashMap x
					ON  x.invoice_id = y.invoice_id
					AND x.payer_id = y.payer_id
					AND x.apply_to_year_month = y.apply_to_year_month
						AND x.OrderPerInvoiceId <= y.OrderPerInvoiceId
				GROUP   BY
						x.invoice_id,
						x.payer_id,
						x.apply_to_year_month,
						y.OrderPerInvoiceId,
						y.TotalChargeAmountForInvoiceId,
						y.TotalCash

				INSERT INTO #charge_payment (
				  invoice_id,
				  effective_date,
				  client_id,
				  transaction_id,
				  payer_id,
				  total_cash,
				  charge_rank,
				  cumulative_applied_amount,
				  cumulative_charge_amount,
				  charge_amount,
				  cash_remaining,
				  cash_applied,
				  cash_tx_id,
				  charge_paid_status,
				  apply_to_year_month
				)
				SELECT  invoice_id,
				  effective_date,
				  client_id,
				  transaction_id,
				  payer_id,
				  total_cash,
				  charge_rank,
				  cumulative_applied_amount,
				  cumulative_charge_amount,
				  charge_amount,
				  cash_remaining,
				  CASE WHEN CashApplied < 0 THEN 0
						ELSE CashApplied
						END AS CashApplied,
				  cash_tx_id,
				  CASE WHEN CashApplied >= charge_amount THEN 'F'
					   WHEN CashApplied > 0 AND CashApplied < charge_amount THEN 'P'
						ELSE 'N'
						END AS charge_paid_status,
					apply_to_year_month
				FROM #chargeCashPayment

				-- To indicate that this invoice/payer has been applied
				-- so that it is not picked up when applying remaining cash
				UPDATE tc
				SET total_cash = 0
				FROM @totalCash tc
				JOIN #charge_payment c 
					on c.invoice_id = tc.invoice_id 
					and c.payer_id = tc.payer_id
					and c.apply_to_year_month =tc.apply_to_year_month
				WHERE tc.total_cash > 0 and c.charge_amount > 0

				IF  @DebugMe = 'Y'
				BEGIN
					select '#charge_payment after cash',* from #charge_payment
					select '#charge_payment rank for cash remaining', * , ROW_NUMBER() over (partition by invoice_id, payer_id, apply_to_year_month order by charge_rank desc, cash_remaining desc) AS row_num
				FROM #charge_payment
				END

				SET @step = '050'
				---------------------------------------------------------------
				-- 050. remaining cash after applying to charges (cash > charges)
				-- Pay all remaining cash to the last positive charge transaction
				---------------------------------------------------------------

				INSERT INTO #paymentByChargeRank 
					(invoice_id,effective_date, client_id, transaction_id, payer_id, total_cash, charge_rank, cumulative_applied_amount,
						cumulative_charge_amount, charge_amount, cash_remaining, cash_applied, cash_tx_id, charge_paid_status, row_num, apply_to_year_month)
				SELECT invoice_id,effective_date, client_id, transaction_id, payer_id, total_cash, charge_rank, cumulative_applied_amount,
						cumulative_charge_amount, charge_amount, cash_remaining, cash_applied, cash_tx_id, charge_paid_status, 
						ROW_NUMBER() over (partition by invoice_id, payer_id, apply_to_year_month order by charge_rank desc,cash_remaining desc) AS row_num,
						apply_to_year_month
				FROM #charge_payment

				INSERT INTO #unappliedCashFromPaymentByChargeRank 
					(invoice_id, transaction_id, client_id, payer_id, charge_rank, cr, cash_tx_id, mr, apply_to_year_month)
					SELECT invoice_id, max(transaction_id) as transaction_id, min(client_id) as client_id, payer_id,
							charge_rank, sum(cash_remaining) as cr, min(cash_tx_id) as cash_tx_id, min(row_num) as mr, apply_to_year_month
					FROM #paymentByChargeRank
					WHERE cash_remaining > 0
						and charge_paid_status = 'F'
						and cash_applied > 0
						and charge_amount <> 0
					GROUP BY invoice_id, payer_id, apply_to_year_month, charge_rank

				INSERT INTO #transactionsPaymentTmp
				(
				  charge_transaction_id,
				  payment_transaction_id,
				  amount
				)
				SELECT transaction_id, cash_tx_id, cr * -1
				FROM #unappliedCashFromPaymentByChargeRank where mr = 1

				SET @step = '055'
				---------------------------------------------------------------
				-- 055. remaining cash
				-- either no positive charges to apply against,
				-- or applying negative cash.
				-- In either case, apply to the most recent charge
				--
				-- If no postive charges, this will either be a fully paid charge (amount = 0), or a negative charge
				-- If applying negative cash, the charge could be positive, fully paid, or negative
				---------------------------------------------------------------
				-- Create payment of total cash remaining for most recent charge for each invoice/payer
				INSERT INTO #remainingCashByRank (transaction_id, effective_date, invoice_id, payer_id, row_num, apply_to_year_month)
				SELECT transaction_id, effective_date, invoice_id, payer_id, ROW_NUMBER() over (partition by invoice_id, payer_id, apply_to_year_month order by ch.effective_date desc) AS row_num,
				apply_to_year_month
				FROM #charge ch
				group by invoice_id, payer_id, apply_to_year_month, transaction_id, effective_date

				INSERT INTO #transactionsPaymentTmp
				(
					charge_transaction_id,
					payment_transaction_id,
					amount
				)
				select c.transaction_id, dist.transaction_id, tc.total_cash * -1
				from #remainingCashByRank c
				JOIN @totalCash tc 
					on tc.invoice_id = c.invoice_id 
						and tc.payer_id = c.payer_id
						and tc.apply_to_year_month = c.apply_to_year_month
				JOIN #cashTxDistribution dist on dist.payer_id = c.payer_id
				WHERE tc.total_cash <> 0
				and c.row_num = 1

			---------------------------------------------------------------
			-- 060: creating charge payment for all fully paid or partially paid charges:
			---------------------------------------------------------------
			SET @step = '060'

			INSERT INTO #transactionsPaymentTmp
			(
			  charge_transaction_id,
			  payment_transaction_id,
			  amount
			)
			SELECT c.transaction_id, dist.transaction_id, cash_applied * -1
			FROM #charge_payment c
			JOIN #cashTxDistribution dist on dist.payer_id = c.payer_id
			WHERE charge_paid_status <> 'N'

		END

		---------------------------------------------------------------
		-- 070: insert applied payment history records:
		---------------------------------------------------------------

		declare @appliedPaymentReserveIdsExists bit = 0

		INSERT INTO @appliedPaymentReservedIdsTmp(applied_payment_id) SELECT value FROM pcc__csvToTableOfIntMax(@appliedPaymentId_CSV)

		IF EXISTS (SELECT TOP 1 1 FROM @appliedPaymentReservedIdsTmp WHERE applied_payment_id <> '')
		BEGIN
			SET @appliedPaymentReserveIdsExists = 1
		END
		
		/*
			To determine if this payment is for paying invoices with an auto writeoff amount, you need to check @zeroTransactionsFlag and appliedPaymentReserveIdsExists
			If @zeroTransactionsFlag =1 and @appliedPaymentReserveIdsExists =1 then this payment is for invoices with auto writeoff.
			In which case, we will need to insert records in to ar_applied_payment_history
		*/
		IF (@zeroTransactionsFlag = 0 or @appliedPaymentReserveIdsExists = 1) 
			AND (EXISTS (SELECT TOP 1 1 FROM #transactionsPaymentTmp) OR EXISTS (SELECT TOP 1 1 FROM #arUnappliedCashTmp) OR EXISTS (SELECT TOP 1 1 FROM @InvoicePaymentTable WHERE invoice_id = -3))
		BEGIN
			SET @step = '070'
			
			if(@DebugMe='Y') begin Print 'Create applied payment history' + ' ' + convert(varchar(26),getdate(),109) end
			
			SELECT @excludedTxTotalAmount = SUM(ISNULL(p.amount * -1, 0))
			FROM @chargeTransactionsExcludeIdsTmp ex
			JOIN ar_transactions_payment p on p.charge_transaction_id = ex.transaction_id
			JOIN #cashTxDistribution c on c.transaction_id = p.payment_transaction_id
			
			INSERT INTO #aphTmp 
				(applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,
					client_id,payer_id,applied_to_date,distribution_id,amount,OpenClose_flag,writeoff_amount,include_transaction_payment) 
				SELECT 
				0,cash.fac_id,'N',@user,getDate(),@user,getDate(),cash.transaction_id,cash.client_id,cash.payer_id,
				(DATEFROMPARTS(YEAR(charge.effective_date),MONTH(charge.effective_date),1)),0,map.amount,'O',0,1
				FROM #transactionsPaymentTmp map
				JOIN ar_transactions charge on charge.transaction_id = map.charge_transaction_id and charge.fac_id = @facId
				JOIN ar_transactions cash on cash.transaction_id = map.payment_transaction_id and cash.fac_id = @facId
				WHERE cash.distribution_tx_id=@paymentTransactionId OR cash.transaction_id=@paymentTransactionId
				UNION ALL
				-- setting bit value to 1 assuming it's Post-transition only. Pre-transition unapplied cash is not considered in this stored procedure
				SELECT 0,@facId,'N',@user,getDate(),@user,getDate(),uc.transaction_id,@clientId,t.payer_id,
				(DATEFROMPARTS(YEAR(uc.effective_date),MONTH(uc.effective_date),1)),0,uc.amount,'O',0,1
				FROM #arUnappliedCashTmp uc
				JOIN ar_transactions t ON t.transaction_id = uc.transaction_id and t.fac_id = @facId
				UNION ALL
				SELECT 
				0,aph.fac_id,'N',@user,getDate(),@user,getDate(),aph.transaction_id,aph.client_id,aph.payer_id,
				aph.applied_to_date,0,aph.amount * -1,'O',0,1  
				FROM @chargeTransactionsExcludeIdsTmp ex
				JOIN ar_transactions_payment p on p.charge_transaction_id = ex.transaction_id
				JOIN ar_applied_payment_history aph on aph.transaction_id = p.payment_transaction_id and aph.fac_id = @facId
				JOIN #cashTxDistribution c on c.transaction_id = aph.transaction_id
				GROUP BY aph.fac_id, aph.client_id, aph.payer_id, aph.transaction_id, aph.applied_to_date, aph.amount
                UNION ALL
                SELECT 
		        0,@facId,'N',@user,getDate(),@user,getDate(),c.transaction_id,@clientId,tvp.payer_id,
		        (DATEFROMPARTS(YEAR(tvp.apply_to_year_month),MONTH(tvp.apply_to_year_month),1)),0,tvp.amount * -1,'O',tvp.amount_for_auto_writeoff,0
		        FROM @InvoicePaymentTable tvp
		        JOIN #cashTxDistribution c on c.payer_id = tvp.payer_id
                WHERE tvp.invoice_id = -3

			INSERT INTO #appliedPaymentHistoryTmp
			(applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,client_id,payer_id,applied_to_date,distribution_id,amount,OpenClose_flag,writeoff_amount, include_transaction_payment) 
			SELECT 
			applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,client_id,payer_id,applied_to_date,distribution_id,sum(amount)*-1,OpenClose_flag,writeoff_amount,include_transaction_payment
			FROM #aphTmp a
			GROUP BY applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,client_id,payer_id,applied_to_date,include_transaction_payment,distribution_id,OpenClose_flag,writeoff_amount
			
			
			IF (@appliedPaymentReserveIdsExists = 1)
			BEGIN
				-- Called by 835 Imports
				IF (SELECT COUNT(*) from #appliedPaymentHistoryTmp) > (SELECT COUNT(*) FROM @appliedPaymentReservedIdsTmp) 
				BEGIN
					SELECT @result_message = 'The number of applied payments records to create is greater than the number of blocks reserved.'
					RAISERROR (@result_message, 16, 1)
				END

				SET @appliedPaymentId = (SELECT MIN(applied_payment_id) FROM @appliedPaymentReservedIdsTmp)

				declare @distributionId int = @appliedPaymentId

				IF (@zeroTransactionsFlag = 1) -- when adding autowriteoff payments use the existing distribution_id
				BEGIN
					select @distributionId = min(distribution_id)
					from ar_applied_payment_history 
					where transaction_id = @paymentTransactionId
						and fac_id = @facId
						and deleted = 'N'
				END

				update aph
				set applied_payment_id = x.applied_payment_id, distribution_id = @distributionId
				from #appliedPaymentHistoryTmp aph
				join @appliedPaymentReservedIdsTmp x on x.id = aph.ident
			END
			ELSE BEGIN
				-- Called by applying cash via UI
				select @blockSize = count(*) from #appliedPaymentHistoryTmp
				execute get_next_primary_key 'ar_applied_payment_history', 'applied_payment_id', @appliedPaymentId OUTPUT,@blockSize

				update aph
				set applied_payment_id = @appliedPaymentId + aph.ident - 1, distribution_id = @appliedPaymentId
				from #appliedPaymentHistoryTmp aph
			END
			
			IF ((SELECT SUM(amount) - ISNULL(@excludedTxTotalAmount,0) from #appliedPaymentHistoryTmp) > (SELECT SUM(amount) from @InvoicePaymentTable))
			BEGIN
				SELECT @result_message = 'Applied total exceeds available payment.'
				RAISERROR (@result_message, 16, 1)
			END
			
			if(@DebugMe='Y') 
			begin
				select '#appliedPaymentHistoryTmp', * from #appliedPaymentHistoryTmp
			end

		END

		IF @zeroTransactionsFlag = 0 
		  AND EXISTS(SELECT transaction_id FROM ar_transactions WHERE fac_id=@facId AND transaction_id=@paymentTransactionId AND (transaction_date IS NOT NULL OR deleted='Y'))
		BEGIN
			SELECT @result_message = '2' --Payment was not processed, cash transaction was deleted or posted.
		END
		ELSE
		BEGIN
			BEGIN TRAN
				declare @theAuditDetails table 
				(
					invoice_id int, 
					apply_to_year_month datetime,
					payment_transaction_id int, 
					changing_desc varchar(max), 
					action varchar(10), 
					record_amount decimal(20,2)
				)

				-- Delete existing payments before applying the new ones
				-- except payments previously created (e.g. mcd deductibles)
				IF (@zeroTransactionsFlag = 0)
				BEGIN
					DELETE p
					FROM ar_transactions_payment p
					JOIN ar_transactions t ON t.transaction_id = p.payment_transaction_id
					LEFT JOIN @chargeTransactionsExcludeIdsTmp ex on p.charge_transaction_id = ex.transaction_id
					WHERE t.distribution_tx_id = @paymentTransactionId
						AND ex.transaction_id IS NULL
					
					DELETE u
					FROM ar_unapplied_cash u
					JOIN #cashTxDistribution t ON t.transaction_id = u.transaction_id
					WHERE t.distribution_tx_id = @paymentTransactionId AND u.posting_date IS NULL
				END
				
				INSERT INTO [ar_unapplied_cash]
					   ([transaction_id]
					   ,[amount]
					   ,[effective_date]
					   ,[created_by]
					   ,[created_date]
					   ,[revision_by]
					   ,[revision_date]
					   ,[is_post_transition])
				OUTPUT -1, null, INSERTED.transaction_id, 'apply_payment_by_invoice:insert unapplied cash ', 'CREATE', INSERTED.amount
				INTO @theAuditDetails
				SELECT transaction_id, sum(amount), datefromparts(year(effective_date), month(effective_date), 1) as effective_year_month, @user, @curDate, @user, @curDate, 1
				FROM #arUnappliedCashTmp
				group by transaction_id, datefromparts(year(effective_date), month(effective_date), 1)
				having sum(amount) <> 0

				DECLARE @writeOffTemp table 
				(
					id int,
					invoice_id int, 
					apply_to_year_month datetime, 
					amount_for_auto_writeoff decimal(20,2),
					effective_date datetime null
				)

				IF @writeOffFlag = 1
				BEGIN
					;with bill_balance as 
					(
						select invoice_id, payer_id, sum(amount) as balance
						from #charge c
						group by invoice_id, payer_id
					),
					writeOffPerInvoice as
					(
						select  p.wrt_off_max_amt, p.payer_id, tvp.invoice_id
						, b.balance - tvp.amount as amount_for_auto_writeoff
						, CASE	WHEN (abs(b.balance - tvp.amount) <= abs(p.wrt_off_max_amt)) 
								THEN 1 ELSE 0 END
								AS write_off_flag
						from bill_balance b
						join @InvoicePaymentTable tvp on tvp.invoice_id = b.invoice_id
						join ar_lib_payers p on p.payer_id = b.payer_id
					)
					INSERT INTO	@writeOffTemp
					(
						id,
						invoice_id,
						amount_for_auto_writeoff,
						effective_date
					)
					SELECT MAX(tp.id), wo.invoice_id, MAX(wo.amount_for_auto_writeoff), 
					       DATEFROMPARTS(YEAR(MIN(c.effective_date)),MONTH(MIN(c.effective_date)),1) 
					FROM #transactionsPaymentTmp tp
					JOIN #charge c ON c.transaction_id=tp.charge_transaction_id
					JOIN writeOffPerInvoice wo ON wo.invoice_id = c.invoice_id
					WHERE wo.amount_for_auto_writeoff<>0 and wo.write_off_flag = 1
					GROUP BY wo.invoice_id
                    
					DECLARE @writeOffsPreAndPost table 
					(
					    invoice_id int NOT NULL,
					    client_id int NOT NULL,
					    payer_id int NOT NULL,
					    post_transition bit NOT NULL
					)

					INSERT INTO @writeOffsPreAndPost
					SELECT py.invoice_id, py.client_id, py.payer_id,
					CASE WHEN (c.invoice_id IS NULL AND  i.eff_date_to >= @cashAppTransitionDate)  OR
					          (c.invoice_id IS NOT NULL AND  c.effective_to_date >= @cashAppTransitionDate) THEN 1 
					          ELSE 0 
					          END AS post_transition
					FROM #invoicePayment py
					JOIN ar_invoice i on i.invoice_id = py.invoice_id
					LEFT JOIN ar_invoice_claim c ON c.invoice_id = i.invoice_id

					-- apply write-offs to pre-transition for claims
					UPDATE aph SET aph.writeoff_amount = wr.amount_for_auto_writeoff
					FROM #appliedPaymentHistoryTmp aph
					JOIN @writeOffsPreAndPost w ON w.client_id = aph.client_id
					    AND w.payer_id = aph.payer_id
					JOIN @writeOffTemp wr on wr.invoice_id = w.invoice_id
					    AND wr.effective_date = aph.applied_to_date
					WHERE w.post_transition = 0

					-- update mapping table where bit is 1
					UPDATE tp SET tp.amount_for_auto_writeoff=wt.amount_for_auto_writeoff * -1
					FROM #transactionsPaymentTmp tp
					JOIN @writeOffTemp wt ON tp.id=wt.id
					JOIN @writeOffsPreAndPost wpp on wpp.invoice_id = wt.invoice_id
					WHERE wpp.post_transition = 1
				END
				ELSE
				BEGIN
					IF EXISTS (SELECT TOP 1 1 FROM @InvoicePaymentTable  WHERE amount_for_auto_writeoff<>0)
					BEGIN
						INSERT INTO	@writeOffTemp
						(
							id,
							invoice_id,
							apply_to_year_month,
							amount_for_auto_writeoff
						)
						SELECT MAX(tp.id), ipt.invoice_id,ipt.apply_to_year_month, MAX(ipt.amount_for_auto_writeoff)
						FROM #transactionsPaymentTmp tp
						JOIN #charge c ON c.transaction_id=tp.charge_transaction_id
						JOIN @InvoicePaymentTable  ipt 
							ON c.invoice_id=ipt.invoice_id
								and c.apply_to_year_month = isnull(ipt.apply_to_year_month,0)
								and c.payer_id = ipt.payer_id
						WHERE ipt.amount_for_auto_writeoff<>0
						GROUP BY ipt.invoice_id, ipt.payer_id, ipt.apply_to_year_month

					    UPDATE tp SET tp.amount_for_auto_writeoff=wt.amount_for_auto_writeoff * -1
					    FROM #transactionsPaymentTmp tp
					    JOIN @writeOffTemp wt ON tp.id=wt.id
					END
				END

				INSERT INTO ar_transactions_payment
				(
				  charge_transaction_id,
				  payment_transaction_id,
				  amount,
				  amount_for_auto_writeoff,
				  created_by,
				  created_date,
				  revision_by,
				  revision_date
				)
				SELECT charge_transaction_id, payment_transaction_id,
					amount, amount_for_auto_writeoff, @user, @curDate, @user, @curDate
				FROM #transactionsPaymentTmp

				INSERT INTO @theAuditDetails(
					invoice_id,
					apply_to_year_month,
					payment_transaction_id,
					changing_desc,
					action,
					record_amount
				)
				SELECT invoice_id, apply_to_year_month,  @paymentTransactionId, 'apply_payment_by_invoice:insert new payment mapping.', 'CREATE', amount
				FROM @InvoicePaymentTable
				WHERE invoice_id<>-1

				IF (@zeroTransactionsFlag = 0 or @appliedPaymentReserveIdsExists =1)
				BEGIN

				IF (@zeroTransactionsFlag = 0)
				BEGIN
					EXEC sproc_ar_deleteAppliedPaymentHistoryByTransactionId @paymentTransactionId, @facId, @user
					END

 					INSERT INTO ar_applied_payment_history 
					(applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,client_id,payer_id,applied_to_date,distribution_id,amount,OpenClose_flag,writeoff_amount,include_transaction_payment) 
					SELECT applied_payment_id,fac_id,deleted,created_by,created_date,revision_by,revision_date,transaction_id,client_id,payer_id,applied_to_date,distribution_id,amount,OpenClose_flag,writeoff_amount,include_transaction_payment
					FROM #appliedPaymentHistoryTmp
				END
								
				-- Create audit records for saving
				declare @touchedRecords TouchedRecordTableType
				INSERT into @touchedRecords
					(fac_id, client_or_mpi_id, item_id, description, action, field_detail)
				SELECT @facId, @clientId, @paymentTransactionId, changing_desc, action, 
					(SELECT * FROM (SELECT CONVERT(VARCHAR(10), invoice_id) AS newValue, 'invoice_id' AS name
						UNION
						SELECT LEFT(CONVERT(VARCHAR, apply_to_year_month,120),10) AS newValue, 'apply_to_year_month' AS name
						UNION
						SELECT CONVERT(VARCHAR(10), payment_transaction_id) AS newValue, 'payment_transaction_id' AS name
						UNION
						SELECT CONVERT(VARCHAR(20), record_amount) AS newValue, 'amount' AS name) tmp_fld_detail
						FOR XML RAW('field')) AS field_detail
				FROM  @theAuditDetails
				
				-- TODO: the audit entry is incorrect if paying a non payable charge (ie. unbilled in current or future posting month)
				--		 in this case, the audit entry still shows the amount going towards the unbilled month, even though it has been applied to unapplied cash instead
				-- CORE-79750: Commenting out auditing as a workaround to the deadlock issue
				-- exec sproc_core_audit_client_set_field_details @touchedRecords
			COMMIT TRAN
		END

		SELECT @result_message as result_message

		-- only return this when posting cash with autowriteoffs
		IF (@zeroTransactionsFlag = 1 and @appliedPaymentReserveIdsExists =1)
		BEGIN
			SELECT applied_payment_id, transaction_id, payer_id, applied_to_date, amount from #appliedPaymentHistoryTmp where include_transaction_payment = 1
		END

		SELECT @status_code = 0
	END TRY

	BEGIN CATCH
		IF @@trancount > 0
		begin
			ROLLBACK TRAN
		End

		SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()
		SELECT @status_code = 1

	END CATCH

--program success return
PgmSuccess:
IF @status_code = 0 AND @DebugMe = 'Y'
BEGIN
   PRINT 'Successful execution of stored procedure'
END

--program failure return
PgmAbend:
BEGIN
    IF @status_code = 1 AND @DebugMe = 'Y'
	BEGIN
            PRINT 'Stored procedure failure:   ' + convert(varchar(26),getdate(),109)
            PRINT 'Error code: '+convert(varchar(10),@error_code) + '; Error description:   ' +@status_text
    END
END
GO

GRANT EXECUTE ON dbo.sproc_ar_apply_payments_to_invoice TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_apply_payments_to_invoice.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_apply_payments_to_invoice.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_cash_data_integrity_check.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =================================================================================
-- Jira #:               CORE-62293
--
-- Written By:           Justin Pitters

-- Reviewed By:          David Bretzlaff
--
-- Script Type:          DML
-- Target DB Type:       CLIENT
-- Target ENVIRONMENT:   BOTH
--
--
-- Re-Runable:           YES
--
-- Where tested:         172.16.10.119,1689 (Optimystic DEV DB)
--						 ORG: agrd
--
-- Staging Recommendations/Warnings:
--
-- Description of Script Function:
-- Run validations against the new open item cash tables to verify integrity of the data.

/*
    SAMPLE EXECUTION:

    STEPS:

    010. Get the change tracking version and run id at the time the job was previously run
    020. Get the current change tracking version
    030. Get list of transactions that have changed since the last job run
    040. Do validation checks
	     041. Validate paid_status_code for changed transactions
		 042. Validate amount in changed cash transaction matches with applied payment history
    050. Insert new record into data integrity job run table
    060. Insert invalid charges into error summary table
    070. Insert invalid charges into error detail table
*/


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id(N'sproc_ar_cash_data_integrity_check'))
BEGIN
    DROP PROCEDURE sproc_ar_cash_data_integrity_check
END
GO

CREATE PROCEDURE sproc_ar_cash_data_integrity_check
(
      @DebugMe CHAR(1) = 'N'
    , @status_code int  out
    , @status_text varchar(3000) out
)
AS
BEGIN

    SET NOCOUNT ON

    DECLARE @debug bit = 0
    DECLARE @step VARCHAR(5) = '0'

    IF @debugMe = 'Y'
    BEGIN
	    SET @debug = 1
    END

    CREATE TABLE #changedTransactions
    (
      transaction_id INT NOT NULL,
      amount MONEY NOT NULL,
      paid_status_code CHAR(1) NULL,
      change_version BIGINT NOT NULL,
      change_operation NCHAR(1) NOT NULL,
      deleted CHAR NOT NULL,
	  trust_amount MONEY NULL,
	  transaction_type VARCHAR(2) NULL,
	  distribution_tx_id INT NULL,
	  payer_id INT NULL,
	  client_id INT NULL,
      INDEX #changedTransactions__transactionId_CL_IX CLUSTERED (transaction_id)
    )

    CREATE TABLE #errorDetails
    (
      transaction_id INT NOT NULL,
      transaction_amount MONEY NOT NULL,
      transaction_payment_total MONEY NULL,
      paid_status_code CHAR(1) NULL,
	  validation_type_id INT NOT NULL,
	  applied_payment_total MONEY NULL
    )

    CREATE TABLE #changedCharges
    (
        transaction_id INT,
        transaction_amount MONEY,
        transaction_payment_total MONEY,
        paid_status_code CHAR(1)
    )

	DECLARE @errorIdTable TABLE (error_id INT, validation_type_id INT)

    BEGIN TRY

        --------------------------------------------------
        -- 010. Get the change tracking version and run id at the time the job was previously run
        --------------------------------------------------
        SET @step = '010'

        DECLARE @previousChangeTrackingVersion bigint = null
        DECLARE @currentRunId TABLE (run_id INT)
        SELECT @previousChangeTrackingVersion = change_tracking_version
        FROM
        (
            SELECT top 1 change_tracking_version
            FROM ar_cash_data_integrity_job_run
            ORDER BY change_tracking_version DESC
        ) x

        --------------------------------------------------
        -- 020. Get the current change tracking version
        --------------------------------------------------
        SET @step = '020'

        DECLARE @currentChangeTrackingVersion BIGINT = (SELECT CHANGE_TRACKING_CURRENT_VERSION())

        IF @debug = 1
        BEGIN
            SELECT '@previousChangeTrackingVersion', @previousChangeTrackingVersion
            SELECT '@currentChangeTrackingVersion', @currentChangeTrackingVersion
        END

        --------------------------------------------------
        -- 030. Get list of transactions that have changed since the last job run
        --------------------------------------------------
        SET @step = '030'

        CREATE TABLE #tmpChanged (transaction_id INT, change_version BIGINT, change_operation NCHAR)
        INSERT INTO #tmpChanged (transaction_id, change_version, change_operation)
        SELECT transaction_id, change_version, change_operation
        FROM dbo.fn_ar_getChangedTransactions(@previousChangeTrackingVersion)

        INSERT INTO #changedTransactions (
			transaction_id, amount, paid_status_code, change_version, change_operation, deleted, trust_amount, transaction_type,
			distribution_tx_id, payer_id, client_id
		)
        SELECT 
			ct.transaction_id, t.amount, t.paid_status_code, ct.change_version, ct.change_operation, t.deleted, ISNULL(t.trust_amount, 0), t.transaction_type,
			t.distribution_tx_id, t.payer_id, t.client_id
        FROM #tmpChanged ct
        JOIN ar_transactions t with(NOLOCK) on t.transaction_id = ct.transaction_id
        WHERE t.transaction_date IS NOT NULL
			AND t.deleted = 'N'
			AND t.payer_id IS NOT NULL

        IF @debug = 1
        BEGIN
            SELECT '#changedTransactions', * FROM #changedTransactions
        END

		SET @step = '040'
        
		--------------------------------------------------
        -- 041. Validate paid_status_code for changed transactions
        --------------------------------------------------
		SET @step = '041'
		
		DECLARE @paidStatusTypeId INT = (SELECT validation_type_id FROM ar_cash_data_integrity_validation_type WHERE name='paid_status_code_check')
		
        INSERT INTO #changedCharges (transaction_id, transaction_amount, transaction_payment_total, paid_status_code)
        SELECT charge.transaction_id as transaction_id, max(charge.amount) as transaction_amount,
	            sum(map.amount) as transaction_payment_total, max(charge.paid_status_code) as paid_status_code
        FROM #changedTransactions charge
        LEFT JOIN ar_transactions_payment map with(NOLOCK) on charge.transaction_id = map.charge_transaction_id
        WHERE map.posting_date IS NOT NULL
        GROUP BY charge.transaction_id
        
        ; WITH invalidCharges AS
        (
	            SELECT *, CASE WHEN (#changedCharges.transaction_amount + ISNULL(#changedCharges.transaction_payment_total,0)) = 0  THEN 'F'
	                           WHEN (#changedCharges.transaction_amount + ISNULL(#changedCharges.transaction_payment_total,0)) = #changedCharges.transaction_amount THEN 'N'
                               ELSE 'P' END
		        as recalculated_status
	            FROM #changedCharges
        )
        INSERT INTO #errorDetails (validation_type_id, transaction_id, transaction_amount, transaction_payment_total, paid_status_code)
        SELECT @paidStatusTypeId, transaction_id, transaction_amount, transaction_payment_total, paid_status_code
        FROM invalidCharges
        WHERE ISNULL(paid_status_code,'N') <> invalidCharges.recalculated_status

		-------------------------------------------------------------------------
        -- 042. Validate cash transaction amount matches applied payment history
        -------------------------------------------------------------------------
		SET @step = '042'
		
		-- remove trust transfer
		DELETE FROM tfer
		FROM #changedTransactions tfer
		INNER JOIN dbo.ar_transactions ptx with(NOLOCK)
			ON tfer.distribution_tx_id = ptx.transaction_id		
		LEFT JOIN dbo.ar_applied_payment_history pay with(NOLOCK)
			ON tfer.transaction_id = pay.transaction_id
		WHERE pay.transaction_id IS NULL
			AND ptx.deleted = 'N' 
			AND ptx.payer_id = tfer.payer_id
			AND ptx.client_id = tfer.client_id
		
		DECLARE @txAndAppliedPaymentTypeId INT = (SELECT validation_type_id FROM ar_cash_data_integrity_validation_type WHERE name='cash_transaction_match_applied_payment_history_check')
		
		INSERT INTO #errorDetails (validation_type_id, transaction_id, transaction_amount, applied_payment_total)
		SELECT @txAndAppliedPaymentTypeId, t.transaction_id, (MAX(t.amount) - MAX(t.trust_amount)) AS transaction_amount, isnull(SUM(aph.amount),0) * -1 AS applied_payment_total
		FROM #changedTransactions t 
		LEFT JOIN ar_applied_payment_history aph
			ON aph.transaction_id = t.transaction_id
		WHERE isnull(aph.deleted,'N') = 'N'
			AND t.transaction_type = 'C'
		GROUP BY t.transaction_id
		HAVING (MAX(t.amount) - MAX(t.trust_amount)) <> (ISNULL(SUM(aph.amount),0) * -1)
		
        IF @debug = 1
        BEGIN
            SELECT '#errorDetails', * FROM #errorDetails
        END

        BEGIN TRAN
            --------------------------------------------------
            -- 050. Insert new record into data integrity job run table
            --------------------------------------------------
            SET @step = '050'

            INSERT INTO ar_cash_data_integrity_job_run (run_by, run_date, change_tracking_version)
            OUTPUT INSERTED.run_id into @currentRunId
            VALUES ('_system_', getDate(), @currentChangeTrackingVersion)

            IF @debug = 1
            BEGIN
                SELECT 'Updated job runs', * FROM ar_cash_data_integrity_job_run ORDER BY run_id DESC
            END

            IF EXISTS (SELECT 1 FROM #errorDetails)
            BEGIN

                --------------------------------------------------
                -- 060. Insert into error summary table
                --------------------------------------------------
                SET @step = '060'

				DECLARE @maxRunId INT = (SELECT MAX(run_id) FROM @currentRunId)
				
                INSERT INTO ar_cash_data_integrity_error_summary(run_id, validation_type_id, error_count)
                OUTPUT INSERTED.error_id, INSERTED.validation_type_id into @errorIdTable
                SELECT @maxRunId, validation_type_id, count(transaction_id) FROM #errorDetails GROUP BY validation_type_id
				
                --------------------------------------------------
                -- 070. Insert into error detail table
                --------------------------------------------------
                SET @step = '070'

                INSERT INTO ar_cash_data_integrity_error_detail (error_id, transaction_id, transaction_amount, transaction_payment_total, applied_payment_total, paid_status_code)
                SELECT ei.error_id, transaction_id, transaction_amount, transaction_payment_total, applied_payment_total, paid_status_code
                FROM #errorDetails ed
				JOIN @errorIdTable ei
					ON ed.validation_type_id = ei.validation_type_id

            END

        IF @debug = 1
        BEGIN
            SELECT 'ar_cash_data_integrity_error_summary', * FROM ar_cash_data_integrity_error_summary ORDER BY error_id DESC
            SELECT 'ar_cash_data_integrity_error_detail', * FROM ar_cash_data_integrity_error_detail ORDER BY error_detail_id DESC
        END

        COMMIT TRAN
    END TRY
    BEGIN CATCH
        IF @@trancount > 0 ROLLBACK TRAN
        SELECT @status_text = IIF(@status_text IS NULL, 'ERROR on step' + @step + '. ', '') + ERROR_MESSAGE()
             , @status_code = 1;
        IF @debug=1
            Print 'Stored procedure failure in step: ' + @step + '; Error description:  ' + @status_text
        ;THROW 50001, @status_text, 1;
    END CATCH

END
GO

GRANT EXECUTE ON sproc_ar_cash_data_integrity_check TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_cash_data_integrity_check.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_cash_data_integrity_check.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_get_reserved_applied_payment_ids_by_batch.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


	-- =================================================================================
-- Jira #:
--
-- Written By:           Shawn Song
-- Reviewed By:
--
-- Script Type:          Stored Procedure
-- Target DB Type:       CLIENT
-- Target ENVIRONMENT:   BOTH
--
-- Re-Runable:           YES
--
-- Where tested:         172.16.10.119,1689 (Avengers DEV DB)
--						 ORG: agrd
--
-- Staging Recommendations/Warnings:
--
-- Description of Script Function:
-- Get list of reserved applied payment ids to be used for creating applied payment history when paying bills
--
-- Sample execution (agrd):
-- DECLARE @status_code int, @status_text varchar(3000)
-- EXEC sproc_ar_get_reserved_applied_payment_ids_by_batch 492820, 1,1, 'N', @status_code, @status_text
-- =================================================================================

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id(N'sproc_ar_get_reserved_applied_payment_ids_by_batch'))
BEGIN
    DROP PROCEDURE sproc_ar_get_reserved_applied_payment_ids_by_batch;
END
GO

CREATE PROCEDURE sproc_ar_get_reserved_applied_payment_ids_by_batch
	( @batchId INT
	, @facId INT
	, @includeWriteOff bit
	, @DebugMe CHAR(1) = 'N'
	, @status_code int  out
	, @status_text varchar(3000) out
    )
AS
BEGIN
	DECLARE @error_code INT
		   ,@result_message varchar(200)

	SET NOCOUNT ON

	CREATE TABLE #clientPayerInvoice
	(
	  ident int identity(0,1),
	  transaction_id INT NOT NULL,
	  distribution_tx_id INT NOT NULL,
	  unique_month date not null
	)
	
	DECLARE @appliedPaymentId int
	DECLARE	@numUniqueEffectiveMonths int

	;with transactionsAndInvoices AS
	(
		select t.transaction_id, isnull(t.distribution_tx_id, t.transaction_id) as distribution_tx_id, ct.invoice_id
		from ar_transactions t
		JOIN ar_transactions_payment p ON p.payment_transaction_id=t.transaction_id 
		JOIN ar_transactions ct ON ct.transaction_id=p.charge_transaction_id 
		WHERE t.fac_id=@facId and t.deleted='N' AND t.batch_id=@batchId 
			and ct.invoice_id > 0
			AND (@includeWriteOff=0 OR (p.amount_for_auto_writeoff is not null AND p.amount_for_auto_writeoff<>0.0 )) 
		GROUP BY t.transaction_id, t.distribution_tx_id, ct.invoice_id
	)
	INSERT INTO #clientPayerInvoice
	(
	  transaction_id,
	  distribution_tx_id,
	  unique_month
	)
	select ti.transaction_id, ti.distribution_tx_id, (DATEFROMPARTS(YEAR(ct.effective_date),MONTH(ct.effective_date),1)) as unique_month
	from ar_transactions ct
		join transactionsAndInvoices ti
			on ti.invoice_id = ct.invoice_id
				and ct.fac_id = @facId
				and ct.deleted = 'N'
	group by ti.transaction_id, ti.distribution_tx_id, (DATEFROMPARTS(YEAR(ct.effective_date),MONTH(ct.effective_date),1))
	union
	select t.transaction_id, isnull(t.distribution_tx_id, t.transaction_id) as distribution_tx_id,   DATEFROMPARTS(year(ct.effective_date), month(ct.effective_date), 1)  as effective_date_month
		from ar_transactions t
		JOIN ar_transactions_payment p ON p.payment_transaction_id=t.transaction_id 
		JOIN ar_transactions ct ON ct.transaction_id=p.charge_transaction_id 
		WHERE t.fac_id=@facId and t.deleted='N' AND t.batch_id=@batchId 
			AND (@includeWriteOff=0 OR (p.amount_for_auto_writeoff is not null AND p.amount_for_auto_writeoff<>0.0 )) 
			and isnull(ct.invoice_id,-999) = -999
		GROUP BY t.transaction_id, t.distribution_tx_id, DATEFROMPARTS(year(ct.effective_date), month(ct.effective_date), 1) 
	order by distribution_tx_id, transaction_id

	SELECT @numUniqueEffectiveMonths = count(*) from #clientPayerInvoice

	IF @numUniqueEffectiveMonths > 0 
	BEGIN 
		SELECT @numUniqueEffectiveMonths = @numUniqueEffectiveMonths * 2
		execute get_next_primary_key 'ar_applied_payment_history', 'applied_payment_id', @appliedPaymentId OUTPUT, @numUniqueEffectiveMonths
	END

	select distribution_tx_id, count(unique_month)*2 as reserved_num, @appliedPaymentId + MIN(ident)*2  AS applied_payment_id 
	from #clientPayerInvoice
	group by distribution_tx_id
END
GO

GRANT EXECUTE ON dbo.sproc_ar_get_reserved_applied_payment_ids_by_batch TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_get_reserved_applied_payment_ids_by_batch.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_get_reserved_applied_payment_ids_by_batch.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getLastRealClaimDatesForClientsByPayer.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE-98002:        sproc_ar_list_getLastRealClaimDatesForClientsByPayer.sql
--						  
-- Written By:            Jimmy Zhang
-- Reviewed By:           Daniel Chen
-- 
-- Script Type:           DDL 
-- Target DB Type:        Client
-- Target Environment:    Both
-- 
-- 
-- Re-Runable:            YES 
-- 
-- Description of Script: get last real claim dates for clients by payer
-- 
-- Special Instruction: None
----Sample Execution 
-- DECLARE @TableVar1 OneColumnOfStringTableType
-- INSERT INTO @TableVar1 VALUES ('3'),('4')
-- DECLARE @TableVar2 OneColumnOfIntTableType
-- INSERT INTO @TableVar2 VALUES (25568),(458),(6),(21418),(608),(4),(732),(18708),(108),(25988),(19728),(8879);
-- DECLARE @status_code int 
-- DECLARE @status_text varchar(3000) 
-- EXEC dbo.sproc_ar_list_getLastRealClaimDatesForClientsByPayer
--  @facId = 1
--, @billForm = 'UB92'
--, @filterType = 1
-- ,@filterValueTable  = @TableVar1
--, @effectiveDate = '2020-01-01'
--, @clientIds = @TableVar2 
--, @debug = 'N' 
--, @status_code = @status_code  
--, @status_text = @status_text
-- =================================================================================
IF EXISTS (SELECT 1
           FROM INFORMATION_SCHEMA.ROUTINES
           WHERE ROUTINE_SCHEMA = 'dbo' 
             AND ROUTINE_NAME = 'sproc_ar_list_getLastRealClaimDatesForClientsByPayer' 
             AND ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_ar_list_getLastRealClaimDatesForClientsByPayer;
END
GO

SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
 
CREATE PROCEDURE dbo.sproc_ar_list_getLastRealClaimDatesForClientsByPayer

  @facId int
, @billForm varchar(10)
, @filterType  INT 
, @filterValueTable   dbo.OneColumnOfStringTableType ReadOnly
, @effectiveDate datetime
, @clientIds OneColumnOfIntTableType READONLY
, @debug char(1) = 'N' 
, @status_code int = 0 OUT  
, @status_text varchar(3000) = '' OUT

AS
BEGIN

SET NOCOUNT ON

DECLARE @vFacId int = @facId,
       @vBillForm varchar(10) = @billForm,
       @vFilterType INT = @filterType,
       @vEffectiveDate datetime = @effectiveDate,
       @errorCode int

DECLARE @clientIdTable table 
(
    client_id int,
    fac_id int
)

CREATE TABLE #temp_payer_id
(
  payer_id int
)

CREATE TABLE #temp_payer_type
(
  payer_type VARCHAR(20)
)

CREATE TABLE #temp_payer_rpt_grp
(
  payer_reporting_group int
)

IF(@vFilterType = 1)
BEGIN
  INSERT INTO #temp_payer_id
  (
    payer_id       
  )
  SELECT DISTINCT CAST(col1 AS INT) FROM @filterValueTable
END

IF(@vFilterType = 2)
BEGIN
  INSERT INTO #temp_payer_type
  (
    payer_type       
  )
  SELECT DISTINCT col1 FROM @filterValueTable
END

IF(@vFilterType = 3)
BEGIN
  INSERT INTO #temp_payer_rpt_grp
  (
    payer_reporting_group       
  )
  SELECT DISTINCT CAST(col1 AS INT) FROM @filterValueTable
END

  
BEGIN TRY
  INSERT INTO @clientIdTable
  (
      client_id,
      fac_id
  )
  SELECT col1, @vFacId FROM @clientIds
  
  SELECT
      MAX(invoice.eff_date_from) AS eff_date_from
     ,MAX(invoice.eff_date_to) AS eff_date_to
     ,t.client_id AS client_id
     ,t.payer_id AS payer_id
  FROM ar_transactions t
  JOIN @clientIdTable cli
    ON cli.fac_id = t.fac_id
   AND cli.client_id = t.client_id
  LEFT JOIN ar_invoice invoice
    ON t.invoice_id = invoice.invoice_id
  LEFT JOIN ar_lib_payers libpayer
    ON t.payer_id = libpayer.payer_id
       AND (libpayer.deleted = 'N')
  LEFT JOIN #temp_payer_id pr ON t.payer_id = pr.payer_id   
  LEFT JOIN #temp_payer_type pt ON pt.payer_type = libpayer.payer_type
  LEFT JOIN #temp_payer_rpt_grp pg ON pg.payer_reporting_group = libpayer.payer_reporting_group 
  WHERE (@vFilterType IS NULL 
         OR (@vFilterType = 1 AND pr.payer_id IS NOT NULL)
         OR (@vFilterType = 2 AND pt.payer_type IS NOT NULL)
         OR (@vFilterType = 3 AND pg.payer_reporting_group IS NOT NULL))
    AND libpayer.bill_form = @vBillForm
    AND (t.invoice_id IS NOT NULL
         AND t.invoice_id <> -999)
    AND t.transaction_type <> 'C'
    AND t.transaction_date IS NOT NULL
    AND t.effective_date < @vEffectiveDate
    AND ISNULL((SELECT TOP 1 1
                FROM ar_batch_errors
                WHERE ar_batch_errors.transaction_id = t.transaction_id
                  AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
                       OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))), 0) = 0
    AND t.deleted = 'N'
  GROUP BY t.client_id, t.payer_id
  ORDER BY t.client_id, t.payer_id
  OPTION (EXPAND VIEWS)
END TRY
BEGIN CATCH
  SELECT @errorCode = @@error, @status_text = ERROR_MESSAGE()
  SELECT @status_code = 1
  GOTO PgmAbend
END CATCH

SET @status_code = 0

--program success return
PgmSuccess:
BEGIN
  IF @status_code = 0 AND @debug='Y' 
    PRINT 'Successfull execution of stored procedure'    
END
  
--program failure return
PgmAbend:
BEGIN
  IF @status_code = 1 AND @debug='Y'
  BEGIN
    PRINT 'Stored procedure failure.    ' + convert(varchar(26),getdate())
    PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
  END 
END

END
GO
GRANT EXECUTE ON  dbo.sproc_ar_list_getLastRealClaimDatesForClientsByPayer TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_getLastRealClaimDatesForClientsByPayer.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getLastRealClaimDatesForClientsByPayer.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getPayerTypeAndProvByFilterType.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- Jira #:                CORE-98002             
--                           
-- Written By:            Daniel Chen
-- Reviewed By:           Jimmy Zhang
-- 
-- Script Type:           DDL 
-- Target DB Type:        Client
-- Target Environment:    Both
-- 
-- 
-- Re-Runable:            YES 
-- 
-- Description of Script: get payer type And prov state By Filter Type for first day discharge
-- 
-- Special Instruction:   None
--
--Sample Execution 
-- DECLARE @TableVar OneColumnOfStringTableType
-- INSERT INTO @TableVar VALUES ('3'),('4')

--DECLARE @status_code int, @status_text varchar(3000)
-- EXEC dbo.sproc_ar_list_getPayerTypeAndProvByFilterType
--  @facId = 1       
-- ,@filterType = 1 
-- ,@filterValueTable = @TableVar
-- ,@debug ='Y'
-- ,@status_code = @status_code
-- ,@status_text = @status_text
-- =================================================================================
IF EXISTS
(
    SELECT 1
    FROM INFORMATION_SCHEMA.ROUTINES
    WHERE ROUTINE_SCHEMA = 'dbo'
          AND ROUTINE_NAME = 'sproc_ar_list_getPayerTypeAndProvByFilterType'
          AND ROUTINE_TYPE = 'PROCEDURE'
)
BEGIN
    DROP PROCEDURE dbo.sproc_ar_list_getPayerTypeAndProvByFilterType;
END;
GO
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE dbo.sproc_ar_list_getPayerTypeAndProvByFilterType 
  @facId              INT 
 ,@filterType         INT 
 ,@filterValueTable   dbo.OneColumnOfStringTableType ReadOnly
 ,@debug char(1) = 'N'
 ,@status_code int = 0 OUT
 ,@status_text varchar(3000) = '' OUT
 
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @vFacId INT = @facId
    DECLARE @vFilterType INT = @filterType
    DECLARE @errorCode INT
              
  --create temp tables
    CREATE TABLE #temp_payer_id
    (
      payer_id int
    )
    
    CREATE TABLE #temp_payer_type
    (
      payer_type VARCHAR(20)
    )

    CREATE TABLE #temp_payer_rpt_grp
    (
      payer_reporting_group int
    )
    
    --prepare parameter to temp table    
    IF(@vFilterType = 1)
    BEGIN
      INSERT INTO #temp_payer_id
      (
        payer_id       
      )
      SELECT DISTINCT CAST(col1 AS INT) FROM @filterValueTable
    END
    
    IF(@vFilterType = 2)
    BEGIN
      INSERT INTO #temp_payer_type
      (
        payer_type       
      )
      SELECT DISTINCT col1 FROM @filterValueTable
    END
    
    IF(@vFilterType = 3)
    BEGIN
      INSERT INTO #temp_payer_rpt_grp
      (
        payer_reporting_group       
      )
      SELECT DISTINCT CAST(col1 AS INT) FROM @filterValueTable
    END
    
    BEGIN TRY
      SELECT 
          ap.payer_id, 
          lp.payer_type, 
          ap.prov_state_rules_code
       FROM ar_lib_payers lp join ar_payers ap on ap.payer_id = lp.payer_id  
         LEFT JOIN #temp_payer_id pr ON ap.payer_id = pr.payer_id   
         LEFT JOIN #temp_payer_type pt ON pt.payer_type = lp.payer_type
         LEFT JOIN #temp_payer_rpt_grp pg ON pg.payer_reporting_group = lp.payer_reporting_group 
       WHERE lp.bill_form = 'UB92' 
          AND ap.fac_id = @vFacId 
          AND lp.deleted ='N' 
          AND (@vFilterType IS NULL 
           OR (@vFilterType = 1 AND pr.payer_id IS NOT NULL)
           OR (@vFilterType = 2 AND pt.payer_type IS NOT NULL)
           OR (@vFilterType = 3 AND pg.payer_reporting_group IS NOT NULL))
  END TRY
	BEGIN CATCH
	  SELECT @errorCode = @@error, @status_text = ERROR_MESSAGE()
	  SELECT @status_code = 1
	  GOTO PgmAbend
	END CATCH

	SET @status_code = 0
	
	PgmSuccess:
	BEGIN
	  IF @status_code = 0 AND @debug='Y' 
		PRINT 'Successfull execution of stored procedure'    
	END
	  
	PgmAbend:
	BEGIN
	  IF @status_code = 1 AND @debug='Y'
	  BEGIN
		PRINT 'Stored procedure failure. ' + convert(varchar(26),getdate())
		PRINT 'Error code: '+ CAST(@errorCode AS VARCHAR) + '; Error description:    ' + @status_text
	  END 
	END	       
END
GO
GRANT EXECUTE ON dbo.sproc_ar_list_getPayerTypeAndProvByFilterType TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_getPayerTypeAndProvByFilterType.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getPayerTypeAndProvByFilterType.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- Jira #:                CORE-94230             
--                           
-- Written By:            Daniel Chen
-- Reviewed By:           Jimmy Zhang
-- 
-- Script Type:           DDL 
-- Target DB Type:        Client
-- Target Environment:    Both
-- 
-- 
-- Re-Runable:            YES 
-- 
-- Description of Script: get unbilled UB clients list
-- 
-- Special Instruction:   None
--
--Sample Execution 
--EXEC dbo.sproc_ar_list_getUnbilledUBClients
--  @facId = 1       
-- ,@filterType = 1 
-- ,@filterValue  = '3'
-- ,@startDate = '2014-02-28'
-- ,@toDate = '2021-08-01'   
-- ,@excludeTrialFlag = 1
-- =================================================================================
IF EXISTS
(
    SELECT 1
    FROM INFORMATION_SCHEMA.ROUTINES
    WHERE ROUTINE_SCHEMA = 'dbo'
          AND ROUTINE_NAME = 'sproc_ar_list_getUnbilledUBClients'
          AND ROUTINE_TYPE = 'PROCEDURE'
)
BEGIN
    DROP PROCEDURE dbo.sproc_ar_list_getUnbilledUBClients;
END;
GO
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE dbo.sproc_ar_list_getUnbilledUBClients 

  @facId        INT 
 ,@filterType   INT 
 ,@filterValue  VARCHAR(MAX)
 ,@startDate    DATETIME
 ,@toDate       DATETIME
 ,@excludeTrialFlag BIT
 
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @vFacId INT = @facId
    DECLARE @vFilterType INT = @filterType
    DECLARE @vFilterValue VARCHAR(MAX) = @filterValue
    DECLARE @vStartDate DATETIME = @startDate
    DECLARE @vToDate DATETIME = @toDate
    DECLARE @vExcludeTrialFlag BIT = @excludeTrialFlag
           
  --create temp tables
    CREATE TABLE #temp_unbilled_tx
    (
      transaction_id int,
      effective_date datetime,
      client_id int,
      payer_id int
    )

    CREATE TABLE #temp_qualified_unbilled_tx
    (
      transaction_id int,
      effective_date datetime,
      client_id int,
      payer_id int
    )

    CREATE TABLE #temp_payer_id
    (
      payer_id int
    )
    
    CREATE TABLE #temp_payer_type
    (
      payer_type VARCHAR(20)
    )

    CREATE TABLE #temp_payer_rpt_grp
    (
      payer_reporting_group int
    )
    
    --prepare parameter to temp table
    IF(@vFilterType = 1)
    BEGIN
      INSERT INTO #temp_payer_id
      (
        payer_id       
      )
      SELECT DISTINCT VALUE FROM pcc__csvToTableOfStrings(@vFilterValue)
    END
    
    IF(@vFilterType = 2)
    BEGIN
      INSERT INTO #temp_payer_type
      (
        payer_type       
      )
      SELECT DISTINCT VALUE FROM pcc__csvToTableOfStrings(@vFilterValue)
    END
    
    IF(@vFilterType = 3)
    BEGIN
      INSERT INTO #temp_payer_rpt_grp
      (
        payer_reporting_group       
      )
      SELECT DISTINCT VALUE FROM pcc__csvToTableOfStrings(@vFilterValue)
    END
            
    -- get all unbilled UB clients
    INSERT INTO #temp_unbilled_tx
    (
      transaction_id,
      effective_date,
      payer_id, 
      client_id
    )
    SELECT
         tx.transaction_Id,
         tx.effective_date,
         tx.payer_id,
         tx.client_id
      FROM AR_TRANSACTIONS tx
           LEFT JOIN AR_INVOICE trialinvoice ON tx.trial_invoice_id = trialinvoice.invoice_id
                                                AND trialinvoice.deleted = 'N'
           LEFT JOIN AR_PAYERS arpayer ON tx.payer_id = arpayer.payer_id
                                          AND tx.fac_id = arpayer.fac_id
           LEFT JOIN AR_INVOICE invoice ON tx.invoice_id = invoice.invoice_id
           JOIN AR_LIB_PAYERS libpayer ON tx.payer_id = libpayer.payer_id
                                               AND libpayer.deleted = 'N'
           LEFT JOIN #temp_payer_id pr ON tx.payer_id = pr.payer_id
           LEFT JOIN #temp_payer_type pt ON pt.payer_type = libpayer.payer_type
           LEFT JOIN #temp_payer_rpt_grp pg ON pg.payer_reporting_group = libpayer.payer_reporting_group 
      WHERE (@vExcludeTrialFlag = 0 OR (@vExcludeTrialFlag = 1 and (tx.trial_invoice_id IS NULL
              OR tx.revision_date > trialinvoice.revision_date)))
             AND libpayer.bill_form = 'UB92'
             AND tx.INVOICE_ID IS NULL
             AND tx.transaction_type NOT IN('X', 'C')
      AND (@vFilterType IS NULL 
           OR (@vFilterType = 1 AND pr.payer_id IS NOT NULL)
           OR (@vFilterType = 2 AND pt.payer_type IS NOT NULL)
           OR (@vFilterType = 3 AND pg.payer_reporting_group IS NOT NULL))
      AND tx.TRANSACTION_DATE IS NOT NULL
      AND (tx.distribution_tx_id IS NULL
           OR tx.distribution_tx_id = tx.transaction_id)
      AND tx.REVERSING_TX_ID IS NULL
      AND tx.EFFECTIVE_DATE < @vToDate
      AND tx.EFFECTIVE_DATE > @vStartDate
      AND (CASE
        WHEN EXISTS
        (
            SELECT *
            FROM ar_batch_errors
            WHERE ar_batch_errors.transaction_id = tx.transaction_id
                  AND ((warning_flag = 'N'
                        AND field_code LIKE 'IE%')
                       OR (warning_flag = 'Y'
                           AND field_code LIKE 'IW%'))
        )
             THEN 1
             ELSE 0
             END) = '0'
      AND tx.FAC_ID = @vFacId
           AND tx.DELETED = 'N'
    order by tx.client_id,tx.payer_id,tx.effective_date

    -- filter out tx in real bill period
    INSERT INTO #temp_qualified_unbilled_tx
    (
        transaction_id,
        effective_date,
        client_id,
        payer_id
    )
    SELECT 
        tx.transaction_id,
        tx.effective_date,
        tx.client_id, 
        tx.payer_id
    FROM #temp_unbilled_tx tx
    WHERE NOT EXISTS
     (
        SELECT 1
        FROM ar_invoice
           JOIN ar_invoice_claim ON ar_invoice.invoice_id = ar_invoice_claim.invoice_id
        WHERE ar_invoice.deleted = 'N'
           AND ar_invoice.trial_flag = 'N'
           AND ar_invoice.manual_flag = 'N'
           AND ar_invoice.original_invoice_id IS NULL
           AND ar_invoice.transaction_flag = 'Y'
           and ar_invoice.fac_id = @vFacId
           AND ar_invoice.client_id = tx.client_id
           AND ar_invoice.payer_id = tx.payer_id
           AND tx.effective_date >= ar_invoice_claim.effective_from_date
           AND tx.effective_date < DATEADD(day, 1, ar_invoice_claim.effective_to_date)
     )
    ORDER BY tx.transaction_id  
    
    DROP TABLE  #temp_unbilled_tx

    -- get client sum list
    SELECT SUM(tx.AMOUNT) AS claim_total, 
             MIN(qtx.EFFECTIVE_DATE) AS min_effective_date, 
             MAX(qtx.EFFECTIVE_DATE) AS max_effective_date, 
             billable_flag = CONVERT(BIT, 
             MIN(CASE
                 WHEN ISNULL(parentTransactionAssessmentInfo.pdpm_flag, 0) = 0
                      OR parentTransactionAssessmentInfo.hipps_code = 'ZZZZZ'
                      OR assess.STATUS IN('Accepted', 'Completed')
                 THEN 1
                 ELSE 0
                 END)),            
             mpi.last_name patient_last_name, 
             mpi.first_name patient_first_name, 
             client.client_id_number, 
             qtx.client_id, 
             libpayer.description AS payer_desc, 
             libpayer.payer_code, 
             libpayer.payer_type, 
             pps_flag = CONVERT(BIT, IIF(libpayer.pps_flag = 'Y', 1, 0)),
             libpayer.assessment_notifications_rates_flag, 
             libpayer.enforce_pps_updates_flag, 
             qtx.payer_id, 
             arpayer.bill_unk_flag AS payer_bill_unk_flag,              
             rateSchedule.is_reimbursement_use_hipps, 
             parentTransactionAssessmentInfo.hipps_code,
             tx.care_level,
             tx.transaction_type
      FROM AR_TRANSACTIONS tx
       JOIN #temp_qualified_unbilled_tx qtx on tx.transaction_id = qtx.transaction_id
           JOIN CLIENTS client ON qtx.client_id = client.client_id
           LEFT JOIN AR_PAYERS arpayer ON qtx.payer_id = arpayer.payer_id
                                          AND tx.fac_id = arpayer.fac_id
           LEFT JOIN MPI mpi ON client.mpi_id = mpi.mpi_id
                                AND (mpi.deleted = 'N')
           JOIN AR_LIB_PAYERS libpayer ON qtx.payer_id = libpayer.payer_id
                                               AND (libpayer.deleted = 'N')
           LEFT JOIN AR_TRANSACTION_ASSESSMENT_INFO transactionAssessmentInfo ON tx.transaction_id = transactionAssessmentInfo.transaction_id
           LEFT JOIN AR_TRANSACTION_ASSESSMENT_INFO parentTransactionAssessmentInfo ON tx.distribution_tx_id = parentTransactionAssessmentInfo.transaction_id
           LEFT JOIN AS_ASSESSMENT assess ON parentTransactionAssessmentInfo.pps_assessment_id = assess.assess_id
                                             AND (assess.deleted = 'N')
           LEFT JOIN ar_eff_rate_schedule rateSchedule ON tx.eff_schedule_id = rateSchedule.eff_schedule_id                                    
      GROUP BY mpi.last_name, 
              mpi.first_name, 
              client.client_id_number, 
              qtx.client_id, 
              libpayer.DESCRIPTION, 
              libpayer.payer_code, 
              libpayer.payer_type, 
              libpayer.pps_flag, 
              libpayer.assessment_notifications_rates_flag, 
              libpayer.enforce_pps_updates_flag, 
              qtx.PAYER_ID, 
              arpayer.bill_unk_flag, 
              rateSchedule.is_reimbursement_use_hipps, 
              parentTransactionAssessmentInfo.hipps_code,
              tx.care_level,
              tx.transaction_type
      ORDER BY mpi.last_name, 
               mpi.first_name, 
               client.client_id_number, 
               qtx.client_id, 
               libpayer.description, 
               libpayer.payer_code, 
               libpayer.payer_type, 
               libpayer.pps_flag, 
               libpayer.assessment_notifications_rates_flag, 
               libpayer.enforce_pps_updates_flag, 
               qtx.PAYER_ID, 
               arpayer.bill_unk_flag,
               rateSchedule.is_reimbursement_use_hipps, 
               parentTransactionAssessmentInfo.hipps_code,               
               tx.care_level, 
               tx.transaction_type
END
GO
GRANT EXECUTE ON dbo.sproc_ar_list_getUnbilledUBClients TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_getUnbilledUBClients.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =================================================================================
-- Jira #:              CORE-75857            
--
-- Written By:          Jimmy Zhang
-- Reviewed By:         
--  
-- Target DB Type:      CLIENT
-- Target ENVIRONMENT:  BOTH (US/CA) 
--
-- Re-Runable:          YES 
-- 
-- Description of Script Function: 
-- list all unbilled transactions by passed in client ids and payer ids
--  Special Instructions: 
-- ==================================================================
-- Sample execution: 
-- DECLARE @status_code int 
-- DECLARE @status_text varchar(3000) 
-- EXEC dbo.sproc_ar_list_unbilledTransactionsByClientsAndPayers 
-- @clientIdCSV = '1,2,3',
-- @payerIdCSV = '1,2,3',
-- @facId = 1,
-- @isHCR = 0,
-- @isRecalc = 0, 
-- @effFromDate = '2020-01-01',
-- @effToDate = '2020-01-31', 
-- @isUB = 1,
-- @isDeductable = 0
-- ================================================================== 

IF EXISTS (SELECT 1 FROM sysobjects WHERE name = 'sproc_ar_list_unbilledTransactionsByClientsAndPayers') 
BEGIN
  DROP PROCEDURE sproc_ar_list_unbilledTransactionsByClientsAndPayers
END
GO

CREATE PROCEDURE sproc_ar_list_unbilledTransactionsByClientsAndPayers
(
  @clientIdCSV varchar(max),
  @payerIdCSV varchar(max),
  @facId int,
  @isHCR bit,
  @isRecalc bit,  
  @effFromDate datetime, 
  @effToDate datetime, 
  @isUB bit,
  @isDeductable bit
)
AS
BEGIN
  declare @vFacId int = @facId
  declare @vClientIdCSV varchar(max) = @clientIdCSV
  declare @vPayerIdCSV varchar(max) = @payerIdCSV
  declare @vIsHCR bit = @isHCR
  declare @vEffFromDate datetime = @effFromDate
  declare @vEffToDate datetime = (SELECT DATEADD(s, -1, DATEADD(Day, DATEDIFF(Day, 0, @effToDate), 1)))
  declare @vEffToDateInTwoMonth datetime = (select DATEADD(m, DATEDIFF(m, 0, @effToDate) + 2, 0))
  declare @vIsRecalc bit = @isRecalc
  declare @vIsDeductable bit = @isDeductable
  
  declare @client_id table 
  (
    client_id int
  )
  
  declare @payer_id table 
  (
    payer_id int
  )
  
  INSERT INTO @client_id
  (
    client_id
  )
  SELECT VALUE 
  FROM pcc__csvToTableOfIntMax(@vClientIdCSV) sel 
  
  INSERT INTO @payer_id
  (
    payer_id
  )
  SELECT VALUE 
  FROM pcc__csvToTableOfIntMax(@vPayerIdCSV) sel 
  
  if (@isUB = 1)
  BEGIN
    if (@vIsDeductable = 1)
    BEGIN
      SELECT    
        SUM(t.AMOUNT) AS amount 
      FROM AR_TRANSACTIONS t
      JOIN @client_id clients
        ON t.client_id = clients.client_id
      JOIN @payer_id payers
        ON t.payer_id = payers.payer_id
      LEFT JOIN AR_PAYERS arpayer 
        ON t.payer_id = arpayer.payer_id 
       AND t.fac_id = arpayer.fac_id 
      LEFT JOIN AR_INVOICE invoice 
        ON t.invoice_id = invoice.invoice_id 
      LEFT JOIN AR_LIB_PAYERS libpayer 
        ON t.payer_id = libpayer.payer_id 
       AND (libpayer.deleted = 'N') 
      LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
        ON t.transaction_id = recurtrans.transaction_id 
      LEFT JOIN ar_recurring_transactions recurringtx 
        ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
       AND (recurringtx.deleted = 'N') 
      WHERE t.INVOICE_ID IS NULL 
        AND t.TRANSACTION_DATE IS NOT NULL 
        AND t.transaction_type = 'D'
        AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
        AND (@vEffToDate is null OR (t.EFFECTIVE_DATE <= @vEffToDate
            OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                AND libpayer.bill_in_advance = 'Y' 
      	      AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
            OR (@vIsHCR = 1 AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
      	      AND recurringtx.bill_in_advance = 'Y' 
      	      AND t.AUTO_GENERATED = 'R' 
      	      AND libpayer.bill_in_advance = 'Y')))) 
        AND not exists (SELECT 1
      	              FROM ar_invoice i 
      	              JOIN @client_id c
      	                ON c.client_id = i.client_id
      	              JOIN @payer_id p
      	                ON i.payer_id = p.payer_id
      	              JOIN ar_invoice_claim claim
      	              	ON i.invoice_id = claim.invoice_id
                        WHERE i.deleted = 'N'
                    	AND i.trial_flag = 'N'
                    	AND i.manual_flag = 'N'
                    	AND i.original_invoice_id IS NULL
                    	AND i.transaction_flag = 'Y'
                    	AND i.fac_id = t.fac_id
                    	AND i.client_id = t.client_id
                    	AND i.payer_id = t.payer_id
                    	AND t.effective_date >= CONVERT(DATE, claim.effective_from_date)
                    	AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, claim.effective_to_date))) 
        AND (@vIsRecalc = 1 
             OR (arpayer.allow_span_multiple_months = 'Y' 
                 OR (arpayer.allow_span_multiple_months = 'N' 
      		   AND t.trial_invoice_id IS NULL )))
        AND (isNull((SELECT TOP 1 1
      	           FROM ar_batch_errors
      	           WHERE ar_batch_errors.transaction_id = t.transaction_id
      	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
      	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
        AND t.FAC_ID = @vFacId
        AND t.DELETED = 'N'     
    END
    ELSE
    BEGIN
      SELECT      
        libpayer.recurring_ancillary_charges_type
        ,libpayer.pri_sec_payer AS payer_pri_sec
        ,libpayer.break_in_stay
        ,libpayer.payer_type
        ,libpayer.bill_form
        ,libpayer.outpatient_payer_type AS payer_outpatient_payer_type
        ,libpayer.outpatient_payer_state AS payer_outpatient_payer_state
        ,recurtrans.recurring_tx_id
        ,recurringtx.bill_in_advance AS recurring_bill_in_advance
        ,arpayer.bill_unk_flag AS payer_bill_unk_flag
        ,arpayer.group_txs_by
        ,arpayer.daily_rate_field
        ,arpayer.anc_rate_field
        ,arpayer.submitter_id
        ,arpayer.allow_span_multiple_months
        ,rateSchedule.is_reimbursement_use_hipps 
        ,parentTransactionAssessmentInfo.hipps_code 
        ,t.care_level
        ,t.parent_tx_type
        ,t.CLIENT_ID
        ,t.PAYER_ID
        ,t.EFFECTIVE_DATE
        ,t.TRANSACTION_ID
        ,t.AMOUNT
        ,t.transaction_type
        ,t.DAYS_AMOUNT
        ,t.FAC_ID
        ,t.REVERSING_TX_ID
        ,t.trial_invoice_id
        ,recurringtx.charge_frequency as recurring_charge_frequency
        ,recurringtx.days_amount AS recurring_days_amount
        ,recurringtx.prorate
        ,recurringtx.daily_rate as recurring_tx_daily_rate
      FROM AR_TRANSACTIONS t
      JOIN @client_id clients
        ON t.client_id = clients.client_id
      JOIN @payer_id payers
        ON t.payer_id = payers.payer_id
      LEFT JOIN AR_PAYERS arpayer 
        ON t.payer_id = arpayer.payer_id 
       AND t.fac_id = arpayer.fac_id 
      LEFT JOIN AR_INVOICE invoice 
        ON t.invoice_id = invoice.invoice_id 
      LEFT JOIN AR_LIB_PAYERS libpayer 
        ON t.payer_id = libpayer.payer_id 
       AND (libpayer.deleted = 'N') 
      LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
        ON t.transaction_id = recurtrans.transaction_id 
      LEFT JOIN ar_recurring_transactions recurringtx 
        ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
       AND (recurringtx.deleted = 'N') 
      LEFT JOIN AR_TRANSACTION_ASSESSMENT_INFO parentTransactionAssessmentInfo 
        ON t.distribution_tx_id = parentTransactionAssessmentInfo.transaction_id
      LEFT JOIN ar_eff_rate_schedule rateSchedule 
        ON t.eff_schedule_id = rateSchedule.eff_schedule_id
      WHERE t.INVOICE_ID IS NULL 
        AND t.TRANSACTION_DATE IS NOT NULL 
        AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
        AND (@vEffToDate is null OR (t.EFFECTIVE_DATE <= @vEffToDate
            OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                AND libpayer.bill_in_advance = 'Y' 
      	      AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
            OR (@vIsHCR = 1 AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
      	      AND recurringtx.bill_in_advance = 'Y' 
      	      AND t.AUTO_GENERATED = 'R' 
      	      AND libpayer.bill_in_advance = 'Y')))) 
        AND not exists (SELECT 1
      	              FROM ar_invoice i 
      	              JOIN @client_id c
      	                ON c.client_id = i.client_id
      	              JOIN @payer_id p
      	                ON i.payer_id = p.payer_id
      	              JOIN ar_invoice_claim claim
      	              	ON i.invoice_id = claim.invoice_id
                        WHERE i.deleted = 'N'
                    	AND i.trial_flag = 'N'
                    	AND i.manual_flag = 'N'
                    	AND i.original_invoice_id IS NULL
                    	AND i.transaction_flag = 'Y'
                    	AND i.fac_id = t.fac_id
                    	AND i.client_id = t.client_id
                    	AND i.payer_id = t.payer_id
                    	AND t.effective_date >= CONVERT(DATE, claim.effective_from_date)
                    	AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, claim.effective_to_date))) 
        AND (@vIsRecalc = 1 
             OR (arpayer.allow_span_multiple_months = 'Y' 
                 OR (arpayer.allow_span_multiple_months = 'N' 
      		   AND t.trial_invoice_id IS NULL )))
        AND (isNull((SELECT TOP 1 1
      	           FROM ar_batch_errors
      	           WHERE ar_batch_errors.transaction_id = t.transaction_id
      	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
      	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
        AND t.FAC_ID = @vFacId
        AND t.DELETED = 'N' 
      ORDER BY t.CLIENT_ID, t.PAYER_ID, t.EFFECTIVE_DATE, t.distribution_tx_id, t.TRANSACTION_ID
    END
  END
  ELSE
  BEGIN
    SELECT      
      libpayer.recurring_ancillary_charges_type
      ,libpayer.pri_sec_payer AS payer_pri_sec
      ,libpayer.break_in_stay
      ,libpayer.payer_type
      ,libpayer.bill_form
      ,libpayer.outpatient_payer_type AS payer_outpatient_payer_type
      ,libpayer.outpatient_payer_state AS payer_outpatient_payer_state
      ,recurtrans.recurring_tx_id
      ,recurringtx.bill_in_advance AS recurring_bill_in_advance
      ,arpayer.bill_unk_flag AS payer_bill_unk_flag
      ,arpayer.group_txs_by
      ,arpayer.daily_rate_field
      ,arpayer.anc_rate_field
      ,arpayer.submitter_id
      ,arpayer.allow_span_multiple_months
      ,t.care_level
      ,t.parent_tx_type
      ,t.CLIENT_ID
      ,t.PAYER_ID
      ,t.EFFECTIVE_DATE
      ,t.TRANSACTION_ID
      ,t.AMOUNT
      ,t.transaction_type
      ,t.DAYS_AMOUNT
      ,t.FAC_ID
      ,t.REVERSING_TX_ID
      ,t.trial_invoice_id
	  ,recurringtx.charge_frequency as recurring_charge_frequency
	  ,recurringtx.days_amount AS recurring_days_amount
	  ,recurringtx.prorate
	  ,recurringtx.daily_rate as recurring_tx_daily_rate
    FROM AR_TRANSACTIONS t
    JOIN @client_id clients
      ON t.client_id = clients.client_id
    JOIN @payer_id payers
      ON t.payer_id = payers.payer_id
    LEFT JOIN AR_PAYERS arpayer 
      ON t.payer_id = arpayer.payer_id 
     AND t.fac_id = arpayer.fac_id 
    LEFT JOIN AR_INVOICE invoice 
      ON t.invoice_id = invoice.invoice_id 
    LEFT JOIN AR_LIB_PAYERS libpayer 
      ON t.payer_id = libpayer.payer_id 
     AND (libpayer.deleted = 'N') 
    LEFT JOIN AR_TRANSACTION_RECURRING_TX_REFS recurtrans 
      ON t.transaction_id = recurtrans.transaction_id 
    LEFT JOIN ar_recurring_transactions recurringtx 
      ON recurtrans.recurring_tx_id = recurringtx.transaction_id 
     AND (recurringtx.deleted = 'N') 
    WHERE t.INVOICE_ID IS NULL 
      AND t.TRANSACTION_DATE IS NOT NULL 
      AND (@vEffFromDate is null OR t.effective_date >= @vEffFromDate)
      AND (@vEffToDate is null 
           OR (t.EFFECTIVE_DATE <= @vEffToDate
               OR (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
                   AND libpayer.bill_in_advance = 'Y' 
    	           AND (@vIsHCR = 0 OR t.AUTO_GENERATED <> 'R')) 
               OR (@vIsHCR = 1 
                   AND (t.EFFECTIVE_DATE < @vEffToDateInTwoMonth
    	                AND recurringtx.bill_in_advance = 'Y' 
    	                AND t.AUTO_GENERATED = 'R' 
    	                AND libpayer.bill_in_advance = 'Y')))) 
      AND not exists (SELECT 1
    	              FROM ar_invoice i 
    	              JOIN @client_id c
    	                ON c.client_id = i.client_id
    	              JOIN @payer_id p
    	                ON i.payer_id = p.payer_id
    	              WHERE i.deleted = 'N'
    	                AND i.trial_flag = 'N'
    	                AND i.manual_flag = 'N'
    	                AND i.original_invoice_id IS NULL
    	                AND i.transaction_flag = 'Y'
    	                AND i.fac_id = t.fac_id
    	                AND i.client_id = t.client_id
    	                AND i.payer_id = t.payer_id
    	                AND t.effective_date >= CONVERT(DATE, i.eff_date_from)
    	                AND t.effective_date < DATEADD(DAY, 1, CONVERT(DATE, i.eff_date_to))) 
      AND (isNull((SELECT TOP 1 1
    	           FROM ar_batch_errors
    	           WHERE ar_batch_errors.transaction_id = t.transaction_id
    	             AND ((warning_flag = 'N' AND field_code LIKE 'IE%')
    	                  OR (warning_flag = 'Y' AND field_code LIKE 'IW%'))),0)) = '0'  
      AND t.FAC_ID = @vFacId
      AND t.DELETED = 'N' 
    ORDER BY t.CLIENT_ID, t.PAYER_ID, t.EFFECTIVE_DATE, t.distribution_tx_id, t.TRANSACTION_ID
  END

END
GO

GRANT EXECUTE ON sproc_ar_list_unbilledTransactionsByClientsAndPayers TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_ar_list_unbilledTransactionsByClientsAndPayers.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pdpm_updateForUnlock.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
============================================================================================== 
Purpose:             update rates and census notifications

Target ENVIRONMENT:  BOTH
Target DB Type:      Client Database
Re-Runable:          YES

CORE-30183:          PDPM - Remove assessment link from census and rates when it is Inactivated/Close/Unlock
Written By:          Andrei Medvedev

Description:         update rates and census notifications

Sample/Test executions in AGRD DB:
EXEC dbo.sproc_core_dml_setAppUser 'CORE-34704';
DECLARE @status_code int, @status_text VARCHAR(3000);
EXEC dbo.sproc_pdpm_updateForUnlock 1597585, 80504, 'Y', 'Y', @status_code, @status_text;
EXEC dbo.sproc_pdpm_updateForUnlock 1597585, 80504, 'N', 'Y', @status_code, @status_text;
==============================================================================================
*/

IF EXISTS (
		SELECT 1
		FROM dbo.sysobjects
		WHERE id = object_id(N'dbo.sproc_pdpm_updateForUnlock')
			AND objectproperty(id, N'IsProcedure') = 1
	)
BEGIN
	DROP PROCEDURE dbo.sproc_pdpm_updateForUnlock;
END
GO

CREATE PROCEDURE dbo.sproc_pdpm_updateForUnlock
	  @assessId INT
	, @unlockNotificationId INT
	, @replaceWithPrevAssessInfo CHAR(1) = 'Y'
	, @debug_me CHAR(1) = 'N'
	, @status_code INT OUT
	, @status_text VARCHAR(3000) OUT
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @error_code INT
		, @vgsStepStartTime DATETIME
		, @vgsTotalStartTime DATETIME = GETDATE()
		, @vgs_program_name VARCHAR(200) = Object_name(@@ProcID)  ---Current Store Proc Name
		;

	SET @status_code = 0;
	SET @status_text = NULL;

	DECLARE @UnkHippsCode VARCHAR(5) = NULL
		, @UnkRugsCode VARCHAR(5) = 'UNK'
		, @UnkRugsModifier VARCHAR(2) = '00'
		, @CensusNotificationEventType_Unlock INT = 2
		;

	DECLARE @prevAssessId      INT         = NULL
		, @prevAssessRefDate   DATETIME    = NULL
		, @prevAssessmentRugId INT         = NULL
		, @prevHippsCode       VARCHAR(5)  = @UNKHippsCode
		, @prevRugsCode        VARCHAR(5)  = @UnkRugsCode
		, @prevRugsModifier    VARCHAR(2)  = @UnkRugsModifier
        , @prevAltCareLevel	   VARCHAR(3)  = NULL
		;

	DECLARE @clientId INT
		, @facId INT
		, @regenDate DATE
		, @now DATETIME = GETDATE()
		, @user VARCHAR(60) = dbo.fn_core_appUser()
		;

	IF @debug_me = 'Y'
	BEGIN
		SET @vgsStepStartTime = GETDATE();
		IF @vgs_program_name IS NULL
			SET @vgs_program_name = 'SprocCodeTest';
		PRINT 'Executing store proc :  ' + @vgs_program_name + ' ' + CONVERT(VARCHAR(26), @vgsStepStartTime, 109);
	END

	BEGIN TRY
		-- params validation
		IF @assessId IS NULL OR @assessId <= 0
		BEGIN;
			SET @status_code = 50001;
			SET @status_text = 'Invalid Assessment Id.';
			SET @error_code = 50001;
			GOTO PgmAbend;
		END;

		-- set default to Y
		IF @replaceWithPrevAssessInfo = null OR @replaceWithPrevAssessInfo <> 'N'
			SET @replaceWithPrevAssessInfo = 'Y';
		
		SELECT TOP 1 @clientId = a.client_id
			, @facId = a.fac_id
		FROM as_assessment a
		WHERE a.assess_id = @assessId
			AND a.deleted = 'N'
		;
		
		IF @clientId IS NULL
		BEGIN;
			SET @status_code = 50002;
			SET @status_text = 'Client not found';
			SET @error_code = 50002;
			GOTO PgmAbend;
		END;

		-- Find Census lins need to be updated
		DECLARE @CensusToUpdate TABLE (census_id INT);
		DECLARE @CensusEffDate  TABLE (effective_date DATE);

		INSERT INTO @CensusToUpdate	(census_id)
		SELECT census_id
		FROM census_item
		WHERE deleted = 'N'
			AND client_id = @clientId
			AND assess_id = @assessId
		UNION
		SELECT census_id
		FROM census_item_assessment_info
		WHERE pps_assess_id = @assessId
		;

		IF EXISTS (
				SELECT TOP 1 1
				FROM @CensusToUpdate
			)
		BEGIN
			-- Find previous assesment @prev... --- from admition / LOA?
			IF @replaceWithPrevAssessInfo = 'Y'
			BEGIN
				SELECT @prevAssessId = c.assess_id
					, @prevAssessRefDate = c.assess_ref_date
					, @prevRugsCode = c.rugs_code
					, @prevRugsModifier = c.rugs_modifier
					, @prevAltCareLevel = c.alternate_care_level
					, @prevAssessmentRugId = ai.assessment_rug_id
					, @prevHippsCode = ai.hipps_code
				FROM fn_pdpm_client_previous_assessment(@assessId) pa   -- returns 1 or 0 records
					JOIN census_item c
						ON c.census_id = pa.prev_rate_id
					LEFT JOIN census_item_assessment_info ai
						ON ai.census_id = c.census_id
				ORDER BY c.effective_date DESC
				;
			END;

			-- Update census_item
			UPDATE ci
			SET assess_id         = @prevAssessId
				, assess_ref_date = @prevAssessRefDate
				, rugs_code       = @prevRugsCode
				, rugs_modifier   = @prevRugsModifier
				, alternate_care_level = IIF(@prevAssessId IS NULL, alternate_care_level, @prevAltCareLevel)
				, revision_by     = @user
				, revision_date   = @now
			OUTPUT CONVERT(DATE, INSERTED.effective_date) INTO @CensusEffDate
			FROM @CensusToUpdate upd
				JOIN census_item ci
					ON ci.deleted = 'N'
						AND ci.census_id = upd.census_id
			;

			-- Update census_item_assessment_info
			MERGE census_item_assessment_info trgt
			USING @CensusToUpdate src
				ON src.census_id = trgt.census_id
			WHEN MATCHED AND @prevAssessId IS NOT NULL THEN
				UPDATE 
				SET pps_assess_id = @prevAssessId
					, assessment_rug_id = @prevAssessmentRugId
					, hipps_code = @prevHippsCode
			WHEN MATCHED 
				THEN
				DELETE
			;

			-- Update rebill date if necessary
			SET @regenDate = (
					SELECT MIN(effective_date)
					FROM @CensusEffDate
				);

			IF @regenDate IS NOT NULL
			BEGIN
				UPDATE ar_client_configuration
				SET rebill_from_date = @regenDate
					, revision_by = @user
					, revision_date = @now
				WHERE deleted = 'N'
					AND client_id = @clientId
					AND (rebill_from_date IS NULL OR rebill_from_date > @regenDate)
				;
			END;
		END;

		IF @unlockNotificationId IS NULL
		BEGIN
			SELECT TOP 1 @unlockNotificationId = notification_id
			FROM ar_census_notification
			WHERE deleted = 'N'
				AND assess_id = @assessId
				AND assessment_event_type = @CensusNotificationEventType_Unlock
			;
		END;

		-- Resolve passed in unlock notification
		IF @unlockNotificationId IS NOT NULL
		BEGIN
			UPDATE ar_census_notification
				SET resolved = 'Y'
					, revision_by = @user
					, revision_date = @now
			WHERE notification_id = @unlockNotificationId
			;

			-- Soft delete other notifications for passed in assessment
			UPDATE ar_census_notification
				SET deleted = 'Y'
					, deleted_by = @user
					, deleted_date = @now
			WHERE deleted = 'N'
				AND assess_id = @assessId
				AND notification_id <> @unlockNotificationId
			;
		END;


	END TRY

	BEGIN CATCH
		SET @error_code = @@error;
		SET @status_text = ERROR_MESSAGE();
		SET @status_code = 1;

		GOTO PgmAbend;
	END CATCH

	IF @debug_me = 'Y' 
		PRINT 'Total execution time: ' + LTRIM(RTRIM(STR(DATEDIFF(ms, @vgsTotalStartTime, GETDATE()))))+ ' ms';

	PgmSuccess:
	IF @status_code = 0
	BEGIN
		IF @debug_me = 'Y'
			PRINT 'Successful execution of stored procedure.';

		RETURN;
	END;
	    
	PgmAbend:
	IF @debug_me = 'Y'
	BEGIN
		PRINT 'Stored procedure failure: ' + CONVERT(varchar(26), GETDATE(), 109);
		PRINT 'Error code: ' + CONVERT(VARCHAR(3), @error_code) + '; Error description:  ' + @status_text;
	END;
	RAISERROR (@status_text, 16, 1);

END;
GO

GRANT EXECUTE ON dbo.sproc_pdpm_updateForUnlock TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_pdpm_updateForUnlock.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pdpm_updateForUnlock.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_dml_getContactESignSnapshot_CDN.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
--  Issue:			  CORE-97372
--  Written By:		  Ramin Shojaei
--  Script Type:      DML
--  Target DB Type:   Client
--  Target Database:  BOTH
--  Re-Runable:       Yes
--	Purpose: This is a copy of sproc_pho_dml_getContactESignSnapshot and modified to suit CDN EPrescribing workflow
--           The purpose of this stored procedure is to get the pho_phys_order_esignature_contact_snapshot that represents
--           the latest info of a prescriber that esigned an order. All fields in the
--			 pho_phys_order_esignature_contact_snapshot table need to match what is defined in the contact and contact_address table.
--	Parameters:
--				@contactId - Is the contactId to locate a contact_esign_audit_id for.
--				@debug - Flag to print out debug statements.
--				@status_code - it can be accessed in java after sql execution for error check
--				@status_text - it can be accessed in java after sql execution for error check
*****************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sproc_pho_dml_getContactESignSnapshot_CDN]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[sproc_pho_dml_getContactESignSnapshot_CDN];
GO

CREATE PROCEDURE sproc_pho_dml_getContactESignSnapshot_CDN (
    @contactId int,
    @facId int,
    @debug char(1)  = 'N',
    @status_code int OUT,
    @status_text varchar(3000) OUT
)
AS
    SET NOCOUNT ON

DECLARE  @ret int, @step int, @error_code int;
SELECT @status_code = 0;

BEGIN TRY
    IF @debug='Y' Print 'Start query' + '	' + convert(varchar(26),getdate());

    SET @ret = (SELECT contact_snap.contact_esign_snapshot_id
                FROM contact c
                         JOIN staff s ON s.contact_id=c.contact_id
                         JOIN sec_user su ON su.userid=s.userid
                         JOIN contact_address ca ON ca.contact_id=c.contact_id AND ca.type_id=1
                         JOIN address a ON a.address_id=ca.address_id
                         LEFT JOIN common_code ccp ON ccp.item_id=su.position_id
                         INNER JOIN pho_phys_order_esignature_contact_snapshot contact_snap ON
                            contact_snap.contact_id = c.contact_id
                        AND isnull(contact_snap.first_name,'') = isnull(c.first_name,'')
                        AND isnull(contact_snap.last_name,'') = isnull(c.last_name,'')
                        AND isnull(contact_snap.long_username,'') = isnull(su.long_username,'')
                        AND isnull(contact_snap.position_desc,'') = isnull(ccp.item_description,'')
                        AND isnull(contact_snap.designation_desc,'') = isnull(s.designation,'')
                        AND isnull(contact_snap.ssn_sin,'') = isnull(s.ssn_sin,'')
                        AND isnull(contact_snap.registration_code,'') = isnull(s.registration_code,'')
                        AND isnull(contact_snap.address1,'') = isnull(a.address1,'')
                        AND isnull(contact_snap.address2,'') = isnull(a.address2,'')
                        AND isnull(contact_snap.address3,'') = isnull(a.address3,'')
                        AND isnull(contact_snap.city,'') = isnull(a.city,'')
                        AND isnull(contact_snap.prov_state,'') = isnull(a.prov_state,'')
                        AND isnull(contact_snap.postal_zip_code,'') = isnull(a.postal_zip_code,'')
                WHERE
                        c.contact_id = @contactId
    );

    IF(@ret IS NULL)
        BEGIN	--then we need to insert into the snapshot table.
        IF @debug='Y' Print 'Start insert' + '	' + convert(varchar(26),getdate());

        DECLARE @now datetime
        SET @now = getDate()
        DECLARE @id table (id int)

        INSERT INTO pho_phys_order_esignature_contact_snapshot(
                                                               contact_id,first_name,last_name,long_username,position_desc,designation_desc,ssn_sin,registration_code
                                                              ,address1,address2,address3,city,prov_state,postal_zip_code
                                                              ,created_date)
        OUTPUT inserted.contact_esign_snapshot_id INTO @id
        SELECT c.contact_id, c.first_name, c.last_name, su.long_username,ccp.item_description,s.designation,s.ssn_sin,s.registration_code
             ,a.address1,a.address2,a.address3,a.city,a.prov_state,a.postal_zip_code
             ,@now
        FROM contact c
                 JOIN staff s ON s.contact_id=c.contact_id
                 JOIN sec_user su ON su.userid=s.userid
                 JOIN contact_address ca ON ca.contact_id=c.contact_id and ca.type_id=1
                 JOIN address a ON a.address_id=ca.address_id
                 LEFT JOIN common_code ccp ON ccp.item_id=su.position_id
        WHERE c.contact_id=@contactId;

        SELECT @ret = id from @id;
        END

    --main result
    SELECT
        contact_esign_snapshot_id
         ,contact_id
         ,first_name
         ,last_name
         ,long_username
         ,position_desc
         ,designation_desc
         ,ssn_sin
         ,dea_number
         ,nadea_number
         ,address1
         ,address2
         ,address3
         ,city
         ,prov_state
         ,postal_zip_code
         ,sup_first_name
         ,sup_last_name
         ,sup_position_desc
         ,sup_designation_desc
         ,sup_dea_number
         ,created_date
         ,registration_code
    FROM pho_phys_order_esignature_contact_snapshot
    WHERE contact_esign_snapshot_id = @ret;

END TRY

--error trapping
BEGIN CATCH
    SELECT @error_code = @@error, @status_text = ERROR_MESSAGE()
    SELECT @status_code = 1
    GOTO PgmAbend
END CATCH

    --program success return
    PgmSuccess:
    IF @status_code = 0
        BEGIN
            IF @debug='Y' Print 'Successfull execution of stored procedure'
        END

    --program failure return
    PgmAbend:
    IF @debug='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '	' + convert(varchar(26),getdate());
    IF @debug='Y' Print 'Error code: '+convert(varchar(3),@step) + '; Error description:	' +@status_text;
GO

GRANT EXECUTE ON sproc_pho_dml_getContactESignSnapshot_CDN TO public
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_pho_dml_getContactESignSnapshot_CDN.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_dml_getContactESignSnapshot_CDN.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_importPharmacySystemTemplates.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**  Created By: Kevin Hu
**
**	Purpose:  to import system templates into the order template tables.
**	          
**	Params:
**	@debug       - Debug param, 'Y' or 'N'
**	@status_code - SP execution flag, 0 for success.
**	@status_text - SP error text if error occurs.
**
**  Return:
**  Special Instructions:
**  Revision History:
*****************************************************************************************************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[sproc_pho_importPharmacySystemTemplates]') 
		AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[sproc_pho_importPharmacySystemTemplates]

GO
CREATE PROCEDURE [dbo].[sproc_pho_importPharmacySystemTemplates]
	@for_web bit = 0,
	@for_mobile bit = 0,
	@debug char(1) = 'N',
	@status_code int = 0 out,
	@status_text varchar(3000) out
AS
BEGIN TRY
    -- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @step int, @singleFacId int;

	SET @step = 0;
	SET @status_code = 0;

    SELECT @singleFacId = max(fac_id) FROM FACILITY WHERE DELETED <> 'Y' AND FAC_ID <> 9001 HAVING count(*) = 1; -- check for single facility

	SET @step=1;
	IF @debug='Y' print 'Step '+cast(@step as char(3))+' '+convert(VARCHAR(26), getdate(), 21) + ' Import templates';
	
	-- column advanced_directive_type is moved from pho_std_order to pho_std_order_advance_directive_type_mapping
	INSERT INTO dbo.pho_std_order_advance_directive_type_mapping
			(std_order_id,
			advanced_directive_type)
	SELECT
	        -1 * lib_order_id, -- import with negative ids to avoid conflict with existing data
			advanced_directive_type
	FROM dbo.pho_lib_order
	WHERE advanced_directive_type is not null and advanced_directive_type != -1
	
	INSERT INTO dbo.pho_std_order
	        (std_order_id,
	        template_description ,
	        status ,
	        order_category_id ,
	        communication_method , 
	        auto_created,
	        advanced_directive  ,
	        --advanced_directive_type ,
	        description ,
	        route_of_admin ,
	        drug_name ,
	        drug_strength ,
	        drug_strength_uom ,
	        drug_form ,
	        controlled_substance_code ,
	        ext_lib_id ,
	        ext_lib_med_id ,
	        ext_lib_generic_id ,
	        ext_lib_generic_desc ,
	        ext_lib_med_ddid ,
	        fac_id ,
	        reg_id ,		
	        state_code ,
	        created_by ,
	        created_date ,
	        revision_by ,
	        revision_date ,
	        published_by ,
	        published_date ,
	        retired_date ,
	        retired_by ,
	        reactivated_date ,
	        reactivated_by ,
	        dispense_as_written ,
	        ext_lib_rxnorm_id ,
	        alter_med_src ,
	        nurse_pharm_notes ,
	        do_not_fill ,
	        personalization_required  ,
	        created_by_audit_id ,
	        revision_by_audit_id ,
	        published_by_audit_id ,
	        retired_by_audit_id ,
	        reactivated_by_audit_id ,
	        related_generic ,
	        for_web,
	        for_mobile ,
	        system_template)
	     SELECT
	        -1 * lib_order_id, -- import with negative ids to avoid conflict with existing data
	        template_description ,
	        2 , -- Draft status
	        order_category_id ,
	        null ,  -- no default communication method
	        0, -- not autocreated
	        advanced_directive  ,
	        --advanced_directive_type ,
	        description ,
	        route_of_admin ,
	        drug_name ,
	        drug_strength ,
	        drug_strength_uom ,
	        drug_form ,
	        controlled_substance_code ,
	        ext_lib_id ,
	        ext_lib_med_id ,
	        ext_lib_generic_id ,
	        ext_lib_generic_desc ,
	        ext_lib_med_ddid ,
	        -1 , -- corporate
	        -1 ,-- corporate		
	        null ,-- corporate
	        'PCC_System' ,
	        getdate() ,
	        'PCC_System' ,
	        getdate() ,
	        null ,
	        null ,
	        null ,
	        null ,
	        null ,
	        null ,
	        dispense_as_written ,
	        ext_lib_rxnorm_id ,
	        alter_med_src ,
	        nurse_pharm_notes ,
	        do_not_fill ,
	        personalization_required  ,
	        null ,
	        null ,
	        null ,
	        null ,
	        null ,
	        related_generic ,
	        @for_web ,
	        @for_mobile , 
	        1 -- default to system template
		FROM dbo.pho_lib_order so
		where not exists (select 1 from pho_std_order pso where pso.template_description = so.template_description and pso.for_mobile = @for_mobile )
	
	INSERT INTO dbo.pho_std_order_schedule
	           (std_order_schedule_id
	           ,std_order_id
	           ,schedule_template
	           ,std_freq_id
	           ,schedule_type
	           ,schedule_directions
	           ,indications_for_use
	           ,administered_by_id
	           ,personalization_required
	           ,additional_directions
	           ,related_diagnosis
	           ,date_of_month
	           ,ldm
	           ,repeat_week
	           ,mon
	           ,tues
	           ,wed
	           ,thurs
	           ,fri
	           ,sat
	           ,sun
	           ,xxdays
	           ,xxmonths
	           ,xxhours
	           ,date_start
	           ,date_stop
	           ,days_on
	           ,days_off
	           ,schedule_end_date_type_id
	           ,schedule_duration
	           ,schedule_duration_type_id
	           ,quantity_per_dose
	           ,quantity_uom_id
	           ,dose_value
	           ,dose_uom_id
	           ,apply_to
	           ,prn_admin
	           ,prn_admin_value
	           ,prn_admin_units
	           ,reassessment_required
	           ,until_finished
	           ,std_freq_time_label
	           ,alternate_dose_value
	           ,need_location_of_admin
	           ,schedule_dose_duration
	           ,apply_remove_flag
	           ,created_by
	           ,created_date
	           ,revision_by
	           ,revision_date)
		SELECT
	           -1 * lib_order_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,-1 * lib_order_id  -- import with negative ids to avoid conflict with existing data
	           ,schedule_template
	           ,std_freq_id
	           ,schedule_type
	           ,schedule_directions
	           ,indications_for_use
	           ,administered_by_id
	           ,os.personalization_required
	           ,additional_directions
	           ,related_diagnosis
	           ,date_of_month
	           ,ldm
	           ,repeat_week
	           ,mon
	           ,tues
	           ,wed
	           ,thurs
	           ,fri
	           ,sat
	           ,sun
	           ,xxdays
	           ,xxmonths
	           ,xxhours
	           ,date_start
	           ,date_stop
	           ,days_on
	           ,days_off
	           ,schedule_end_date_type_id
	           ,schedule_duration
	           ,schedule_duration_type_id
	           ,quantity_per_dose
	           ,quantity_uom_id
	           ,dose_value
	           ,dose_uom_id
	           ,apply_to
	           ,prn_admin
	           ,prn_admin_value
	           ,prn_admin_units
	           ,reassessment_required
	           ,until_finished
	           ,std_freq_time_label
	           ,alternate_dose_value
	           ,need_location_of_admin
	           ,schedule_dose_duration
	           ,apply_remove_flag
	           ,'PCC_System' 
	           ,getdate() 
	           ,'PCC_System' 
	           ,getdate() 
		FROM pho_lib_order_schedule os
        inner join pho_std_order pso on pso.std_order_id = os.lib_order_id * -1
	    order by lib_order_schedule_id asc;
	
	INSERT INTO dbo.pho_std_order_schedule_vital
	           (std_order_schedule_id
	           ,std_vitals_id)
	    SELECT
	           -1 * lib_order_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,std_vitals_id
		FROM pho_lib_order_schedule_vital os
		inner join pho_std_order_schedule psos on psos.std_order_schedule_id = os.lib_order_schedule_id * -1
	
	INSERT INTO dbo.pho_std_order_schedule_related_prompt
	           (std_order_schedule_id
	           ,type_id
	           ,description
	           ,no_of_values
	           ,long_description)
	     SELECT
	           -1 * lib_order_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,type_id
	           ,description
	           ,no_of_values
	           ,long_description
		FROM pho_lib_order_schedule_related_prompt  os
        inner join pho_std_order_schedule psos on psos.std_order_schedule_id = os.lib_order_schedule_id * -1
	    
	INSERT INTO dbo.pho_std_schedule
	           (std_schedule_id
	           ,std_order_schedule_id
	           ,pho_std_time_id
	           ,start_time
	           ,end_time
	           ,nurse_action_notes)
	     SELECT
	           -1 * lib_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,-1 * lib_order_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,pho_std_time_id
	           ,start_time
	           ,end_time
	           ,nurse_action_notes
		FROM pho_lib_schedule os
		inner join pho_std_order_schedule psos on  psos.std_order_schedule_id = os.lib_order_schedule_id * -1
		    
	INSERT INTO dbo.pho_std_scheduled_vital
	           (std_schedule_id
	           ,vital
	           ,timing)
	     SELECT
	           -1 * lib_schedule_id -- import with negative ids to avoid conflict with existing data
	           ,vital
	           ,timing
		FROM pho_lib_scheduled_vital os
		inner join pho_std_schedule psd on psd.std_schedule_id = os.lib_schedule_id * -1
	
	INSERT INTO dbo.pho_std_order_related_prompt
	           (std_prompt_id
	           ,std_schedule_id
	           ,value_type
	           ,description
	           ,notes
	           ,specify_initial_value
	           ,value_data_type
	           ,prompt_frequency_type
	           ,prompt_frequency
	           ,no_of_values
	           ,long_description)
	     SELECT
	           -1 * lib_prompt_id
	           ,-1 * lib_schedule_id
	           ,value_type
	           ,description
	           ,notes
	           ,specify_initial_value
	           ,value_data_type
	           ,prompt_frequency_type
	           ,prompt_frequency
	           ,no_of_values
	           ,long_description
		FROM pho_lib_order_related_prompt os
        inner join pho_std_schedule psd on psd.std_schedule_id = os.lib_schedule_id * -1
	    
    IF @singleFacId IS NOT NULL -- For single facility orgs we should give access to the fac by default
    BEGIN
      insert into pho_std_order_fac(std_order_id, fac_id) 
      SELECT so.std_order_id, @singleFacId from pho_std_order so WHERE so.system_template=1;
      
      UPDATE pho_std_order set fac_id=@singleFacId WHERE system_template = 1;
    END
	

	SET @step=4;
	IF @debug='Y' print 'Step '+cast(@step as char(3))+' '+convert(VARCHAR(26), getdate(), 21) + ' Done';
    SET @status_code = 0
    GOTO PgmSuccess
END TRY
--error trapping
BEGIN CATCH
    SELECT @status_code = @@error, @status_text = 'Error at step '+convert(varchar(3),@step)+', '+ERROR_MESSAGE()
    SET @status_code = 1
    GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:

IF @status_code = 0
BEGIN
    IF @debug='Y' PRINT 'Successful execution of stored procedure'
    RETURN @status_code
END

--program failure return
PgmAbend:

IF @debug='Y' PRINT 'Stored procedure failure in step '+ convert(varchar(3),@step) + '   ' + convert(varchar(26),getdate())
    IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@status_code) + '; Error description:    ' +@status_text
    RETURN @status_code
GO
GRANT EXECUTE ON sproc_pho_importPharmacySystemTemplates TO public
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_pho_importPharmacySystemTemplates.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_importPharmacySystemTemplates.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


 -- ===============================================================================================================================
 -- ---------------
 -- Deprecated
 --	---------------
 -- 
 -- Purpose: The purpose of this procedure is to load a phys order with all it's schedule information
 --
 -- Target ENVIRONMENT: BOTH 
 --
 --  Special Instructions: 
 --
 --	Params:
 --			
 --			@physOrderId    - phys order id
 --			@facId			- Facility Id 
 --			@includeAdministrativeOrder - Flag to include Administrative Orders, 'Y' or 'N'
 --			@includeSupplyInfo - Flag to include Supply Info, 'Y' or 'N'
 --			@debug          - Debug param, 'Y' or 'N'
 --			@status_code    - SP execution flag, 0 for success.
 --			@status_text    - SP error text if error occurs.
 --
 -- Change History:
 --   Author			Date		Comment
 -- ------------------------------------------------------------------------------------------------------------------------------- 
 --	  Joel Pelletier    08/11/2011	Created.
 --   Alireza Mandegar	10/15/2012	Updated due to PCC-33677 and Replaced the usage of fn_pho_getOrderStatus with sproc_pho_getOrderStatus
 --									Also modified the file maintenance box to be in sql comment format rather than java format
 --									and added the Change History section to it to keep track of changes.
 --  Alireza Mandegar	 11/12/2012	Added pho_ext_lib_generic_desc/id for PCC-34329
 --  Alireza Mandegar	 11/22/2012	Added schedule_sliding_scale_id due to PCC-30715
 --  Alireza Mandegar	 11/29/2012	Added schedule_dose_duration due to PCC-32538
 --  Feng Xia			 12/15/2012	Added xxMonths
 --  Alireza Mandegar	 12/20/2012	Added apply_remove_flag due to PCC-32537
 --  Alireza Mandegar	 01/25/2013	Added remove_time due to PCC-32537
 --  Alireza Mandegar	 01/31/2013	Added remove_duration due to PCC-32537
 --  Aarti Malhotra      09/24/2013  Added pho_ext_lib_rxnorm for PCC-47251 (main JIRA PCC-46704)
 --  Mustafa Behrainwala 04/28/2014  Added table to handle Therapeutic Interchange sliding scale PCC-52492 
 --  Mustafa Behrainwala 07/31/2014  Added Linked Set Id and Description for PCC-59209
 --	 Mustafa Behrainwala 10/29/2015	 Added order_class_id
 --  Willie Wong		 05/11/2016	 Added schedule_directions for dietary orders for PCC-94151
 --	 Nooshin Hayeri		 06/29/2016	Added snapshot_schedule_start_date for PCC-96359
 --  Melvin Parinas      07/16/2016  Removed snapshot_schedule_start_date and replaced with earliest_prescriber_start_date date PCC-96359
 --  Melvin Parinas      07/25/2016  Added prescriber_schedule_start_date due to PCC-98059	
 --	 Devika Bapat		 02/24/2017	Added 2 optional parameters to include administrative orders and supply info PCC-108894
 --	 Mustafa Behrainwala 10/12/2018 Modified due to CORE-23367 to add dose_low for dose ranging.
 --	 Elias Ghanem 		 12/21/2018 	Added last_pharmacy_end_date due to CORE-28433.
 --  Mustafa Behrainwala 01/29/2019 Modified due to CORE-29190 return behavior lookup
 --  Elias Ghanem 		 01/29/2019 Added schedule_revision_date due to CORE-85435
 --  Sree Naghasundharam 11/18/2021 This Stored Procedure 'sproc_pho_list_getEnhancedOrder' is herebry deprecated(CORE-97119).
 --									New stored procedure 'sproc_pho_list_getEnhancedOrder_v2' created to remove 'mmdb' references.
 --									Any further changes to 'sproc_pho_list_getEnhancedOrder' should also be made in the new stored procedure.
 -- ===============================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_list_getEnhancedOrder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_pho_list_getEnhancedOrder]
GO

create 
proc sproc_pho_list_getEnhancedOrder
(
	@physOrderId	int,
	@facId			int,
	@includeAdministrativeOrder	char(1) = 'N',
	@includeSupplyInfo char(1) = 'N',
	@debug char(1)  = 'N',
	@status_code int out, 
	@status_text varchar(3000) out
)
as 
begin

SET NOCOUNT ON

DECLARE @step			int,
		@error_code		int

	   

BEGIN TRY

    -- PCC-33677
    ----Localize input Variables
    DECLARE  @vFacId int
            ,@vClientId int
            ,@vPhysOrderId int
            ,@vDateTime datetime
			,@vOrderCategory int
        
    -- Set the local variables
    select 
        @vFacId         = @facId 
       ,@vClientId      = null 
	   ,@vPhysOrderId   = @physOrderId
       ,@vDateTime      = dbo.fn_facility_getCurrentTime(@facId)
	   ,@status_code 	= 0
        
    -- Table variable to store the result of sproc_pho_getOrderStatus
    declare @TMP_PhoOrderStatus table (phys_order_id    int
                                    ,fac_id             int
                                    ,order_status       smallint
                                    ,order_relationship int
                                    ,status_reason      varchar(75));
    
	set @vOrderCategory = (select order_category_id from pho_phys_order where phys_order_id=@vPhysOrderId)
	
	-- Check exist in pho_phys_order table, struck out order does not has record in pho_phys_order table, if not exit, there is no need to execute sproc_pho_getOrderStatus
	if @vOrderCategory > 0
	begin
		-- Fill the table variable
		insert into @TMP_PhoOrderStatus
		exec sproc_pho_getOrderStatus 
				@facId          = @vFacId
				,@clientId      = @vClientId
				,@physOrderId   = @vPhysOrderId
				,@date          = @vDateTime
				,@debug         = 'N'
				,@status_code   = @status_code
				,@status_text   = @status_text
	end

	if @debug = 'Y'  select * From @TMP_PhoOrderStatus

	if isnull(@status_code,0) <> 0
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@status_text,'')
				Raiserror( @status_text, 11, 1 );
		  end

	
	if(@debug='Y') begin Print 'BEGIN STEP select enhanced phys order	' + ' ' + convert(varchar(26),getdate(),109) end

SELECT 
o.phys_order_id
, o.order_type_id
, o.physician_id
, o.pharmacy_id
, o.fac_id
, o.std_freq_id
, o.client_id
, o.drug_code
, o.created_by
, o.created_date
, o.revision_by
, o.revision_date
, o.reorder
, o.date_ordered
, o.start_date
, o.end_date
, o.strength
, o.form
, o.route_of_admin
, o.diagnoses
, o.description
, o.directions
, o.related_generic
, o.supplementary_notes
, o.communication_method
, o.diet_type
, diettype.item_description AS diet_type_description
, o.diet_texture
, diettexture.item_description AS diet_texture_description
, o.stat
, o.packaging
, o.disc_with_pharm
, o.quantity_to_administer
, o.std_order_id
, o.discontinued_date
, o.fluid_consistency
, fluidcon.item_description AS fluid_consistency_description
, o.diet_supplement
, dietsup.item_description AS diet_supplement_description
, o.hold_date
, o.nurse_admin_notes
, o.nurse_pharm_notes
, o.delivery_notes
, o.delivery_type
, o.self_admin
, o.administered_by_id
, o.prn_flag
, o.label_name
, o.reorder_count
, o.last_reorder_date
, o.quantity_received
, o.tran_id
, o.prescription
, o.start_date_type
, o.end_date_type
, o.end_date_duration_type
, o.end_date_duration
, o.schedule_dose_duration -- PCC-32538
, o.alter_med_src
, o.alter_med_src_name
, o.sent_date
, vpos.order_status
, o.status_change_by
, o.status_change_date
, o.hold_physician_id
, o.discontinue_physician_id
, o.pharm_nurse_notes
, o.first_admin
, o.drug_manufacturer
, o.drug_class_number
, o.resume_physician_id
, o.event_driven_flag
, o.auto_fill_flag
, o.controlled_substance_code
, o.related_phys_order_id
, o.relationship
, o.auto_created_flag
, o.active_flag
, o.new_supply_flag
, o.resume_date
, o.last_received_date
, o.orig_phys_order_id
, o.disp_package_identifier
, o.hold_date_end
, o.vendor_phys_order_id
, o.order_date
, o.sliding_scale_id
, o.order_verified
, o.dispense_as_written
, o.next_refill_date
, o.do_not_fill
, o.cur_supply_id
, o.first_documented
, o.substitution_indicator
, o.reassessment_required
, o.completed_date
, o.completed_by
, o.verify_copied_order
, o.original_route_of_admin
, o.indications_for_use
, o.draft
, o.origin_id
, o.order_category_id
, o.order_revision_date
, o.order_revision_by
, o.drug_strength
, o.drug_strength_uom
, o.drug_name
, o.is_new_order
, o.order_schedule_id
, o.start_date as schedule_start_date
, o.end_date as schedule_end_date
, o.last_pharmacy_end_date
, o.physician_name_in_msg
, s.schedule_id
, s.schedule_type
, s.pho_std_time_id
, s.xxdays as xx_days
, s.sun
, s.mon
, s.tues as tue
, s.wed
, s.thurs as thu
, s.fri
, s.sat
, s.days_on
, s.days_off
, s.std_freq_id
, s.dose AS dose_value
, s.dose_low
, s.alternate_dose
, s.start_time
, s.end_time
, s.nurse_action_notes
, s.date_start
, s.date_stop
, s.repeat_week
, s.apply_to
, s.prn_admin
, s.prn_admin_value
, s.prn_admin_units
, s.std_freq_time_label
, s.until_finished
, s.quantity_uom_id
, s.dose_uom_id
, case 
       -- diet orders do not populate the view_pho_schedule need to get directly from the pho_order_schedule table
       when  s.schedule_directions is null and o.order_category_id = 3031 then o.schedule_directions 
       else s.schedule_directions
end as schedule_directions
, o.order_directions as order_directions
, s.schedule_template
, s.xxMonths
, s.date_of_month
, s.std_shift_id
, s.schedule_sliding_scale_id
, s.apply_remove_flag
, s.remove_time
, s.remove_duration
, s.behavior_lookback
, o.schedule_revision_date
, v.vital
, p.prompt_id
, p.value_type
, p.description as prompt_description
, p.long_description
, p.notes
, p.no_of_values
, p.current_value2
, p.current_value
, p.specify_initial_value
, p.value_data_type
, p.prompt_frequency_type
, p.prompt_frequency
, p.value_date
, pt.short_desc
, c.first_name AS physician_first_name
, c.last_name AS physician_last_name
, c.title + ' ' + c.first_name + ' ' + c.last_name AS physician_fullname
, cb.long_username AS created_by_long
, rb.long_username AS revision_by_long
, poua.edited_by_audit_id
, poua.edited_date
, poua.created_by_audit_id
, edituser.long_username AS edited_by_long
, edituser.position_description AS edited_by_position
, edituser.designation_desc AS edited_by_designation
, createuser.long_username AS created_by_audit_long
, createuser.position_description AS created_by_position
, createuser.designation_desc AS created_by_designation
, poua.confirmed_by_audit_id
, poua.confirmed_date
, confuser.long_username AS confirmed_by_long
, confuser.position_description AS confirmed_by_position
, confuser.designation_desc AS confirmed_by_designation
, lib.pho_ext_lib_id
, lib.pho_ext_lib_med_id
, lib.pho_ext_lib_med_ddid
, lib.pho_ext_lib_generic_id
, lib.pho_ext_lib_generic_desc
, lib.ext_lib_rxnorm_id
, o.min_start_date
, o.max_end_date
, o.emergency_pharmacy_flag
, o.need_location_of_admin
, so.advanced_directive as order_advanced_directive
, poad.advanced_dir_status
, pspo.advanced_directive as advanced_directive
, signuser.long_username as signed_by_long
, ppos.signature_date
, o.extended_end_date
, o.extended_count
, custmed.cust_med_id
, ti.orig_phys_order_id as original_ti_phys_order_id
, lsi.linked_set_id as linked_set_id
, ls.set_description as linked_set_description
, nctrlsc.new_controlled_substance_code as new_controlled_substance_code
, esign.marked_to_sign_user_id
, case when marked_to_sign_user_id is not null then dbo.fn_get_username(marked_to_sign_user_id) else null end as marked_to_sign_user_longname
, esign.marked_to_sign_date
, esign.marked_to_sign_contact_id
, esign.marked_to_sign_authentication_type_id
, esign.marked_to_sign_source_type_id
, rstype.description as marked_to_sign_source_type_description
, esign.sign_user_id
, case when sign_user_id is not null then dbo.fn_get_username(sign_user_id) else null end as sign_user_longname
, esign.sign_date
, esign.sign_contact_id
, esign.sign_authentication_type_id
, atype.description as sign_authentication_type_description
, esign.sign_source_type_id
, stype.description as sign_source_type_description
, popr.reason_binary_code
, clinrev.reviewed_date
, clinrev.phys_order_id as review_order_id
, clinrev.reviewed_by
, oq.quantity as prescription_quantity
, oq.unit_of_measure as prescription_quantity_uom
, oq.no_of_refills as prescription_no_of_refills
, o.order_class_id
, o.prescriber_schedule_start_date as earliest_prescriber_start_date
, o.prescriber_schedule_start_date
, o.linked_order_id
, o.linked_reason_id
, poa.facility_medical_attestation_id
FROM
	view_pho_phys_order o
	LEFT JOIN @TMP_PhoOrderStatus vpos
		ON o.phys_order_id = vpos.phys_order_id
	LEFT JOIN view_pho_schedule s
		ON o.order_schedule_id = s.order_schedule_id AND o.phys_order_id = s.phys_order_id
		AND s.deleted = 'N'
	LEFT JOIN COMMON_CODE diettype
        ON @vOrderCategory=3031 and o.diet_type = diettype.item_id and diettype.item_code = 'phodyt' -- only need for diet order
    LEFT JOIN COMMON_CODE diettexture
        ON @vOrderCategory=3031 and o.diet_texture = diettexture.item_id and diettexture.item_code = 'phodtx' -- only need for diet order
    LEFT JOIN COMMON_CODE dietsup
        ON @vOrderCategory=3032 and o.diet_supplement = dietsup.item_id and dietsup.item_code = 'phosup' -- only need for diet supplement order
    LEFT JOIN COMMON_CODE fluidcon
    	ON @vOrderCategory=3031 and o.fluid_consistency = fluidcon.item_id and fluidcon.item_code = 'phocst' -- only need for diet order
	LEFT JOIN pho_schedule_vitals v
		ON s.schedule_id = v.schedule_id and v.deleted = 'N'
	LEFT JOIN pho_order_related_prompt p
		ON s.schedule_id = p.schedule_id and p.deleted ='N'
	LEFT JOIN pho_order_related_value_type pt
		ON p.value_type = pt.type_id
	LEFT JOIN contact c
		ON c.contact_id = o.physician_id
	LEFT JOIN sec_user cb
		ON cb.loginname = o.created_by
	LEFT JOIN sec_user rb
		ON rb.loginname = o.revision_by
	LEFT JOIN pho_phys_order_useraudit poua
		ON poua.phys_order_id = o.phys_order_id
	LEFT JOIN cp_sec_user_audit createuser
	  ON createuser.cp_sec_user_audit_id = poua.created_by_audit_id
	LEFT JOIN cp_sec_user_audit edituser
	  ON edituser.cp_sec_user_audit_id = poua.edited_by_audit_id
	LEFT JOIN cp_sec_user_audit confuser
	  ON confuser.cp_sec_user_audit_id = poua.confirmed_by_audit_id
	LEFT JOIN pho_order_ext_lib_med_ref lib
	  ON @vOrderCategory=3022 and lib.phys_order_id = o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_std_order templateorder
	  ON @vOrderCategory=3029 and templateorder.phys_order_id = o.phys_order_id -- only need for other category order
	LEFT JOIN  pho_std_order so 
	  ON @vOrderCategory=3029 and templateorder.std_order_id = so.std_order_id -- only need for other category order
	LEFT JOIN pho_std_phys_order pspo
	  ON @vOrderCategory=3029 and o.std_order_id = pspo.std_phys_order_id -- only need for other category order
	LEFT JOIN pho_phys_order_advanced_directive poad
	  ON @vOrderCategory=3029 and o.phys_order_id = poad.phys_order_id -- only need for other category order
	LEFT JOIN pho_phys_order_sign ppos
	  ON o.phys_order_id = ppos.phys_order_id
	LEFT JOIN cp_sec_user_audit signuser
	  ON signuser.cp_sec_user_audit_id = ppos.cp_sec_user_audit_id
	LEFT JOIN pho_phys_order_cust_med custmed
	  ON @vOrderCategory=3022 and custmed.phys_order_id = o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_ti ti
	  ON ti.phys_order_id = o.phys_order_id
	LEFT JOIN pho_linked_set_item lsi
	  ON lsi.phys_order_id = o.phys_order_id
	LEFT JOIN pho_linked_set ls on ls.linked_set_id = lsi.linked_set_id
	LEFT JOIN pho_phys_order_new_ctrlsubstancecode nctrlsc ON @vOrderCategory=3022 and nctrlsc.phys_order_id=o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_esignature esign  ON o.phys_order_id = esign.phys_order_id
	LEFT JOIN order_sign_source_type stype ON esign.sign_source_type_id = stype.source_type_id
	LEFT JOIN order_sign_source_type rstype ON esign.marked_to_sign_source_type_id = rstype.source_type_id
	LEFT JOIN order_sign_authentication_type atype ON esign.sign_authentication_type_id = atype.authentication_type_id
	LEFT JOIN pho_order_pending_reason popr ON popr.phys_order_id = o.phys_order_id
    LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=o.phys_order_id 
    LEFT JOIN pho_phys_order_quantity_info oq on @vOrderCategory=3022 and oq.phys_order_id=o.phys_order_id -- only need for pharmacy order
    LEFT JOIN pho_phys_order_attestation poa ON @vOrderCategory=3022 and poa.phys_order_id = o.phys_order_id -- only need for pharmacy order
WHERE
	o.phys_order_id = @physOrderId
	
ORDER BY o.order_schedule_id, s.schedule_id

-- select administrative orders
if @includeAdministrativeOrder='Y'
	select vpao.admin_created_date,
	vpao.admin_order_verified,
	vpao.order_related_id,
	vpao.phys_order_id,
	vpao.standard_phys_order_id,
	vpao.created_by,
	vpao.created_date,
	vpao.revision_by,
	vpao.revision_date,
	vpao.deleted_by,
	vpao.deleted_date,
	vpao.deleted,
	vpao.fac_id,
	vpao.order_relationship_id,
	vpao.admin_communication_method,
	vpao.admin_effective_date,
	vpao.admin_ineffective_date,
	vpao.admin_physician_id,
	vpao.admin_reason,
	vpao.admin_noted_by,
	vpao.admin_physician_first_name,
	vpao.admin_physician_last_name,
	vpao.strikeout_by,
	vpao.strikeout_date,
	vpao.strikeout_reason_code,
	vpao.strikeout_reason_description,
	vpao.strikeout_by_long,
	vpao.admin_order_id,
	vpao.admin_origin_id,
	secuser.long_username 'created_by_long' , secuser.designation_desc as created_by_designation, ccc.item_description as created_by_position
	,csua.long_username confirmed_by_username, csua.position_description as confirmed_by_position, csua.designation_desc as confirmed_by_designation, ua.confirmed_date as confirmed_date
	FROM view_pho_administrative_order vpao
	left join SEC_USER secuser on secuser.loginname = vpao.created_by
	left join common_code ccc on ccc.item_id = secuser.position_id
	left join pho_admin_order_useraudit ua ON ua.admin_order_id = vpao.admin_order_id
	left join cp_sec_user_audit csua on csua.cp_sec_user_audit_id = ua.confirmed_by_audit_id
	WHERE vpao.standard_phys_order_id = @physOrderId
	ORDER BY vpao.revision_date  DESC

IF @includeSupplyInfo='Y'
BEGIN
	DECLARE @integratedPharmacies TABLE
    (
        pharmacy_id int not null
    )
	INSERT INTO @integratedPharmacies (pharmacy_id)
	select distinct extFacId from (
		SELECT mp.ext_fac_id as extFacId
			FROM message_profile mp WITH (NOLOCK)
			INNER JOIN lib_message_profile lmp WITH (NOLOCK)
				ON lmp.message_profile_id = mp.message_profile_id
			       AND lmp.deleted = 'N' and lmp.is_enabled='Y'
			WHERE mp.is_enabled = 'Y' and mp.is_integrated_pharmacy='Y'
			AND mp.fac_id = @facId
			AND mp.message_protocol_id = 12
			GROUP BY mp.ext_fac_id
		UNION
		SELECT distinct mi.internal_id as extFacId
			FROM map_identifier mi WITH (NOLOCK)
			INNER JOIN lib_message_profile libmp WITH (NOLOCK)
			ON libmp.vendor_code = mi.vendor_code
			AND libmp.deleted = 'N'
			INNER JOIN message_profile mp WITH (NOLOCK)
			ON libmp.message_profile_id = mp.message_profile_id
			WHERE mi.map_type_id = 3 and mp.fac_id = @facId and  mi.fac_id = @facId
	) a where extFacId is not null

select pos.phys_order_id,
        pos.order_supply_id,
        pos.description as supply_description,
        pos.directions as supply_directions,
        pos.date_dispensed as date_dispensed,
        pos.last_received_date as supply_received_date,
        pos.med_src_type_id as supply_med_src_type_id,
        pos.pharmacy_id as supply_pharmacy_id,
        eef.name as supply_pharmacy_name,
        pos.reordering as supply_reordering,
        pos.status AS supply_status,
        pos.new_supply_flag as supply_new_supply_flag,
        pos.last_reorder_date as supply_last_reorder_date,
        pos.disp_code as supply_disp_code,
        pos.pharm_nurse_notes as pharm_nurse_notes,
        pos.nurse_pharm_notes as nurse_pharm_notes,
        pos.disp_package_identifier as supply_disp_package_identifier,
        pos.controlled_substance_code as supply_controlled_substance_code,
        pos.prescription as supply_prescription,
        pos.do_not_fill as supply_do_not_fill,
        pos.inventory_on_hand as inventory_on_hand,
        pos.next_refill_date as next_refill_date,
        psd.pharmacy_order_id as pharmacy_order_id,
        CASE  WHEN ip.pharmacy_id IS NULL THEN 'N' ELSE 'Y' END 'integrated_pharmacy',
        pos.active as supply_active,
        mmdb.dbo.fn_pho_getImageFilenameByNDC(pos.drug_code) as imageFileName, 
        pos.drug_code as drug_code
    FROM pho_order_supply pos
        
        LEFT JOIN emc_ext_facilities eef ON eef.ext_fac_id = pos.pharmacy_id
        left join pho_supply_dispense psd on psd.order_supply_id = pos.order_supply_id and psd.deleted='N'
        LEFT JOIN @integratedPharmacies ip
                    ON ip.pharmacy_id = pos.pharmacy_id
    WHERE (pos.active = 'Y' or pos.active = 'N') AND pos.deleted = 'N' and pos.phys_order_id = @physOrderId
    ORDER BY pos.created_date DESC
END

	if(@debug='Y') begin Print 'END STEP select enhanced phys order		' + ' ' + convert(varchar(26),getdate(),109) end

END TRY
 
--error trapping
BEGIN CATCH

SELECT @error_code = @@error
	 , @status_text = ERROR_MESSAGE()
 
	SET @status_code = 1

	GOTO PgmAbend
 
END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
	IF @debug='Y' PRINT 'Successfull execution of stored procedure'
	RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '	' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:	' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON sproc_pho_list_getEnhancedOrder TO PUBLIC
GO



GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


 -- ===============================================================================================================================
 -- 
 -- Purpose: The purpose of this procedure is to load a phys order with all it's schedule information.
 --			 Please note that this stored procedure is a copy of 'sproc_pho_list_getEnhancedOrder' but has all MMDB references removed.
 --
 --
 -- Target ENVIRONMENT: BOTH 
 --
 --  Special Instructions: 
 --
 --	Params:
 --			
 --			@physOrderId    - phys order id
 --			@facId			- Facility Id 
 --			@includeAdministrativeOrder - Flag to include Administrative Orders, 'Y' or 'N'
 --			@includeSupplyInfo - Flag to include Supply Info, 'Y' or 'N'
 --			@debug          - Debug param, 'Y' or 'N'
 --			@status_code    - SP execution flag, 0 for success.
 --			@status_text    - SP error text if error occurs.
 --
 -- Change History:
 --   Author			Date		Comment
 -- ------------------------------------------------------------------------------------------------------------------------------- 
 --	  Joel Pelletier    08/11/2011	Created.
 --   Alireza Mandegar	10/15/2012	Updated due to PCC-33677 and Replaced the usage of fn_pho_getOrderStatus with sproc_pho_getOrderStatus
 --									Also modified the file maintenance box to be in sql comment format rather than java format
 --									and added the Change History section to it to keep track of changes.
 --  Alireza Mandegar	 11/12/2012	Added pho_ext_lib_generic_desc/id for PCC-34329
 --  Alireza Mandegar	 11/22/2012	Added schedule_sliding_scale_id due to PCC-30715
 --  Alireza Mandegar	 11/29/2012	Added schedule_dose_duration due to PCC-32538
 --  Feng Xia			 12/15/2012	Added xxMonths
 --  Alireza Mandegar	 12/20/2012	Added apply_remove_flag due to PCC-32537
 --  Alireza Mandegar	 01/25/2013	Added remove_time due to PCC-32537
 --  Alireza Mandegar	 01/31/2013	Added remove_duration due to PCC-32537
 --  Aarti Malhotra      09/24/2013  Added pho_ext_lib_rxnorm for PCC-47251 (main JIRA PCC-46704)
 --  Mustafa Behrainwala 04/28/2014  Added table to handle Therapeutic Interchange sliding scale PCC-52492 
 --  Mustafa Behrainwala 07/31/2014  Added Linked Set Id and Description for PCC-59209
 --	 Mustafa Behrainwala 10/29/2015	 Added order_class_id
 --  Willie Wong		 05/11/2016	 Added schedule_directions for dietary orders for PCC-94151
 --	 Nooshin Hayeri		 06/29/2016	Added snapshot_schedule_start_date for PCC-96359
 --  Melvin Parinas      07/16/2016  Removed snapshot_schedule_start_date and replaced with earliest_prescriber_start_date date PCC-96359
 --  Melvin Parinas      07/25/2016  Added prescriber_schedule_start_date due to PCC-98059	
 --	 Devika Bapat		 02/24/2017	Added 2 optional parameters to include administrative orders and supply info PCC-108894
 --	 Mustafa Behrainwala 10/12/2018 Modified due to CORE-23367 to add dose_low for dose ranging.
 --	 Elias Ghanem 		 12/21/2018 	Added last_pharmacy_end_date due to CORE-28433.
 --  Mustafa Behrainwala 01/29/2019 Modified due to CORE-29190 return behavior lookup
 --  Elias Ghanem 		 01/29/2019 Added schedule_revision_date due to CORE-85435
 --  Sree Naghasundharam 11/18/2021 Created this new stored procedure 'sproc_pho_list_getEnhancedOrder_v2' and Removed MMDB references (CORE-97119)
 -- ===============================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_list_getEnhancedOrder_v2]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_pho_list_getEnhancedOrder_v2]
GO

create 
proc sproc_pho_list_getEnhancedOrder_v2
(
	@physOrderId	int,
	@facId			int,
	@includeAdministrativeOrder	char(1) = 'N',
	@includeSupplyInfo char(1) = 'N',
	@debug char(1)  = 'N',
	@status_code int out, 
	@status_text varchar(3000) out
)
as 
begin

SET NOCOUNT ON

DECLARE @step			int,
		@error_code		int

	   

BEGIN TRY

    -- PCC-33677
    ----Localize input Variables
    DECLARE  @vFacId int
            ,@vClientId int
            ,@vPhysOrderId int
            ,@vDateTime datetime
			,@vOrderCategory int
        
    -- Set the local variables
    select 
        @vFacId         = @facId 
       ,@vClientId      = null 
	   ,@vPhysOrderId   = @physOrderId
       ,@vDateTime      = dbo.fn_facility_getCurrentTime(@facId)
	   ,@status_code 	= 0
        
    -- Table variable to store the result of sproc_pho_getOrderStatus
    declare @TMP_PhoOrderStatus table (phys_order_id    int
                                    ,fac_id             int
                                    ,order_status       smallint
                                    ,order_relationship int
                                    ,status_reason      varchar(75));
    
	set @vOrderCategory = (select order_category_id from pho_phys_order where phys_order_id=@vPhysOrderId)
	
	-- Check exist in pho_phys_order table, struck out order does not has record in pho_phys_order table, if not exit, there is no need to execute sproc_pho_getOrderStatus
	if @vOrderCategory > 0
	begin
		-- Fill the table variable
		insert into @TMP_PhoOrderStatus
		exec sproc_pho_getOrderStatus 
				@facId          = @vFacId
				,@clientId      = @vClientId
				,@physOrderId   = @vPhysOrderId
				,@date          = @vDateTime
				,@debug         = 'N'
				,@status_code   = @status_code
				,@status_text   = @status_text
	end

	if @debug = 'Y'  select * From @TMP_PhoOrderStatus

	if isnull(@status_code,0) <> 0
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@status_text,'')
				Raiserror( @status_text, 11, 1 );
		  end

	
	if(@debug='Y') begin Print 'BEGIN STEP select enhanced phys order	' + ' ' + convert(varchar(26),getdate(),109) end

SELECT 
o.phys_order_id
, o.order_type_id
, o.physician_id
, o.pharmacy_id
, o.fac_id
, o.std_freq_id
, o.client_id
, o.drug_code
, o.created_by
, o.created_date
, o.revision_by
, o.revision_date
, o.reorder
, o.date_ordered
, o.start_date
, o.end_date
, o.strength
, o.form
, o.route_of_admin
, o.diagnoses
, o.description
, o.directions
, o.related_generic
, o.supplementary_notes
, o.communication_method
, o.diet_type
, diettype.item_description AS diet_type_description
, o.diet_texture
, diettexture.item_description AS diet_texture_description
, o.stat
, o.packaging
, o.disc_with_pharm
, o.quantity_to_administer
, o.std_order_id
, o.discontinued_date
, o.fluid_consistency
, fluidcon.item_description AS fluid_consistency_description
, o.diet_supplement
, dietsup.item_description AS diet_supplement_description
, o.hold_date
, o.nurse_admin_notes
, o.nurse_pharm_notes
, o.delivery_notes
, o.delivery_type
, o.self_admin
, o.administered_by_id
, o.prn_flag
, o.label_name
, o.reorder_count
, o.last_reorder_date
, o.quantity_received
, o.tran_id
, o.prescription
, o.start_date_type
, o.end_date_type
, o.end_date_duration_type
, o.end_date_duration
, o.schedule_dose_duration -- PCC-32538
, o.alter_med_src
, o.alter_med_src_name
, o.sent_date
, vpos.order_status
, o.status_change_by
, o.status_change_date
, o.hold_physician_id
, o.discontinue_physician_id
, o.pharm_nurse_notes
, o.first_admin
, o.drug_manufacturer
, o.drug_class_number
, o.resume_physician_id
, o.event_driven_flag
, o.auto_fill_flag
, o.controlled_substance_code
, o.related_phys_order_id
, o.relationship
, o.auto_created_flag
, o.active_flag
, o.new_supply_flag
, o.resume_date
, o.last_received_date
, o.orig_phys_order_id
, o.disp_package_identifier
, o.hold_date_end
, o.vendor_phys_order_id
, o.order_date
, o.sliding_scale_id
, o.order_verified
, o.dispense_as_written
, o.next_refill_date
, o.do_not_fill
, o.cur_supply_id
, o.first_documented
, o.substitution_indicator
, o.reassessment_required
, o.completed_date
, o.completed_by
, o.verify_copied_order
, o.original_route_of_admin
, o.indications_for_use
, o.draft
, o.origin_id
, o.order_category_id
, o.order_revision_date
, o.order_revision_by
, o.drug_strength
, o.drug_strength_uom
, o.drug_name
, o.is_new_order
, o.order_schedule_id
, o.start_date as schedule_start_date
, o.end_date as schedule_end_date
, o.last_pharmacy_end_date
, o.physician_name_in_msg
, s.schedule_id
, s.schedule_type
, s.pho_std_time_id
, s.xxdays as xx_days
, s.sun
, s.mon
, s.tues as tue
, s.wed
, s.thurs as thu
, s.fri
, s.sat
, s.days_on
, s.days_off
, s.std_freq_id
, s.dose AS dose_value
, s.dose_low
, s.alternate_dose
, s.start_time
, s.end_time
, s.nurse_action_notes
, s.date_start
, s.date_stop
, s.repeat_week
, s.apply_to
, s.prn_admin
, s.prn_admin_value
, s.prn_admin_units
, s.std_freq_time_label
, s.until_finished
, s.quantity_uom_id
, s.dose_uom_id
, case 
       -- diet orders do not populate the view_pho_schedule need to get directly from the pho_order_schedule table
       when  s.schedule_directions is null and o.order_category_id = 3031 then o.schedule_directions 
       else s.schedule_directions
end as schedule_directions
, o.order_directions as order_directions
, s.schedule_template
, s.xxMonths
, s.date_of_month
, s.std_shift_id
, s.schedule_sliding_scale_id
, s.apply_remove_flag
, s.remove_time
, s.remove_duration
, s.behavior_lookback
, o.schedule_revision_date
, v.vital
, p.prompt_id
, p.value_type
, p.description as prompt_description
, p.long_description
, p.notes
, p.no_of_values
, p.current_value2
, p.current_value
, p.specify_initial_value
, p.value_data_type
, p.prompt_frequency_type
, p.prompt_frequency
, p.value_date
, pt.short_desc
, c.first_name AS physician_first_name
, c.last_name AS physician_last_name
, c.title + ' ' + c.first_name + ' ' + c.last_name AS physician_fullname
, cb.long_username AS created_by_long
, rb.long_username AS revision_by_long
, poua.edited_by_audit_id
, poua.edited_date
, poua.created_by_audit_id
, edituser.long_username AS edited_by_long
, edituser.position_description AS edited_by_position
, edituser.designation_desc AS edited_by_designation
, createuser.long_username AS created_by_audit_long
, createuser.position_description AS created_by_position
, createuser.designation_desc AS created_by_designation
, poua.confirmed_by_audit_id
, poua.confirmed_date
, confuser.long_username AS confirmed_by_long
, confuser.position_description AS confirmed_by_position
, confuser.designation_desc AS confirmed_by_designation
, lib.pho_ext_lib_id
, lib.pho_ext_lib_med_id
, lib.pho_ext_lib_med_ddid
, lib.pho_ext_lib_generic_id
, lib.pho_ext_lib_generic_desc
, lib.ext_lib_rxnorm_id
, o.min_start_date
, o.max_end_date
, o.emergency_pharmacy_flag
, o.need_location_of_admin
, so.advanced_directive as order_advanced_directive
, poad.advanced_dir_status
, pspo.advanced_directive as advanced_directive
, signuser.long_username as signed_by_long
, ppos.signature_date
, o.extended_end_date
, o.extended_count
, custmed.cust_med_id
, ti.orig_phys_order_id as original_ti_phys_order_id
, lsi.linked_set_id as linked_set_id
, ls.set_description as linked_set_description
, nctrlsc.new_controlled_substance_code as new_controlled_substance_code
, esign.marked_to_sign_user_id
, case when marked_to_sign_user_id is not null then dbo.fn_get_username(marked_to_sign_user_id) else null end as marked_to_sign_user_longname
, esign.marked_to_sign_date
, esign.marked_to_sign_contact_id
, esign.marked_to_sign_authentication_type_id
, esign.marked_to_sign_source_type_id
, rstype.description as marked_to_sign_source_type_description
, esign.sign_user_id
, case when sign_user_id is not null then dbo.fn_get_username(sign_user_id) else null end as sign_user_longname
, esign.sign_date
, esign.sign_contact_id
, esign.sign_authentication_type_id
, atype.description as sign_authentication_type_description
, esign.sign_source_type_id
, stype.description as sign_source_type_description
, popr.reason_binary_code
, clinrev.reviewed_date
, clinrev.phys_order_id as review_order_id
, clinrev.reviewed_by
, oq.quantity as prescription_quantity
, oq.unit_of_measure as prescription_quantity_uom
, oq.no_of_refills as prescription_no_of_refills
, o.order_class_id
, o.prescriber_schedule_start_date as earliest_prescriber_start_date
, o.prescriber_schedule_start_date
, o.linked_order_id
, o.linked_reason_id
, poa.facility_medical_attestation_id

FROM
	view_pho_phys_order o
	LEFT JOIN @TMP_PhoOrderStatus vpos
		ON o.phys_order_id = vpos.phys_order_id
	LEFT JOIN view_pho_schedule s
		ON o.order_schedule_id = s.order_schedule_id AND o.phys_order_id = s.phys_order_id
		AND s.deleted = 'N'
	LEFT JOIN COMMON_CODE diettype
        ON @vOrderCategory=3031 and o.diet_type = diettype.item_id and diettype.item_code = 'phodyt' -- only need for diet order
    LEFT JOIN COMMON_CODE diettexture
        ON @vOrderCategory=3031 and o.diet_texture = diettexture.item_id and diettexture.item_code = 'phodtx' -- only need for diet order
    LEFT JOIN COMMON_CODE dietsup
        ON @vOrderCategory=3032 and o.diet_supplement = dietsup.item_id and dietsup.item_code = 'phosup' -- only need for diet supplement order
    LEFT JOIN COMMON_CODE fluidcon
    	ON @vOrderCategory=3031 and o.fluid_consistency = fluidcon.item_id and fluidcon.item_code = 'phocst' -- only need for diet order
	LEFT JOIN pho_schedule_vitals v
		ON s.schedule_id = v.schedule_id and v.deleted = 'N'
	LEFT JOIN pho_order_related_prompt p
		ON s.schedule_id = p.schedule_id and p.deleted ='N'
	LEFT JOIN pho_order_related_value_type pt
		ON p.value_type = pt.type_id
	LEFT JOIN contact c
		ON c.contact_id = o.physician_id
	LEFT JOIN sec_user cb
		ON cb.loginname = o.created_by
	LEFT JOIN sec_user rb
		ON rb.loginname = o.revision_by
	LEFT JOIN pho_phys_order_useraudit poua
		ON poua.phys_order_id = o.phys_order_id
	LEFT JOIN cp_sec_user_audit createuser
	  ON createuser.cp_sec_user_audit_id = poua.created_by_audit_id
	LEFT JOIN cp_sec_user_audit edituser
	  ON edituser.cp_sec_user_audit_id = poua.edited_by_audit_id
	LEFT JOIN cp_sec_user_audit confuser
	  ON confuser.cp_sec_user_audit_id = poua.confirmed_by_audit_id
	LEFT JOIN pho_order_ext_lib_med_ref lib
	  ON @vOrderCategory=3022 and lib.phys_order_id = o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_std_order templateorder
	  ON @vOrderCategory=3029 and templateorder.phys_order_id = o.phys_order_id -- only need for other category order
	LEFT JOIN  pho_std_order so 
	  ON @vOrderCategory=3029 and templateorder.std_order_id = so.std_order_id -- only need for other category order
	LEFT JOIN pho_std_phys_order pspo
	  ON @vOrderCategory=3029 and o.std_order_id = pspo.std_phys_order_id -- only need for other category order
	LEFT JOIN pho_phys_order_advanced_directive poad
	  ON @vOrderCategory=3029 and o.phys_order_id = poad.phys_order_id -- only need for other category order
	LEFT JOIN pho_phys_order_sign ppos
	  ON o.phys_order_id = ppos.phys_order_id
	LEFT JOIN cp_sec_user_audit signuser
	  ON signuser.cp_sec_user_audit_id = ppos.cp_sec_user_audit_id
	LEFT JOIN pho_phys_order_cust_med custmed
	  ON @vOrderCategory=3022 and custmed.phys_order_id = o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_ti ti
	  ON ti.phys_order_id = o.phys_order_id
	LEFT JOIN pho_linked_set_item lsi
	  ON lsi.phys_order_id = o.phys_order_id
	LEFT JOIN pho_linked_set ls on ls.linked_set_id = lsi.linked_set_id
	LEFT JOIN pho_phys_order_new_ctrlsubstancecode nctrlsc ON @vOrderCategory=3022 and nctrlsc.phys_order_id=o.phys_order_id -- only need for pharmacy order
	LEFT JOIN pho_phys_order_esignature esign  ON o.phys_order_id = esign.phys_order_id
	LEFT JOIN order_sign_source_type stype ON esign.sign_source_type_id = stype.source_type_id
	LEFT JOIN order_sign_source_type rstype ON esign.marked_to_sign_source_type_id = rstype.source_type_id
	LEFT JOIN order_sign_authentication_type atype ON esign.sign_authentication_type_id = atype.authentication_type_id
	LEFT JOIN pho_order_pending_reason popr ON popr.phys_order_id = o.phys_order_id
    LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=o.phys_order_id 
    LEFT JOIN pho_phys_order_quantity_info oq on @vOrderCategory=3022 and oq.phys_order_id=o.phys_order_id -- only need for pharmacy order
    LEFT JOIN pho_phys_order_attestation poa ON @vOrderCategory=3022 and poa.phys_order_id = o.phys_order_id -- only need for pharmacy order

WHERE
	o.phys_order_id = @physOrderId
	
ORDER BY o.order_schedule_id, s.schedule_id

-- select administrative orders
if @includeAdministrativeOrder='Y'
	select vpao.admin_created_date,
	vpao.admin_order_verified,
	vpao.order_related_id,
	vpao.phys_order_id,
	vpao.standard_phys_order_id,
	vpao.created_by,
	vpao.created_date,
	vpao.revision_by,
	vpao.revision_date,
	vpao.deleted_by,
	vpao.deleted_date,
	vpao.deleted,
	vpao.fac_id,
	vpao.order_relationship_id,
	vpao.admin_communication_method,
	vpao.admin_effective_date,
	vpao.admin_ineffective_date,
	vpao.admin_physician_id,
	vpao.admin_reason,
	vpao.admin_noted_by,
	vpao.admin_physician_first_name,
	vpao.admin_physician_last_name,
	vpao.strikeout_by,
	vpao.strikeout_date,
	vpao.strikeout_reason_code,
	vpao.strikeout_reason_description,
	vpao.strikeout_by_long,
	vpao.admin_order_id,
	vpao.admin_origin_id,
	secuser.long_username 'created_by_long' , secuser.designation_desc as created_by_designation, ccc.item_description as created_by_position
	,csua.long_username confirmed_by_username, csua.position_description as confirmed_by_position, csua.designation_desc as confirmed_by_designation, ua.confirmed_date as confirmed_date
	FROM view_pho_administrative_order vpao
	left join SEC_USER secuser on secuser.loginname = vpao.created_by
	left join common_code ccc on ccc.item_id = secuser.position_id
	left join pho_admin_order_useraudit ua ON ua.admin_order_id = vpao.admin_order_id
	left join cp_sec_user_audit csua on csua.cp_sec_user_audit_id = ua.confirmed_by_audit_id
	WHERE vpao.standard_phys_order_id = @physOrderId
	ORDER BY vpao.revision_date  DESC

IF @includeSupplyInfo='Y'
BEGIN
	DECLARE @integratedPharmacies TABLE
    (
        pharmacy_id int not null
    )
	INSERT INTO @integratedPharmacies (pharmacy_id)
	select distinct extFacId from (
		SELECT mp.ext_fac_id as extFacId
			FROM message_profile mp WITH (NOLOCK)
			INNER JOIN lib_message_profile lmp WITH (NOLOCK)
				ON lmp.message_profile_id = mp.message_profile_id
			       AND lmp.deleted = 'N' and lmp.is_enabled='Y'
			WHERE mp.is_enabled = 'Y' and mp.is_integrated_pharmacy='Y'
			AND mp.fac_id = @facId
			AND mp.message_protocol_id = 12
			GROUP BY mp.ext_fac_id
		UNION
		SELECT distinct mi.internal_id as extFacId
			FROM map_identifier mi WITH (NOLOCK)
			INNER JOIN lib_message_profile libmp WITH (NOLOCK)
			ON libmp.vendor_code = mi.vendor_code
			AND libmp.deleted = 'N'
			INNER JOIN message_profile mp WITH (NOLOCK)
			ON libmp.message_profile_id = mp.message_profile_id
			WHERE mi.map_type_id = 3 and mp.fac_id = @facId and  mi.fac_id = @facId
	) a where extFacId is not null

select pos.phys_order_id,
        pos.order_supply_id,
        pos.description as supply_description,
        pos.directions as supply_directions,
        pos.date_dispensed as date_dispensed,
        pos.last_received_date as supply_received_date,
        pos.med_src_type_id as supply_med_src_type_id,
        pos.pharmacy_id as supply_pharmacy_id,
        eef.name as supply_pharmacy_name,
        pos.reordering as supply_reordering,
        pos.status AS supply_status,
        pos.new_supply_flag as supply_new_supply_flag,
        pos.last_reorder_date as supply_last_reorder_date,
        pos.disp_code as supply_disp_code,
        pos.pharm_nurse_notes as pharm_nurse_notes,
        pos.nurse_pharm_notes as nurse_pharm_notes,
        pos.disp_package_identifier as supply_disp_package_identifier,
        pos.controlled_substance_code as supply_controlled_substance_code,
        pos.prescription as supply_prescription,
        pos.do_not_fill as supply_do_not_fill,
        pos.inventory_on_hand as inventory_on_hand,
        pos.next_refill_date as next_refill_date,
        psd.pharmacy_order_id as pharmacy_order_id,
        CASE  WHEN ip.pharmacy_id IS NULL THEN 'N' ELSE 'Y' END 'integrated_pharmacy',
        pos.active as supply_active,
        '' as imageFileName, 
        pos.drug_code as drug_code
    FROM pho_order_supply pos
        
        LEFT JOIN emc_ext_facilities eef ON eef.ext_fac_id = pos.pharmacy_id
        left join pho_supply_dispense psd on psd.order_supply_id = pos.order_supply_id and psd.deleted='N'
        LEFT JOIN @integratedPharmacies ip
                    ON ip.pharmacy_id = pos.pharmacy_id
    WHERE (pos.active = 'Y' or pos.active = 'N') AND pos.deleted = 'N' and pos.phys_order_id = @physOrderId
    ORDER BY pos.created_date DESC
END

	if(@debug='Y') begin Print 'END STEP select enhanced phys order		' + ' ' + convert(varchar(26),getdate(),109) end

END TRY
 
--error trapping
BEGIN CATCH

SELECT @error_code = @@error
	 , @status_text = ERROR_MESSAGE()
 
	SET @status_code = 1

	GOTO PgmAbend
 
END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
	IF @debug='Y' PRINT 'Successfull execution of stored procedure'
	RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '	' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:	' +@status_text
RETURN @status_code

END
GO

GRANT EXECUTE ON sproc_pho_list_getEnhancedOrder_v2 TO PUBLIC
GO



GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder_v2.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrder_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrderByVendorOrderId.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


 -- ===============================================================================================================================
 -- 
 -- Purpose: The purpose of this procedure is to load a phys order with all it's schedule information
 --
 -- Target ENVIRONMENT: BOTH 
 --
 --  Special Instructions: 
 --
 --	Params:
 --			
 --			@vendorPhysOrderId  - vendor phys order id
 --			@facId			    - Facility Id 
 --         @clientId           - Client Id
 --			@debug              - Debug param, 'Y' or 'N'
 --			@status_code        - SP execution flag, 0 for success.
 --			@status_text        - SP error text if error occurs.
 --
 -- Change History:
 --   Author			Date		Comment
 -- ------------------------------------------------------------------------------------------------------------------------------- 
 --	  Patryk Golabek    01/25/2012	Created.
 --   Arshad Ali        06/06/2012  ???
 --   Alireza Mandegar	10/15/2012	Updated due to PCC-33677 and Replaced the usage of fn_pho_getOrderStatus with sproc_pho_getOrderStatus
 --									Also modified the file maintenance box to be in sql comment format rather than java format
 --									and added the Change History section to it to keep track of changes.
 --   Alireza Mandegar	11/22/2012	Added schedule_sliding_scale_id due to PCC-30715
 --   Alireza Mandegar	11/29/2012	Added schedule_dose_duration due to PCC-32538
 --	  Elias Ghanem      12/21/2018  Added last_pharmacy_end_date due to CORE-28433.
 --   Mustafa Behrainwala   02/08/2019  Added behavior_lookback flag to be returned due to CORE-29190
 -- ===============================================================================================================================

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sproc_pho_list_getEnhancedOrderByVendorOrderId]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
   drop procedure [dbo].[sproc_pho_list_getEnhancedOrderByVendorOrderId]
GO

create 
proc [dbo].[sproc_pho_list_getEnhancedOrderByVendorOrderId]
(
	@vendorPhysOrderId varchar(30),
	@facId int,
	@clientId int,
	@debug char(1)  = 'N',
	@status_code int  out, 
	@status_text varchar(3000) out
)
as 
begin

SET NOCOUNT ON

DECLARE @step			int,
	@error_code		int

	   

BEGIN TRY	

    -- PCC-33677
    ----Localize input Variables
    DECLARE  @vFacId int
            ,@vClientId int
            ,@vPhysOrderId int
            ,@vDateTime datetime
        
    -- Set the local variables
    select 
        @vFacId         = @facId, 
		@vClientId  = (
        case when (@clientId <= 0)
        then	null
        else @clientId
	    end)
	   ,@vPhysOrderId   = null
       ,@vDateTime      = getdate()
        
    -- Temp table to store the result of sproc_pho_getOrderStatus
    CREATE TABLE #TMP_PhoOrderStatus(phys_order_id      int
                                    ,fac_id             int
                                    ,order_status       smallint
                                    ,order_relationship int
                                    ,status_reason      varchar(75));
    -- Fill the temp table
	insert into #TMP_PhoOrderStatus
	exec sproc_pho_getOrderStatus 
			@facId          = @vFacId
			,@clientId      = @vClientId
			,@physOrderId   = @vPhysOrderId
			,@date          = @vDateTime
			,@debug         = 'N'
			,@status_code   = @status_code
			,@status_text   = @status_text

	if @debug = 'Y'  select * From #TMP_PhoOrderStatus

	if isnull(@status_code,0) <> 0
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@status_text,'')
				Raiserror( @status_text, 11, 1 );
		  end

	Create Clustered Index _temp_TMP_PhoOrderStatus_idx on #TMP_PhoOrderStatus( phys_order_id ) ;

    -- /PCC-33677

	if(@debug='Y') begin Print 'BEGIN STEP select enhanced phys order	' + ' ' + convert(varchar(26),getdate(),109) end

--declare @vendorPhysOrderId varchar(20); set @vendorPhysOrderId = 'R31261283'
SELECT 
o.phys_order_id
, o.order_type_id
, o.physician_id
, o.pharmacy_id
, o.fac_id
, o.std_freq_id
, o.client_id
, o.drug_code
, o.created_by
, o.created_date
, o.revision_by
, o.revision_date
, o.reorder
, o.date_ordered
, o.start_date
, o.end_date
, o.strength
, o.form
, o.route_of_admin
, o.diagnoses
, o.description
, o.directions
, o.order_directions as order_directions
, o.related_generic
, o.supplementary_notes
, o.communication_method
, o.diet_type
, diettype.item_description AS diet_type_description
, o.diet_texture
, diettexture.item_description AS diet_texture_description
, o.stat
, o.packaging
, o.disc_with_pharm
, o.quantity_to_administer
, o.std_order_id
, o.discontinued_date
, o.fluid_consistency
, fluidcon.item_description AS fluid_consistency_description
, o.diet_supplement
, dietsup.item_description AS diet_supplement_description
, o.hold_date
, o.nurse_admin_notes
, o.nurse_pharm_notes
, o.delivery_notes
, o.delivery_type
, o.self_admin
, o.administered_by_id
, o.prn_flag
, o.label_name
, o.reorder_count
, o.last_reorder_date
, o.quantity_received
, o.tran_id
, o.prescription
, o.start_date_type
, o.end_date_type
, o.end_date_duration_type
, o.end_date_duration
, o.schedule_dose_duration -- PCC-32538
, o.alter_med_src
, o.alter_med_src_name
, o.sent_date
, vpos.order_status
, o.status_change_by
, o.status_change_date
, o.hold_physician_id
, o.discontinue_physician_id
, o.pharm_nurse_notes
, o.first_admin
, o.drug_manufacturer
, o.drug_class_number
, o.resume_physician_id
, o.event_driven_flag
, o.auto_fill_flag
, o.controlled_substance_code
, o.related_phys_order_id
, o.relationship
, o.auto_created_flag
, o.active_flag
, o.new_supply_flag
, o.resume_date
, o.last_received_date
, o.orig_phys_order_id
, o.disp_package_identifier
, o.hold_date_end
, o.vendor_phys_order_id
, o.order_date
, o.sliding_scale_id
, o.order_verified
, o.dispense_as_written
, o.next_refill_date
, o.do_not_fill
, o.cur_supply_id
, o.first_documented
, o.substitution_indicator
, o.reassessment_required
, o.completed_date
, o.completed_by
, o.verify_copied_order
, o.original_route_of_admin
, o.indications_for_use
, o.draft
, o.origin_id
, o.order_category_id
, o.order_revision_date
, o.order_revision_by
, o.drug_strength
, o.drug_strength_uom
, o.drug_name
, o.is_new_order
, o.order_schedule_id
, o.start_date as schedule_start_date
, o.end_date as schedule_end_date
, o.last_pharmacy_end_date
, s.schedule_id
, s.schedule_type
, s.pho_std_time_id
, s.xxdays as xx_days
, s.sun
, s.mon
, s.tues as tue
, s.wed
, s.thurs as thu
, s.fri
, s.sat
, s.days_on
, s.days_off
, s.std_freq_id
, s.dose AS dose_value
, s.alternate_dose
, s.start_time
, s.nurse_action_notes
, s.date_start
, s.date_stop
, s.repeat_week
, s.apply_to
, s.prn_admin
, s.prn_admin_value
, s.prn_admin_units
, s.std_freq_time_label
, s.until_finished
, s.quantity_uom_id
, s.dose_uom_id
, s.schedule_directions
, s.schedule_template
, s.schedule_sliding_scale_id
, s.apply_remove_flag
, s.remove_time
, s.remove_duration
, s.behavior_lookback
, v.vital
, p.prompt_id
, p.value_type
, p.description as prompt_description
, p.notes
, p.no_of_values
, p.current_value2
, p.current_value
, p.specify_initial_value
, p.value_data_type
, p.prompt_frequency_type
, p.prompt_frequency
, p.value_date
, pt.short_desc
, c.first_name AS physician_first_name
, c.last_name AS physician_last_name
, c.title + ' ' + c.first_name + ' ' + c.last_name AS physician_fullname
, cb.long_username AS created_by_long
, rb.long_username AS revision_by_long
, poua.edited_by_audit_id
, poua.edited_date
, poua.created_by_audit_id
, edituser.long_username AS edited_by_long
, edituser.position_description AS edited_by_position
, edituser.designation_desc AS edited_by_designation
, createuser.long_username AS created_by_audit_long
, createuser.position_description AS created_by_position
, createuser.designation_desc AS created_by_designation
, poua.confirmed_by_audit_id
, poua.confirmed_date
, confuser.long_username AS confirmed_by_long
, confuser.position_description AS confirmed_by_position
, confuser.designation_desc AS confirmed_by_designation
, lib.pho_ext_lib_id
, lib.pho_ext_lib_med_id
, o.min_start_date
, o.max_end_date
, ti.orig_phys_order_id as original_ti_phys_order_id
, nctrlsc.new_controlled_substance_code as new_controlled_substance_code
, esign.marked_to_sign_user_id
, dbo.fn_get_username(esign.marked_to_sign_user_id) as marked_to_sign_user_longname
, esign.marked_to_sign_date
, esign.marked_to_sign_contact_id
, esign.marked_to_sign_authentication_type_id
, esign.marked_to_sign_source_type_id
, rstype.description as marked_to_sign_source_type_description
, esign.sign_user_id
, dbo.fn_get_username(esign.sign_user_id) as sign_user_longname
, esign.sign_date
, esign.sign_contact_id
, esign.sign_authentication_type_id
, atype.description as sign_authentication_type_description
, esign.sign_source_type_id
, stype.description as sign_source_type_description
, clinrev.reviewed_date
, clinrev.phys_order_id as review_order_id
, clinrev.reviewed_by
, oq.quantity as prescription_quantity
, oq.unit_of_measure as prescription_quantity_uom
, oq.no_of_refills as prescription_no_of_refills
, o.order_class_id
, poa.facility_medical_attestation_id

FROM
	view_pho_phys_order o
	LEFT JOIN #TMP_PhoOrderStatus vpos with (nolock)
		ON o.phys_order_id = vpos.phys_order_id
	LEFT JOIN view_pho_schedule s
		ON o.order_schedule_id = s.order_schedule_id AND o.phys_order_id = s.phys_order_id
	LEFT JOIN COMMON_CODE diettype
        ON o.diet_type = diettype.item_id and diettype.item_code = 'phodyt'
    LEFT JOIN COMMON_CODE diettexture
        ON o.diet_texture = diettexture.item_id and diettexture.item_code = 'phodtx'
    LEFT JOIN COMMON_CODE dietsup
        ON o.diet_supplement = dietsup.item_id and dietsup.item_code = 'phosup'
    LEFT JOIN COMMON_CODE fluidcon
    	ON o.fluid_consistency = fluidcon.item_id and fluidcon.item_code = 'phocst'
	LEFT JOIN pho_schedule_vitals v
		ON s.schedule_id = v.schedule_id and v.deleted = 'N'
	LEFT JOIN pho_order_related_prompt p
		ON s.schedule_id = p.schedule_id and p.deleted ='N'
	LEFT JOIN pho_order_related_value_type pt
		ON p.value_type = pt.type_id
	LEFT JOIN contact c
		ON c.contact_id = o.physician_id
	LEFT JOIN sec_user cb
		ON cb.loginname = o.created_by
	LEFT JOIN sec_user rb
		ON rb.loginname = o.revision_by
	LEFT JOIN pho_phys_order_useraudit poua
		ON poua.phys_order_id = o.phys_order_id
	LEFT JOIN cp_sec_user_audit createuser
	  ON createuser.cp_sec_user_audit_id = poua.created_by_audit_id
	LEFT JOIN cp_sec_user_audit edituser
	  ON edituser.cp_sec_user_audit_id = poua.edited_by_audit_id
	LEFT JOIN cp_sec_user_audit confuser
	  ON confuser.cp_sec_user_audit_id = poua.confirmed_by_audit_id
	LEFT JOIN pho_order_ext_lib_med_ref lib
	  ON lib.phys_order_id = o.phys_order_id
	LEFT JOIN pho_phys_order_ti ti
	  ON ti.phys_order_id = o.phys_order_id
	LEFT JOIN pho_phys_order_new_ctrlsubstancecode nctrlsc ON nctrlsc.phys_order_id=o.phys_order_id
	LEFT JOIN pho_phys_order_esignature esign  ON o.phys_order_id = esign.phys_order_id
    LEFT JOIN pho_phys_order_quantity_info oq on oq.phys_order_id=o.phys_order_id
    LEFT JOIN order_sign_source_type rstype ON esign.marked_to_sign_source_type_id = rstype.source_type_id
	LEFT JOIN order_sign_authentication_type atype ON esign.sign_authentication_type_id = atype.authentication_type_id
	LEFT JOIN order_sign_source_type stype ON esign.sign_source_type_id = stype.source_type_id
    LEFT JOIN pho_order_clinical_review clinrev ON clinrev.phys_order_id=o.phys_order_id
    LEFT JOIN pho_phys_order_attestation poa ON poa.phys_order_id = o.phys_order_id

WHERE o.vendor_phys_order_id = @vendorPhysOrderId
      AND (@clientId IS NULL OR @clientId <= 0 OR o.client_id = @clientId)
      AND o.fac_id=@facId
ORDER BY o.client_id, o.revision_date desc, o.phys_order_id desc

	if(@debug='Y') begin Print 'END STEP select enhanced phys order		' + ' ' + convert(varchar(26),getdate(),109) end			
END TRY
 
--error trapping
BEGIN CATCH

SELECT @error_code = @@error
	 , @status_text = ERROR_MESSAGE()
 
	SET @status_code = 1

	GOTO PgmAbend
 
END CATCH

--program success return
PgmSuccess:
IF @status_code = 0
BEGIN
	IF @debug='Y' PRINT 'Successfull execution of stored procedure'
	RETURN @status_code
END

--program failure return
PgmAbend:
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '	' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@step) + '; Error description:	' +@status_text
RETURN @status_code

END
GO

Grant execute on sproc_pho_list_getEnhancedOrderByVendorOrderId to public
GO
--


GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrderByVendorOrderId.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getEnhancedOrderByVendorOrderId.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getMedicationUsage.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- CORE-74470        :  Script to create [sproc_pho_list_getMedicationUsage] Procedure in Client Database
--						-- 
-- Written By:          Amro Saada
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  BOTH 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_pho_list_getMedicationUsage Procedure 
-- 
-- Special Instruction: 
-- 
-- =================================================================================

CREATE OR ALTER PROCEDURE [dbo].[sproc_pho_list_getMedicationUsage]
 @order_ids 					TableOfInt   READONLY                   -- Table-valued parameter for order id's
,@medication_class_ids			OneColumnOfStringTableType  READONLY    -- Table-valued parameter for medication class id's
,@start_date  					datetime
,@end_date						datetime
,@medispan_update_flag			bit = 0
,@debug							char(1) = 'N' 
,@status_code					int = 0 OUT  
,@status_text					varchar(3000) = '' OUT

--/************************************************************************
--Sample Execution Script:
--DECLARE @order_ids TABLEOFINT
--INSERT INTO @order_ids VALUES (3425806),(6605790),(6617803),(6617986),(6617797),(6617798),(6605624),(6243311),(6265914),(6409014),(6575005),(4766084);
--DECLARE @medication_class_ids OneColumnOfStringTableType
--INSERT INTO @medication_class_ids VALUES ('0110000000'),('0120000000'),('0130000000'),('0199000000'),('0210000000'),('0220000000'),('0230000000'),('0240000000'),('0250000000'),('0299000000'),('0310000000'),('0340000000'),('0350000000'),('0353000000'),('0400000000'),('0420000000'),('0430000000'),('0435000000'),('0499000000'),('0500000000')
--,('0700000000'),('0800000000'),('0900000000'),('1140700000'),('1600000000'),('1610000000'),('1614000000'),('1620000000'),('1621000000'),('1622000000'),('1625990000'),('1627000000'),('1699000000'),('5300000000'),('5670100000'),('8610200000'),('8810000000'),('8810990000'),('9005100000'),('9010000000'),('9010980000'),('9010990000');
--EXEC [dbo].[sproc_pho_list_getMedicationUsage]
-- @order_ids =  @order_ids
--,@medication_class_ids = @medication_class_ids
--,@start_date = '2021-06-01'				
--,@end_date   = '2021-07-01'
--,@medispan_update_flag  = 0
--,@debug = 'N'
--,@status_code = NULL
--,@status_text = '';
--**********************************************************************************/

AS
BEGIN 

SET NOCOUNT ON;

DECLARE 
	 @vstart_date 	datetime
	,@vend_date		datetime
	,@vadd_extra_day int = 1;

DECLARE @hold_orders TABLE(phys_order_id int PRIMARY KEY, related_phys_order_id int,[start_date] datetime, [end_date] datetime);

SET @vstart_date = @start_date;
SET @vend_date = @end_date;

WITH cte_hold_resume_orders
AS
(
   SELECT 
        ROW_NUMBER() OVER (ORDER BY r.related_phys_order_id,po.[start_date]) rownum
       ,r.related_phys_order_id
       ,po.phys_order_id
	   ,po.[start_date]
	   ,po.end_date
	   ,r.order_relationship_id
	FROM [dbo].[pho_phys_order] po
	INNER JOIN [dbo].[pho_admin_order_type] ot
		ON po.order_type_id = ot.order_type_id
	INNER JOIN [dbo].[pho_related_order] r
		ON r.phys_order_id = po.phys_order_id
	INNER JOIN @order_ids i
		ON i.id = r.related_phys_order_id
	WHERE ot.admin_order_type_code IN ('H','R') AND po.order_category_id = 3030
	AND po.[start_date] < @vend_date AND (po.end_date > @vstart_date OR po.end_date IS NULL)
)
, cte_hold_filtered
AS
(
	SELECT 
		 h1.phys_order_id
		,h1.related_phys_order_id
		,h1.[start_date]
		,ISNULL(h1.end_date, h2.[start_date]) AS [end_date]
	FROM cte_hold_resume_orders h1
	LEFT OUTER JOIN cte_hold_resume_orders h2
		ON  h2.rownum = h1.rownum + 1 
		AND h1.order_relationship_id = 1 
		AND h2.order_relationship_id= 2
	WHERE h1.order_relationship_id = 1
)
INSERT INTO @hold_orders
SELECT 
	 phys_order_id
	,related_phys_order_id
	,[start_date]
	,[end_date]
FROM cte_hold_filtered
WHERE ( end_date > @vstart_date OR  end_date IS NULL);


IF @medispan_update_flag = 0
BEGIN
WITH cte_classification_list
AS
(
	SELECT 
		 po.phys_order_id
		,ref.pho_ext_lib_med_ddid
		,gpi.classid
		,gpi.descdisplay AS medication_class_name
		,(SELECT MIN(EndDate) FROM (VALUES (po.end_date),(po.discontinued_date),(c.discharge_date),(@vend_date)) AS v(EndDate)) AS end_date
	FROM [dbo].[pho_phys_order] po
	INNER JOIN [dbo].[clients] c
		ON c.client_id = po.client_id
	INNER JOIN @order_ids oi
		ON oi.id = po.phys_order_id
	INNER JOIN [dbo].[pho_order_ext_lib_med_ref] ref
		ON ref.phys_order_id = po.phys_order_id
	INNER JOIN [mmdb].[dbo].[mmw_cls_gpidrug] cg
		ON ref.pho_ext_lib_med_ddid =  cg.drugid AND cg.drugtype = 3 
	INNER JOIN [mmdb].[dbo].[mmw_cls_gpi] gpi
		ON gpi.classid = cg.classid
	INNER JOIN @medication_class_ids mc
		ON gpi.classid = mc.col1 
	WHERE po.order_category_id = 3022 AND po.active_flag = 'Y' 	
	AND (po.discontinued_date IS NULL OR po.discontinued_date > IIF(po.[start_date] < @vstart_date,@vstart_date, po.[start_date]))
	AND (c.discharge_date IS NULL OR c.discharge_date > IIF(po.[start_date] < @vstart_date,@vstart_date, po.[start_date]))
	AND po.[start_date] < @vend_date AND (po.end_date > @vstart_date OR po.end_date IS NULL)
	)
,cte_hold_days
AS 
(
	SELECT h.related_phys_order_id AS phys_order_id
	,SUM(DATEDIFF(DD, CASE 
						WHEN h.[end_date] IS NULL THEN l.end_date
						WHEN h.[end_date] > l.end_date THEN  l.end_date 
						ELSE h.[end_date]	END
					, CASE 
					     WHEN h.[start_date] < @vstart_date THEN @vstart_date 
					     WHEN h.[start_date] > l.end_date THEN NULL 
						 ELSE h.[start_date] END)
		) total_hold
	,SUM(CAST(DATEDIFF(HH, CASE 
						WHEN h.[end_date] IS NULL THEN l.end_date
						WHEN h.[end_date] > l.end_date THEN  l.end_date 
						ELSE h.[end_date]	END
					, CASE 
					     WHEN h.[start_date] < @vstart_date THEN @vstart_date 
					     WHEN h.[start_date] > l.end_date THEN NULL 
						 ELSE h.[start_date] END) AS float)/24
		) total_hold_dec
	FROM [dbo].[pho_phys_order] po
	INNER JOIN @hold_orders h
		ON h.phys_order_id = po.phys_order_id
	INNER JOIN cte_classification_list l
		ON l.phys_order_id =h.related_phys_order_id 
	GROUP BY h.related_phys_order_id
)
SELECT 
	 po.fac_id
	,cl.phys_order_id AS order_id	
	,cl.pho_ext_lib_med_ddid AS drug_id
	,cl.classid AS medication_class_id
	,cl.medication_class_name
	,SUM (
		  DATEDIFF(DD,IIF(po.[start_date] < @vstart_date, @vstart_date, po.[start_date]) 
					 ,cl.end_date
				  ) + ISNULL(h.total_hold, 0) + @vadd_extra_day 
		 ) AS medication_days
	,CAST(SUM (
		  (CAST(DATEDIFF(HH,IIF(po.[start_date] < @vstart_date, @vstart_date, po.[start_date]) 
					 ,cl.end_date) AS float)/24)
				   + ISNULL(h.total_hold_dec, 0) + @vadd_extra_day 
		 )  AS decimal(18,2))AS medication_days_dec
	,po.[description] medication_name
	,COUNT (po.[description]) AS medication_count
	,po.physician_id
	,ct.last_name + ', ' + ct.first_name AS physician_name
FROM [dbo].[pho_phys_order] po
INNER JOIN [dbo].[contact] ct
	ON po.physician_id = ct.contact_id
INNER JOIN cte_classification_list cl
	ON cl.phys_order_id = po.phys_order_id
LEFT JOIN cte_hold_days h
	ON po.phys_order_id = h.phys_order_id
GROUP BY po.fac_id,cl.phys_order_id, cl.pho_ext_lib_med_ddid, cl.classid, cl.medication_class_name, po.[description], po.physician_id, ct.last_name, ct.first_name
ORDER by po.fac_id, medication_class_name;
END
ELSE
BEGIN
WITH cte_classification_list
AS
(
	SELECT 
		 po.phys_order_id
		,ref.pho_ext_lib_med_ddid		
		,(SELECT MIN(EndDate) FROM (VALUES (po.end_date),(po.discontinued_date),(c.discharge_date),(@vend_date)) AS v(EndDate)) AS end_date
	FROM [dbo].[pho_phys_order] po
	INNER JOIN [dbo].[clients] c
		ON c.client_id = po.client_id
	INNER JOIN @order_ids oi
		ON oi.id = po.phys_order_id
	INNER JOIN [dbo].[pho_order_ext_lib_med_ref] ref
		ON ref.phys_order_id = po.phys_order_id
	WHERE po.order_category_id = 3022 AND po.active_flag = 'Y' 	
	AND (po.discontinued_date IS NULL OR po.discontinued_date > IIF(po.[start_date] < @vstart_date,@vstart_date, po.[start_date]))
	AND (c.discharge_date IS NULL OR c.discharge_date > IIF(po.[start_date] < @vstart_date,@vstart_date, po.[start_date]))
	AND po.[start_date] < @vend_date AND (po.end_date > @vstart_date OR po.end_date IS NULL)
	)
,cte_hold_days
AS 
(
	SELECT h.related_phys_order_id AS phys_order_id
	,SUM(DATEDIFF(DD, CASE 
						WHEN h.[end_date] IS NULL THEN l.end_date
						WHEN h.[end_date] > l.end_date THEN  l.end_date 
						ELSE h.[end_date]	END
					, CASE 
					     WHEN h.[start_date] < @vstart_date THEN @vstart_date 
					     WHEN h.[start_date] > l.end_date THEN NULL 
						 ELSE h.[start_date] END)
		) total_hold
	,SUM(CAST(DATEDIFF(HH, CASE 
						WHEN h.[end_date] IS NULL THEN l.end_date
						WHEN h.[end_date] > l.end_date THEN  l.end_date 
						ELSE h.[end_date]	END
					, CASE 
					     WHEN h.[start_date] < @vstart_date THEN @vstart_date 
					     WHEN h.[start_date] > l.end_date THEN NULL 
						 ELSE h.[start_date] END) AS float)/24
		) total_hold_dec
	FROM [dbo].[pho_phys_order] po
	INNER JOIN @hold_orders h
		ON h.phys_order_id = po.phys_order_id
	INNER JOIN cte_classification_list l
		ON l.phys_order_id =h.related_phys_order_id 
	GROUP BY h.related_phys_order_id
)
SELECT 
	 po.fac_id
	,cl.phys_order_id AS order_id	
	,cl.pho_ext_lib_med_ddid AS drug_id
	,'' AS medication_class_id
	,'' AS medication_class_name
	,SUM (
		  DATEDIFF(DD,IIF(po.[start_date] < @vstart_date, @vstart_date, po.[start_date]) 
					 ,cl.end_date
				  ) + ISNULL(h.total_hold, 0) + @vadd_extra_day 
		 ) AS medication_days
	,CAST(SUM (
		  (CAST(DATEDIFF(HH,IIF(po.[start_date] < @vstart_date, @vstart_date, po.[start_date]) 
					 ,cl.end_date) AS float)/24)
				   + ISNULL(h.total_hold_dec, 0) + @vadd_extra_day 
		 )  AS decimal(18,2))AS medication_days_dec
	,po.[description] medication_name
	,COUNT (po.[description]) AS medication_count
	,po.physician_id
	,ct.last_name + ', ' + ct.first_name AS physician_name
FROM [dbo].[pho_phys_order] po
INNER JOIN [dbo].[contact] ct
	ON po.physician_id = ct.contact_id
INNER JOIN cte_classification_list cl
	ON cl.phys_order_id = po.phys_order_id
LEFT JOIN cte_hold_days h
	ON po.phys_order_id = h.phys_order_id
GROUP BY po.fac_id,cl.phys_order_id, cl.pho_ext_lib_med_ddid, po.[description], po.physician_id, ct.last_name, ct.first_name
ORDER by po.fac_id;
END

SET @status_code = 0;
SET @status_text =''; 
    
END
GO
GRANT EXECUTE ON [dbo].[sproc_pho_list_getMedicationUsage] TO PUBLIC;
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_pho_list_getMedicationUsage.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_pho_list_getMedicationUsage.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_allergy_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**************************************************************************************************
-- ================================================================================= 
-- PCC-30917		  :   script to create [sproc_prp_allergy_report] Procedure  in Client Database
--						-- 
-- Written By:          Rolly Sanchez 	
-- Reviewed By:         
-- 
-- Script Type:         DML
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  all/Both
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create [sproc_prp_allergy_report] Procedure 
--						 :SP for allergy summary Report
-- 
-- Special Instruction: 
-- 
-- =================================================================================

REVISION HISTORY
2012-11-04	Rolly Sanchez   PCC-35692(3.6.2)  Initial Creation of the Store Proc
2012-11-15	Rolly Sanchez	PCC-36334 (3.6.2) Fixed allergy allergen sorting
2012-11-16	Rolly Sanchez	PCC-36360 (3.6.2) Implement 3rd level of sorting 
2012-11-22	Rolly Sanchez	PCC-36431 (3.6.2.2) fixed grouping id, allegen_id is only unique at category level
												combined category_id with allergen_id when returning the final group_id
2012-12-17	Rolly Sanchez						explicitly sort the final output
2013-08-28	Ritch Moore		PCC-40877 (3.7.1.1) Added logic for transfered resident allergy data and eliminated call to view_clinical_allergy for performance
												added functionality to return Current, History and Combined allergies
2014-08-07	Rick Penton		PCC-60194 (3.7.4.3) Add date range filter to support Print Chart look back period
2014-11-24	Rolly Sanchez	PCC-67475 (3.7.5.2) Added clients with No Known Allergy 
2015-07-28	H.Ehghaghi	    PCC-79891 (3.7.8)   Added Field to display feature  for clinical chart 
2015-08-13	Dom Christie	PCC-79891 (3.7.8)   Fixed the issue with the field to display and the date range logic for clinical chart
2015-09-02	Dom Christie	PCC-79891 (3.7.8)   Fixed the issue with the date range, implemented the logic for the struck out, removed "Resolved, Struck out and Created Info from the
                                                field to display as per the Request. Implemented the date filter logic for Resolved and Struck out to be displayed based on selected status. 
												Removed the '-' from the NULL values from Resolved and the Struck out Info field .Added the logic to Display and print the Created By and Created Date and                                                        Resolved By and REsolved Date in one                                                    field. This was requested as part of the JRXML requirement, where all the columns were not able to fit in one page.
2015-09-02	Dom Christie	PCC-83138 (3.7.8) 	Removed FACid from where clause to pull the the historical records.											                                                
2017-03-21	Surender Kumar	PCC-102842 (3.7.12.1) Apply UK Date format and replace 'onset date' with date
2018-01-29	Dom Christie	CORE-2126 (3.7.15.1)  Report will include the clients that have the resolved allergie and will print No Know Allergies. 
2021-12-08	Phil Soga   	CORE-94363 (4.4.9)  Create new allergy report sproc that uses SOP DL Topclasses data.

===============================================================================================
**************************************************************************************************/



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_allergy_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].[sproc_prp_allergy_report]
END
GO



create PROCEDURE [dbo].[sproc_prp_allergy_report]
(
 @report_id int 
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @all_top_drug_classification	xml
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out

)

/********************************************************************************

********************

SAMPLE EXECUTION SCRIPT

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_allergy_report
 @report_id = -46
,@fac_id = 1
,@is_emc = 0
,@field_list =  '-30010'
,@filter_list = 'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;allergy_nka=1;allergy_date_range=01/30/2018,01/31/2018;allergy_combined_allergy=0'

,@sort_list = '0=-1;-1=-32'
,@execution_user_login = '_system_'
,@rows_returned = @rows_ret output
,@debug_me = 'n'
,@status_code = @statuscode output
,@status_text = @statustext output                                                         

Select @rows_ret, @statuscode int, @statustext


*****************************************************************************************************/

as
SET nocount on;

CREATE TABLE #PRP_CensusItemList(
		 client_id int
);

DECLARE @tpmAllTopDrugClassification TABLE (
		classid varchar(10),
		descdisplay varchar(60)
);

CREATE TABLE #PRP_ClientList( 
		  client_id int
		, client_id_number varchar(50)
		, mpi_id int
		, client_name varchar(200)
		, location varchar(500)
		, admission_date datetime
		, mrn_number varchar(50)
		, date_of_birth varchar(10)	
		, gender char(1)
		);

CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #PRP_ClientList(client_id);

DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
CREATE TABLE #PRP_Filters( filter_name varchar(100), filter_value int );

DECLARE  @vfil_client_status smallint
		, @vDelim char(1)
		, @vStep int
		, @vgsClientCount int
		, @vfil_client_id int
		, @vfil_floor int
		, @vfil_unit int
		, @vfil_allergy_status varchar(20)
		, @vfil_allergy_type  varchar(20)
		, @vfil_allergy_severity  varchar(20)
		, @vfil_allergy_category varchar(20)
		, @vallergy_combined_allergy varchar(20)
		, @vfil_lookback_selected bit
		, @vfil_allergy_daterange datetime
		, @vfil_allergy_daterange2 datetime
		, @vallergy_nka BIT
		,@vCharNewLine char(2)
		, @client_id varchar(500)
		, @vClientIDs varchar(max)
		, @vClientWarningMsg varchar(3000)
		, @vErr varchar(3000)
		, @vSort1 varchar(100)
		, @vSort2 varchar(100)
		
		, @vFacWarningMsg varchar(max)
		, @vFacIDs varchar(max)
		, @vgs_program_name varchar(200)
		, @vgs_start_time datetime
		, @vgs_execution_user varchar(60)
		, @vgs_fill_end_time datetime
		, @vgsParamName1 varchar(50) --- filter_list
		, @vgsParamValue1 varchar(1500) --- this will be either M or W
		, @vgsParamName2 varchar(50) --- sort_list
		, @vgsParamValue2 varchar(1500) --- this will be either M or W
		, @vParentReportId int

-- parameter sniffing
DECLARE @vFilterList varchar(max)
		, @vFieldList varchar(max)
		, @vFacId int
		, @vSortList varchar(max)
		, @vReportId int
		, @visemc bit ;

DECLARE @term_admission varchar(50)
     , @term_client varchar(50)
     ,@vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	, @vCountryCode char(2) --Localization
	, @vdateFormatStyle smallint; --Localized date format

-- Field To Display
DECLARE
 @vCreateBy bit
,@vCreateDate bit
,@vResolvedBy bit
,@vStruckOutBy bit

----MRN Variables for header
DECLARE	  @vMRNId int
		, @vMRNDesc varchar(100)

	

BEGIN TRY

	Insert into #PRP_CensusItemList
	select  distinct client_id from census_item
	where fac_id = @fac_id AND deleted = 'N' AND status_code_id IS NOT NULL;

    insert into @tpmAllTopDrugClassification
    select classid, descdisplay from fn_xmlToDrugClassification(@all_top_drug_classification)

	select @vStep = 10
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' BEGIN execution ' + convert(varchar(26),getdate(),109)

	select @vFilterList = @filter_list
		, @vDelim = ';'
		, @vgs_execution_user = @execution_user_login
		, @vSortList = @sort_list
		, @vReportId = @report_id
		, @vgs_program_name  = Object_name(@@ProcID)
		, @vgs_start_time = getdate()
		, @visemc= @is_emc
		, @vFieldList =@field_list
		, @vFacId=@fac_id ;
		
-- localized date format
SELECT @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
	FROM dbo.facility fac WITH (NOLOCK)
	INNER JOIN dbo.sec_user sec WITH (NOLOCK) ON fac.fac_id = sec.fac_id
	LEFT JOIN dbo.common_code cntry WITH (NOLOCK) ON fac.country_id = cntry.item_id
	LEFT OUTER JOIN wesreference.dbo.country cntry_code WITH (NOLOCK) ON cntry.item_description = cntry_code.ISO_Country_Name
	WHERE sec.loginname = @execution_user_login
	
SET  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)

	---
	select @vStep = 15
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' BEGIN Terminology ' + convert(varchar(26),getdate(),109)
	 --select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @report_id; --and parent_report_id = -9
	
	 Select  
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		--, @vTermAdmission = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc); 

	SET @vTermClient=@term_client
	SET @vTermAdmission=@term_admission;
	set @vCharNewLine  = Char(13) + char(10);
	


	---
	select @vStep = 20
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' saving filters to temp table ' + convert(varchar(26),getdate(),109)


	Insert into @PRP_tbFilters_temp
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filters to temp table ' + convert(varchar(26),getdate(),109)

	Insert into #PRP_Filters
	Select  a.filter_name, b.items
	from @PRP_tbFilters_temp a
	cross apply ( Select items from dbo.split(  replace(a.filter_value ,'_',',') ,',')) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */ 
	 'client_floor'
	, 'client_unit'
	, 'allergy_status'
	, 'allergy_category'
	, 'allergy_severity'
	, 'allergy_type'
	, 'allergy_combined_allergy'
	, 'allergy_nka'
	);

	select @vStep = 25

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	set @vallergy_nka = 0;

	--single value filter
	SELECT @vfil_client_status = filter_value from @PRP_tbFilters_temp where filter_name = 'client_status';
	select @vallergy_combined_allergy = filter_value  from #PRP_Filters where filter_name = 'allergy_combined_allergy'
			if @vallergy_combined_allergy is null set @vallergy_combined_allergy = 0

	select @vallergy_nka = filter_value  from #PRP_Filters where filter_name = 'allergy_nka'

	if @debug_me='Y' print  'No known allergy flag = ' + convert(varchar(10), @vallergy_nka)


	-- @vallergy_combined_allergy definition
	-- 0 = Current
	-- 1 = History only
	-- 2 = Current + History 
	
	---determine existence of multi valued filters
	if Exists( select 1 from #PRP_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if Exists( select 1 from #PRP_Filters where filter_name = 'allergy_status')				SET @vfil_allergy_status = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'allergy_category')			SET @vfil_allergy_category = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'allergy_severity')			SET @vfil_allergy_severity = '1';
	if Exists( select 1 from #PRP_Filters where filter_name = 'allergy_type')				SET @vfil_allergy_type = '1';

	--Lookback Period (Date Range)
	SELECT	@vfil_lookback_selected = 1 
		,@vfil_allergy_daterange = Left(filter_value, Charindex(',', filter_value) - 1)
		,@vfil_allergy_daterange2 = Right(filter_value, len(filter_value) - Charindex(',', filter_value))  
	FROM @PRP_tbFilters_temp 
	WHERE filter_name = 'allergy_date_range';

	if @debug_me = 'Y' SELECT @vfil_lookback_selected, @vfil_allergy_daterange, @vfil_allergy_daterange2, 'allergy_date_range'

	SET @vfil_allergy_daterange2=@vfil_allergy_daterange2+'23:59:59'

	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id= ' + isnull(convert(varchar(20),@fac_id),' null/empty')
					+  ', @report_id= ' + isnull(convert(varchar(20),@report_id),' null/empty')
					+ ', @execution_user_login= ' + isnull(@execution_user_login,' null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end



	select @vStep = 30
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' parsing sort options ' + convert(varchar(26),getdate(),109)

	-- sort options
	;With tb
	as
	(
		Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name 
		From dbo.prp_report rep with (nolock)
		inner join dbo.prp_rm_report rm_rep with (nolock)
			on rep.report_id = rm_rep.custom_report_id
		
		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id
		
		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id 

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
	

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id  
							from dbo.Split(@vSortList,';')
					) sort_list
			on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm_rep.report_id = @vReportId 
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or	
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1') 
			  or 
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)
		
	)


	Select @vSort1 = Case when seq = 1 then rtrim(ltrim(sort_by_name)) else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then rtrim(ltrim(sort_by_name)) else @vSort2 end
	from tb order by seq;


	Set @vgsParamName1  = 'Selected Filters '
	Set @vgsParamValue1 = 	isnull(@vfilterList,'');

	Set @vgsParamName2  = 'Selected Sorting Options'
	Set @vgsParamValue2 = 	isnull(@vSort1,'') + ' ' + isnull(@vSort2,'') ;

	if  @debug_me='Y' select @vSort1 as sort_name1, @vSort2 as sort_name2

	


	--As per the new Req coming out of Clinical Chart making the columns display mandatory
   SET @vCreateBy=1
   SET @vCreateDate=1


	

	if @debug_me='Y' 
	BEGIN

	 select @vCreateBy vCreateBy ,@vCreateDate CreateDate,@vResolvedBy ResolvedBy,@vStruckOutBy StruckOutBy;
END

	SET @client_id = (Select filter_value from @PRP_tbFilters_temp where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';
	

	Select @vStep = 40;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; 
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 


	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,',');  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END 

	select @vStep = 50;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'getting client access ' + convert(varchar(26),getdate(),109);

	Select @vClientIDs = client_id
		  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; 
		
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 

select @vStep = 55
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting Medical Record Terminology and ID for Header ' + convert(varchar(20), @vfacid) + convert(varchar(26),getdate(),109);

	/***************************************************************************
							GET MRN INFO
	 ***************************************************************************/
BEGIN
		select @vMRNDesc=case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end, 
			   @vMRNId=cfg.hc_no_id 
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END;

	if @debug_me='Y'  select  @vMRNId MRNId, @vMRNDesc MRNDesc

	select @vStep = 60;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list ' + @vClientIds + convert(varchar(26),getdate(),109);

	
	
	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Filters
		Select 'client_id', items from dbo.split(@vClientIds,',') b
	END

	if @debug_me='Y' select 'all',* from #PRP_Filters

	-------------
	  SELECT @vResolvedBy		=  1 
	  FROM #PRP_Filters
	  WHERE 
	  ((filter_name='allergy_status' AND filter_value =3) OR @vfil_allergy_status IS NULL)
	  SELECT @vStruckOutBy	=1  
	  FROM #PRP_Filters 
	  WHERE ((filter_name='allergy_status' AND filter_value =4) OR @vfil_allergy_status IS NULL)
	----------

	

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + 'client_id '  + convert(varchar,@client_id) + ' getting list of clients' + convert(varchar(26),getdate(),109) 

	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
	
		Insert into #PRP_ClientList
		(
			  client_id 
			, client_id_number
			, mpi_id
			, client_name 
			, location
			, admission_date
			, mrn_number
			, date_of_birth
			, gender
		)
		select  c.client_id
		    , ltrim(rtrim(isnull(c.client_id_number,'')))
			, m.mpi_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, admission_date AS admission_date
			, CASE WHEN @vMRNId = -2 then c.client_id_number 
					ELSE NULL 
			  END mrn_number
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')	date_of_birth
			, isnull(m.sex,'') gender
			from ( Select client_id, mpi_id, client_id_number 
						, admission_date

					from dbo.clients  with (nolock) 
				left join #PRP_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and (clients.deleted = 'N'  or  clients.deleted is null)
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		join #PRP_CensusItemList cil on c.client_id = cil.client_id
		left outer join ( Select * from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id 
						and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient'	)-- CDN payer_type is always empty string

		left outer join dbo.bed b with (nolock)       on loc.bed_id=b.bed_id
		left outer join dbo.room r with (nolock)      on b.room_id=r.room_id
		left outer join dbo.[floor] f with (nolock)   on f.floor_id=r.floor_id
		left outer join dbo.unit u with (nolock)	  on  u.unit_id=r.unit_id

		Left outer join #PRP_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left outer join #PRP_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #PRP_ClientList
		(
			  client_id 
			, client_id_number
			, mpi_id
			, client_name 
			, location	
			, admission_date
			, mrn_number
			, date_of_birth
			, gender
		)
		select  c.client_id
		    , ltrim(rtrim(isnull(c.client_id_number,'')))
			, m.mpi_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, admission_date as admission_date
			,  CASE WHEN @vMRNId = -2 then c.client_id_number 
					ELSE NULL 
			  END mrn_number 
			, isnull(convert(char(10),m.date_of_birth, @vdateFormatStyle),'')	date_of_birth
			, isnull(m.sex,'') gender
			from ( Select client_id, mpi_id, client_id_number 
						, admission_date

					from dbo.clients  with (nolock) 
				left outer join #PRP_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and (clients.deleted = 'N'  or  clients.deleted is null)
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND clients.discharge_date is  null  
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		join #PRP_CensusItemList cil on c.client_id = cil.client_id
		left outer join ( Select * from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id 
					and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient'	)-- CDN payer_type is always empty string

		left outer join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left outer join dbo.room r with (nolock) on b.room_id=r.room_id
		left outer join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left outer join dbo.unit u with (nolock) on  u.unit_id=r.unit_id

		Left outer join #PRP_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left outer join #PRP_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	
	/*-------------------------------------------------------------------------------------*/
	/* update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1   */
	/*-------------------------------------------------------------------------------------*/

	if @vMRNId <> -2
	BEGIN

		select @vStep = 65
		if @debug_me='Y' Print 'BEGIN STEP update MRN number for clients if @vMRNID <> -2'


		Update #PRP_ClientList SET mrn_number = case when ltrim(rtrim(vwClientIds.description))<>'' and ltrim(rtrim(vwClientIds.description)) is not null then  
													ltrim(rtrim(vwClientIds.description))  else client_id_number END
			  From #PRP_ClientList c
			  inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId 

			   

		if @debug_me='Y' Print 'END STEP '
	END
	

	if @debug_me = 'Y' 
	select * from #PRP_ClientList order by client_name

	select @vStep = 75
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' retrieving base data' + @vClientIds + convert(varchar(26),getdate(),109);

		

	; with clientallergy
		as
		(
			Select
				(case when @vsort1 = 'client_name' 
						then 
							(case 
								WHEN al.allergy_category_id in (3,4,5) THEN isnull(stdal.allergen , 'No Known Allergy')
								WHEN al.allergy_category_id = 6 then isnull(cusalle.allergen, 'No Known Allergy')
								WHEN al.allergy_category_id = 2 then isnull(cusmed.[description], 'No Known Allergy')
								WHEN al.allergy_category_id in (1,8,9) then isnull(al.mmdb_allergen_audit, 'No Known Allergy')
								WHEN al.allergy_category_id = 7 then isnull(atdc.descdisplay, 'No Known Allergy')
								WHEN al.allergy_category_id is NULL then 'No Known Allergies'
								END)
						else c.client_name end) as column1

				, (case when @vsort1 = 'client_name' 
						then convert(varchar,c.client_id)
					
						else (convert(varchar,ac.allergy_category_id) + convert(varchar,al.lib_allergy_id) )   end ) as group_id

				, (case when @vsort1 = 'client_name' 
						then c.client_name
						else 
							(case 
								WHEN al.allergy_category_id in (3,4,5) THEN isnull(stdal.allergen , 'No Known Allergy')
								WHEN al.allergy_category_id = 6 then isnull(cusalle.allergen, 'No Known Allergy')
								WHEN al.allergy_category_id = 2 then isnull(cusmed.[description], 'No Known Allergy')
								WHEN al.allergy_category_id in (1,8,9) then isnull(al.mmdb_allergen_audit, 'No Known Allergy')
								WHEN al.allergy_category_id = 7 then isnull(atdc.descdisplay, 'No Known Allergy')
								WHEN al.allergy_category_id is NULL then 'No Known Allergy'
								END)	
						 end) as group_name
				,isnull(at.description,'-') as allergy_type
				,isnull(ac.category,'-') as category
				,isnull(art.description ,'') + isnull(' - ' + asrt.description,'')	as reaction
				,rnote.reaction_note as reaction_note
				,isnull(asv.description,'-') as severity
				,isnull(convert(varchar,al.onset_date,@vdateFormatStyle),'Unknown')  as onset_date
			    , CASE WHEN al.resolved_date IS NOT NULL AND  al.resolved_date <=@vfil_allergy_daterange2 AND  @vResolvedBy=1  THEN resolved_date
				  ELSE  NULL
				  END  resolved_date
				,CASE
				   WHEN @vfil_lookback_selected IS NULL THEN  isnull(ast.description,'-')

				   WHEN al.status_id =3  AND @vfil_lookback_selected IS NOT NULL  
				   and (al.resolved_date IS NULL  or 	al.resolved_date >	@vfil_allergy_daterange2) then 'Active'	
				   WHEN al.status_id =4  AND @vfil_lookback_selected IS NOT NULL 
				   AND so.strikeout_date IS NULL then 'Active'	
			
				  ELSE isnull(ast.description,'-') END  allergy_status
				   

				,case when al.allergy_reaction_type_id = 1 then 1 else 0 end isanaphylaxis
				,fac.name as facility_source
				,cl.client_id 
				,CASE WHEN @vCreateBy= 1 THEN isnull(createUser.long_username,'-') ELSE NULL END   created_by
				,CASE WHEN @vCreateDate= 1 THEN isnull(convert(varchar,al.created_date,@vdateFormatStyle),'-')  ELSE NULL END created_date
				,  
				  CASE WHEN al.resolved_date IS NOT NULL AND  al.resolved_date <=@vfil_allergy_daterange2 AND  @vResolvedBy=1  THEN resolveUser.long_username
				  ELSE  NULL
				  END  resolve_by
							 
				
                  ,CASE WHEN   @vStruckOutBy=1 AND strikoutUser.long_username IS NOT NULL  
				  THEN strikoutUser.long_username   +@vCharNewLine+	 ISNULL(CONVERT(VARCHAR(10),so.strikeout_date,@vdateFormatStyle),'') +@vCharNewLine+  ISNULL(dstrk.item_description ,'')
				  ELSE  NULL
				  END  strikout_by
				, c.mrn_number,
				c.date_of_birth,
				c.gender
				
				,row_number() over (partition by 
									case when @vsort1 = 'client_name' then c.client_name 
										else 
											(case 
												WHEN al.allergy_category_id in (3,4,5) THEN stdal.allergen 
												WHEN al.allergy_category_id = 6 then cusalle.allergen
												WHEN al.allergy_category_id = 2 then cusmed.[description]
												WHEN al.allergy_category_id in (1,8,9) then al.mmdb_allergen_audit
												WHEN al.allergy_category_id = 7 then atdc.descdisplay
												END)	 
										end
									order by
										case when @vsort2 = 'allergy_status_asc' then ast.description   ELSE null end asc,
										case when @vsort2 = 'allergy_resolved_date_desc' then al.resolved_date else null end desc,
										case when @vsort2 = 'allergy_onset_date_desc' then al.onset_date else null end desc,
										case when @vsort2 = 'allergy_severity_desc' then asv.description else null end desc,
										case when @vsort2 = 'allergy_reaction_type_subtype_asc' then isnull(art.description ,'') + ' - ' + isnull(asrt.description ,'') else null end asc,
										case when @vsort2 = 'allergy_type_asc' then at.description else null end asc,
										case when @vsort2 = 'allergy_allergen_asc' 
											then 
												(case 
													WHEN al.allergy_category_id in (3,4,5) THEN stdal.allergen 
													WHEN al.allergy_category_id = 6 then cusalle.allergen
													WHEN al.allergy_category_id = 2 then cusmed.[description]
													WHEN al.allergy_category_id in (1,8,9) then al.mmdb_allergen_audit
													WHEN al.allergy_category_id = 7 then atdc.descdisplay
													END)
											else null end asc,
										case when @vsort2 = 'client_name'  or @vsort1='allergy_allergen_asc' then c.client_name else null end asc,

										case when @vsort1 = 'client_name' 
											then  
												(case 
													WHEN al.allergy_category_id in (3,4,5) THEN stdal.allergen 
													WHEN al.allergy_category_id = 6 then cusalle.allergen
													WHEN al.allergy_category_id = 2 then cusmed.[description]
													WHEN al.allergy_category_id in (1,8,9) then al.mmdb_allergen_audit
													WHEN al.allergy_category_id = 7 then atdc.descdisplay
													END)	
											else c.client_name end asc
									) as row_num
					
			From dbo.mpi with (NOLOCK)
			INNER JOIN #prp_clientList c with (nolock)
				on mpi.mpi_id = c.mpi_id
			INNER JOIN clients cl with (nolock)
				on mpi.mpi_id = cl.mpi_id
			LEFT JOIN dbo.facility fac with (nolock)  
			ON cl.fac_id=fac.fac_id	  	
--			INNER JOIN	dbo.view_clinical_allergy al with (nolock)
--				on cl.client_id = al.client_id

			LEFT OUTER JOIN	dbo.allergy al with (nolock)
				on cl.client_id = al.client_id AND ((al.resolved_date IS NULL) OR (al.resolved_date  >= @vfil_allergy_daterange )  ) 
			LEFT OUTER JOIN allergy_severity asv with (nolock) 
				ON asv.severity_id = al.severity_id	
			LEFT OUTER JOIN allergy_category ac with (nolock) 
				on al.allergy_category_id = ac.allergy_category_id	
			LEFT OUTER JOIN allergy_status ast with (nolock) 
				ON al.status_id = ast.status_id
			LEFT OUTER JOIN allergy_type at with (nolock) 
				ON al.allergy_type_id = at.allergy_type_id
			LEFT JOIN allergy_reaction_type art with (nolock) 
				ON al.allergy_reaction_type_id = art.allergy_reaction_type_id
			LEFT JOIN allergy_subreaction_type asrt with (nolock)  
				ON al.allergy_subreaction_type_id = asrt.allergy_subreaction_type_id
			LEFT JOIN allergy_reaction_note rnote  with (nolock)
				ON al.allergy_id = rnote.allergy_id
			LEFT JOIN allergy_lib_std stdal with (nolock) 
				ON convert(varchar,stdal.std_allergy_id) = al.lib_allergy_id and al.allergy_category_id = stdal.allergy_category_id -- std allergy
			LEFT JOIN allergy_lib_custom cusalle with (nolock) 
				ON convert(varchar,cusalle.custom_allergy_id) = al.lib_allergy_id and al.allergy_category_id = cusalle.allergy_category_id -- custom allergy
			LEFT JOIN cr_cust_med_audit cusmed  with (nolock)
				on al.lib_allergy_id = convert(varchar,cusmed.custom_drug_id)
					and al.created_date >= cusmed.effective_date 
					and (al.created_date <= cusmed.ineffective_date or cusmed.ineffective_date is null)
					and al.allergy_category_id = 2
            LEFT JOIN @tpmAllTopDrugClassification atdc
				on al.lib_allergy_id = atdc.classid and al.allergy_category_id = 7
			LEFT JOIN dbo.allergy_strikeout so WITH (NOLOCK) ON al.allergy_id = so.allergy_id
			LEFT JOIN dbo.common_code dstrk with (nolock) ON so.strikeout_reason_id = dstrk.item_id
			LEFT OUTER JOIN #PRP_Filters AllerStatus 
				on AllerStatus.filter_name	 = 'allergy_status'		
				and allerstatus.filter_value =
				 CASE WHEN al.status_id =3  AND al.resolved_date>@vfil_allergy_daterange2 THEN 1
				      WHEN al.status_id =4 AND so.strikeout_date IS  NULL THEN 1
				
					   else al.status_id   END 
			LEFT JOIN #PRP_Filters allercat	 
				on allercat.filter_name	 = 'allergy_category'		
				and al.allergy_category_id = allercat.filter_value 
			LEFT JOIN #PRP_Filters allersev	 
				on allersev.filter_name	 = 'allergy_severity'		
				and al.severity_id = allersev.filter_value 
			LEFT JOIN #PRP_Filters allertype	 
				on allertype.filter_name	 = 'allergy_type'		
				and al.allergy_type_id = allertype.filter_value 

			LEFT JOIN cp_sec_user_audit createUser on createUser.cp_sec_user_audit_id= al.created_user_audit_id

			LEFT JOIN cp_sec_user_audit resolveUser on resolveUser.cp_sec_user_audit_id= al.revision_user_audit_id
			
			LEFT JOIN cp_sec_user_audit strikoutUser on strikoutUser.cp_sec_user_audit_id= so.strikeout_user_audit_id

			where ((@vfil_allergy_status = '1'		and AllerStatus.filter_value is not null)	or @vfil_allergy_status  is null )
				and ((@vfil_allergy_category = '1'	and allercat.filter_value is not null)		or @vfil_allergy_category is null)
				and ((@vfil_allergy_severity = '1'	and allersev.filter_value is not null)		or @vfil_allergy_severity is null)
				and ((@vfil_allergy_type = '1'		and allertype.filter_value is not null)     or @vfil_allergy_type is null)
				

				

				and (@vallergy_nka = 1 or al.client_id is not NULL)	

				
			
					--Lookback onset, make sure the onset date is not after the reporting end date 
			and 1= CASE WHEN (@vfil_lookback_selected IS NULL) THEN 1
						WHEN ISNULL(al.onset_date, c.admission_date)<= @vfil_allergy_daterange2 
				
						THEN 1  
				   ELSE 0 END

		
							

            		--Lookback Struck Out Date, make sure that the allergy was not struck out before the start date
			and 1=CASE WHEN (@vfil_lookback_selected IS NULL) THEN 1
				
					   WHEN (so.strikeout_date IS NULL OR 	so.strikeout_date>=	@vfil_allergy_daterange) then 1
					
					ELSE 0 END	
		
		
		)
		
		select @vfacid as fac_id

			, column1
			, group_id
			, group_name
			, allergy_type
			, category
			, case when column1 = 'No Known Allergy' or column1 ='No Known Allergies' or group_name = 'No Known Allergies' then '-' else  reaction END reaction
			, case when column1 = 'No Known Allergy' or column1 ='No Known Allergies' or group_name = 'No Known Allergies' then '-' else  reaction_note end reaction_note
			, severity
			, case when column1 = 'No Known Allergy' or column1 ='No Known Allergies' or group_name = 'No Known Allergies' then '-' else onset_date end onset_date
			, ISNULL(cal.resolve_by,'') +@vCharNewLine+	 ISNULL(CONVERT(VARCHAR(10),resolved_date,@vdateFormatStyle),'') resolved_date			
			, allergy_status
			, isanaphylaxis
			, facility_source
			, cal.client_id
			, c.mrn_number,c.date_of_birth,c.gender
			, cal.created_by
			, CONVERT(VARCHAR(10),cal.created_date,@vdateFormatStyle) AS created_date
			, cal.resolve_by
			, cal.strikout_by
			, row_num
			, CASE WHEN @vResolvedBy=1 THEN 1 ELSE 0 END show_resolved
	        , CASE WHEN @vStruckOutBy=1 THEN 1 ELSE 0 END show_struckout
			, @status_code  as status_code	
			, @status_text  as status_text	
		  	from clientallergy	cal
				left OUTER JOIN #PRP_ClientList c
				on cal.client_id = c.client_id

			where ((@vallergy_combined_allergy = '0' and c.client_id is not NULL) 
					or (@vallergy_combined_allergy = '2' )
					or (@vallergy_combined_allergy = '1' and c.client_id is NULL
						AND allergy_status IN ('Active','Prior History') ) )
			order BY group_name, row_num
	Set @rows_returned = @@ROWCOUNT;		



	select @vStep = 80
	
	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY



BEGIN CATCH
 select  @Status_Code = 1,
	@Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(error_number() as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

	if @debug_me='Y' Print 'Stored procedure failure in step: '+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
	if @debug_me='Y' Print 'Error code: '+Cast(error_number() as Varchar(10)) + ' ; Error description:	' + @Status_Text + ' ' + error_message()
	
	select @vfacid as fac_id
			,null as column1
			,null as group_id
			,null as group_name
			,null as allergy_type
			,null as category
			,null as reaction
			,null as reaction_note
			,null as severity
			,null as onset_date
			,null as resolved_date
			,null as allergy_status
			,null as isanaphylaxis
			,NULL as facility_source
			,NULL as client_id
			,NULL as mrn_number
			,NULL as date_of_birth
			,NULL as gender
			,NULL as created_by
			,NULL as created_date
			,NULL as resolve_by
			,NULL as strikout_by
			,1 as row_num
			,NULL  show_resolved
	        ,NULL  show_struckout
			,  @status_code as status_code		
			,  @status_text as status_text	

END CATCH
GO

grant execute on sproc_prp_allergy_report to public
GO

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_allergy_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_allergy_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**************************************************************************************************
-- ================================================================================= 
-- PCC-35520/35523		  :   script to create [sproc_prp_formulary_Item_listing_report] Procedure  in Client Database
--						-- 
-- Written By:          Rolly Sanchez
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  all/Both
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create [sproc_prp_formulary_Item_listing_report] Procedure 
--						 :SP for formulary Item listing report  
-- 
-- Special Instruction: 
-- 
-- =================================================================================

note med lib 
4 = medication name
3 = ndc/din ID


REVISION HISTORY
2012-10-26 Rolly Sanchez	PCC-35523	(3.6.2) Initial Creation of the store proc 
2012-11-14 Rolly Sanchez	PCC-36252	(3.6.2)	Aligned formulary participants
2012-11-15 Rolly Sanchez	PCC-36294	(3.6.2)	Fixed error on Canadian env
2012-11-15 Rolly Sanchez	PCC-36311 	(3.6.2)	Add NDC DIN on the final output
2022-01-05 Sumith Poladi 	CORE-86461 	(4.4.9)	Created a new version (sproc_prp_formulary_Item_listing_report_v2)
                                                of the original stored procedure to remove mmdb references.
                                                The v2 version will refer to new data retrieved using SOP Drug Library.


					

===============================================================================================
**************************************************************************************************/



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_formulary_Item_listing_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE [dbo].[sproc_prp_formulary_Item_listing_report]
END
GO



create PROCEDURE [dbo].[sproc_prp_formulary_Item_listing_report]
(
 @report_id int 
, @fac_id varchar(500)
, @is_emc  bit = '0'
, @env varchar(5)
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = 'N'
, @status_code int  out 
, @status_text varchar(3000) out
)

/****************************************************************************************************

SAMPLE EXECUTION SCRIPT

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_formulary_Item_listing_report
 @report_id =  '-41' 
,@fac_id =  '1,2'
, @is_emc = 0
,@env = 'USAR'
,@field_list =  '' 
,@filter_list =  'form_type=1,2,3,4;form_desc=;form_med_status=0,1;form_id=;form_med_lib=4;form_med_desc=;form_status=0,1,2'  
,@sort_list =  '' 
,@execution_user_login =  'PCC-sanchr' 
,@rows_returned = null
,@debug_me = 'Y'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext



*****************************************************************************************************/

as
SET nocount on;



DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max))

Create table #prp_formulary_status  (status_id smallint Primary key, status_description varchar(20))

Create table #prp_formulary_medicine_status (status_id smallint primary key, status_description varchar(20))

create table #prp_formulary (formulary_description varchar(100), formulary_type varchar(100), 	formulary_status varchar(20), pho_formulary_id int, participants varchar(max),formulary_status_id smallint, filtered_selection tinyint default 0 )

create table #prp_formulary_listing (pho_formulary_id int,  item_status varchar(20), ndc_din varchar(100), item_description varchar(300)  )

 DECLARE @PRP_FacilityScopeFormularies TABLE  ( 	pho_formulary_id int  )

		

----------Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		,@vgs_start_time datetime
		,@vgs_execution_user varchar(60)
		,@vgs_fill_end_time datetime
		,@vFacIDs varchar(max)
		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--		
		,@vFacWarningMsg varchar(max)
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- filter_list
		,@vgsParamValue1 varchar(1500) --- this will be either M or W

		,@vgsParamName2 varchar(50) --- sort_list
		,@vgsParamValue2 varchar(1500) --- this will be either M or W


declare @vFilterList varchar(max)
		, @vFacId int
		, @vSortList varchar(max)
		, @vReportId int
		, @vFormType varchar(100)
		, @vFormDesc varchar(100)
		, @vFormMedLib smallint
		, @vFormMedDesc varchar(300)
		, @vFormMedStatus varchar(100)
		, @vEnv varchar(5)
		, @vFormId int
		, @vFormMedId varchar(500)
		, @vFormStatus varchar(100)
		, @vDerivedMedispan smallint
		, @vDerivedMedId varchar(100)
		, @vDelim char(1)
		, @vErr varchar(3000)
		, @vSort1 varchar(100)
		, @vstep int	

BEGIN TRY

Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login;
	set @vdelim = ';'

----setting local variables
	select @vFilterList = replace(rtrim(@filter_list),'&amp;','&')
		 , @vSortList = @sort_list
		 , @vReportId = @report_id
		 , @vEnv = @env
		 , @vgsFacCount = 0
		 , @vgsClientCount = 0
		 , @vgsMonthCount = 0
		 , @vgsAccountCount = 0
		 , @vgsPayerCount = 0;
		 if charindex( ',', @fac_id) = 0 
			set @vFacId = @fac_id
		else
			set @vFacId = -1

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' +@vgs_program_name + convert(varchar(26),getdate(),109)


	insert into #prp_formulary_status (status_id, status_description)
							values (0, 'Draft')

	insert into #prp_formulary_status (status_id, status_description)
							values(1, 'Active')

	insert into #prp_formulary_status (status_id, status_description)
							values(2, 'Retired')
				
	insert into #prp_formulary_medicine_status (status_id, status_description)
							values (0, 'Active')
	insert into #prp_formulary_medicine_status (status_id, status_description)
							values (1, 'Retired')

----Validate all input parameters and some critical filter value
	if (
		@report_id is null 
		or @execution_user_login is null
		or @env is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @report_id= ' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login= ' + isnull(@execution_user_login,'null/empty')
					+ ', @Env= ' + isnull(@Env,'null/empty')
					
			
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end



	select @vStep = 10
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Shredding Filters:  ' +@vgs_program_name + convert(varchar(26),getdate(),109)



	Insert into @PRP_tbFilters_temp
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,@vdelim)
--	Select Left(Items,Charindex('=',Items)-1),right(rtrim(Items), len(rtrim(Items))-Charindex('=',rtrim(Items))  from dbo.Split(@vFilterList,@vdelim)


	if @debug_me='Y' select * from @PRP_tbFilters_temp
	SELECT @vFormMedID = replace(filter_value, '%','[%]') from @PRP_tbFilters_temp where filter_name = 'form_med_id';
	--SELECT @vFormMedID = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_id';

	SELECT @vFormType = filter_value from @PRP_tbFilters_temp where filter_name = 'form_type';
	SELECT @vFormDesc = filter_value from @PRP_tbFilters_temp where filter_name = 'form_desc';
	SELECT @vFormMedLib = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_lib';
	SELECT @vFormMedDesc = ltrim(rtrim(replace(filter_value, '%','[%]'))) from @PRP_tbFilters_temp where filter_name = 'form_med_desc';
	SELECT @vFormMedStatus = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_status';
	SELECT @vFormID = filter_value from @PRP_tbFilters_temp where filter_name = 'form_id';
	SELECT @vFormStatus = filter_value from @PRP_tbFilters_temp where filter_name = 'form_status';
	

	-- if @vformMedLib is ndc/din but failed to enter med description then it will fall back to Medispan filter
	--if (@vFormMedDesc is null  and @vFormId is not null) set @vFormMedLib = -1
	--if @vFormMedLib is null set @vFormMedLib = -1
	if @vFormType = '-1'  set @vFormType = null
	if @vFormStatus = '-1'  set @vFormStatus = null
	if @vFormMedStatus = '-1' set @vFormMedStatus = null
	if @vFormMedDesc = '' set @vFormMedDesc = null 


	Select @vStep = 20;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; 
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' fac warning  ' +@status_text + convert(varchar(26),getdate(),109)

	select @vStep = 30
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' retrieving sort options:  ' +@vgs_program_name + convert(varchar(26),getdate(),109)

	Set @vgsParamName1  = 'Selected Filters '
	Set @vgsParamValue1 = 	isnull(@vfilterList,'');

	Set @vgsParamName2  = ''
	Set @vgsParamValue2 = 	''--isnull(@vSort1,'');

	if @vFacId > -1
	BEGIN
		Select @vStep = 35;
		if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' gathering facility level formularies ' + convert(varchar(26),getdate(),109);

		--Facilities   
		 insert into @PRP_FacilityScopeFormularies   
		  exec dbo.sproc_pho_list_getFacilityFormularies @vFacId, 'N',  @status_code, @status_text
		
		if @status_code = 1
		begin
		RAISERROR ('Error while executing dbo.sproc_pho_list_getFacilityFormularies SP' -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
		end

	END	
	
	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Parent Formulary information ' +  convert(varchar(26),getdate(),109)

	-- Main SP Branch
		
				-- parent information
			
					insert into  #prp_formulary (formulary_description, formulary_type, formulary_status, pho_formulary_id, formulary_status_id)
					select 
						 frm.description as formulary_description
						, std.description as formulary_type
						, st.status_description	as formulary_status
						, frm.pho_formulary_id
						, st.status_id
					from dbo.pho_std_formulary_type std with (nolock)
					inner join dbo.pho_formulary frm with (nolock)
						on std.pho_std_formulary_type_id = frm.pho_std_formulary_type_id
					inner join #prp_formulary_status st 
						on st.status_id = frm.status
					left outer join @PRP_FacilityScopeFormularies FacScope
						on facscope.pho_formulary_id = frm.pho_formulary_id
					left outer join dbo.split(@vFormType, ',')form_type
						 on form_type.items = std.pho_std_formulary_type_id 
						  
					left outer join dbo.split(@vFormStatus, ',') Form_status
						 on   form_status.items = frm.status  
					   where ( @vFormID is NULL or frm.pho_formulary_id = @vFormID )
							and ( @vFormDesc is null or  frm.description like '%'+ @vFormDesc +'%')
							and ( @vFormType is null or form_type.items = std.pho_std_formulary_type_id )
							and ( @vFormStatus is null or  form_status.items = frm.status)
							and ( @vFacid = -1 or  facscope.pho_formulary_id = frm.pho_formulary_id)
			

			--filter was passed from report set up page to filter formulary that has that medication
			-- then return that formulary with all its medications
			IF @vFormMedId is not null
			BEGIN
				select	@vDerivedMedispan = substring(@vFormMedId, 1, charindex(',',@vFormMedId,1)- 1),
					 @vDerivedMedId = rtrim(ltrim(substring(@vFormMedId, charindex(',',@vFormMedId,1)+1, len(@vFormMedId))))
				

				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + '.4 flagging necessary formulary id if being filtered by certain medication' +  convert(varchar(26),getdate(),109)
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) +  '.5 @vDerivedMedId: ' + convert(varchar,@vDerivedMedId)
				
				--@vDerivedMedispan (3 : NDC/DIN ) (4:desc)
				--- for custom it will only be 4:desc
				if @vDerivedMedispan = 4
				BEGIN
					update p
					set filtered_selection = 1
					from #prp_formulary p 
					where exists  ( Select 1 from  dbo.pho_formulary_item_custom_library clib with (nolock) 
									inner join  dbo.view_custom_medication_description cust with (nolock)
										on cust.customdrugid = clib.custom_drug_id	
									where clib.pho_formulary_id = p.pho_formulary_id
									    AND cust.description like '%'+  @vDerivedMedId + '%');

				END
				if @vEnv = 'USAR'
					begin
						update p set filtered_selection = 1
						from #prp_formulary p 
						where filtered_selection = 0 
								AND exists ( select 1 from dbo.pho_formulary_item_medispan clib with (nolock) 
											inner join  dbo.view_medispan_ppid_description med_ppid	 with (nolock)
													on med_ppid.ppid = clib.ppid
												where  clib.pho_formulary_id = p.pho_formulary_id
												AND ((@vDerivedMedispan = 3 and convert(varchar,med_ppid.ppid) like '%' + @vDerivedMedId + '%')
			 										or (@vDerivedMedispan = 4 and med_ppid.description like '%' + @vDerivedMedId + '%')));
					
						
						end
					else
						begin
						update p
						set filtered_selection = 1	
						from  #prp_formulary p 
						where filtered_selection = 0 
								and exists ( select 1 from dbo.pho_formulary_item_medispan_din clib with (nolock) 
												inner join dbo.view_medispan_din_description cdin with (nolock)
												on cdin.din = clib.din	
										where clib.pho_formulary_id = p.pho_formulary_id 
											and ((@vDerivedMedispan = 3 and convert(varchar,cdin.din) like '%' + @vDerivedMedId + '%')
											or (@vDerivedMedispan = 4 and cdin.description like '%' + @vDerivedMedId + '%')));
						end

			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + '.8 deleting unnecessary formulary id ' +  convert(varchar(26),getdate(),109)

			delete from #prp_formulary
			where filtered_selection = 0

			END


			----END OF ALL FORMULARY FILTERS
			---NOW Filter  Formulary Item Listing for Printable view

			select @vStep = 41
			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Creating cluster index' +  convert(varchar(26),getdate(),109)

			Create Clustered Index _TMP_IDX_PRP_FORM on #prp_formulary ( pho_formulary_id, formulary_type );

			select @vStep = 45
			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Payer ' +  convert(varchar(26),getdate(),109)
			----Get the data for participants for each type
			BEGIN
				update p
				set p.participants  = stuff(k.payer_name,1,2,'')
					from #prp_formulary p 
					inner join (select payer.payer_name, pho_formulary_id from #prp_formulary frm with (nolock)
							cross apply (select ', '+ p.description from dbo.ar_lib_payers p with (nolock)
							inner join dbo.pho_formulary_payer fp with (nolock)
							on p.payer_id = fp.payer_id
							where fp.pho_formulary_id = frm.pho_formulary_id
							for XML Path ('')
							)payer (payer_name)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Payer'
				
				select @vStep = 48
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Pharmacy ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.pharmacies,1,1,'')
					from #prp_formulary p 
					inner join ( select pharmacy.pharmacies, pho_formulary_id from #prp_formulary frm with (nolock)
							cross apply (select ', '+ ext.name from dbo.emc_ext_facilities ext with (nolock)
							inner join dbo.pho_formulary_pharmacy fp with (nolock)
							on ext.ext_fac_id = fp.ext_fac_id
							where fp.pho_formulary_id = frm.pho_formulary_id
							for XML Path ('')
							)pharmacy (pharmacies)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'pharmacy'

				select @vStep = 50
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Facility ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.Facilities,1,1,'')
					from #prp_formulary p 
					inner join (select facility.facilities, pho_formulary_id from #prp_formulary frm with (nolock)
								cross apply (select ', '+ fac.name from dbo.pho_formulary_facility pho_f with (nolock)
								inner join dbo.facility fac with (nolock)
								on pho_f.fac_id = fac.fac_id
								where pho_f.pho_formulary_id = frm.pho_formulary_id
								for XML Path ('')
								)facility (Facilities)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Facility Favourite'

				select @vStep = 52
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Med Prof ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.med_prof,1,1,'')
					from #prp_formulary p 
					inner join (select medprof.med_prof, pho_formulary_id from #prp_formulary frm with (nolock)
								cross apply (select ', '+ ltrim(c.first_name) +' ' + ltrim(c.last_name)
								from dbo.pho_formulary_medical_professional med with (nolock)
								inner join dbo.contact c with (nolock)
								on med.contact_id = c.contact_id
								where med.pho_formulary_id = frm.pho_formulary_id
								for XML Path ('')
								)medprof (med_prof)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Medical Professional'
			END


			if @debug_me='Y' select * from #prp_formulary


					select @vStep = 60
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Custom Formulary information ' +  convert(varchar(26),getdate(),109)

						
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status ,ndc_din, item_description)
						select 	frm.pho_formulary_id
								
								, st.status_description 
								, '-'
								, cust.description 
								
						from dbo.pho_formulary_item_custom_library clib with (nolock) 
						inner join 	#prp_formulary frm with (nolock) 
							on clib.pho_formulary_id = frm.pho_formulary_id
						inner join dbo.view_custom_medication_description cust with (nolock)
							on clib.custom_drug_id = cust.customdrugid
						inner join #prp_formulary_medicine_status  st with (nolock)
							on st.status_id = clib.status
						left outer join dbo.split(@vFormMedStatus, ',')MedStatus
							on MedStatus.items = st.status_id
						where 
								(@vFormMedDesc is null 
								or (@vFormMedLib =   4 and cust.description  like  '%' + @vFormMedDesc +'%' )
								)

--							(@vFormMedLib =   4 and  (  @vFormMedDesc is null or cust.description  like  '%' + @vFormMedDesc +'%'  ))
							and (@vFormMedStatus is null or MedStatus.items = st.status_id)
								
									
				if  @vEnv = 'USAR'
				begin
					select @vStep = 70
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting Formulary information based on NDC/PPID ' +  convert(varchar(26),getdate(),109)
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status , ndc_din , item_description )
							select 	frm.pho_formulary_id
									
									, st.status_description 
									, usa.ndc 
									, usa.description
									
							from dbo.pho_formulary_item_medispan clib with (nolock) 
							inner join 	#prp_formulary frm with (nolock) 
								on clib.pho_formulary_id = frm.pho_formulary_id
							inner join dbo.view_medispan_ppid_description usa with (nolock)
								on usa.ppid = clib.ppid
							inner join #prp_formulary_medicine_status  st with (nolock)
								on st.status_id = clib.status
							left outer join dbo.split(@vFormMedStatus, ',')MedStatus
								on MedStatus.items = st.status_id
							where ((@vFormMedDesc is null )
									or  (@vFormMedLib =   4 and usa.description like '%'+ @vFormMedDesc + '%')
									or (@vFormMedLib =   3 and usa.ndc like '%'+ @vFormMedDesc + '%'))

									and (@vFormMedStatus is null or MedStatus.items = st.status_id)
						  
			
				end

				if  @vEnv = 'CDN'
				begin
					select @vStep = 80
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Formulary information base from DIN ' +  convert(varchar(26),getdate(),109)
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status , ndc_din, item_description )
							select 	frm.pho_formulary_id
									
									, st.status_description 
									, cdn.din 
									, cdn.description
									
							from dbo.pho_formulary_item_medispan_din clib with (nolock) 
							inner join 	#prp_formulary frm with (nolock) 
								on clib.pho_formulary_id = frm.pho_formulary_id
							inner join dbo.view_medispan_din_description  cdn with (nolock)
								on cdn.din = clib.din
							inner join #prp_formulary_medicine_status  st with (nolock)
								on st.status_id = clib.status
							left outer join dbo.split(@vFormMedStatus, ',')MedStatus
							on MedStatus.items = st.status_id
							where ((@vFormMedDesc is null)
									or (@vFormMedLib = 4 and  cdn.description like '%'+ @vFormMedDesc + '%')
									or (@vFormMedLib = 3 and  cdn.din like '%'+ @vFormMedDesc + '%'))
									and (@vFormMedStatus is null or MedStatus.items = st.status_id)
					end


		create clustered index _IDX_temp_prp_formulary_listing on #prp_formulary_listing(pho_formulary_id);

		if @debug_me='Y' select * from #prp_formulary_listing

		set @vgs_fill_end_time = getdate()
		
		select @vStep = 90
		if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Returning final output ' +  convert(varchar(26),getdate(),109)

		;with final_output
		as
		(
			select form.pho_formulary_id as formulary_id
					,form.formulary_description as formulary_desc
					,form.formulary_type
					,ltrim(form.participants) as formulary_participants
					,form.formulary_status
					,list.item_description as formulary_med_desc
					,list.ndc_din
					,list.item_status as formulary_med_status
					, row_number() over (partition by form.formulary_status_id , form.formulary_description
										 order by list.item_description ) as row_num
				from #prp_formulary Form with (nolock)
				left outer join #prp_formulary_listing list with (nolock)
					on form.pho_formulary_id = list.pho_formulary_id

						
		)
		select @vfacid as fac_id
				, formulary_id
				, formulary_desc
				, case when row_num = 1 then formulary_type else null end as formulary_type
				, case when row_num = 1 then formulary_participants else null end as formulary_participants
				, case when row_num = 1 then formulary_status else null end as formulary_status
				, formulary_med_desc
				, ndc_din
				, formulary_med_status
				, row_num
				, case when row_num = 1 then @status_code else null end as status_code
				, case when row_num = 1 then @status_text else null end as status_text

				 from final_output
		

	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics
	begin
		insert into [dbo].[prp_execution_statistics]
				   ([program_name]
				   ,[start_time]
				   ,[fill_end_time]
				   ,[full_end_time]
				   ,[rows_processed]
				   ,[estimated_row_count]
				   ,[estimate_method]
				   ,[fac_count]
				   ,[client_count]
				   ,[payer_count]
				   ,[account_count]
				   ,[month_count]
				   ,[who_done_it]
				   ,[return_code]
				   ,[fac_id]
				   ,[client_id]
				   ,[account_id]
				   ,[payer_id]
				   ,[parm1_name]
				   ,[parm1_value]
				   ,[parm2_name]
				   ,[parm2_value]
				   ,[parm3_name]
				   ,[parm3_value]
				   ,[parm4_name]
				   ,[parm4_value]

				   )
				values (@vgs_program_name
					,@vgs_start_time
					,@vgs_fill_end_time
					,getDate()
					,@rows_returned 
					,NULL ----estimated row count NULL because we do not have governor logic
					,NULL ----estimated method NULL because we do not have governor logic
					,@vgsFacCount  
					,@vgsClientCount 
					,@vgsPayerCount 
					,@vgsAccountCount
					,@vgsMonthCount
					,@vgs_execution_user
					,@status_code
					,@vFacId
					,Null
					,NULL
					,NULL
					,@vgsParamName1
					,@vgsParamValue1
					,@vgsParamName2
					,@vgsParamValue2
					,''
					,''
					,''
					,''
			   )

	end 	 

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);

END TRY



BEGIN CATCH
 select  @Status_Code = 1,
	@Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(error_number() as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

	if @debug_me='Y' Print 'Stored procedure failure in step: '+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
	if @debug_me='Y' Print 'Error code: '+Cast(error_number() as Varchar(10)) + ' ; Error description:	' + @Status_Text + ' ' + error_message()
	
	select null as fac_id
		,null as formulary_id
		,null as formulary_desc
		,null as formulary_type
		,null as formulary_participants
		,null as formulary_status
		,null as formulary_med_desc
		,null as ndc_din
		,null as formulary_med_status
		,1 as row_num
		,@Status_Code as status_code
		,@Status_Text as status_text
		

END CATCH


GO
grant execute on sproc_prp_formulary_Item_listing_report to public
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/**************************************************************************************************
-- ================================================================================= 
-- PCC-35520/35523		  :   script to create [sproc_prp_formulary_Item_listing_report_v2] Procedure  in Client Database
--						-- 
-- Written By:          Rolly Sanchez
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client Database
-- Target ENVIRONMENT:  all/Both
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create [sproc_prp_formulary_Item_listing_report_v2] Procedure
--						 :SP for formulary Item listing report  
-- 
-- Special Instruction: 
-- 
-- =================================================================================

note med lib 
4 = medication name
3 = ndc/din ID


REVISION HISTORY
2012-10-26 Rolly Sanchez	PCC-35523	(3.6.2) Initial Creation of the store proc 
2012-11-14 Rolly Sanchez	PCC-36252	(3.6.2)	Aligned formulary participants
2012-11-15 Rolly Sanchez	PCC-36294	(3.6.2)	Fixed error on Canadian env
2012-11-15 Rolly Sanchez	PCC-36311 	(3.6.2)	Add NDC DIN on the final output
2022-01-05 Sumith Poladi 	CORE-86461 	(4.4.9)	Created a new version (sproc_prp_formulary_Item_listing_report_v2)
                                                of the original stored procedure to remove mmdb references.
                                                This v2 version will refer to new data retrieved using SOP Drug Library.


					

===============================================================================================
**************************************************************************************************/



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_formulary_Item_listing_report_v2' and ROUTINE_TYPE = 'PROCEDURE' )
BEGIN
	DROP PROCEDURE [dbo].[sproc_prp_formulary_Item_listing_report_v2]
END
GO



create PROCEDURE [dbo].[sproc_prp_formulary_Item_listing_report_v2]
(
 @report_id int 
, @fac_id varchar(500)
, @is_emc  bit = '0'
, @env varchar(5)
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = 'N'
, @status_code int  out 
, @status_text varchar(3000) out
)

/****************************************************************************************************

SAMPLE EXECUTION SCRIPT

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_formulary_Item_listing_report
 @report_id =  '-41' 
,@fac_id =  '1,2'
, @is_emc = 0
,@env = 'USAR'
,@field_list =  '' 
,@filter_list =  'form_type=1,2,3,4;form_desc=;form_med_status=0,1;form_id=;form_med_lib=4;form_med_desc=;form_status=0,1,2'  
,@sort_list =  '' 
,@execution_user_login =  'PCC-sanchr' 
,@rows_returned = null
,@debug_me = 'Y'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext



*****************************************************************************************************/

as
SET nocount on;



DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max))

Create table #prp_formulary_status  (status_id smallint Primary key, status_description varchar(20))

Create table #prp_formulary_medicine_status (status_id smallint primary key, status_description varchar(20))

create table #prp_formulary (formulary_description varchar(100), formulary_type varchar(100), 	formulary_status varchar(20), pho_formulary_id int, participants varchar(max),formulary_status_id smallint, filtered_selection tinyint default 0 )

create table #prp_formulary_listing (pho_formulary_id int,  item_status varchar(20), ndc_din varchar(100), item_description varchar(300)  )

 DECLARE @PRP_FacilityScopeFormularies TABLE  ( 	pho_formulary_id int  )

		

----------Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		,@vgs_start_time datetime
		,@vgs_execution_user varchar(60)
		,@vgs_fill_end_time datetime
		,@vFacIDs varchar(max)
		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--		
		,@vFacWarningMsg varchar(max)
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- filter_list
		,@vgsParamValue1 varchar(1500) --- this will be either M or W

		,@vgsParamName2 varchar(50) --- sort_list
		,@vgsParamValue2 varchar(1500) --- this will be either M or W


declare @vFilterList varchar(max)
		, @vFacId int
		, @vSortList varchar(max)
		, @vReportId int
		, @vFormType varchar(100)
		, @vFormDesc varchar(100)
		, @vFormMedLib smallint
		, @vFormMedDesc varchar(300)
		, @vFormMedStatus varchar(100)
		, @vEnv varchar(5)
		, @vFormId int
		, @vFormMedId varchar(500)
		, @vFormStatus varchar(100)
		, @vDerivedMedispan smallint
		, @vDerivedMedId varchar(100)
		, @vDelim char(1)
		, @vErr varchar(3000)
		, @vSort1 varchar(100)
		, @vstep int	

BEGIN TRY

Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login;
	set @vdelim = ';'

----setting local variables
	select @vFilterList = replace(rtrim(@filter_list),'&amp;','&')
		 , @vSortList = @sort_list
		 , @vReportId = @report_id
		 , @vEnv = @env
		 , @vgsFacCount = 0
		 , @vgsClientCount = 0
		 , @vgsMonthCount = 0
		 , @vgsAccountCount = 0
		 , @vgsPayerCount = 0;
		 if charindex( ',', @fac_id) = 0 
			set @vFacId = @fac_id
		else
			set @vFacId = -1

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' +@vgs_program_name + convert(varchar(26),getdate(),109)


	insert into #prp_formulary_status (status_id, status_description)
							values (0, 'Draft')

	insert into #prp_formulary_status (status_id, status_description)
							values(1, 'Active')

	insert into #prp_formulary_status (status_id, status_description)
							values(2, 'Retired')
				
	insert into #prp_formulary_medicine_status (status_id, status_description)
							values (0, 'Active')
	insert into #prp_formulary_medicine_status (status_id, status_description)
							values (1, 'Retired')

----Validate all input parameters and some critical filter value
	if (
		@report_id is null 
		or @execution_user_login is null
		or @env is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @report_id= ' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login= ' + isnull(@execution_user_login,'null/empty')
					+ ', @Env= ' + isnull(@Env,'null/empty')
					
			
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end



	select @vStep = 10
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Shredding Filters:  ' +@vgs_program_name + convert(varchar(26),getdate(),109)



	Insert into @PRP_tbFilters_temp
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,@vdelim)
--	Select Left(Items,Charindex('=',Items)-1),right(rtrim(Items), len(rtrim(Items))-Charindex('=',rtrim(Items))  from dbo.Split(@vFilterList,@vdelim)


	if @debug_me='Y' select * from @PRP_tbFilters_temp
	SELECT @vFormMedID = replace(filter_value, '%','[%]') from @PRP_tbFilters_temp where filter_name = 'form_med_id';
	--SELECT @vFormMedID = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_id';

	SELECT @vFormType = filter_value from @PRP_tbFilters_temp where filter_name = 'form_type';
	SELECT @vFormDesc = filter_value from @PRP_tbFilters_temp where filter_name = 'form_desc';
	SELECT @vFormMedLib = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_lib';
	SELECT @vFormMedDesc = ltrim(rtrim(replace(filter_value, '%','[%]'))) from @PRP_tbFilters_temp where filter_name = 'form_med_desc';
	SELECT @vFormMedStatus = filter_value from @PRP_tbFilters_temp where filter_name = 'form_med_status';
	SELECT @vFormID = filter_value from @PRP_tbFilters_temp where filter_name = 'form_id';
	SELECT @vFormStatus = filter_value from @PRP_tbFilters_temp where filter_name = 'form_status';
	

	-- if @vformMedLib is ndc/din but failed to enter med description then it will fall back to Medispan filter
	--if (@vFormMedDesc is null  and @vFormId is not null) set @vFormMedLib = -1
	--if @vFormMedLib is null set @vFormMedLib = -1
	if @vFormType = '-1'  set @vFormType = null
	if @vFormStatus = '-1'  set @vFormStatus = null
	if @vFormMedStatus = '-1' set @vFormMedStatus = null
	if @vFormMedDesc = '' set @vFormMedDesc = null 


	Select @vStep = 20;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; 
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' fac warning  ' +@status_text + convert(varchar(26),getdate(),109)

	select @vStep = 30
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' retrieving sort options:  ' +@vgs_program_name + convert(varchar(26),getdate(),109)

	Set @vgsParamName1  = 'Selected Filters '
	Set @vgsParamValue1 = 	isnull(@vfilterList,'');

	Set @vgsParamName2  = ''
	Set @vgsParamValue2 = 	''--isnull(@vSort1,'');

	if @vFacId > -1
	BEGIN
		Select @vStep = 35;
		if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' gathering facility level formularies ' + convert(varchar(26),getdate(),109);

		--Facilities   
		 insert into @PRP_FacilityScopeFormularies   
		  exec dbo.sproc_pho_list_getFacilityFormularies @vFacId, 'N',  @status_code, @status_text
		
		if @status_code = 1
		begin
		RAISERROR ('Error while executing dbo.sproc_pho_list_getFacilityFormularies SP' -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
		end

	END	
	
	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Parent Formulary information ' +  convert(varchar(26),getdate(),109)

	-- Main SP Branch
		
				-- parent information
			
					insert into  #prp_formulary (formulary_description, formulary_type, formulary_status, pho_formulary_id, formulary_status_id)
					select 
						 frm.description as formulary_description
						, std.description as formulary_type
						, st.status_description	as formulary_status
						, frm.pho_formulary_id
						, st.status_id
					from dbo.pho_std_formulary_type std with (nolock)
					inner join dbo.pho_formulary frm with (nolock)
						on std.pho_std_formulary_type_id = frm.pho_std_formulary_type_id
					inner join #prp_formulary_status st 
						on st.status_id = frm.status
					left outer join @PRP_FacilityScopeFormularies FacScope
						on facscope.pho_formulary_id = frm.pho_formulary_id
					left outer join dbo.split(@vFormType, ',')form_type
						 on form_type.items = std.pho_std_formulary_type_id 
						  
					left outer join dbo.split(@vFormStatus, ',') Form_status
						 on   form_status.items = frm.status  
					   where ( @vFormID is NULL or frm.pho_formulary_id = @vFormID )
							and ( @vFormDesc is null or  frm.description like '%'+ @vFormDesc +'%')
							and ( @vFormType is null or form_type.items = std.pho_std_formulary_type_id )
							and ( @vFormStatus is null or  form_status.items = frm.status)
							and ( @vFacid = -1 or  facscope.pho_formulary_id = frm.pho_formulary_id)
			

			--filter was passed from report set up page to filter formulary that has that medication
			-- then return that formulary with all its medications
			IF @vFormMedId is not null
			BEGIN
				select	@vDerivedMedispan = substring(@vFormMedId, 1, charindex(',',@vFormMedId,1)- 1),
					 @vDerivedMedId = rtrim(ltrim(substring(@vFormMedId, charindex(',',@vFormMedId,1)+1, len(@vFormMedId))))
				

				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + '.4 flagging necessary formulary id if being filtered by certain medication' +  convert(varchar(26),getdate(),109)
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) +  '.5 @vDerivedMedId: ' + convert(varchar,@vDerivedMedId)
				
				--@vDerivedMedispan (3 : NDC/DIN ) (4:desc)
				--- for custom it will only be 4:desc
				if @vDerivedMedispan = 4
				BEGIN
					update p
					set filtered_selection = 1
					from #prp_formulary p 
					where exists  ( Select 1 from  dbo.pho_formulary_item_custom_library clib with (nolock) 
									inner join  dbo.view_custom_medication_description cust with (nolock)
										on cust.customdrugid = clib.custom_drug_id	
									where clib.pho_formulary_id = p.pho_formulary_id
									    AND cust.description like '%'+  @vDerivedMedId + '%');

				END
				if @vEnv = 'USAR'
					begin
						update p set filtered_selection = 1
						from #prp_formulary p 
						where filtered_selection = 0 
								AND exists ( select 1 from dbo.pho_formulary_item_medispan clib with (nolock) 
												where  clib.pho_formulary_id = p.pho_formulary_id
												AND ((@vDerivedMedispan = 3 and convert(varchar,clib.ppid) like '%' + @vDerivedMedId + '%')
			 										or (@vDerivedMedispan = 4 and clib.drug_product_name like '%' + @vDerivedMedId + '%')));
					
						
						end
					else
						begin
						update p
						set filtered_selection = 1	
						from  #prp_formulary p 
						where filtered_selection = 0 
								and exists ( select 1 from dbo.pho_formulary_item_medispan_din clib with (nolock) 
												where clib.pho_formulary_id = p.pho_formulary_id
											and ((@vDerivedMedispan = 3 and convert(varchar,clib.din) like '%' + @vDerivedMedId + '%')
											or (@vDerivedMedispan = 4 and clib.drug_product_name like '%' + @vDerivedMedId + '%')));
						end

			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + '.8 deleting unnecessary formulary id ' +  convert(varchar(26),getdate(),109)

			delete from #prp_formulary
			where filtered_selection = 0

			END


			----END OF ALL FORMULARY FILTERS
			---NOW Filter  Formulary Item Listing for Printable view

			select @vStep = 41
			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Creating cluster index' +  convert(varchar(26),getdate(),109)

			Create Clustered Index _TMP_IDX_PRP_FORM on #prp_formulary ( pho_formulary_id, formulary_type );

			select @vStep = 45
			if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Payer ' +  convert(varchar(26),getdate(),109)
			----Get the data for participants for each type
			BEGIN
				update p
				set p.participants  = stuff(k.payer_name,1,2,'')
					from #prp_formulary p 
					inner join (select payer.payer_name, pho_formulary_id from #prp_formulary frm with (nolock)
							cross apply (select ', '+ p.description from dbo.ar_lib_payers p with (nolock)
							inner join dbo.pho_formulary_payer fp with (nolock)
							on p.payer_id = fp.payer_id
							where fp.pho_formulary_id = frm.pho_formulary_id
							for XML Path ('')
							)payer (payer_name)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Payer'
				
				select @vStep = 48
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Pharmacy ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.pharmacies,1,1,'')
					from #prp_formulary p 
					inner join ( select pharmacy.pharmacies, pho_formulary_id from #prp_formulary frm with (nolock)
							cross apply (select ', '+ ext.name from dbo.emc_ext_facilities ext with (nolock)
							inner join dbo.pho_formulary_pharmacy fp with (nolock)
							on ext.ext_fac_id = fp.ext_fac_id
							where fp.pho_formulary_id = frm.pho_formulary_id
							for XML Path ('')
							)pharmacy (pharmacies)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'pharmacy'

				select @vStep = 50
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Facility ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.Facilities,1,1,'')
					from #prp_formulary p 
					inner join (select facility.facilities, pho_formulary_id from #prp_formulary frm with (nolock)
								cross apply (select ', '+ fac.name from dbo.pho_formulary_facility pho_f with (nolock)
								inner join dbo.facility fac with (nolock)
								on pho_f.fac_id = fac.fac_id
								where pho_f.pho_formulary_id = frm.pho_formulary_id
								for XML Path ('')
								)facility (Facilities)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Facility Favourite'

				select @vStep = 52
				if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' updating participant for each formulary type: Med Prof ' +  convert(varchar(26),getdate(),109)
			
				update p
				set p.participants  = stuff(k.med_prof,1,1,'')
					from #prp_formulary p 
					inner join (select medprof.med_prof, pho_formulary_id from #prp_formulary frm with (nolock)
								cross apply (select ', '+ ltrim(c.first_name) +' ' + ltrim(c.last_name)
								from dbo.pho_formulary_medical_professional med with (nolock)
								inner join dbo.contact c with (nolock)
								on med.contact_id = c.contact_id
								where med.pho_formulary_id = frm.pho_formulary_id
								for XML Path ('')
								)medprof (med_prof)) k
					on p.pho_formulary_id = k.pho_formulary_id
					where p.formulary_type = 'Medical Professional'
			END


			if @debug_me='Y' select * from #prp_formulary


					select @vStep = 60
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Custom Formulary information ' +  convert(varchar(26),getdate(),109)

						
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status ,ndc_din, item_description)
						select 	frm.pho_formulary_id
								
								, st.status_description 
								, '-'
								, cust.description 
								
						from dbo.pho_formulary_item_custom_library clib with (nolock) 
						inner join 	#prp_formulary frm with (nolock) 
							on clib.pho_formulary_id = frm.pho_formulary_id
						inner join dbo.view_custom_medication_description cust with (nolock)
							on clib.custom_drug_id = cust.customdrugid
						inner join #prp_formulary_medicine_status  st with (nolock)
							on st.status_id = clib.status
						left outer join dbo.split(@vFormMedStatus, ',')MedStatus
							on MedStatus.items = st.status_id
						where 
								(@vFormMedDesc is null 
								or (@vFormMedLib =   4 and cust.description  like  '%' + @vFormMedDesc +'%' )
								)

--							(@vFormMedLib =   4 and  (  @vFormMedDesc is null or cust.description  like  '%' + @vFormMedDesc +'%'  ))
							and (@vFormMedStatus is null or MedStatus.items = st.status_id)
								
									
				if  @vEnv = 'USAR'
				begin
					select @vStep = 70
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting Formulary information based on NDC/PPID ' +  convert(varchar(26),getdate(),109)
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status , ndc_din , item_description )
							select 	frm.pho_formulary_id
									
									, st.status_description 
									, clib.ndc
									, clib.drug_product_name
									
							from dbo.pho_formulary_item_medispan clib with (nolock) 
							inner join 	#prp_formulary frm with (nolock) 
								on clib.pho_formulary_id = frm.pho_formulary_id
							inner join #prp_formulary_medicine_status  st with (nolock)
								on st.status_id = clib.status
							left outer join dbo.split(@vFormMedStatus, ',')MedStatus
								on MedStatus.items = st.status_id
							where ((@vFormMedDesc is null )
									or  (@vFormMedLib =   4 and clib.drug_product_name like '%'+ @vFormMedDesc + '%')
									or (@vFormMedLib =   3 and clib.ndc like '%'+ @vFormMedDesc + '%'))

									and (@vFormMedStatus is null or MedStatus.items = st.status_id)
						  
			
				end

				if  @vEnv = 'CDN'
				begin
					select @vStep = 80
					if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Formulary information base from DIN ' +  convert(varchar(26),getdate(),109)
					insert into #prp_formulary_listing (pho_formulary_id ,  item_status , ndc_din, item_description )
							select 	frm.pho_formulary_id
									
									, st.status_description 
									, clib.din
									, clib.drug_product_name
									
							from dbo.pho_formulary_item_medispan_din clib with (nolock) 
							inner join 	#prp_formulary frm with (nolock) 
								on clib.pho_formulary_id = frm.pho_formulary_id
							inner join #prp_formulary_medicine_status  st with (nolock)
								on st.status_id = clib.status
							left outer join dbo.split(@vFormMedStatus, ',')MedStatus
							on MedStatus.items = st.status_id
							where ((@vFormMedDesc is null)
									or (@vFormMedLib = 4 and  clib.drug_product_name like '%'+ @vFormMedDesc + '%')
									or (@vFormMedLib = 3 and  clib.din like '%'+ @vFormMedDesc + '%'))
									and (@vFormMedStatus is null or MedStatus.items = st.status_id)
					end


		create clustered index _IDX_temp_prp_formulary_listing on #prp_formulary_listing(pho_formulary_id);

		if @debug_me='Y' select * from #prp_formulary_listing

		set @vgs_fill_end_time = getdate()
		
		select @vStep = 90
		if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Returning final output ' +  convert(varchar(26),getdate(),109)

		;with final_output
		as
		(
			select form.pho_formulary_id as formulary_id
					,form.formulary_description as formulary_desc
					,form.formulary_type
					,ltrim(form.participants) as formulary_participants
					,form.formulary_status
					,list.item_description as formulary_med_desc
					,list.ndc_din
					,list.item_status as formulary_med_status
					, row_number() over (partition by form.formulary_status_id , form.formulary_description
										 order by list.item_description ) as row_num
				from #prp_formulary Form with (nolock)
				left outer join #prp_formulary_listing list with (nolock)
					on form.pho_formulary_id = list.pho_formulary_id

						
		)
		select @vfacid as fac_id
				, formulary_id
				, formulary_desc
				, case when row_num = 1 then formulary_type else null end as formulary_type
				, case when row_num = 1 then formulary_participants else null end as formulary_participants
				, case when row_num = 1 then formulary_status else null end as formulary_status
				, formulary_med_desc
				, ndc_din
				, formulary_med_status
				, row_num
				, case when row_num = 1 then @status_code else null end as status_code
				, case when row_num = 1 then @status_text else null end as status_text

				 from final_output
		

	Set @rows_returned = @@ROWCOUNT;

	-----capture execution statistics
	begin
		insert into [dbo].[prp_execution_statistics]
				   ([program_name]
				   ,[start_time]
				   ,[fill_end_time]
				   ,[full_end_time]
				   ,[rows_processed]
				   ,[estimated_row_count]
				   ,[estimate_method]
				   ,[fac_count]
				   ,[client_count]
				   ,[payer_count]
				   ,[account_count]
				   ,[month_count]
				   ,[who_done_it]
				   ,[return_code]
				   ,[fac_id]
				   ,[client_id]
				   ,[account_id]
				   ,[payer_id]
				   ,[parm1_name]
				   ,[parm1_value]
				   ,[parm2_name]
				   ,[parm2_value]
				   ,[parm3_name]
				   ,[parm3_value]
				   ,[parm4_name]
				   ,[parm4_value]

				   )
				values (@vgs_program_name
					,@vgs_start_time
					,@vgs_fill_end_time
					,getDate()
					,@rows_returned 
					,NULL ----estimated row count NULL because we do not have governor logic
					,NULL ----estimated method NULL because we do not have governor logic
					,@vgsFacCount  
					,@vgsClientCount 
					,@vgsPayerCount 
					,@vgsAccountCount
					,@vgsMonthCount
					,@vgs_execution_user
					,@status_code
					,@vFacId
					,Null
					,NULL
					,NULL
					,@vgsParamName1
					,@vgsParamValue1
					,@vgsParamName2
					,@vgsParamValue2
					,''
					,''
					,''
					,''
			   )

	end 	 

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);

END TRY



BEGIN CATCH
 select  @Status_Code = 1,
	@Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(error_number() as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

	if @debug_me='Y' Print 'Stored procedure failure in step: '+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
	if @debug_me='Y' Print 'Error code: '+Cast(error_number() as Varchar(10)) + ' ; Error description:	' + @Status_Text + ' ' + error_message()
	
	select null as fac_id
		,null as formulary_id
		,null as formulary_desc
		,null as formulary_type
		,null as formulary_participants
		,null as formulary_status
		,null as formulary_med_desc
		,null as ndc_din
		,null as formulary_med_status
		,1 as row_num
		,@Status_Code as status_code
		,@Status_Text as status_text
		

END CATCH


GO
grant execute on sproc_prp_formulary_Item_listing_report_v2 to public
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report_v2.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_formulary_Item_listing_report_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_legacy_with_report_options.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-30035       :   script to create sproc_prp_lab_diagnostic_report Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_legacy_with_report_options Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
-- =================================================================================
/*************************************************************************************************************************
Revision History:
2012-05-17	Rolly Sanchez	- PCC-30035 Ability to Report on all Active Orders with Report Options - Initial Creation
2012-05-30  Ritch Moore		- PCC-30565  Changed non client_id=-1 where clause to handle non-intelligent census (record_type is null or record_type = 'C')
2012-06-01  Aditi Iyer		- PCC-30773(3.5.2.7)  updated to show entire order on one row with its mulitple HOA Report Options as seen in Legacy Order Form
2012-06-05	Aditi Iyer		- PCC-30773(3.5.2.7)  updated to show HOA along with Report Option to identity which HOA it is related to 
2012-06-29	Rolly Sanchez	- PCC-30981(3.6.1)	  Future dated discharge
2012-09-05 Rolly Sanchez	- PCC-34029(3.6.1) Report should show future dated discharge clients as discharge
2012-09-07 Rolly Sanchez	- PCC-34109(3.6.1) field that has wider width should comes first
2012-09-13 Rolly Sanchez	- PCC-34419(3.6.1.1) Drop fn_pho_getOrderStatus
												Add error catching after calling sproc_pho_getOrderStatus
												PRP'rized temp table
2012-09-21 Rolly Sanchez	- PCC-34464(3.6.1.1) replaced view_prp_pho_phys_order_schedule_002 with view_prp_pho_phys_order_schedule
												 we'll be dropping this view view_prp_pho_phys_order_schedule_002
2012-01-16 Rolly Sanchez	PCC-37679 (3.6.3) use rm.report_id instead of rep.report_id because this is directly called by the report
2013-02-13 Rolly Sanchez	PCC-38816 (3.6.3) Optimized call to sproc_pho_getOrderStatus by utilizing @fromportal input parameter
											  join it to clients_attribute table
											  add log to prp_execution_statistics when the SP failed
2013-02-15 Rolly Sanchez	PCC-39271(3.6.3) Return status_code 0 when getorderstatus return 0 record or encounter an error
2013-02-15 Rolly Sanchez	PCC-39233(3.6.3) store proc to call generic_metadata for report metadata
											 clean up unused codes
2013-02-20 Rolly Sanchez	PCC-39509(3.6.3) report is not sorting properly if order data was selected
2013-05-30 Rolly Sanchez	PCC-42828(3.7.0.1) Add administrative orders blank result to support new order summary report
2013-12-10 Rolly Sanchez	PCC-50905(3.7.2.2) change order summary formatting from style to b-tag
2015-03-30 H Ehghaghi	    PCC-73710(3.7.z) Remove generic Metadat Store procedure
2015-10-06 Dom Christie     PCC-83414 (3.7.8) controlled_substance_code column in the tempresult table changed to varchar from int due to conversion issue. Removed the insert from prp execution statitics 
2015-11-23 Dom Christie     PCC-85631 (3.7.8.2) Filtered out the Discharge records based on class id 2
2017-08-30 Hemanth Reddy    PCC-102383 (3.7.14) Updated the procedure to format the date based on the execution user's default facility.
*************************************************************************************************************************/



IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_legacy_with_report_options' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_legacy_with_report_options
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_legacy_with_report_options

  @report_id int 
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/********************************************************************************
Purpose: To get a list of fields to display for custom reporting model



Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_legacy_with_report_options
 @report_id =  '-19' 
,@fac_id =  '1' 
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=01;pho_order_status=1;pho_unsched_order=0'--pho_std_order=6,22'--pho_facility_time_code=275'--pho_std_frequency=1'-- pho_facility_time_code=275'
,@sort_list =  '0=-1'  
,@execution_user_login =  'PCC-sanchr' 
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;
--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint;

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @vSP_Clientid int

;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--		
		
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500) 

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500) 

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500) 

		

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 , @vgs_start_time datetime
		 , @vgs_execution_user varchar(60)
		 , @vgs_fill_end_time datetime
		 , @vGeneric_statuscode int 
		 , @vGeneric_statustext varchar(3000)
		 , @vGetStatus_statuscode int 
		 , @vGetStatus_statustext varchar(3000)
------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC 
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	,@term_admission varchar(50)
        , @term_client varchar(50)
      


		


-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100) ---max of three sort levels are supported


		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		, @vHeader  varchar(50)



DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_order_category bit
	,@vfil_unit bit
	


CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50),filter_value int );


Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));




CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
				, fac_id int
				, order_status smallint
				, order_relationship int
				, status_reason varchar(75))


----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #Clients( 
		  client_id int
		, client_name varchar(200) 
		
		, date_of_birth   datetime
		, sex char(1)
		, bed_id int
		, hasAllergy char(1)
		, hasBed char(1)
		, hasDOB char(1)
		, hasGender char(1)

);

Create Table #tempResult (
		phys_order_id int       
        ,fac_id int
        ,client_id int
        ,order_verified varchar(1)
		,active_flag char(1)
		,draft bit
        ,hold_date datetime
        ,hold_date_end datetime
        ,end_date datetime
        ,discontinued_date datetime
        ,order_category_id int
		,order_date varchar(20)
		,orderdate_sorting char(8)
        ,controlled_substance_code VARCHAR(50)
		);




BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;

	SET @vSortList	  = @sort_list;
	SET @vGroupList   = '';
	
	------Initializing Execution Statistics Varibales
	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information 

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ; 

	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamName3 = 'Selected Sorting Options'
	
	Set @vgsParamValue1 = ''
	Set @vgsParamValue2 = ''
	Set @vgsParamValue3 = ''

	select @vStep = 10
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

	---------Code to select the date format based on the country for the default facility of executing user--------------------
	
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login
	
	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	
	---------------------------------------------------------***********---------------------------------------------------------
	-- call to generic metadata

	Select @vStep = 15;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting report metadata ' + convert(varchar(26),getdate(),109);

	--exec dbo.sproc_prp_generic_metadata
	--@report_id = @VreportId
	--,@fac_id = @VfacId
	--,@field_list = @vFieldList
	--,@filter_list = @vFilterList 
	--,@sort_list = @Vsortlist 
	--,@execution_user_login = @execution_user_login
	--,@rows_returned = null
	--,@footer = @vFooter  OUTPUT
	--,@header = @vHeader OUTPUT
	--,@term_client = @vTermClient output
	--,@term_admission = @vTermAdmission output
	--,@debug_me = @debug_me
	--,@status_code = @vGeneric_statuscode output
	--,@status_text = @vGeneric_statustext output

	--if isnull(@vGeneric_statuscode,0)  = 1
	--	  begin
	--			set @status_text = 'sproc_prp_generic_metadata returned the following error: ' + isnull(@vGeneric_statustext,'')
	--			Raiserror( @vGeneric_statustext, 11, 1 );
	--	  end
	
	declare  @vParentReportId int
		, @visemc bit
		, @vWV_transfer int
		, @vFac_Id int
		, @footer varchar(50)
        , @header varchar(50)

	set @vFac_Id =@VfacId
  
    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9
    /* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */
     Select  
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	 from [dbo].fn_prp_get_terminology(@vFac_Id,@visemc) ;
	
	 SET @vTermClient=@term_client
     SET @vTermAdmission=@term_admission;

-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(
		
		
			SELECT 
			  refsortlevel.sequence 
			, refsortby.sort_by_name 
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P' 
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G' 
			  end 
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name 

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK) 
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK) 
							ON repsortlevel.report_id = rep.report_id 
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select 
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id  
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id
			


		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR	
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1') 
					OR 
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT 
			  refsortlevel.sequence 
			, refsortby.sort_by_name 
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P' 
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G' 
			  end 
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name 

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK) 
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK) 
							ON repsortlevel.report_id = rep.report_id 
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select 
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id  
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id
			


		WHERE rm.report_id =  @vParentReportId 
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR	
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1') 
					OR 
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name 
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;
	
	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT 
			  ROW_NUMBER() OVER (ORDER BY 
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN 
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000 
							ELSE refcol.column_width 
						END 
						ELSE NULL 
					END DESC, repcol.output_sequence) 
			  as col_seq
			, refcol.column_name 
			, refcol.column_width
			, repcol.output_sequence 
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective ) 
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) 
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK) 
				ON refrepcol.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK) 
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK) 
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol 
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN 
					(select refheader.ref_report_column_id 
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl					
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')
 
				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name 
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id
		
		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id 

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id 
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
	
		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id  
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or	
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1') 
			  or 
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)
		
	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock) 
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock) 
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id 
	Where rm.report_id =  @vReportId 
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id 
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---


    
SET @vFooter =@footer  
SET @vHeader =@header 
SET @vTermClient=@term_client 
SET @vTermAdmission =@term_admission 


	Select @vStep = 20;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@vFacID,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings @vFacID
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @PRP_FacList 
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	

	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 25
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
	from #PRP_Report_Metadata_Sorting  order by seq;

	
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'');

	if @debug_me='Y' Select * from #PRP_Filters;
	

	---NON INTEGER VALUES AND SINGLE SELECTION
	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged


	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split(a.filter_value,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included and hence handled differently */ 
	  'client_floor'
	, 'pho_order_category'
	, 'client_unit'
	);

	select @vStep = 45
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)
	Create Clustered Index _temp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;
	if @debug_me='Y' SELECT * FROM #PRP_Multi_Filters


	select @vStep = 50
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_category')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	--apply client access logic if required
	select @vStep = 55;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	if @debug_me='Y' Print 'BEGIN STEP @client_id ' + convert(varchar(20), @client_id)

	

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@vFacID,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 
	
	select @vStep = 60;
	
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table ' + @vClientIds + ' '+  convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END


	-----getting the list of clients
	select @vStep = 65
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of clients ' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id 
			, client_name 
			, date_of_birth
			, sex
			, bed_id
			, hasallergy
			, hasbed
			, hasdob
			, hasgender

		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, m.date_of_birth
			, m.sex
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
		from ( Select client_id, mpi_id, client_id_number from dbo.clients  with (nolock) 
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N' 
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
			) c
		inner JOIN dbo.clients_attribute cla with (NOLOCK ) ON cla.client_id = c.client_id 
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join ( Select * from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type is null or record_type = 'C'))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id

		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'	and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'		and fil_unit.filter_value  = u.unit_id
		
		WHERE	((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients ; ()loc is different which has client_status = 'Current'
	BEGIN

		Insert into #clients
		(
			  client_id 
			, client_name 
			, date_of_birth
			, sex
			, bed_id
			, hasallergy
			, hasbed
			, hasdob
			, hasgender

		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, m.date_of_birth
			, m.sex
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
		from ( Select client_id, client_id_number , mpi_id from dbo.clients  with (nolock) 
				left join #PRP_Multi_Filters fil_client_id		
					on fil_client_id.filter_name='client_id' and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
				AND ((@vfil_client_id = '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )

				AND clients.discharge_date is null
			 ) c
		inner JOIN dbo.clients_attribute cla WITH (NOLOCK ) ON cla.client_id = c.client_id 
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
	

		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		

		WHERE 	
			    ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 70
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #clients ' + convert(varchar(26),getdate(),109)
	CREATE CLUSTERED INDEX _tmp_idx_clients on #clients(client_id);

	if @debug_me='Y'  select * from #clients order by Client_name


	-- select all orders... 
	
	insert INTO #tempresult
		SELECT  
			po.phys_order_id 
			, po.fac_id 
			, po.client_id 
			, po.order_verified 
			, po.active_flag 
			, po.draft 
			, po.hold_date 
			, po.hold_date_end 
			, po.end_date 
			, po.discontinued_date 
			, po.order_category_id 
			, convert(varchar(10), po.order_date, @vDateFormatStyle) order_date
			, convert(char(8), po.order_date, 112) orderdate_sorting
            , po.controlled_substance_code 

	 from dbo.pho_phys_order po with (nolock) 
		inner JOIN #clients c ON c.client_id = po.client_id 
		
		left outer join pho_phys_order_new_entry n WITH (NOLOCK ) on n.phys_order_id = po.phys_order_id 
		left outer join #PRP_Multi_Filters cm			on  cm.filter_value = po.order_category_id 
						and cm.filter_name		= 'pho_order_category' 

		where 
		     po.order_class_id=1
			 AND po.draft='0' and (po.active_flag = 'Y' or po.active_flag is null) and isnull(po.order_verified,'Y')='Y'  --- confirmed orders only
			----MULTIPLE VALUES SUPPORTED
			AND ((@vfil_order_category = '1'	 and cm.filter_value is not null) or @vfil_order_category  is null )
			and n.phys_order_id is null -- legacy order only

	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #tempresult/getting order status ' + convert(varchar(26),getdate(),109)
	CREATE CLUSTERED INDEX _tmp_idx_prp__tempresult_OrderId on #tempresult(phys_order_id);

	if @debug_me='Y'  select * from #tempresult 


	-- retrieve order status for that facility/client
	if @client_id <> '-1' set @vSP_Clientid = @client_id

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus 
			@facId = @vFacId
			,@clientId = @vSP_Clientid
			,@physOrderId = null
			,@date = @vgs_start_time
			,@fromportal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output

	set @vRowCount = @@rowcount
	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus

	if isnull(@vGetStatus_statustext,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statustext,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0
		
		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );


	-- create an index on temp table
	Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id, order_status ) ;


	set @vgs_fill_end_time = getdate()

	select @vStep = 85
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' building output query ' + convert(varchar(26),getdate(),109)


	;with tbBase
	as
	(
	Select 
	     @vFacId as fac_id
		, convert(varchar, o.client_id)		as client_id_str --- required for building group id 
		, c.client_name 
		, OrderCategory.category_desc
		, OrderSumm.order_summary
		, o.order_date
		, stuff(ro.report_options,1,2,'') as report_options
		, o.phys_order_id
		, o.orderdate_sorting

		From  #tempresult o with (nolock ) 
		inner join #PRP_PhoOrderStatus  order_status with (nolock)
                        on order_status.phys_order_id = o.phys_order_id
						and order_status.order_status = 1 --- active order

		inner join #Clients c with (nolock) on o.client_id = c.client_id

 		inner join dbo.pho_order_category OrderCategory with (nolock) -- order category 
				on OrderCategory.order_category_id = o.order_category_id

		cross apply	(
					select   a1.row_text.value('.','varchar(max)') as report_options  
					from	
					( select  @vCharNewLine + (case when report.line_order  = 0 
														then '*' + isnull(sched.schedule_label, sched.start_time) 
													else ' ' +  Case when ltrim(rtrim(report.row_text)) = '' then '(blank)' 
																	 else ltrim(rtrim(report.row_text))  end
															 + ' (' + ltrim(rtrim(isnull(sched.schedule_label, sched.start_time))) + ')' 
												 end ) row_text
						from  dbo.pho_mar_std_time_report_options report  with (nolock)
						inner join dbo.pho_schedule sched 
								on report.schedule_id = sched.schedule_id
								and sched.phys_order_id = o.phys_order_id
								and report.phys_order_id =  o.phys_order_id
								 

						order by isnull(sched.schedule_label, sched.start_time), report.line_order	
						for xml PATH(''), type
					)  a1(row_text)
					where 	row_text is not null
				) ro (report_options)	


		Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from 
							( 
								Select Case when row_num = 1 then '<b>' + 
											--[description]
												replace(
												replace (
												replace (
												replace(
												replace( isnull(' ' + 	[description] ,'') , '&', '&amp;')
													, '<', '&lt;')
													, '>', '&gt;')
													, '"', '&quot;')
													, '''', '&apos;')
 
											+ '</b>'  else 
													Case when schedule_template = '3' then ' THEN ' else ' AND ' end 
										end + 
											--isnull(directions,'')  
											replace(
											replace (
											replace (
											replace(
												replace( isnull(' ' + directions,'') , '&', '&amp;')
												, '<', '&lt;')
												, '>', '&gt;')
												, '"', '&quot;')
												, '''', '&apos;')
									from 
									( Select [description], related_generic, directions, schedule_template
											, row_number() over ( order by [start_date] ) as row_num
											from dbo.view_prp_pho_phys_order_schedule po2 with (nolock)	
											
											where po2.phys_order_id = o.phys_order_id
									) a1

									FOR XML PATH (''), TYPE
							) a ( order_summary )
		) OrderSumm

	)
	, tbWithGroupSet
	as
	(
		Select *
	      , NULL  as P_set_id
		  , NULL  as P1
		  , NULL  as P2
		  , NULL  as P3
		  , NULL  as G_set_id
		  , NULL  as G1
		  , NULL  as G2
		  , NULL  as G3

		from tbBase
	)
	, tbWithSort
	as
	(
		Select client_name			 as col_1
			 , category_desc   as col_2
			 , order_summary		as col_3
			 , order_date			as col_4
			 , report_options		as col_5
			 , NULL col_6
			 , NULL col_7
			 , NULL col_8
			 , NULL col_9
			 , NULL col_10
			 , NULL col_11
			 , NULL col_12
			 , P_set_id
			 , P1
			 , P2
			 , P3
			 , G_set_id
			 , G1
			 , G2
			 , G3
			 , phys_order_id  -----for QA TEsting only
			 ,Dense_rank() over ( ORDER BY 
										P1,P2,P3,G1,G2,G3 ---Schedule_date is P1
										,Case @vSort1 
											When 'client_name'    then client_name
											when 'pho_order_date' then orderdate_sorting
										  else NULL end
										
										,Case @vSort2 
											When 'client_name'    then client_name
											when 'pho_order_date' then orderdate_sorting
										  else NULL end
										, order_summary


			) as row_num
		from tbWithGroupSet
	)
	, tb
	as
	(


	Select TOP 100 PERCENT 
		--'2' as row_type,
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
 	, P_set_id   
	, NULL as P1
	, NULL as P2
	, NULL as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	, NULL as page_footer
	--, NULL as col_width
	, row_num
	, @status_code  as status_code
	, @status_text  as status_text	
	, phys_order_id		
   	from tbWithSort
	Order by  row_num
	)
	Select 
		  --row_type,
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, NULL as administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		--, col_width
		, (case when row_num = 1 then status_code else null end )status_code 
		, (case when row_num = 1 then status_text else null end )status_text			
		, phys_order_id
		, row_num
		, 0 include_healthcard
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;



	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) +  ' ' + convert(varchar(26),getdate(),109);


END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step: '+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 
	




	Select 
		--NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		--, NULL as col_width
		, (case when charindex('getorderstatus',@status_text) > 0 THEN 0 else @status_code END ) as status_code
		, @status_text as status_text	
		, NULL as phys_order_id
		, NULL as row_num
		, NULL include_healthcard

-- log error


END CATCH 

RETURN 

END
GO

GRANT EXECUTE ON  sproc_prp_legacy_with_report_options  to PUBLIC
GO
--


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_legacy_with_report_options.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_legacy_with_report_options.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_list_medication_administered_prn_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


								  -- ================================================================================= 
-- PCC-94730       :   script to create sproc_prp_list_medication_administered_prn_report Procedure  
--						-- 
-- Written By:          H Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DML 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:           YES 
-- 
-- Description of Script : Create sproc_prp_list_medication_administered_prn_report Procedure for EOM orders reporting 
-- 
-- Special Instruction:
--
-- REVISION HISTORY:
-- 2021-Dec-10	naghas CORE-98053 (4.4.9)  Update sproc to uses SOP Drug Library Topclasses data
-- 
-- =================================================================================

/***********************************************************************************
Revision History:
2016-05-09 H Ehghaghi 	   PCC-94730  (3.7.10.1)  
2016-05-13 H Ehghaghi 	   PCC-96096  (3.7.10.1)  fixed No data issue
2017-08-15 H Billapati	   PCC-118716 (3.7.14)    Fixing the Date Format to support UK for Administered PRN Report
2018-09-04 Dom Christie	   CORE-7021 (3.7.16.3)   displaying only PRN schedules.
2018-12-04 Dom Christie	   CORE-28558 (3.7.17.3)   Set up page call and additional filters and field to display handled
************************************************************************************/

IF EXISTS (SELECT
	ROUTINE_SCHEMA,
	ROUTINE_NAME,
	ROUTINE_TYPE
FROM INFORMATION_SCHEMA.ROUTINES
WHERE ROUTINE_SCHEMA = 'dbo'
AND ROUTINE_NAME = 'sproc_prp_list_medication_administered_prn_report'
AND ROUTINE_TYPE = 'PROCEDURE') BEGIN
DROP PROCEDURE dbo.sproc_prp_list_medication_administered_prn_report
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

CREATE PROCEDURE dbo.sproc_prp_list_medication_administered_prn_report
    @facId						INT,
	@unitID                     INT=-1,
	@floorID				    INT=-1,
	@client_id                  VARCHAR(1500)='-1',
	@client_status              SMALLINT=-1,
	@start_date				    DATETIME=NULL,
	@end_date				    DATETIME=NULL,
	@order_status               VARCHAR(9)=-1,
	@order_by                   INT='-1',
	@med_class                  VARCHAR(max)=NULL,	
	@prnfollowup                BIT=0,
	@issetup                    BIT=0,
	@fields_to_display            VARCHAR(6)=NULL,
	@orderID						VARCHAR(max)=NULL, 	
	@sortBy		    				VARCHAR(100)=NULL,
    @sortDirection					VARCHAR(4)=NULL,
    @numberOfDays					INT =7,
    @execution_user_login			VARCHAR(60),
    @all_top_drug_classification	XML,
    @rows_returned					INT OUT ,
    @debug_me						CHAR(1)  = '0',
    @status_code					INT OUT ,
    @status_text					VARCHAR(3000) OUT
/********************************************************************************
Sample Execution Script:

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_list_medication_administered_prn_report
     @facId	=2,
	 @unitID  =-1,
	 @floorID=-1,
	 @client_id=-1,
	 @client_status=-1,
	 @start_date='2018-01-01' ,
	 @end_date='2018-12-31' ,
	 @order_status='1,2,3,4,5,6,7,8',
	 @order_by=-1,
	 @med_class=-1,	
	 @prnfollowup=0,
	 @issetup    =1, 
	 @fields_to_display   ='',
	@execution_user_login =  '_system_' ,
	@rows_returned = null,
	@debug_me = 'y',
	@status_code = null,
	@status_text = null

Select @rows_ret, @statuscode int, @statustext
**********************************************************************************/
as
Begin


SET NOCOUNT ON;

DECLARE @vStep int
, @vErr varchar(max)
, @vdelim char(1)
, @vCharNewLine char(2)
, @vSeparator char(6)
, @vReportDate datetime
, @vgsStepStartTime datetime
, @vgsStepEndTime datetime
,@vgsClientCount INT;

--Facility Related variables, also used in capturing execution Statistics 
DECLARE @vFacIDs varchar(max)
--Declare @vFacList as table(FacId int)
DECLARE @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

---------------------------------------------------------------------------------------
-- Create the temp tables
---------------------------------------------------------------------------------------	
CREATE TABLE #tempResult(phys_order_id int
, fac_id int
, client_id int
, client_first_name varchar(50)
, client_last_name varchar(50)
, client_id_number varchar(35)
, order_verified varchar(1)
, active_flag char(1)
, draft bit
, hold_date datetime
, hold_date_end datetime
, start_date datetime
, end_date datetime
, discontinued_date datetime
, order_category_id int
, controlled_substance_code int
, order_description varchar(500)
, order_related_generic varchar(250)
, legacy_order varchar(1)
, schedule_directions varchar(1000)
, schedule_id int
, legacy_directions varchar(1000)

, followup_result char(1)
, perform_date datetime
, perform_by varchar(200)
, witnessed_by varchar(60))


CREATE TABLE #clients  ----we store all client related info in this table so not to access client+mpi tables or related view later on..
(
 Client_Id int
, client_first_name varchar(50)
, client_last_name varchar(50)
, client_id_number varchar(35)

); 



CREATE TABLE #orderStatusTable(phys_order_id int NOT NULL
, fac_id int NOT NULL
, order_status int NOT NULL
, order_relationship int NULL
, status_reason varchar(50) NULL);

CREATE TABLE #PRP_Filters (client_id int);

CREATE TABLE #pho_order_ids ( phys_id int )	;



----client Access Varaibles
DECLARE @vholdValue table (phys_order_id int NOT NULL
																	 , fac_id int NOT NULL
																	 , order_status SMALLINT NOT NULL
																	  , order_relationship int NULL
																	  , status_reason varchar(50) NULL) ;


DECLARE @orderstatusid TABLE (order_status_id SMALLINT)
DECLARE @fields TABLE (field_id SMALLINT)

DECLARE @vClientIDs VARCHAR(1500)		
DECLARE @vClientWarningMsg VARCHAR(MAX)--- to know whether it the returned list is restricted


-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
	   ,@vgs_start_time datetime
	   ,@vgs_execution_user varchar(60)
	   ,@vgs_fill_end_time datetime;

----Local Variables
DECLARE    @vFacId			INT,			        
           @vOrderIDS		VARCHAR(MAX),
	       @vSortBy			VARCHAR(100),
		   @vSortDirection	VARCHAR(4) ,
		   @now				DATETIME,
		   @vRowCount		INT,
		   @vfil_client_id  BIT,
		   @vNumberOfDays int,
		   @vStartDate datetime,
		   @vCountryCode char(2),
		   @vdateFormatStyle smallint,
		    @vunitID                    INT,
			@vfloorID				    INT,
			@vclient_id               VARCHAR(1500),
			@vclient_status             SMALLINT,
			@vstart_date				DATETIME,
			@vend_date				    DATETIME,
			@vorder_status              VARCHAR(9),
			@vorder_by                   INT,
			@vmed_class                  VARCHAR(max),
			@vis_include_med_class       SMALLINT,
			@vprnfollowup                BIT,
			@vissetup                    BIT,
			@vfields_to_display            VARCHAR(6),
			@vcolcnt                     SMALLINT,
			@vcol1						 SMALLINT,
			@vcol2                       SMALLINT

DECLARE @tpmAllTopDrugClassification TABLE (
		classid varchar(10),
		descdisplay varchar(60)
);


BEGIN try

    insert into @tpmAllTopDrugClassification
    select classid, descdisplay from fn_xmlToDrugClassification(@all_top_drug_classification);

    Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	SET @vStep = 0
	SET @vgsStepStartTime= getdate()	;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),@vgsStepStartTime,109)

	--set Standard variables
	SET @vdelim				= ','
	SET @vCharNewLine		= Char(13) + char(10);
	SET @vSeparator			= 'ZYXWVU';

    SET @vfacId				= @facId ;
	SET @vOrderIDS			= @orderID ;
	SET @vSortBy			= @sortBy;
	SET @vSortDirection		= @sortDirection 
	SET @vNumberOfDays		 =@numberOfDays
	SET @vunitID            = @unitID         
	SET @vfloorID			= @floorID	  
	SET @vclient_status     = @client_status     
	SET @vstart_date		= @start_date	+ '00:00:00'	 
	SET @vend_date			= @end_date	  + '23:59:59'
	SET @vorder_status      = @order_status      
	SET @vorder_by          = @order_by       
	SET @vmed_class         = @med_class    
	SET @vprnfollowup       = @prnfollowup    
	SET @vclient_id           = @client_id
	SET @vissetup  =@issetup  
	set @vStartDate = DATEADD(DAY, -@vNumberOfDays, GETDATE())
	SET @vfields_to_display=@fields_to_display

	SELECT @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		FROM dbo.facility fac WITH (nolock)
		INNER JOIN dbo.sec_user sec with (nolock)
		ON fac.fac_id = sec.fac_id
		LEFT JOIN dbo.common_code cntry WITH (nolock) ON fac.country_id = cntry.item_id
		LEFT OUTER JOIN wesreference.dbo.country cntry_code WITH (nolock)
		ON cntry.item_description = cntry_code.ISO_Country_Name
		WHERE sec.loginname = @vgs_execution_user


       
    set  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)

	IF @vfields_to_display='' OR @vfields_to_display IS NULL
	BEGIN
	SET @vfields_to_display=0
	SET @vcolcnt=0
	END
	ELSE
	BEGIN
	INSERT INTO @fields
	SELECT Cast(items AS SMALLINT) FROM dbo.Split(@vfields_to_display,@vdelim);
	SELECT @vcolcnt=COUNT(*) FROM @fields	
	END




    --Validate all input parameters
	SET  @vStep = 1;
	SET  @vgsStepStartTime= getdate()	;
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' + @vgs_program_name  + convert(varchar(26),@vgsStepStartTime,109);
 
	if (
		 @vfacid is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @facId=' + isnull(convert(varchar(10),@vfacid),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

    set @vgsStepEndTime=getdate();
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

    --- Getting user access fac list

	Select @vStep = 2;
	SET  @vgsStepStartTime= getdate()	;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),@vgsStepStartTime,109);
	

	EXEC [dbo].[sproc_prp_get_facility_access_list_delim]
	  @fac_id  = @vfacId
	 ,@execution_user_login = @vgs_execution_user
	 ,@fac_id_out =  @vFacIds OUT
	 ,@msg_out    =  @vFacWarningMsg OUT;

	
	--facilities warnings
	IF @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @vFacList 
	SELECT @vFacId = Cast(items AS INT) FROM dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	IF @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		IF @status_code = 0 SET @status_code = 3;
		RAISERROR( @status_text,11,1);
	END 

	SET @vgsStepEndTime=getdate();
	IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

	--Aapply client access logic if required
	SET @vStep = 3;
	SET  @vgsStepStartTime= getdate()	;
 	if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' Getting user access client list ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);

	

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@vclient_id,@vfacid,@vgs_execution_user) ;

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 


	

		INSERT INTO #PRP_Filters
		SELECT  items FROM dbo.split(@vClientIds,@vDelim) b	;



	

     SET @vgsStepEndTime=getdate();
	IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';



		IF @vissetup=1
	    BEGIN
		INSERT INTO @orderstatusid
		SELECT CAST(items AS SMALLINT) FROM dbo.split(@vorder_status,@vDelim) b	;	
	    END

	IF @debug_me='Y'
	BEGIn
	select '#PRP_Filters', * from #PRP_Filters
	select '@vissetup',@vissetup
	select '@vorder_status',@vorder_status
	select '@orderstatusid',* from @orderstatusid
	select 'colcnt', @vcolcnt
	select '@vstart_date',@vstart_date
	select '@vend_date',@vend_date
	
	END


	IF @vissetup=0
	BEGIN

						IF @debug_me='Y'
						BEGIN
						select 'from dashbaord'
						END



											  --
											   IF (@vOrderIds is not null  and   @vOrderIds<>'')
											   BEGIN

												SET @vStep = 4;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' Get Phys Order IDS ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);

												 INSERT INTO #pho_order_ids (phys_id )
												  select items from dbo.split(@vOrderIds,@vdelim);


												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

												if @debug_me='Y' select '#pho_order_ids' name,* from #pho_order_ids

								

												SET @vStep = 6;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' Populate #tempResult to be used by sproc_pho_getOrderStatus ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);

												 INSERT INTO #tempResult (phys_order_id, fac_id , client_id , client_first_name, client_last_name, client_id_number,order_verified, active_flag, draft , hold_date 
																		, hold_date_end, start_date , end_date , discontinued_date , order_category_id , controlled_substance_code , order_description , order_related_generic
																		, legacy_order , schedule_directions , schedule_id , legacy_directions, followup_result , perform_date, perform_by,witnessed_by )
												 SELECT ppo.phys_order_id, 
												        ppo.fac_id, 
														ppo.client_id, 
														m.first_name,
														m.last_name,														
														cl.client_id_number,
														 ppo.order_verified, ppo.active_flag, ppo.draft, ppo.hold_date, 
														ppo.hold_date_end, ppo.start_date,ppo.end_date, ppo.discontinued_date, ppo.order_category_id, ppo.controlled_substance_code, ppo.description, ppo.related_generic, 
														CASE WHEN ppone.phys_order_id is null THEN 'Y' ELSE 'N' END  'legacy_order', pos.schedule_directions, ps.schedule_id, ppo.directions,psd.followup_result  ,psd.perform_date,
														isnull(secuser.long_username, psd.perform_by) perform_by,
														CASE WHEN wit.phys_order_id=ppo.phys_order_id THEN  
																		  CASE WHEN ISNULL(witness_overridden,0)= 0 AND  w.witness_by_id IS NULL THEN 'n/a' 
																				  WHEN ISNULL(witness_overridden,0)= 1 THEN 'Overridden' 
																		  ELSE witsu.LONG_username
																		  END 
														ELSE 'n/a' 
														END
														FROM  #pho_order_ids  ids WITH (NOLOCK)
														INNER JOIN pho_phys_order ppo WITH (NOLOCK) on ppo.phys_order_id =ids.phys_id
														INNER JOIN pho_order_schedule pos WITH (NOLOCK)  ON ppo.phys_order_id = pos.phys_order_id 
														INNER JOIN pho_schedule ps WITH (NOLOCK) ON ps.order_schedule_id = pos.order_schedule_id
														INNER JOIN pho_schedule_details psd WITH (NOLOCK) ON psd.pho_schedule_id = ps.schedule_id 
														INNER JOIN clients cl WITH (NOLOCK) ON cl.client_id = ppo.client_id
														INNER JOIN #PRP_Filters pf	ON (cl.client_id=pf.client_id OR pf.client_id=-1) 
			                                           	INNER JOIN mpi m WITH (NOLOCK) ON m.mpi_id = cl.mpi_id								
														LEFT JOIN pho_phys_order_new_entry ppone WITH (NOLOCK) on ppone.phys_order_id = ppo.phys_order_id
														LEFT JOIN dbo.sec_user secuser WITH (NOLOCK)	on secuser.loginname = psd.perform_by 
														LEFT JOIN pho_phys_order_require_witness wit ON wit.phys_order_id=ppo.phys_order_id
														LEFT JOIN  pho_schedule_details_admin_witness w ON psd.pho_schedule_detail_id=w.schedule_detail_id
														LEFT JOIN SEC_user witsu ON witsu.userid=w.witness_by_id
			                                            
														WHERE pos.fac_id = @vFacID
														AND pos.deleted = 'N'
														AND pos.schedule_type= 8 -- PRN schedule
														AND ppo.order_class_id=1
														AND psd.chart_code='0' AND psd.deleted = 'N' AND psd.perform_date >= @vStartDate;


												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

												IF @debug_me='Y' select '#tempResult' name ,* from #tempResult order by perform_Date;

												 SET @vStep = 6;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' PCall sproc_pho_getOrderStatus ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);

												SET @now = dbo.fn_facility_getCurrentTime(@vFacId)

												

												insert into @vholdValue (phys_order_id,fac_id,order_status,order_relationship,status_reason)
												EXEC sproc_pho_getOrderStatus @vFacId, NULL, NULL, @now, 'Y', @debug_me, @status_code , @status_text ;
	
												INSERT INTO #orderStatusTable	(phys_order_id,fac_id,order_status,order_relationship,status_reason)
													select distinct phys_order_id,fac_id,order_status,order_relationship,status_reason from @vholdValue  ;

												 set @vRowCount = @@rowcount
												if isnull(@status_code,0) = 1
													  begin
															set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@status_text,'')
															Raiserror( @status_text, 11, 1 );
													  end
												else if  (@vRowCount = 0 )
		
													  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );

												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';
												IF @debug_me='Y' select '#orderStatusTable' name ,* from #orderStatusTable;

												 SET @vStep = 7;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' Populate the result   ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);


	 
													SELECT tr.fac_id,
													  ltrim(rtrim(isnull(tr.client_last_name,'')))+', '+ ltrim(rtrim(isnull(tr.client_first_name,''))) +' ('+ ltrim(rtrim(isnull(tr.client_id_number,'')))+')' client_name, 
													 '<b>'+tr.order_description+'</b><br />'+ tr.schedule_directions
													  + '<br />'+
													 '<b>Effective Start Date:</b> '+ convert(char(10),tr.start_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),tr.start_date,114 ) as order_summary,
													Case when os.order_status =1 then 'Active'
														when os.order_status=2 then 'Discontinued'
														when os.order_status =3 then 'Completed'
														when os.order_status =5 then 'On Hold'
														when os.order_status =4 then 'Struck out'
														when os.order_status =8 and os.order_relationship=1 then 'Pending confirmation (Hold)'
														when os.order_status =8 and os.order_relationship=2 then 'Pending confirmation (Resume)'
														when os.order_status =8 and os.order_relationship=3 then 'Pending confirmation (Discontinue)'
														when os.order_status =8 then 'Pending confirmation'
														when os.order_status =9 then 'Pending Clinical Review'
														when os.order_status in (11,10)  then 'Pending Order Signature'
														when os.order_status =-1 then 'In Queue'
														else 'Unknown'
														end	as order_status
		
													
													,convert(char(10),tr.perform_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),tr.perform_date,114 ) perform_date,tr.perform_by, 
													case tr.followup_result 
													   when 'E' then 'Effective'
													   when 'I' then 'Ineffective'
													   when 'U' then 'Unknown'
													   else '' end    as followup_result
													, tr.order_category_id
													, tr.phys_order_id
													, tr.client_id
													, tr.legacy_order
													, tr.schedule_id
													, tr.order_related_generic
													, tr.legacy_directions 
													, witnessed_by
													, NULL AS medication_class
													, @vcolcnt AS colcnt
													, row_number() OVER ( ORDER BY CASE WHEN @vSortDirection = 'asc'  THEN client_last_name END ASC,CASE WHEN @vSortDirection = 'desc' THEN client_last_name END DESC) row_num													
													, @status_code as status_code
													, @status_text	status_text
												FROM #tempResult tr
												INNER JOIN #orderStatusTable os ON os.phys_order_id = tr.phys_order_id
												ORDER BY 
													row_num


												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';
											 END
											 ELSE
											  BEGIN
												 Select 

														 @vfacID	as fac_id,
														 NULL	as client_name, 
														 NULL	as order_summary,
														 NULL	as order_status,
														 NULL	as perform_date,
														 NULL	as perform_by, 
														 NULL	as followup_result,
														 NULL	as order_category_id, 
														 NULL	as phys_order_id, 
														 NULL	as client_id,
														 NULL	as legacy_order,  
														 NULL	as schedule_id,
														 NULL	as order_related_generic, 
														 NULL	as legacy_directions, 
														 NULL   as witnessed_by,
														 NULL AS medication_class,
													     NULL AS colcnt,
														 null  as row_num
														, @status_code as status_code
														, @status_text as status_text	
											 END
						END
						ELSE
						BEGIN
									IF @debug_me='Y'
									BEGIn
									select 'from setup'
									END

                                                SET @vStep = 5;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' List of Clients ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);


												IF @vclient_status in (-1,1)  ----ALL or discharged
	                                            BEGIN

												INSERT INTO #clients
												
												SELECT  c.client_id,
												        m.first_name,
														m.last_name,
														c.client_id_number
														
												from ( Select  clients.client_id, 
												               clients.client_id_number,
													               mpi_id											  
																  
															from dbo.clients  with (nolock) 
														INNER JOIN #PRP_Filters	cli ON (cli.client_id= clients.client_id OR	cli.client_id=-1)
														where clients.fac_id = @vFacID  
														 and clients.deleted = 'N' 
											
															AND (@vclient_status = '-1' or (clients.discharge_date IS NOT NULL ) )
													) c
												INNER JOIN dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
				
												INNER JOIN ( Select * from 
																(
																 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
																		c.bed_id, 
					         											payer_type,
																		c.client_id
					        
															FROM dbo.census_item c With (nolock)
															left join dbo.AR_LIB_PAYERS libpayer with (nolock) 
																ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')    
															WHERE c.fac_id = @vFacId and c.deleted = 'N'
															  AND c.status_code_id not in (-1,17) 
															  AND (record_type = 'C' OR record_type IS NULL)) a
																		where Row = 1
															) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

												LEFT JOIN dbo.bed b with (nolock) on loc.bed_id=b.bed_id
												LEFT JOIN dbo.room r with (nolock) on b.room_id=r.room_id
												LEFT JOIN dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
												LEFT JOIN dbo.unit u with (nolock) on  u.unit_id=r.unit_id

												WHERE  (u.unit_id=@vunitID OR @vunitID=-1)
												AND ( f.floor_id= @vfloorID OR @vfloorID=-1)							

												Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count

												END
												ELSE -----ONLY Current clients
												BEGIN

													Insert into #clients
																							
													SELECT  c.client_id,
															m.first_name,
															m.last_name,
															c.client_id_number


													from dbo.clients c with (nolock)
													INNER JOIN dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
													INNER JOIN dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.												
                                                    INNER JOIN #PRP_Filters	cli ON (cli.client_id= c.client_id OR	cli.client_id=-1)
												    WHERE 	c.fac_id =  @vFacID	
												    AND (loc.floor_id=@vfloorID OR @vfloorID=-1)
													AND (loc.unit_id=@vunitID OR @vunitID=-1)
													AND c.discharge_date is null
													Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
												END











												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';



	if @debug_me='Y'
	BEGIN 
	SELECT 'clientlist' ,* FROM #clients
	ORDER BY client_id
	END

		select @vStep =7
	if @debug_me='Y' PrINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Getting list of all orders for all selected clients... ' + CONVERT(VARCHAR(26),getdate(),109)

	 INSERT INTO #tempResult (phys_order_id, fac_id , client_id ,  client_first_name, client_last_name,client_id_number ,order_verified, active_flag, draft , hold_date 
																		, hold_date_end, start_date , end_date , discontinued_date , order_category_id , controlled_substance_code , order_description , order_related_generic
																		, legacy_order , schedule_directions , schedule_id , legacy_directions, followup_result , perform_date, perform_by,witnessed_by )
												 SELECT ppo.phys_order_id, 
												        ppo.fac_id, 
														ppo.client_id, 
												        m.first_name,
														m.last_name,														
														cl.client_id_number,
											            ppo.order_verified, ppo.active_flag, ppo.draft, ppo.hold_date, 
														ppo.hold_date_end, ppo.start_date,ppo.end_date, ppo.discontinued_date, ppo.order_category_id, ppo.controlled_substance_code, ppo.description, ppo.related_generic, 
														CASE WHEN ppone.phys_order_id is null THEN 'Y' ELSE 'N' END  'legacy_order', pos.schedule_directions, ps.schedule_id, ppo.directions,psd.followup_result  ,psd.perform_date,
														isnull(secuser.long_username, psd.perform_by) perform_by,
														CASE WHEN wit.phys_order_id=ppo.phys_order_id THEN  
																		  CASE WHEN ISNULL(witness_overridden,0)= 0 AND  w.witness_by_id IS NULL THEN 'n/a' 
																				  WHEN ISNULL(witness_overridden,0)= 1 THEN 'Overridden' 
																		  ELSE witsu.LONG_username
																		  END 
														ELSE 'n/a' 
														END
														FROM  pho_phys_order ppo WITH (NOLOCK) 
														INNER JOIN pho_order_schedule pos WITH (NOLOCK)  ON ppo.phys_order_id = pos.phys_order_id 
														INNER JOIN pho_schedule ps WITH (NOLOCK) ON ps.order_schedule_id = pos.order_schedule_id
														INNER JOIN pho_schedule_details psd WITH (NOLOCK) ON psd.pho_schedule_id = ps.schedule_id 
														INNER JOIN clients cl WITH (NOLOCK) ON cl.client_id = ppo.client_id
														INNER JOIN #clients c		ON  (c.client_id = cl.client_id OR c.client_id=-1)
														INNER JOIN mpi m WITH (NOLOCK) ON m.mpi_id = cl.mpi_id
														LEFT JOIN pho_phys_order_new_entry ppone WITH (NOLOCK) on ppone.phys_order_id = ppo.phys_order_id
														LEFT JOIN dbo.sec_user secuser WITH (NOLOCK)	on secuser.loginname = psd.perform_by 
														LEFT JOIN pho_phys_order_require_witness wit ON wit.phys_order_id=ppo.phys_order_id
														LEFT JOIN  pho_schedule_details_admin_witness w ON psd.pho_schedule_detail_id=w.schedule_detail_id
														LEFT JOIN SEC_user witsu ON witsu.userid=w.witness_by_id
			
														WHERE pos.fac_id = @vFacID
															AND pos.deleted = 'N'
															AND pos.schedule_type= 8 -- PRN schedule
															AND ppo.order_class_id=1															
															AND psd.chart_code='0' AND psd.deleted = 'N' 
															AND (psd.perform_date >= @vstart_date AND psd.perform_date <=@vend_date)
															AND (ppo.physician_id =@vorder_by  OR @vorder_by=-1)
															AND ( (@vprnfollowup=1 AND psd.followup_result IS NOT NULL ) OR @vprnfollowup=0 ) ;


												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

												IF @debug_me='Y' 
												BEGIN
												select '#tempResult' name ,* from #tempResult  order by perform_Date;;
												END

																								-----FILTERING ORDERS BASED ON MEDICATION CLASS 
												if @vmed_class    is not NULL and (@vmed_class    <> '-1,' and @vmed_class    <> '-1')
												BEGIN
													select @vStep = 62
													if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vmed_class ' + convert(varchar, @vmed_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)
		
													DELETE  #tempResult
													From #tempResult po
													left join (
																 SELECT distinct poelmr.phys_order_id  from 
																		(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
																			union 
																		select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
																		) poelmr 
																	INNER JOIN 
																			(
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
																			) classes 
																		ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
																	INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id 
																				from dbo.split(@vmed_class, ',')  ) selected_class
																		ON classes.class_id = selected_class.sel_class_id
										
															   ) med_class_orders
														on med_class_orders.phys_order_id = po.phys_order_id
													Where  med_class_orders.phys_order_id is null
												END 

	                                            IF @debug_me='Y' 
												BEGIN
												select 'after med class delete' name ,* from #tempResult;
												END

 IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

												 SET @vStep = 8;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' PCall sproc_pho_getOrderStatus ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);

												SET @now = dbo.fn_facility_getCurrentTime(@vFacId)

												insert into @vholdValue (phys_order_id,fac_id,order_status,order_relationship,status_reason)
												EXEC sproc_pho_getOrderStatus @vFacId, NULL, NULL, @now, 'Y', @debug_me, @status_code , @status_text ;
	
												INSERT INTO #orderStatusTable	(phys_order_id,fac_id,order_status,order_relationship,status_reason)
													select distinct phys_order_id,fac_id,order_status,order_relationship,status_reason from @vholdValue  ;


								IF @debug_me='Y' 
								BEGIN
								select 'before delete for selected order status #orderStatusTable' name ,* from #orderStatusTable;
								END
							
												
                                                 IF @vorder_status<>'-1'
												 BEGIN
													DELETE t
													FROM #orderStatusTable t
													LEFT JOIN @orderstatusid  id 
													ON id.order_status_id=t.order_Status 
												    WHERE id.order_status_id IS NULL
												 END
												

												SET @vgsStepEndTime=getdate();
												IF @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  +' is completed: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';

							IF @debug_me='Y' 
							BEGIN
							select 'after delete for selected order status #orderStatusTable' name ,* from #orderStatusTable;
							END

												 SET @vStep = 7;
												SET  @vgsStepStartTime= getdate()	;
 												if @debug_me='Y' Print 'BEGIN STEP ' + CONVERT(VARCHAR(20), @vStep) + ' Populate the result   ' + CONVERT(VARCHAR(26),@vgsStepStartTime,109);


	 
													SELECT  
													        tr.fac_id,
													         ltrim(rtrim(isnull(tr.client_last_name,'')))+', '+ ltrim(rtrim(isnull(tr.client_first_name,''))) +' ('+ ltrim(rtrim(isnull(tr.client_id_number,'')))+')' client_name,  
													 '<b>'+tr.order_description+'</b><br />'+ tr.schedule_directions + '<br />'+
													 '<b>Effective Start Date:</b> '+ convert(char(10),tr.start_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),tr.start_date,114 ) as order_summary,
													Case when os.order_status =1 then 'Active'
														when os.order_status=2 then 'Discontinued'
														when os.order_status =3 then 'Completed'
														when os.order_status =5 then 'On Hold'
														when os.order_status =4 then 'Struck out'
														when os.order_status =8 and os.order_relationship=1 then 'Pending confirmation (Hold)'
														when os.order_status =8 and os.order_relationship=2 then 'Pending confirmation (Resume)'
														when os.order_status =8 and os.order_relationship=3 then 'Pending confirmation (Discontinue)'
														when os.order_status =8 then 'Pending confirmation'
														when os.order_status =9 then 'Pending Clinical Review'
														when os.order_status in (11,10)  then 'Pending Order Signature'
														when os.order_status =-1 then 'In Queue'
														else 'Unknown'
														end	as order_status
		
													
													,convert(char(10),tr.perform_date,@vdateFormatStyle) + ' '+  CONVERT(CHAR(5),tr.perform_date,114 ) perform_date,tr.perform_by, 
													case tr.followup_result 
													   when 'E' then 'Effective'
													   when 'I' then 'Ineffective'
													   when 'U' then 'Unknown'
													   else '' end    as followup_result
													, tr.order_category_id
													, tr.phys_order_id
													, tr.client_id
													, tr.legacy_order
													, tr.schedule_id
													, tr.order_related_generic
													, tr.legacy_directions 
													, witnessed_by
													, LTRIM(medication_class.descdisplay) medication_class
													, @vcolcnt colcnt
													, row_number() OVER ( ORDER BY client_last_name,tr.order_description  ) row_num
													, @status_code as status_code
													, @status_text	status_text
												FROM #tempResult tr
												INNER JOIN #orderStatusTable os ON os.phys_order_id = tr.phys_order_id
											    outer apply( select  STUFF( medication.value('.','varchar(max)'),1,1,'') as descdisplay   From  

															  (SELECT ', ' + atdc.descdisplay
																from (select prf.phys_order_id, phys_order_ext_lib_rec_id  
																		  from dbo.pho_order_ext_lib_med_ref prf with (nolock) where  prf.phys_order_id=tr.phys_order_id
																			union 
																		 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id 
																		   from  dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) where  pref_audit.phys_order_id=tr.phys_order_id
																		) poelmr 
																INNER JOIN  (
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
																				UNION
																				SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
																	) classes 
																 ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
																 LEFT JOIN @tpmAllTopDrugClassification atdc on atdc.classid= classes.class_id
																order by poelmr.phys_order_ext_lib_rec_id,atdc.descdisplay FOR XML PATH(''), TYPE
																) a (medication) 
	 		  
			                                      	) medication_class
																						
												ORDER BY 
													row_num

                                             

													if @debug_me='Y' PrINT 'END STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' ' + CONVERT(VARCHAR(26),getdate(),109)



						END

end TRY

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 

		 @vfacID	as fac_id,
		 NULL	as client_name, 
		 NULL	as order_summary,
		 NULL	as order_status,
		 NULL	as perform_date,
		 NULL	as perform_by, 
		 NULL	as followup_result,
		 NULL	as order_category_id, 
		 NULL	as phys_order_id, 
		 NULL	as client_id,
		 NULL	as legacy_order,  
		 NULL	as schedule_id,
		 NULL	as order_related_generic, 
		 NULL	as legacy_directions, 
		 NULL   as witnessed_by,
		 NULL AS medication_class,
		 NULL AS colcnt,
		 null  as row_num,
		  @status_code as status_code
		, @status_text as status_text	
		
END CATCH 
END
RETURN 

GO

GRANT EXECUTE ON  dbo.sproc_prp_list_medication_administered_prn_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_list_medication_administered_prn_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_list_medication_administered_prn_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_official_prescription_form.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-29846       :   script to create sproc_prp_official_prescription_form Procedure  
--						-- 
-- Written By:          Aditi Iyer
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_official_prescription_form Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
-- =================================================================================
/***********************************************************************************************************
Revision History:
2012-04-10  Aditi Iyer       Initial creation of this stored proc
2012-05-14  Aditi Iyer		 updated store proc to return adderss as NULL and exclude Client_id_number from client_name
2012-05-31  Ritch Moore		 PCC-30565  Changed non client_id=-1 where clause to handle non-intelligent census (record_type is null or record_type = 'C')
2012-06-08	Rolly Sanchez	 PCC-30903	Removed the inner join to emc_ext_facilities to return all of order sources 
2012-06-29	Rolly Sanchez	 PCC-30981	Future dated discharge
2012-07-04	Rolly Sanchez	 PCC-30977(3.6.1) Removed unused field
2012-08-08	Rolly Sanchez	 PCC-29834(3.6.1) get report name from prp_rm_report table
2012-08-17	Rolly Sanchez	 PCC-32608(3.6.1) removed hard coded report id and add join to prp_rm_report
2012-09-05 Rolly Sanchez	 PCC-34029(3.6.1) Report should show future dated discharge clients as discharge
2012-09-13 Rolly Sanchez	 PCC-34419(3.6.1.1) Drop fn_pho_getOrderStatus create temp table in replacement
											  Add error catching after calling sproc_pho_getOrderStatus
											  PRP'rized temp table
2012-09-21 Rolly Sanchez	 PCC-34464(3.6.1.1) replaced view_prp_pho_phys_order_schedule_002 with view_prp_pho_phys_order_schedule
												we'll be dropping this view view_prp_pho_phys_order_schedule_002
2013-02-12 Rolly Sanchez	 PCC-38929(3.6.3) Auto populate some informations like facility and client address
												log error on prp_execution_statistics when it failed
												return date of birth
												clean up unused variable
												removed @pharmacy_state as input parameter
												reverse client name order from last name, first name to first name last name
												handle empty string designation
2013-02-12 Rolly Sanchez	 PCC-38819(3.6.3) Optimized call to sproc_pho_getorderstatus
												utilized @fromportal input parameter
												added join to clients_attribute table
												commented unused part of the code
											(need to clean those commented code next time)
2013-02-06 Rolly Sanchez	 PCC-40145(		Added space if related generic is null
2013-02-06 Rolly Sanchez	 PCC-40145(		Added space if related generic is null
2013-12-12 Dominic Christie(Chrisd)	 PCC-49143		Removed the Related Generic in Description 
2015-04-29 H Ehghaghi	    PCC-49143		Removed Generic Metadata
2015-06-23 H Ehghaghi	    PCC-62935		Apply Legal Mailing Address
2015-06-26 H Ehghaghi	    PCC-62935		Fixed No Data Found Issue
2015-11-23 Dom Christie	    PCC-85635(3.7.8.2) Fitlering out the Discharge orders using classid=2
2017-08-22 Hemanth Reddy	PCC-102383(3.7.14) Updated the procedure to format the date based on the execution user's default facility.
2019-01-29 Dom Christie     CORE-32562(3.7.18.1) updated to display phys name as lastname,firstname desgination		
*************************************************************************************************************/


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_official_prescription_form' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_official_prescription_form
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_official_prescription_form

  @report_id int 
, @fac_id int
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/********************************************************************************
Purpose: To get a list of fields to display for custom reporting model



select * From prp_rm_report
						   
Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_official_prescription_form
 @report_id =  '-17' 
,@fac_id =  '1' 
,@field_list =  '' 
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;pho_phys_order_id=-1'
,@sort_list =  ''
,@execution_user_login =  'PCC-ehghah' 
,@rows_returned = null
,@debug_me = 'n'
,@status_code =null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;
--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @vSP_ClientId int
	--, @vTermClient varchar(50)
	--, @vTermAdmission varchar(50)
	, @vFooter varchar(50)
	, @vHeader  varchar(50)
	, @vGeneric_statuscode int 
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int 
	, @vGetStatus_statustext varchar(3000)	;
------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC 
declare @vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	,@term_admission varchar(50)
        , @term_client varchar(50)
----------Governor and Statistics Variables
Declare  

		@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--		
		
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500) 

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500) 

		

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		 ,@vCountryCode char(2)
		 ,@vDateFormatStyle smallint;


DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_unit bit
	


CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );



CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients( 
		  client_id int
		, client_id_number varchar(35)
		, client_name varchar(200) 
		, location varchar(500) ----with Facility_name
		, date_of_birth datetime
		, client_address1 varchar(50)
		, client_address2 varchar(50)
		, client_city varchar(75)
		, client_prov_state varchar(20)
		, client_postal varchar(50)
		
		, sex char(1)
		, bed_id int
		, hasAllergy char(1)
		, hasBed char(1)
		, hasDOB char(1)
		, hasGender char(1)

);


Create Table #tempResult (
		phys_order_id int       
        ,fac_id int
        ,client_id int
        ,order_verified varchar(1)
		,active_flag char(1)
		,draft bit
        ,hold_date datetime
        ,hold_date_end datetime
        ,end_date datetime
        ,discontinued_date datetime
        ,order_category_id int
		,physician_id int
		,pharmacy_id int
		,order_date datetime
        ,controlled_substance_code int
			);

  declare  @vParentReportId int
		, @visemc bit
		, @vWV_transfer int
		, @vFac_Id int
		, @footer varchar(50)
        , @header varchar(50)

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	Set @visemc	= 0;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','

	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @vSortList	  = @sort_list;
	
	------Initializing Execution Statistics Varibales
	select @vStep = 1
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information 
	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamName2 = 'Selected Filters'
	
	Set @vgsParamValue1 = ''
	Set @vgsParamValue2 = ''
	Set @vgsParamValue1 = 	'all columns'
	Set @vgsParamValue2 = 	@vFilterList;


	
	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ; 


	
	select @vStep = 2
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

	---------Code to select the date format based on the country for the default facility of executing user--------------------
	
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login
	
	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)

	---------------------------------------------------------***********---------------------------------------------------------

	/***************************************************************************
					GET META DATA SECTION
	***************************************************************************/

	---- Create metadata temp tables ----

	Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
	Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
	Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
	Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


		---- Populate metadata temp tables ----

	select @vStep = 5
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' retrieving report metadata  ' +  convert(varchar(26),getdate(),109)



  
    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9
    /* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */
     Select  
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	 from [dbo].fn_prp_get_terminology(@vFacID,@visemc) ;
	
	 SET @vTermClient=@term_client
     SET @vTermAdmission=@term_admission;

-----------------Begin The Core Part of Generic Metadata ---
	WITH tb
	AS
	(
		
		
			SELECT 
			  refsortlevel.sequence 
			, refsortby.sort_by_name 
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P' 
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G' 
			  end 
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name 

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK) 
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK) 
							ON repsortlevel.report_id = rep.report_id 
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select 
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id  
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id
			


		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR	
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1') 
					OR 
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT 
			  refsortlevel.sequence 
			, refsortby.sort_by_name 
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P' 
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G' 
			  end 
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name 

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK) 
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK) 
							ON repsortlevel.report_id = rep.report_id 
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select 
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id  
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id
			


		WHERE rm.report_id =  @vParentReportId 
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR	
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1') 
					OR 
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name 
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;
	
	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT 
			  ROW_NUMBER() OVER (ORDER BY 
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN 
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000 
							ELSE refcol.column_width 
						END 
						ELSE NULL 
					END DESC, repcol.output_sequence) 
			  as col_seq
			, refcol.column_name 
			, refcol.column_width
			, repcol.output_sequence 
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name 
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective ) 
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id 
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) 
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK) 
				ON refrepcol.ref_report_id = refrep.ref_report_id 
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK) 
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK) 
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol 
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN 
					(select refheader.ref_report_column_id 
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl					
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')
 
				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name 
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id
		
		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id 

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id 

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id 
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id 

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
	
		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id 
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id  
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or	
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1') 
			  or 
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)
		
	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock) 
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock) 
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id 
	Where rm.report_id =  @vReportId 
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id 
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---


    
SET @vFooter =@footer  
SET @vHeader =@header 
SET @vTermClient=@term_client 
SET @vTermAdmission =@term_admission 

--select @vTermClient,  @vTermAdmission

	-------------------------


	Select @vStep = 10;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @PRP_FacList 
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' facilities returned : [ ' + @vFacIds + ' ] Facility access warning message [ ' + @vFacWarningMsg + ' ] ' + convert(varchar(26),getdate(),109);

	select @vStep = 20
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR ' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');
	
	---NON INTEGER VALUES AND SINGLE SELECTION

	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	select @vStep = 37
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split(a.filter_value,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */ 
	  'client_floor'
	, 'client_unit'
	, 'pho_phys_order_id'
	);

	select @vStep = 39
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)
	Create Clustered Index _temp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;


	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';


	--apply client access logic if required
	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';
	
	
	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table ' + @vClientIds + ' ' + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END

	if @debug_me='Y' SELECT * FROM #PRP_Multi_Filters

	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of clients ' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id 
			, client_name 
			, sex
			, date_of_birth
			, client_address1 
			, client_address2
			, client_city 
			, client_prov_state 
			, client_postal 

			, bed_id
			, hasallergy
			, hasbed
			, hasdob
			, hasgender

		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.first_name,'')))  + ' ' + ltrim(rtrim(isnull(m.last_name,''))) )
				as client_name
			, m.sex
			, m.date_of_birth
			, case isnull(c.legal_address,'N') when 'Y' then m.address1  else ga.address1 end address1
			, case isnull(c.legal_address,'N') when 'Y' then m.address2  else ga.address2 end address2
			, case isnull(c.legal_address,'N') when 'Y' then m.city  else  ga.city end city 
			, case isnull(c.legal_address,'N') when 'Y' then m.prov_state  else ga.prov_state  end prov_state
			, case isnull(c.legal_address,'N') when 'Y' then m.postal_zip_code 	else ga.postal_zip_code end postal_zip_code
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 

		from ( Select client_id, mpi_id, client_id_number, legal_address from dbo.clients  with (nolock) 
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N' 
					AND ((@vfil_client_id	= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id	
		inner JOIN dbo.clients_attribute cla WITH (NOLOCK )
				ON cla.client_id = c.client_id 
		inner join ( Select * from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type is null or record_type = 'C'))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id
		left join dbo.global_address ga   with (nolock) on ga.tablename_id =c.client_id	  and ga.tablename='clients'

		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'	and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'		and fil_unit.filter_value  = u.unit_id
		
		WHERE	((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
		


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id 
			, client_name 
			, sex
			, date_of_birth
			, client_address1 
			, client_address2
			, client_city 
			, client_prov_state 
			, client_postal 

			, bed_id
			, hasallergy
			, hasbed
			, hasdob
			, hasgender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.first_name,'')))  + ' ' + ltrim(rtrim(isnull(m.last_name,''))) )
					---+ ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' 
				as client_name
			, m.sex
			, m.date_of_birth
			, case isnull(c.legal_address,'N') when 'Y' then m.address1  else ga.address1 end address1
			, case isnull(c.legal_address,'N') when 'Y' then m.address2  else ga.address2 end address2
			, case isnull(c.legal_address,'N') when 'Y' then m.city  else  ga.city end city 
			, case isnull(c.legal_address,'N') when 'Y' then m.prov_state  else ga.prov_state  end prov_state
			, case isnull(c.legal_address,'N') when 'Y' then m.postal_zip_code 	else ga.postal_zip_code end postal_zip_code
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 

		from ( Select client_id, client_id_number , mpi_id,legal_address from dbo.clients  with (nolock) 
				left join #PRP_Multi_Filters fil_client_id		
					on fil_client_id.filter_name='client_id' and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
				AND ((@vfil_client_id = '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
				AND clients.discharge_date is null
			 ) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner JOIN dbo.clients_attribute cla WITH (NOLOCK ) 
					on cla.client_id = c.client_id 
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		left join dbo.global_address ga   with (nolock) on cast(ga.tablename_id as int)=c.client_id
		
		WHERE 	
			    ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			and ga.tablename='clients'
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 52
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' creating index on #Clients ' + convert(varchar(26),getdate(),109)
	CREATE CLUSTERED INDEX _tmp_idx_clients on #Clients(client_id);

	if @debug_me='Y'  select * from #Clients

	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders ' + convert(varchar(26),getdate(),109)


	INSERT INTO #tempresult
	SELECT  
			po.phys_order_id 
			, po.fac_id 
			, po.client_id 
			, po.order_verified 
			, po.active_flag 
			, po.draft 
			, po.hold_date 
			, po.hold_date_end 
			, po.end_date 
			, po.discontinued_date 
			, po.order_category_id 
			, po.physician_id 
			, po.pharmacy_id 
			, po.order_date 
            , po.controlled_substance_code
	 from dbo.pho_phys_order po with (nolock)
	
		inner JOIN 	#PRP_Multi_Filters OrderId -- front end does not allow pho_phys_order_id to be null 
		on OrderId.filter_name	 = 'pho_phys_order_id'	and OrderId.filter_value = po.phys_order_id
	 where po.draft='0' and (po.active_flag = 'Y' or po.active_flag is null) and isnull(po.order_verified,'Y')='Y'  --- confirmed orders only
		AND po.order_category_id = 3022 --- only pharmacy type orders
		AND po.order_class_id=1



	Set @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders and their status ' + convert(varchar(26),getdate(),109)

	if @client_id <> '-1' set @vSP_ClientId = @client_id

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus 
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vgs_start_time
			,@fromportal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode
			,@status_text = @vGetStatus_statustext

	set @vRowCount = @@rowcount
	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus

	if isnull(@vGetStatus_statuscode,0)  = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statustext,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0
		
		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );

	Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;


	select @vStep = 70
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)

	DECLARE @currentDate date = convert(date, dbo.fn_facility_getCurrentTime(@vFacID));
	
	;with tbBase
	as
	(
	Select 
	      @vFacID as fac_id
		, isnull( physician.last_name,'')  + ','+ isnull(' ' + physician.first_name,'')  as physician
		, (case ltrim(staff.designation) WHEN '' THEN NULL ELSE staff.designation end)    as physician_designation
		, convert(varchar,o.client_id)		as client_id_str --- required for building group id 
		, c.client_name 
		, convert(char(10),o.order_date,@vDateFormatStyle)			 as order_date
		, Convert(varchar, CASE
							WHEN ((MONTH(c.date_of_birth) * 100) + DAY(c.date_of_birth)) > ((MONTH(@currentDate) * 100) + DAY(@currentDate)) THEN
								DATEDIFF(year,c.date_of_birth,@currentDate) - 1
							ELSE
								DATEDIFF(year,c.date_of_birth,@currentDate)
							END
			) as client_age
		, convert(char(10), c.date_of_birth, @vDateFormatStyle) as date_of_birth
		, c.sex as client_gender
		, fac.name as facility_name
		, isnull(reg.description,'') as line_of_business
		, fac.address1 as fac_address1
		, fac.address2 as fac_address2
		, fac.city as fac_city
		, fac.prov as fac_prov
		, fac.tel  as fac_tel
		, fac.pc as fac_pc
		, c.client_address1 
		, c.client_address2
		, c.client_city 
		, c.client_prov_state 
		, c.client_postal 
		
		, OrderSumm.order_summary 
		, o.phys_order_id -----phys_order_id  is for QA testing only

		From  #tempresult o with (nolock )
		inner join #Clients c on c.client_id = o.client_id
		inner join #PRP_PhoOrderStatus order_status with (nolock)
				on order_status.phys_order_id = o.phys_order_id and order_status.order_status = 1 --- only Active Orders 

		inner join dbo.facility fac with (nolock) on fac.fac_id=@vFacId
		inner join dbo.contact physician with (nolock ) on physician.contact_id =  o.physician_id
		LEFT outer JOIN dbo.regions reg WITH (NOLOCK ) ON reg.regional_id = fac.regional_id 

		Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from 
							( 
								Select Case when row_num = 1 then [description] 
---Change(PCC -49143).1:  BEGIN 
---+ isnull( ' (' + related_generic + ') ',' ') 
---Change(PCC -49143).1:  END
                                                          else 
													Case when schedule_template = '3' then ' THEN ' else ' AND ' end 
										end + isnull(' ' + directions,'')  
										
									from 
									( Select [description], related_generic, directions, schedule_template
											, row_number() over ( order by [start_date] ) as row_num
											from dbo.view_prp_pho_phys_order_schedule po with (nolock)	
											
											where po.phys_order_id = o.phys_order_id
									) a1

									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

		left outer join dbo.staff  with (nolock) on physician.contact_id=staff.contact_id
		left outer join dbo.common_code phys_desig with (nolock ) on phys_desig.item_id = staff.profession_id and phys_desig.item_code = 'profe'

	)
	, tbWithGroupSet
	as
	(
		-- this report does not require sorting, setting all of them to null
		Select *
	      , null as P_set_id
		  , NULL as P1
		  , NULL as P2
		  , NULL as P3
		from tbBase
	)
	, tbWithSort
	as
	(
		Select fac_id
			  ,  physician + replace(isnull(', ' + physician_designation ,''),',  ','') as physician_designation
			  , client_name
			  , order_date
			  , client_age
		      , client_gender
			  , date_of_birth
			  , upper(facility_name) as facility_name
			  , line_of_business
			  , fac_address1
			  , fac_address2
			  , fac_city
			  , fac_prov
			  , fac_tel
			  , fac_pc
			  , client_address1 
			  , client_address2
			  , client_city 
			  , client_prov_state 
			  , client_postal 	
			  , order_summary as order_summary_related_generic
			  , phys_order_id
			  , p_set_id
			  , P1
			  , P2
			  , P3
		,row_number() over ( ORDER BY client_name ) as row_num
		from tbWithGroupSet
	)
	Select 
	   *
	 , Case when row_num =1 then @status_code else NULL  end as status_code
	 , Case when row_num =1 then @status_text else NULL  end as status_text

   	from tbWithSort
	Order by row_num

	Set @rows_returned = @@ROWCOUNT;

	

	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + ' ' + convert(varchar(26),getdate(),109);



END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 
			NULL as fac_id
			, NULL as physician_designation
			, NULL as  client_name
			, NULL as  order_date
			, NULL as  client_age
		    , NULL as  client_gender
			, NULL as  date_of_birth
			, NULL as  facility_name
			, NULL as  line_of_business
			, NULL as  fac_address1
			, NULL as  fac_address2
			, NULL as  fac_city
			, NULL as  fac_prov
			, NULL as  fac_tel
		    , NULL as  fac_pc
			, NULL as  client_address1 
			, NULL as  client_address2
			, NULL as  client_city 
			, NULL as  client_prov_state 
			, NULL as  client_postal 	
			, NULL as order_summary_related_generic
			, NULL as P_set_id   ---0/1
			, NULL as P1
			, NULL as P2
			, NULL as P3
			, NULL as G_set_id  ---0/1
			, NULL as G1
			, NULL as G2
			, NULL as G3
			, NULL as page_footer
			, NULL as col_width
			, (case WHEN charindex('getorderstatus',@status_text)>0 THEN 0 else @status_code END) as status_code
			, @status_text as status_text	
			, NULL as phys_order_id
			, NULL as row_num

	

END CATCH 

RETURN 

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_official_prescription_form   to PUBLIC
GO
--


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_official_prescription_form.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_official_prescription_form.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ================================================================================= 
-- PCC-45691       :   script to create sproc_prp_order_based_recap_order_report Procedure  
--						-- 
-- Written By:          Henny Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_order_based_recap_order_report Procedure for EOM orders reporting 
-- 
-- Special Instruction: 
-- 
--======================================================================================================================

Revision History:

23/09/2013  Dominic Christie	PCC- 46630			Added the Order By Filter
2013-12-10 Rolly Sanchez		PCC-50905(3.7.2.2)	change order summary formatting from style to b-tag
2014-14-10 Dominic Christie		PCC-53334(3.7.4)	Rolled back the ICD 10 Changes
2014-09-25 Dominic Christie		PCC-64671(3.7.5)	Added the logic to handle the Status Id 9 to print Pending Clinical Review
2014-12-19 H Ehghaghi 			PCC-68306(3.7.6)	Adding  Orders Pending Signature Status 
2015-23-03 Dom Christie         PCC-72173(3.7.7)    Implemented The ICD 10 codes using the end date as per the requirement.This end date is passed to the diagnosis function along with                                                            clientid
2015-03-30 H Ehghaghi	        PCC-73709(3.7.7)    Remove generic Metadat Store procedure
2015-23-11 Dom Christie         PCC-85632(3.7.8.2)  Filtered out the Discharged orders using the classid =2
2016-04-11	H Ehghaghi		PCC-91223 (3.7.10)  Fixed Room Change On Same Day Issue
2017-08-31 Hemanth Reddy	PCC-102383 (3.7.14) Fixed the script to get date format based on the execution user's default facility.
-- ================================================================================= */


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_order_based_recap_order_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_order_based_recap_order_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO

Create Procedure dbo.sproc_prp_order_based_recap_order_report

  @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out
, @status_text varchar(3000) out
/********************************************************************************


Sample Execution Script:
---Select * from prp_report_column


Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_order_based_recap_order_report
 @report_id =  '-1014'--'-13'
,@fac_id =  '1'
,@field_list =  '-12,-48,-51,-103,-37,-41'
--,@field_list = '0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36'
,@filter_list =  'client_id=-1;client_unit=-1;client_floor=-1;client_status=-1;custom_order_date_range_repcap=01/01/2015,04/30/2015'
,@sort_list =  '0=-1'
,@execution_user_login =  'PCC-ehghah'
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null

Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vCharNewLine  char(2)
	    ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int
		,@vCountryCode char(2)
		,@vDateFormatStyle smallint;

--Facility Related variables, also used in capturing execution Statistics
Declare @vFacIDs varchar(max)
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
    , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @vSP_ClientId int

;
----------Governor and Statistics Variables
Declare  @vgsThresholdRowCount int
		,@vgsEstimatedRowsReturned  int
		,@vgsEstimateFrom char(1)
		,@vgsSampleSize smallint

		,@vgsFacCount int
		,@vgsClientCount int
		,@vgsAccountCount int
		,@vgsPayerCount int
		,@vgsMonthCount int--

		,@vgsFacID varchar(max)
		,@vgsClientId varchar(max)
		,@vgsPayerId varchar(max)
		,@vgsAccountId varchar(max)

		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500)

		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500)

		,@vgsParamName3 varchar(50) --- sorting option selected
		,@vgsParamValue3 varchar(1500)

		,@vgsParamName4 varchar(50) --- grouping option selected
		,@vgsParamValue4 varchar(1500)

-----Governor and Statistics Variables
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		, @vGeneric_statuscode int
	, @vGeneric_statustext varchar(3000)
	, @vGetStatus_statuscode int
	, @vGetStatus_statustext varchar(3000)

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
declare  @term_admission varchar(50)
        ,@term_client varchar(50),@vTermClient varchar(50)
	, @vTermClients varchar(50)
	, @vTermFacility varchar(50)
	, @vTermFacilities varchar(50)
	, @vTermAdmission varchar(50)
	, @vTermAdmissions varchar(50)
	, @vTermDischarge varchar(50)
	, @vTermDischarges varchar(50)
	, @vTermRoom varchar(50)
	, @vTermRooms varchar(50)
	, @vTermAdvDirective varchar(50)
	----MRN Variables for header
	, @vMRNId int
	, @vMRNDesc varchar(100)




-----variables for each column in the report
Declare  @vColWidth varchar(max)
		,@vSort1 varchar(100)
		,@vSort2 varchar(100)
		,@vSort3 varchar(100)
		,@vSort4 varchar(100) --- max of four sort level
		,@vCol1 varchar(100)
		,@vCol2 varchar(100)
		,@vCol3 varchar(100)
		,@vCol4 varchar(100)
		,@vCol5 varchar(100)
		,@vCol6 varchar(100)
		,@vCol7 varchar(100)
		,@vCol8 varchar(100)
		,@vCol9 varchar(100)
		,@vCol10 varchar(100)
		,@vCol11 varchar(100)
		,@vCol12 varchar(100)
		------Header and footer of the report and header/footer group
		,@vFooter varchar(50)
		,@vHeader varchar(50)
		,@vPID varchar(50) --- 3 ids max
		,@vP1  varchar(50) ---- page level group 1 column name
		,@vP2  varchar(50) ---- page level group 2 column name
		,@vP3  varchar(50) ---- page level group 3 column name

		,@vP1_disp_name varchar(100)    --- display name for group header 0/3
		,@vP2_disp_name varchar(100)  --- display name for group header 0/3
		,@vP3_disp_name varchar(100) --- display name for group header 0/3

		--,@vPHDR1  varchar(50) ---- page level group 1 header type

		,@vGID  varchar(50)
		,@vG1   varchar(50)
		,@vG2   varchar(50)
		,@vG3   varchar(50)

		,@vG1_disp_name varchar(100)
		,@vG2_disp_name varchar(100)
		,@vG3_disp_name varchar(100)---max of three group levels are supported


		---data intensive columns flag
		,@vRelatedDiagnoses bit
		,@vIndicationsForUse bit
		,@vOrderSummary bit -----desc + directions for all schedules
		,@vOrderScheduleSummary bit -----desc + directions at schedule level
		,@vOrderDesc bit   ---- only desc
		,@vDirections bit ---- only directions
		,@vRelatedGeneric bit
		,@vAdditionalDirections bit
		,@vScheduleLevel bit
		,@vRouteOfAdmin bit
		,@vDietInfo bit
		,@vAuditInfoSelected bit
		,@vLocationWithUnit bit
		,@vIncludeAdminOrder bit
		,@vInitialBlankIncluded bit



----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id bit
	,@vfil_client_status smallint -- one value at a time
	,@vfil_floor bit
	,@vfil_client_physician bit
	,@vfil_pho_fac_time_code int
	,@vfil_pho_std_freq int
	,@vfil_pho_unsched_order bit


	,@vfil_administered_by_id bit -----Front End has not included in it
	,@vfil_administration_record bit  ---- all types of admin record and its sub sets are using this one variable
	,@vfil_communication_method bit

	,@vfil_physician bit
	,@vfil_medication_class varchar(max) -- Single Value non int value
	,@vfil_order_category bit
	,@vfil_order_desc varchar(max)

	----completed by is taken out from Meta data and should be taken out

	,@vfil_confirmed_by varchar(60)
	,@vfil_confirmed_date_type varchar(10)
	,@vfil_confirmed_date datetime
	,@vfil_confirmed_date2 datetime


	,@vfil_created_by varchar(60)
	,@vfil_created_date_type varchar(10)-----Front End has not included in it
	,@vfil_created_date datetime
	,@vfil_created_date2 datetime


	,@vfil_discontinued_date_type varchar(10)
	,@vfil_discontinued_date datetime
	,@vfil_discontinued_date2 datetime

	,@vfil_order_end_date_type varchar(10)
	,@vfil_order_end_date datetime
	,@vfil_order_end_date2 datetime


	,@vfil_order_start_date_type varchar(10)
	,@vfil_order_start_date datetime
	,@vfil_order_start_date2 datetime

	,@vfil_hold_date_type varchar(10)
	,@vfil_hold_date datetime
	,@vfil_hold_date2 datetime


	,@vfil_order_date_type varchar(10)
	,@vfil_order_date datetime
	,@vfil_order_date2 datetime
	,@IcdDate datetime

	,@vfil_supply_order_date_type varchar(10)
	,@vfil_supply_order_date datetime
	,@vfil_supply_order_date2 datetime

	,@vfil_supply_last_order_date_type varchar(10)
	,@vfil_supply_last_order_date datetime ---= date_ordered if last_reorder_date is null
	,@vfil_supply_last_order_date2 datetime ---= date_ordered if last_reorder_date is null

	,@vfil_schedule_date_type varchar(10)
	,@vfil_schedule_date datetime
	,@vfil_schedule_date2 datetime


	,@vfil_start_end_date_range_review bit  ---pho_start_end_date_range_review=02/01/2012,,1,4
	,@vfil_start_end_date_range_d1  datetime
	,@vfil_start_end_date_range_d2  datetime


	,@vfil_admin_order_date_range varchar(100)  ---custom_order_date_range introduce to handle new order summary listing
	,@vfil_admin_order_date_range_d1  datetime
	,@vfil_admin_order_date_range_d2  datetime


	,@vfil_asof_order varchar(100)  ---as of date setting for order summary report
	,@vfil_asof_order_date_d1  datetime
	,@vfil_asof_order_date_d2  datetime


	,@vfil_order_status bit
	,@vfil_order_status_strikeout bit
	,@vfil_order_type bit
	,@vfil_permanent_source bit

	,@vfil_source bit

	,@vfil_supply_reorder char(1)   	-----Single value and non ids columns
	,@vfil_consolidated_order char(1)

	,@vfil_route_of_admin bit
	,@vfil_schedule_template bit


	,@vfil_unit bit

	,@vfil_pho_std_order bit

	-----Sepecific to Diet type report
	,@vfil_diet_type bit
	,@vfil_diet_texture bit
	,@vfil_fluid_consistency bit
	,@vfil_diet_supplement bit

	, @vfil_admin_record_emar int      ---- where admin_record has show_on_mar = 'y'
	, @vfil_physOrderId bit
	, @vfil_view_all_orders tinyint      ----  numbers of days to look back for active,hold,pending confirmation, discont, completed
	, @vfil_view_all_orders_lookback_date datetime


Declare @PRP_ChartCodes TABLE ( chart_codes varchar(max), follow_up_codes varchar(max));

CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );
 Create Clustered Index _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;

--DECLARE @PRP_tbFilters_temp TABLE( filter_name varchar(100), filter_value varchar(max));
--CREATE TABLE #PRP_Filters( filter_name varchar(50), filter_value int );

Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));



CREATE TABLE #view_prp_pho_phys_order_schedule (
administered_by_id int,
alter_med_src int,
client_id int,
communication_method int,
completed_by varchar(60),
max_end_date datetime,
confirmed_by varchar(60),
confirmed_by_long_username varchar(60),
confirmed_date datetime,
created_by varchar(60),
[created_by_long_username] varchar(60),
created_date datetime,
diet_type int,
diet_texture int,
diet_supplement int,
diet_supplement_desc varchar(200),
diet_texture_desc  varchar(200),
diet_type_desc varchar(200),
directions varchar(max),
discontinued_date datetime,
end_date datetime,
fac_id int,
fluid_consistency_desc varchar(200),
hold_date datetime,
hold_date_end datetime,
indications_for_use varchar(250),
order_category_id int,
order_date datetime,
order_desc varchar(max),
order_status int,
order_relationship int,
order_type_id int,
pharmacy_id int,
phys_order_id int,
physician_id int,
related_diagnoses varchar(250),
related_generic varchar(250),
resume_date datetime,
revision_by varchar(60),
revision_by_long_username varchar(60),
revision_date datetime,
route_of_admin_desc varchar(250),
schedule_template int,
[start_date] datetime,
std_order_id int,
supplementary_notes varchar(max),
supply_order_date datetime,
supply_last_order_date datetime,
supply_last_reorder_date datetime,
supply_reorder char(1),
fluid_consistency int,
active_flag varchar(3),
order_verified varchar(3),
draft bit,
std_freq_id int,
description varchar(max),
order_schedule_id int,
last_reorder_date datetime,
date_ordered datetime,
diagnoses varchar(400),
route_of_admin int,
controlled_substance_code int
);

CREATE CLUSTERED INDEX _tmp_idx_prp_pho_phys_order_schedule on #view_prp_pho_phys_order_schedule(phys_order_id,order_schedule_id);


CREATE TABLE #PRP_Orders (
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, created_by_long_username varchar(50)
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600)
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary varchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)

			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)

			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
			, order_schedule_id int
            , controlled_substance_code int
);

	create table #tempResult
    		(
	        phys_order_id int
        	,fac_id int
	        ,client_id int
        	,order_verified varchar(1)
			,active_flag char(1)
			,draft bit
	        ,hold_date datetime
        	,hold_date_end datetime
	        ,end_date datetime
        	,discontinued_date datetime
	        ,order_category_id int
            ,controlled_substance_code int
    		)



Create Table #prp_admin_orders
(
---Revision(chrisd):PCC- 46630 ; Begin
  admin_physician_Id int
---End
,phys_order_id int
, effective_date datetime
, ineffective_date datetime
, admin_order_status varchar(50)
, order_relationship_id int
, reason varchar(500)
, ordered_by varchar(200)
, admin_phys_order_id int

);

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id int
							, fac_id int
							, order_status smallint
							, order_relationship int
							, status_reason varchar(75));

Create Clustered Index _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;


----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients(
		  client_id int
		, client_name varchar(200)
		, admission_date varchar(10)
		, discharge_date varchar(10)
		, deceased_date varchar(10)
		, allergy varchar(1000)
		, location varchar(500)
		, date_of_birth varchar(10)
		, client_physician_id varchar(15) --- required for building grouping id
		, client_physician varchar(100)
		, client_pharmacy varchar(75)
		, mrn_number varchar(50)
		, client_id_number varchar(35)
		, pho_assignment_id int
		, assignment varchar(15)  -----this is used for Med Admin audit report
		, sex char(1)
	    , bed_id int
        , hasAllergy char(1)
	    , hasBed char(1)
    	, hasDOB char(1)
	    , hasGender char(1)
);
 CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

BEGIN TRY

	Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	SET @vSortList	  = @sort_list;


	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null
		or @fac_id is NULL
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')

		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

  --------------------------------------------------

  ---------Code to select the date format based on the country for the default facility of executing user--------------------
	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @execution_user_login

	set  @vDateFormatStyle = dbo.fn_localized_dateformat_style(isnull(@vCountryCode,'US'), 1)
	---------------------------------------------------------***********---------------------------------------------------------

  DECLARE @vParentReportId int
		, @vWV_transfer int
	    , @footer varchar(50)
        , @header varchar(50)


    select @vWV_transfer = charindex('wv_transfer',@vFilterList);
    select @vParentReportId = parent_report_id from dbo.prp_rm_report where report_id = @vReportId --and parent_report_id = -9


	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting facility terminology information... ' + convert(varchar(26),getdate(),109)

	Select
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		--, @vTermAdmission = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc)


SET @vTermClient=@term_client
SET @vTermAdmission=@term_admission;


	-----------------Begin The Core Part of Generic Metadata ---
	;WITH tb
	AS
	(


			SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =@vReportId ---1---48-- -1
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)

	UNION
	SELECT
			  refsortlevel.sequence
			, refsortby.sort_by_name
			, case when refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' then 'P'
					when refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1' then 'G'
			  end
			  as group_level
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refsortby.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name
				, refrepsortby.ref_report_sort_by_id
			--, refcol.column_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			INNER JOIN dbo.prp_rm_report rm WITH (NOLOCK )
					on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK) ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_sort_level refrepsortlevel WITH (NOLOCK) ON refrepsortlevel.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_sort_level refsortlevel WITH (NOLOCK) ON refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id
			INNER JOIN dbo.prp_ref_report_sort_by refrepsortby WITH (NOLOCK)
							ON refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id
			INNER JOIN dbo.prp_ref_sort_by refsortby WITH (NOLOCK) ON refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

			LEFT OUTER JOIN dbo.prp_report_sort_level repsortlevel WITH (NOLOCK)
							ON repsortlevel.report_id = rep.report_id
							and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id
			LEFT OUTER JOIN dbo.prp_report_sort_by repsortby WITH (NOLOCK) ON repsortby.report_sort_level_id = repsortlevel.report_sort_level_id  and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id
			LEFT OUTER JOIN (Select
								 Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
								,Cast(right(Items, len(Items)-Charindex('=',Items)) as int) as ref_sort_by_id
								from dbo.Split(@vSortList, ';')
							) sort_list	ON sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id	AND sort_list.ref_sort_by_id = refsortby.ref_sort_by_id



		WHERE rm.report_id =  @vParentReportId
--			AND (refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')
			AND (refrepsortlevel.page_break = '1' or repsortlevel.page_break = '1' or refrepsortlevel.group_header= '1' or repsortlevel.group_header = '1')

			AND ((repsortlevel.overwrite_run_time='0' AND repsortby.default_sort_by_for_level = '1')
					OR
					(refrepsortlevel.overwrite_design_time ='0' AND refrepsortby.default_sort_by_for_level = '1')
					OR
					(sort_list.ref_sort_level_id IS NOT NULL AND repsortby.report_sort_by_id IS NOT NULL)
				)



	)
	, tbSeq
	as
	(
		Select *, row_number() OVER ( PARTITION BY group_level ORDER BY sequence)  Seq from tb
	)
	, tbSort
	as
	(
		select group_level + convert(varchar,Seq) as group_level
				, sort_by_name as column_name
				, display_name
				, ref_report_sort_by_id
				  From tbSeq
	)

	INSERT INTO #PRP_Report_Metadata_Grouping
	SELECT * from tbSort;

	if @debug_me='Y' select * from #PRP_Report_Metadata_Grouping


    /* -------------------------- */
	/* GET FIELDS/COLUMN METADATA */
	/* -------------------------- */
    INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	SELECT
			  ROW_NUMBER() OVER (ORDER BY
					CASE WHEN refrep.ref_report_id = 0 AND rep.report_id > 0 THEN
						CASE WHEN refcol.column_name = 'client_name' THEN 32001
							WHEN refcol.column_name like 'client_location%' THEN 32000
							ELSE refcol.column_width
						END
						ELSE NULL
					END DESC, repcol.output_sequence)
			  as col_seq
			, refcol.column_name
			, refcol.column_width
			, repcol.output_sequence
			, replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( replace( refcol.display_name
				,'${cli_Client}',@term_client )
				,'${cli_Clients}',@vTermClients )
				,'${adm_Admission}', @term_admission )
				,'${adm_Admissions}', @vTermAdmissions)
				,'${disch_Discharge}', @vTermDischarge )
				,'${disch_Discharges}',@vTermDischarges )
				,'${rm_Room}',@vTermRoom )
				,'${rm_Rooms}',@vTermRooms )
				,'${fac_Facility}',@vTermFacility )
				,'${fac_Facilities}',@vTermFacilities )
				,'${adv_AdvDirective}',@vTermAdvDirective )
			  as display_name

		FROM dbo.prp_report rep WITH (NOLOCK)
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
				on rep.report_id = rm.custom_report_id
			INNER JOIN dbo.prp_ref_report refrep WITH (NOLOCK)
				ON refrep.ref_report_id = rep.ref_report_id
			INNER JOIN dbo.prp_ref_report_column refrepcol WITH (NOLOCK)
				ON refrepcol.ref_report_id = refrep.ref_report_id
			INNER JOIN dbo.prp_ref_column refcol WITH (NOLOCK)
				ON refrepcol.ref_column_id = refcol.ref_column_id
			LEFT OUTER JOIN dbo.prp_report_column repcol WITH (NOLOCK)
				ON rep.report_id = repcol.report_id AND repcol.ref_report_column_id = refrepcol.ref_report_column_id
			LEFT OUTER JOIN (Select Cast(items as int) id from dbo.split(@vFieldList,',')) selcol
				ON selcol.id = refcol.ref_column_id
			LEFT OUTER JOIN
					(select refheader.ref_report_column_id
						from dbo.prp_ref_report_header_column refheader WITH (NOLOCK )
						INNER join #PRP_Report_Metadata_Grouping metagrp WITH (NOLOCK )
						on refheader.ref_report_sort_by_id = metagrp.ref_report_sort_by_id
					)excl
					on excl.ref_report_column_id = refrepcol.ref_report_column_id
    	WHERE rm.report_id = @vReportId
			AND ( (repcol.overwrite_run_time = '0' OR refrepcol.overwrite_design_time = '0')

				  OR (selcol.id IS NOT NULL AND repcol.ref_report_column_id IS NOT NULL )) -----either the overwrite_run_time or orerwrite_design_time is should be = '0' (not allowed) or if it should be in selected list
			AND repcol.group_level IS NULL  -----only columns information and not grouping information
			and excl.ref_report_column_id is null  -- only fields that are not part of grouping / page break

	if @vWV_transfer > 0
	begin
		INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
		SELECT max(col_seq) + 1, 'wv_facility', 124, max(output_sequence), 'Facility'  from  #PRP_Report_Metadata_FieldstoDisplay
	end


	if @debug_me='Y' select * from #PRP_Report_Metadata_FieldstoDisplay
    /* -------------------- */
	/* GET SORTING METADATA */
	/* -------------------- */
    ------Sorting Information

	INSERT INTO #PRP_Report_Metadata_Sorting
	Select row_number() OVER ( ORDER BY refsortlevel.sequence)  seq
		   , refsortby.sort_by_name
		From dbo.prp_report rep with (nolock)
		inner JOIN dbo.prp_rm_report rm WITH (NOLOCK )
			on rep.report_id = rm.custom_report_id

		inner join dbo.prp_ref_report refrep with (nolock)
			on refrep.ref_report_id = rep.ref_report_id

		inner join dbo.prp_ref_report_sort_level refrepsortlevel with (nolock)
			on  refrepsortlevel.ref_report_id = refrep.ref_report_id

		inner join dbo.prp_ref_sort_level refsortlevel with (nolock)
			on refsortlevel.ref_sort_level_id = refrepsortlevel.ref_sort_level_id

		inner join dbo.prp_ref_report_sort_by refrepsortby with (nolock)
			on refrepsortby.ref_report_sort_level_id =  refrepsortlevel.ref_report_sort_level_id

		inner join dbo.prp_ref_sort_by refsortby with (nolock)
			on refsortby.ref_sort_by_id = refrepsortby.ref_sort_by_id

		left outer join dbo.prp_report_sort_level repsortlevel with (nolock)
			on repsortlevel.report_id = rep.report_id
			and repsortlevel.ref_report_sort_level_id = refrepsortlevel.ref_report_sort_level_id

		left outer join dbo.prp_report_sort_by repsortby with (nolock)
			on  repsortby.report_sort_level_id = repsortlevel.report_sort_level_id
			and repsortby.ref_report_sort_by_id = refrepsortby.ref_report_sort_by_id

		left Outer join ( 	Select Cast(Left(Items,Charindex('=',Items)-1) as smallint) as ref_sort_level_id
							,Cast(right(Items, len(Items)-Charindex('=',Items))  as int) as ref_sort_by_id
							from dbo.Split(@vSortList,';')) sort_list
				on sort_list.ref_sort_level_id = refsortlevel.ref_sort_level_id
				and sort_list.ref_sort_by_id  = refsortby.ref_sort_by_id

		Where rm.report_id = @vReportId
		and (( repsortlevel.overwrite_run_time='0' and repsortby.default_sort_by_for_level = '1')
			 or
			 ( refrepsortlevel.overwrite_design_time ='0' and refrepsortby.default_sort_by_for_level = '1')
			  or
			 (sort_list.ref_sort_level_id is not NULL and repsortby.report_sort_by_id is not null)
			)

	if @debug_me='Y' select * from #PRP_Report_Metadata_Sorting


	/* -------------------------- */
	/* REPORT FILTER METADATA     */
	/* -------------------------- */
    INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')
	UNION
	Select refcol.column_name as filter_name, repfilter.filter_value
		From dbo.prp_report_filter 	  repfilter    with (nolock)
			inner join	dbo.prp_ref_report_filter refrepfilter with (nolock)
				on repfilter.ref_report_filter_id = refrepfilter.ref_report_filter_id
			inner join	dbo.prp_ref_column	refcol	with (nolock)
				on refcol.ref_column_id	= refrepfilter.ref_column_id
			inner JOIN dbo.prp_rm_report rm WITH (NOLOCK)
				on rm.custom_report_id = repfilter.report_id
	Where rm.report_id =  @vReportId
		and repfilter.run_time_option = '0'


	if @debug_me='Y' select * from #PRP_Filters

	/* -------------------------- */
	/* HEADER AND FOOTER METADATA */
	/* -------------------------- */
	Select @header = hdr1.[object_name]
			, @Footer = left( ftr.[object_name],8)
	from dbo.prp_report rep with (nolock)
	inner JOIN dbo.prp_rm_report rm WITH (NOLOCK ) ON rm.custom_report_id = rep.report_id
	Left Join dbo.prp_ref_report_object refrepobject1 with (nolock) on refrepobject1.ref_report_object_id = rep.p1_header_id
	Left Join dbo.prp_ref_object hdr1 with (nolock) on refrepobject1.ref_object_id = hdr1.ref_object_id

	Left Join dbo.prp_ref_report_object refrepobject  with (nolock) on refrepobject.ref_report_object_id = rep.footer_id
	Left Join dbo.prp_ref_object ftr with (nolock) on refrepobject.ref_object_id = ftr.ref_object_id

	where rm.report_id = @vReportId




-----End The Core Part of Generic Metadata ---



SET @vFooter =@footer
SET @vHeader =@header
SET @vTermClient=@term_client
SET @vTermAdmission =@term_admission


	if isnull(@vGeneric_statuscode,0)  = 1
		  begin
				set @status_text = 'sproc_prp_generic_metadata returned the following error: ' + isnull(@vGeneric_statustext,'')
				Raiserror( @vGeneric_statustext, 11, 1 );
	  end

-----------------------------------------------



	Select @vStep = 5;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @PRP_FacList
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	select @vStep = 6;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'facilities returned : [' + @vFacIds + '] Facility access warning message [' + @vFacWarningMsg + ']' + convert(varchar(26),getdate(),109);

	select @vStep = 8;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Getting Report Headers and Footer ' + convert(varchar(26),getdate(),109);


	if @vFooter is NULL Set @vFooter = 'X';

	--Getting Medical Record Terminology and ID for Header
	if @vHeader = 'header_1' ----or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'
	BEGIN
		select @vStep = 9
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Medical Record Terminology and ID for Header' + convert(varchar(26),getdate(),109)

		select @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
			  ,@vMRNId = cfg.hc_no_id
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END


	select @vStep = 12
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)


	select @vStep = 14
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)

	----Emar Configuration based on FacId
	set @vFacEMAREnabled = isnull((select value from configuration_parameter where name = 'enable_emar' and fac_id = @vFacId),'N');


	select @vStep = 16
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of columns based on @field_list and getting column width ' + convert(varchar(26),getdate(),109)


	---get the list of column names applicable for this report based on overwrite flag and @field_list parameter
	Set @vColWidth = '';

	Select @vColWidth =  @vColWidth + @vdelim + convert(varchar(10),column_width)
		  ,@vCol1 = Case when col_seq = 1 then column_name else @vCol1 end
		  ,@vCol2 = Case when col_seq = 2 then column_name else @vCol2 end
		  ,@vCol3 = Case when col_seq = 3 then column_name else @vCol3 end
		  ,@vCol4 = Case when col_seq = 4 then column_name else @vCol4 end
		  ,@vCol5 = Case when col_seq = 5 then column_name else @vCol5 end
		  ,@vCol6 = Case when col_seq = 6 then column_name else @vCol6 end
		  ,@vCol7 = Case when col_seq = 7 then column_name else @vCol7 end
		  ,@vCol8 = Case when col_seq = 8 then column_name else @vCol8 end
		  ,@vCol9 = Case when col_seq = 9 then column_name else @vCol9 end
		  ,@vCol10 = Case when col_seq = 10 then column_name else @vCol10 end
		  ,@vCol11 = Case when col_seq = 11 then column_name else @vCol11 end
		  ,@vCol12 = Case when col_seq = 12 then column_name else @vCol12 end
		  ,@vRelatedDiagnoses	= Case when column_name = 'pho_related_diagnoses' then 1 else @vRelatedDiagnoses end
		  ,@vIndicationsForUse  = Case when column_name = 'pho_indications_for_use' then 1 else @vIndicationsForUse end
		  ,@vOrderSummary		= Case when column_name like 'pho_order_summary%' then 1 else @vOrderSummary end
		  ,@vOrderScheduleSummary	= Case when column_name = 'pho_order_schedule_summary' then 1 else @vOrderScheduleSummary end
		  ,@vDirections			= Case when column_name = 'pho_directions'	  then 1 else @vDirections end
		  ,@vOrderDesc			= Case when column_name = 'pho_order_desc' then 1 else @vOrderDesc end
		  ,@vRelatedGeneric		= Case when column_name = 'pho_related_generic' then 1 else @vRelatedGeneric end ---this column is not included as of now..
		  ,@vAdditionalDirections = Case when column_name = 'pho_additional_directions' then 1 else @vAdditionalDirections end
		  ,@vRouteOfAdmin	  = case when column_name = 'pho_route_of_admin'  then 1 else @vRouteOfAdmin end
		  ,@vDietInfo = case when column_name in ( 'pho_diet_supplement','pho_fluid_consistency','pho_diet_texture','pho_diet_type') then 1 else @vDietInfo end
		  ,@vAuditInfoSelected = case when column_name in ('pho_confirmed_by','pho_confirmed_date','pho_confirmed_info','pho_created_by'
															,'pho_created_info','pho_revision_by','pho_revision_info') then 1 else @vAuditInfoSelected end
	from #PRP_Report_Metadata_FieldstoDisplay where col_seq <=12 order by col_seq;


	if @debug_me='Y' Select 'Columnname' name,@vColWidth
		  ,@vCol1
		  ,@vCol2
		  ,@vCol3
		  ,@vCol4
		  ,@vCol5
		  ,@vCol6
		  ,@vCol7
		  ,@vCol8
		  ,@vCol9
		  ,@vCol10
		  ,@vCol11
		  ,@vCol12
		  ,@vRelatedDiagnoses
		  ,@vIndicationsForUse
		  ,@vOrderSummary
		  ,@vOrderScheduleSummary
		  ,@vDirections
		  ,@vOrderDesc
		  ,@vRelatedGeneric
		  ,@vAdditionalDirections
		  ,@vRouteOfAdmin
		  ,@vDietInfo
		  ,@vAuditInfoSelected

	if @vColWidth <> '' Set @vColWidth = stuff(@vColWidth,1,1,''); --- deleting first comma


	Set @vgsParamName1 = 'Selected Columns'
	Set @vgsParamValue1 = 	isnull(@vCol1,'')
		  +  isnull(@vCol2,'')
		  + isnull(@vCol3,'')
		  + isnull(@vCol4,'')
		  + isnull(@vCol5,'')
		  + isnull(@vCol6,'')
		  + isnull(@vCol7,'')
		  + isnull(@vCol8,'')
		  + isnull(@vCol9,'')
		  + isnull(@vCol10,'')
		  + isnull(@vCol11 ,'')
		  + isnull(@vCol12,'')


	-- check if initial_blank was selected
	set @vInitialBlankIncluded = CASE WHEN charindex('initials_blank',@vgsParamValue1) > 0 THEN 1 ELSE 0 END



	Set @vgsParamName2 = 'Selected Filters'
	Set @vgsParamValue2 = 	@vFilterList;


	select @vStep = 18
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting grouping information ' + convert(varchar(26),getdate(),109)



	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN


			Select
				   @vP1      = Case when group_level = 'P1' then column_name else @vP1 end
				  ,@vP2      = Case when group_level = 'P2' then column_name else @vP2 end
				  ,@vP3      = Case when group_level = 'P3' then column_name else @vP3 end

				  ,@vP1_disp_name      = Case when group_level = 'P1' then display_name else @vP1_disp_name end
				  ,@vP2_disp_name      = Case when group_level = 'P2' then display_name else @vP2_disp_name end
				  ,@vP3_disp_name      = Case when group_level = 'P3' then display_name else @vP3_disp_name end

				  ,@vG1 = Case when group_level = 'G1' then column_name else @vG1 end
				  ,@vG2 = Case when group_level = 'G2' then column_name else @vG2 end
				  ,@vG3 = Case when group_level = 'G3' then column_name else @vG3 end

				  ,@vG1_disp_name      = Case when group_level = 'G1' then display_name else @vG1_disp_name end
				  ,@vG2_disp_name      = Case when group_level = 'G2' then display_name else @vG2_disp_name end
				  ,@vG3_disp_name      = Case when group_level = 'G3' then display_name else @vG3_disp_name end

			from #PRP_Report_Metadata_Grouping    ;



			if @vP1 is not null Set @vPId = '1' else Set @vPID = 'X'
			if @vG1 is not null Set @vGID = '1' else Set @vGID = 'X'



	END


	if @debug_me='Y' Select * from #PRP_Report_Metadata_Grouping;

	Set @vgsParamName4  = 'Selected Grouping Options'
	Set @vgsParamValue4 = isnull(@vP1,'') + isnull(@vP2,'') + isnull(@vP3,'') +isnull(@vG1,'') + isnull(@vG2,'') + isnull(@vG3,'');


	select @vStep = 20
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting sorting information ' + convert(varchar(26),getdate(),109)
	if @debug_me='Y' Print 'STEP @vgsParamValue4 ' + @vgsParamValue4

	------Sorting Information


	Select @vSort1 = Case when seq = 1 then sort_by_name else @vSort1 end
		  ,@vSort2 = Case when seq = 2 then sort_by_name else @vSort2 end
		  ,@vSort3 = Case when seq = 3 then sort_by_name else @vSort3 end
		  ,@vSort4 = Case when seq = 4 then sort_by_name else @vSort4 end
	from #PRP_Report_Metadata_Sorting  order by seq;



	Set @vgsParamName3 = 'Selected Sorting Options'
	Set @vgsParamValue3 = 	isnull(@vSort1,'') + isnull(@vSort2,'') + isnull(@vSort3,'') + + isnull(@vSort4,'');


	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' sorting information ' + @vgsParamValue3

	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter information ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' Select * from #PRP_Filters;


	select @vStep = 22
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding single filter values  and date types' + convert(varchar(26),getdate(),109)


	---NON  IDS columns
	-- support multiple selections
	SELECT @vfil_medication_class = filter_value from #PRP_Filters where filter_name = 'pho_medication_class';

	SELECT @vfil_client_status = filter_value from #PRP_Filters where filter_name = 'client_status';  ---'client_status' --- -1 Both , 0 current, 1 discharged

	SELECT @vfil_order_desc = replace(filter_value,'%','[%]') from #PRP_Filters where filter_name = 'pho_order_desc' ;-- wrap % with brackets for proper 'like' filter


   set @vIncludeAdminOrder=1; -- for showining detail


	-----DATE TIME

	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))
	from #PRP_Filters where filter_name like 'custom_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SET @IcdDate=@vfil_order_date
		SEt @vfil_order_date  = @vfil_order_date_type
	End



SET @vOrderSummary = '1'
	----Special filters date range for med review report


	select @vStep = 24
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	Insert into #PRP_Multi_Filters
	Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */
	  'client_primary_physician'
	, 'client_floor'
	, 'pho_admin_record'
	, 'pho_administered_by'  -----NOT INCLUDED IN THE REPORT/FE  YET
	, 'pho_communication_method'
	, 'pho_med_prof'
	, 'pho_order_category'
	, 'pho_order_category_diet'
	, 'pho_order_status'
	, 'pho_order_type'
	, 'pho_permanent_source'
	, 'pho_source'
	, 'pho_source_pharmacy'
	, 'pho_source_provider'
	, 'pho_route_of_admin'
	, 'pho_schedule_template'
	, 'pho_diet_type'
	, 'pho_diet_texture'
	, 'pho_fluid_consistency'
	, 'pho_diet_supplement'
	, 'client_unit'
	, 'pho_phys_order_id'
	, 'pho_std_order'
	--, 'pho_include_admin_order'
	);


	if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end


	select @vStep = 24
	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #filter ' + convert(varchar(26),getdate(),109)

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters




	select @vStep = 26
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_primary_physician')	SET @vfil_client_physician = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_floor')				SET @vfil_floor = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

------chrisd---change--Begin
if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_med_prof')				SET @vfil_physician  = '1';
-------Change--End

	if (@vFooter = 'footer_2' --- get the chart codes when @scheduleDate is passed
		AND isDate(@vfil_schedule_date) = 1
		AND isDate(@vfil_schedule_date2) =1
		)
	BEGIN
		select @vStep = 28
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting chart codes information  ' + convert(varchar(26),getdate(),109)


		Insert into @PRP_ChartCodes
		EXEC [dbo].[sproc_prp_admin_record_chart_followup_codes]
		@fac_id = @vFacId
		,@start_date = @vfil_schedule_date
		,@end_date = @vfil_schedule_date2
		,@debug_me = 'n'
		,@status_code = NULL
		,@status_text = NULL

	END


	--apply client access logic if required
	select @vStep = 30;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';

	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END




	-----getting the list of clients
	select @vStep = 32
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				--else ltrim(rtrim(vwClientIds.description))
				else NULL
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender




			from ( Select client_id, mpi_id, client_id_number
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id

					from dbo.clients  with (nolock)
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N'
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  )
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		inner join ( Select * from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY c.ineffective_date ) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

	                FROM dbo.census_item c With (nolock)
					left join dbo.AR_LIB_PAYERS libpayer with (nolock)
						ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
	                WHERE c.fac_id = @vFacId and c.deleted = 'N'
	                  AND c.status_code_id not in (-1,17)
	                  AND (record_type = 'C' OR record_type IS NULL)) a
					            where Row = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			--, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, @vDateFormatStyle),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, @vDateFormatStyle),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, @vDateFormatStyle),'')  as deceased_date
			--, isnull(m.sex,'') as gender
			, Case when @vHeader = 'header_1' /* in (@vPHDR1,@vPHDR2, @vPHDR3)*/ then isnull(cla.allergy,'') else NULL end as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end +
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, @vDateFormatStyle),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender



		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id


		WHERE 	c.fac_id =  @vFacID
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			AND ((@vfil_client_physician= '1' and fil_physician.filter_value is not null) or @vfil_client_physician is null )
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END


	select @vStep = 34

	--if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' creating index on #clients' + convert(varchar(26),getdate(),109)


	if @debug_me='Y'  select '#clients' name,* from #clients




	---update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1
	if (@vHeader = 'header_1' /*or @vPHDR2 = 'header_1' or @vPHDR3 = 'header_1'*/) AND ( @vMRNId <> -2) -----
	BEGIN
		select @vStep = 36
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description))
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId

	END

	--if @debug_me='Y'  select * from #PRP_ClientList
	------Initializing Execution Statistics Varibales
	select @vStep = 38
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Initializing Execution Statistics Variables ' + convert(varchar(26),getdate(),109);

	Set @vgsFacCount = 0       --- it is fac level report
	Set @vgsPayerCount	= 0	;	 ---  No Payer information available
	SET @vgsAccountCount = 0 ;  ---- no account count is available
	Set @vgsMonthCount = 0; ----not a period based report so no month count
	Set @vgsClientCount = 0 ; ----no client relaetd information

	Set @vgsFacID = NULL;
	Set @vgsClientId = NULL ;
	Set @vgsPayerId = NULL;
	Set @vgsAccountID = NULL ;



		-- get all the admin order first
	BEGIN
		select @vStep = 40
        if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of admin order '+ convert(varchar(26),getdate(),109);


		;With tb1
		  as
		  (
		  Select

				pro.related_phys_order_id Original_phys_order_id
				, pro.order_related_id
				, pro.phys_order_id as admin_phys_order_id
				, pro.order_relationship_id
				, pao.effective_date
				, pao.ineffective_date
				, pao.physician_id
				, pao.reason
				, pao.created_date as admin_order_created_date
				, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
				from dbo.pho_related_order  pro with (nolock )
				inner Join dbo.pho_admin_order pao  with (nolock )
				on pro.phys_order_id = pao.phys_order_id
					  and  isnull(pro.deleted,'N')='N'
					  and isnull(pao.deleted,'N')='N'
					  and pao.exclude_eom_status_calculation=0
				inner join dbo.pho_phys_order  po WITH (NOLOCK) on  pro.related_phys_order_id = po.phys_order_id AND po.order_class_id =1

				INNER join #clients c with (NOLOCK)  on po.client_id = c.client_id
		  )
		  , tb2 as
		  (
			Select tb1.original_phys_order_id
				, tb1.order_related_id
				, tb1.admin_phys_order_id
				, tb1.order_relationship_id
				, tb1.effective_date
				, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
				, tb1.physician_id
				, tb1.reason
				, tb1.admin_order_created_date
				, nextrow.admin_phys_order_id as next_admin_phys_order_id
				From tb1
					  left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		  )

--select * from tb2

		  Insert into #prp_admin_orders(
							---Revision(chrisd):PCC- 46630 ; Begin
							admin_physician_Id
							----End
                            ,phys_order_id
                             , effective_date
                             , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by,admin_phys_order_id)

		         Select
                 tb2.physician_id
                ,tb2.original_phys_order_id
				, tb2.effective_date
				, case when tb2.order_relationship_id =2 then null else tb2.ineffective_date end ineffective_date
				, tb2.order_relationship_id
				, Case tb2.order_relationship_id
							when 1 then 'hold'
							when 2 then 'resume'
							when 3 then 'discontinue'
							else 'unknown'
						end as relationship
				, tb2.reason
				, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
				,admin_phys_order_id
		  From tb2
				left OUTER JOIN dbo.contact ct WITH (NOLOCK )
							on ct.contact_id = tb2.physician_id
                 ---INNER JOIN
---Revision(chrisd):PCC- 46630 ; Begin

left join #PRP_Multi_Filters fil_orderphy_id		on fil_orderphy_id.filter_name	= 'pho_med_prof'			and fil_orderphy_id.filter_value = tb2.physician_id

---Revision(chrisd):ENd
                 where

				 ((isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))

					)
---Revision(chrisd):PCC- 46630 ; Begin

         AND ((@vfil_physician='1' and fil_orderphy_id.filter_value is not null)or  @vfil_physician is  null)

---Revision(chrisd):End

		update a set 	ineffective_date=b.ineffective_date
		--select b.ineffective_date,a.*
		from #prp_admin_orders  a
		inner join pho_admin_order b on a.admin_phys_order_id=b.phys_order_id
		--where a.phys_order_id=2234794

		--select * from #prp_admin_orders


			if @debug_me='Y' select @vfil_asof_order_date_d1 as asof_d1, @vfil_asof_order_date_d2 as asof_d2, @vfil_order_date orderdate1, @vfil_order_date2 orderdate2


			if @debug_me='Y' select '#prp_admin_orders' as admin_order,* from #prp_admin_orders



--getting list of orders
			select @vStep = 158
			if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of orders '+ convert(varchar(26),getdate(),109);


			if @debug_me='Y' Print '*************** USING SCHEDULE LOGIC ***************************'


                INSERT INTO #view_prp_pho_phys_order_schedule
                    select
						po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, case when po.discontinued_date is null then po.max_end_date else po.discontinued_date end  max_end_date
						, null      as confirmed_by
						, null  	as confirmed_by_long_username
						, null	    as confirmed_date
						,po.created_by as [created_by]
						,null as [created_by_long_username]
						, po.created_date
						, po.diet_type
						, po.diet_texture
						, po.diet_supplement
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						,case when po.discontinued_date is null then po.max_end_date else po.discontinued_date end  end_date
						--, po.end_date
						, po.fac_id
						, Case when @vDietInfo = '1' then  po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								else NULL end as order_desc
						, null as order_status --OrderStatus.order_status as order_status
						, null as order_relationship --OrderStatus.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						,po.revision_by as [revision_by]
						,null as [revision_by_long_username]
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[min_start_date] [start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, po.fluid_consistency
						, po.active_flag
						, po.order_verified
						, po.draft
						, po.std_freq_id
						, po.description
						, po.order_schedule_id
						, po.last_reorder_date
						, po.date_ordered
						, po.diagnoses
						, po.route_of_admin as route_of_admin
						, po.controlled_substance_code
						--, po.order_verified
						--, po.active_flag
			from view_prp_pho_phys_order_schedule po
			INNER JOIN pho_phys_order ppor ON po.phys_order_id=ppor.phys_order_id
			AND ppor.order_class_id =1
					inner join #clients clients  with (nolock)
							on clients.client_id=po.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
			 where po.draft='0'
				and	po.order_category_id  <> 3030  ----exclude administrative orders
	            AND po.fac_id = @vFacId;




if @debug_me='Y' select '#view_prp_pho_phys_order_schedule', * from #view_prp_pho_phys_order_schedule
---Order without Admin
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code
				)

				Select  distinct
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id
                left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id
				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					------DATE FILTERS
					AND 1 =
							case when
								((po.order_date is not null and po.order_date < @vfil_order_date2  )
										and po.order_date >= @vfil_order_date )

								 ---handling with or without schedules
								and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending
								then 1 else 0 end
					AND NOT EXISTS   (select 1 from #prp_admin_orders  ho where po.phys_order_id = ho.phys_order_id);


--Order Adminstrated
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes ---- addditional directions
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code


				)
				      Select
						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, po.diet_supplement_desc
						, po.diet_texture_desc
						, po.diet_type_desc
						, po.directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						, po.fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, po.indications_for_use
						, po.order_category_id
						, po.order_date
						, po.order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, po.related_diagnoses
						, po.related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, po.route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, po.supplementary_notes
						, po.supply_order_date
						, po.supply_last_order_date
						, po.supply_last_reorder_date
						, po.supply_reorder
						, po_sch.std_freq_id
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id
				left join  dbo.view_pho_schedule po_sch with (nolock) on po_sch.order_schedule_id = po.order_schedule_id
                left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'
                           and ph.filter_value = ho.admin_physician_id ---Revision(chrisd):PCC- 46630 ;po.physician_id replaced with ho.admin_physician_id
				left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
				left  join dbo.pho_administration_record adminrec with (nolock)
							on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'
																		then ot.administration_record_id
																		else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
							and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED
					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )
					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )
					------DATE FILTERS
--					AND 1 =
--							case when
--								((po.order_date is not null and po.order_date < @vfil_order_date2  )
--										and po.order_date >= @vfil_order_date )
--
--								 ---handling with or without schedules
--								and (po.end_date is null  or po.end_date >= @vfil_order_date)
--								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
--								and isnull(po.active_flag,'y') = 'y'   --- valid order
--									  and po.order_verified = 'Y'   -----no pending
--
--								then 1 else 0 end ;

			--END

		---no schedule level or schedule detail level
				Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code

				)
				Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</b>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'			and ph.filter_value = po.physician_id

				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )

					-- new order date range

					and 1= case when
					        (po.order_date is null or ( po.order_date < @vfil_order_date2
										 and po.order_date >@vfil_order_date ))

						and (po.end_date is null  or po.end_date >= @vfil_order_date)
								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
								and isnull(po.active_flag,'y') = 'y'   --- valid order
									  and po.order_verified = 'Y'   -----no pending

					then 1 else 0 end

					and not exists (select 1 from #PRP_Orders b where  po.phys_order_id=b.phys_order_id)

Insert into #PRP_Orders
					( administered_by_id
						, alter_med_src
						, client_id
						, communication_method
						, completed_by
						, completed_date
						, confirmed_by
						, confirmed_by_long_username
						, confirmed_date
						, created_by
						, created_by_long_username
						, created_date
						, diet_supplement_desc
						, diet_texture_desc
						, diet_type_desc
						, directions
						, discontinued_date
						, end_date
						, fac_id
						, fluid_consistency_desc
						, hold_date
						, hold_date_end
						, indications_for_use
						, order_category_id
						, order_date
						, order_desc
						, order_status
						, order_relationship
						, order_type_id
						, pharmacy_id
						, phys_order_id
						, physician_id
						, related_diagnoses
						, related_generic
						, resume_date
						, revision_by
						, revision_by_long_username
						, revision_date
						, route_of_admin
						, schedule_template
						, [start_date]
						, std_order_id
						, supplementary_notes
						, supply_order_date
						, supply_last_order_date
						, supply_last_reorder_date
						, supply_reorder
						, std_freq_id
						, schedule_date
						, documented_date
						, documented_by
						, administered_date
						, order_verified
						, active_flag
						, order_schedule_id
                        , controlled_substance_code

				)
                Select

						 po.administered_by_id
						, po.alter_med_src
						, po.client_id
						, po.communication_method
						, po.completed_by
						, po.max_end_date
						, po.confirmed_by
						, po.confirmed_by_long_username
						, po.confirmed_date
						, po.created_by
						, po.created_by_long_username
						, po.created_date
						, Case when @vDietInfo = '1' then po.diet_supplement_desc else NULL end as diet_supplement_desc
						, Case when @vDietInfo = '1' then po.diet_texture_desc else NULL end as diet_texture_desc
						, Case when @vDietInfo = '1' then po.diet_type_desc else NULL end as  diet_type_desc
						, Case when @vOrderSummary = '1'  or @vdirections = '1' or @vOrderScheduleSummary ='1' then po.directions else NULL end as directions
						, po.discontinued_date
						, po.end_date
						, po.fac_id
						,  Case when @vDietInfo = '1' then po.fluid_consistency_desc else NULL end as fluid_consistency_desc
						, po.hold_date
						, po.hold_date_end
						, Case when @vIndicationsForUse  = '1' then po.indications_for_use else NULL end as indications_for_use
						, po.order_category_id
						, po.order_date
						, Case when @vOrderSummary = '1'  or @vOrderDesc = 1 or @vOrderScheduleSummary ='1'  then '<b>'+

							 --po.[description]
								replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
								+ '</b>' else NULL end as order_desc
						, po.order_status
						, po.order_relationship
						, po.order_type_id
						, po.pharmacy_id
						, po.phys_order_id
						, po.physician_id
						, Case when @vRelatedDiagnoses = '1' then po.diagnoses		 else NULL end as related_diagnoses
						, Case when @vRelatedGeneric = '1'   then po.related_generic else NULL end as related_generic
						, po.resume_date
						, po.revision_by
						, po.revision_by_long_username
						, po.revision_date
						, Case when @vRouteOfAdmin = '1' then po.route_of_admin_desc else NULL end as route_of_admin_desc
						, po.schedule_template
						, po.[start_date]
						, po.std_order_id
						, Case when @vAdditionaldirections = 1 then po.supplementary_notes else NULL end as supplementary_notes
						, po.date_ordered												as supply_order_date
						, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
						, po.last_reorder_date											as supply_last_reorder_date
						, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
						, NULL as std_freq_id
						, NULL as schedule_date
						, NULL as documented_date
						, NULL as documented_by
						, NULL as administered_date
						, po.order_verified
						, po.active_flag
						, po.order_schedule_id
                        , po.controlled_substance_code

				From #view_prp_pho_phys_order_schedule po with (nolock)
				inner JOIN #prp_admin_orders ho
					ON po.phys_order_id = ho.phys_order_id

				left join #PRP_Multi_Filters ph			on ph.filter_name		= 'pho_med_prof'
                  and ph.filter_value = ho.admin_physician_id --Revision(chrisd):PCC- 46630 ;po.physician_id replaced with ho.admin_physician_id
				where  (po.active_flag = 'Y' or po.active_flag is null)
					----MULTIPLE VALUES SUPPORTED

					AND ((@vfil_physician  = '1'			 and ph.filter_value is not null)			  or @vfil_physician  is null )

					AND (po.[description] like '%'+ @vfil_order_desc+'%' or @vfil_order_desc is NULL )

					-- new order date range

--					and 1= case when
--					        (po.start_date is null or ( po.start_date < @vfil_order_date2
--										 and po.start_date >@vfil_order_date ))
--
--						and (po.end_date is null  or po.end_date >= @vfil_order_date)
--								and (po.discontinued_date is null or po.discontinued_date >= @vfil_order_date)
--								and isnull(po.active_flag,'y') = 'y'   --- valid order
--									  and po.order_verified = 'Y'   -----no pending
--
--					then 1 else 0 end

					and not exists (select 1 from #PRP_Orders b where  po.phys_order_id=b.phys_order_id)



	end

	-- insert unique order to this table to optimized execution of getorderstatus
	select @vStep = 60
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' inserting unique order id in preparation for getting the order status ' + convert(varchar(26),getdate(),109)


	insert INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id
			, client_id
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
            , controlled_substance_code

			from #prp_orders po
	where po.order_status is NULL -- struck out order has order status


-- get all orders for that facility/client
if @debug_me='Y'  select '#tempResult',* from #tempResult

if @client_id <> '-1' set @vSP_ClientId = @client_id

DECLARE @vSelectedDate datetime
set @vSelectedDate = isnull(@vfil_asof_order_date_d1,@vgs_start_time)

	insert into #PRP_PhoOrderStatus
	exec sproc_pho_getOrderStatus
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vSelectedDate
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output


	set @vRowCount = @@rowcount

	if isnull(@vGetStatus_statuscode,0) = 1
		  begin
				set @status_text = 'sproc_pho_getOrderStatus returned the following error: ' + isnull(@vGetStatus_statuscode,'')
				Raiserror( @status_text, 11, 1 );
		  end
	else if  @vRowCount = 0

		  Raiserror( 'sproc_pho_getOrderStatus returned 0 rows.', 11, 1 );



	-- update orders with their current status

	update p
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship
		from #prp_orders p inner JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


-- Update order summery
if @vOrderSummary = '1'
	BEGIN
		select @vStep = 63
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)

		Update #PRP_Orders Set order_summary = isnull(o.order_desc,'') + ' ' --+ ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,''))
									+ replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')
			from #PRP_Orders o
			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
							(
								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
									where po.phys_order_id = o.phys_order_id
									order by po.start_date
									FOR XML PATH (''), TYPE
							) a ( order_summary )
				) OrderSumm

			update #PRP_Orders
				set order_summary = isnull(order_desc, '') + ' ' + isnull(directions, '')
				where order_status = 4

	END


--	if @debug_me = 'y'  select * From #PRP_PhoOrderStatus


	if (isnull(@vAuditInfoSelected,0) = 1 or @vfil_created_by is not null or @vfil_confirmed_by is not null)

	begin
			select @vstep = 61
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' updating Orders with audit information ' +  convert(varchar(26),getdate(),109)
			update #PRP_Orders
			set revision_by =					isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by =					Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end
				,confirmed_date =				Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end
				,created_by =					isnull(cpsecuser_created.loginname, secuser_created.loginname )
				,created_by_long_username =		isnull(cpsecuser_created.long_username, secuser_created.long_username )

			from #PRP_Orders po

				Left join dbo.pho_phys_order_useraudit useraudit with (nolock)
					on useraudit.phys_order_id = po.phys_order_id

				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id

				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id

				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id

				Left join dbo.sec_user secuser_created
					on  secuser_created.loginname = po.created_by

				Left join dbo.sec_user secuser_revision
					on  secuser_revision.loginname = po.revision_by



	end

	if  @vfil_created_by is not null or @vfil_confirmed_by is not null
	begin
		delete #PRP_Orders
			from #PRP_Orders po
			where 	not ( ((po.created_by = @vfil_created_by and po.created_by is not null) or @vfil_created_by is null)
							and ((po.confirmed_by = @vfil_confirmed_by and po.confirmed_by is not null) or @vfil_confirmed_by is null)
							)



	end
	if @debug_me = 'y' Select * from #PRP_Orders;

	-----FILTERING ORDERS BASED ON MEDICATION CLASS
	if @vfil_medication_class is not NULL and (@vfil_medication_class <> '-1,' and @vfil_medication_class <> '-1')
	BEGIN
		select @vStep = 62
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' @vfil_medication_class ' + convert(varchar, @vfil_medication_class) +  '; FILTERING ORDERS BASED ON MEDICATION CLASS ' + convert(varchar(26),getdate(),109)

		DELETE  #PRP_Orders
		From #PRP_Orders po
		left join (
					 SELECT distinct poelmr.phys_order_id  from
							(select phys_order_id, phys_order_ext_lib_rec_id  from dbo.pho_order_ext_lib_med_ref with (nolock)
								union
							select phys_order_id, phys_order_ext_lib_rec_id from dbo.pho_order_ext_lib_med_ref_audit with (nolock)
							) poelmr
						INNER JOIN
								(
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
								) classes
							ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
						INNER JOIN ( Select Cast( ltrim(rtrim(left(items,charindex(':',items)-1))) as bigint) as sel_class_id
									from dbo.split(@vfil_medication_class, ',')  ) selected_class
							ON classes.class_id = selected_class.sel_class_id
--							AND classes.class_id = @vfil_medication_class

				   ) med_class_orders
			on med_class_orders.phys_order_id = po.phys_order_id
		Where  med_class_orders.phys_order_id is null
	END


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 retrieving administrative orders ' + convert(varchar(26),getdate(),109)

--	 get all administrative orders instead of just hold orders

-- eliminated usage of view_prp_pho_administrative_order

	/*TRUNCATE table #prp_admin_orders

	;With tb1
	as
	(
	Select

		 pro.related_phys_order_id Original_phys_order_id
		, pro.order_related_id
		, pro.phys_order_id as admin_phys_order_id
		, pro.order_relationship_id
		, pao.effective_date
		, pao.ineffective_date
		, pao.physician_id
		, pao.reason
		, pao.created_date as admin_order_created_date
		, row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
		from dbo.pho_related_order  pro with (nolock )
		inner Join dbo.pho_admin_order pao  with (nolock )
		on pro.phys_order_id = pao.phys_order_id
			and  isnull(pro.deleted,'N')='N'
			and isnull(pao.deleted,'N')='N'
			and pao.exclude_eom_status_calculation=0
		inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id
	)
	, tb2 as
	(
	  Select tb1.original_phys_order_id
		, tb1.order_related_id
		, tb1.admin_phys_order_id
		, tb1.order_relationship_id
		, tb1.effective_date
		, case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
		, tb1.physician_id
		, tb1.reason
		, tb1.admin_order_created_date
		, nextrow.admin_phys_order_id as next_admin_phys_order_id
		From tb1
			left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
	)

	Insert into #prp_admin_orders(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)

	Select  tb2.original_phys_order_id
		, tb2.effective_date
		, tb2.ineffective_date
		, tb2.order_relationship_id
		, Case tb2.order_relationship_id
				when 1 then 'hold'
				when 2 then 'resume'
				when 3 then 'discontinue'
				else 'unknown'
			  end as relationship
		, tb2.reason
		, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
	 From tb2
		left OUTER JOIN dbo.contact ct WITH (NOLOCK )
				on ct.contact_id = tb2.physician_id

where
			( isnull(@vfil_asof_order_date_d1 ,@vfil_order_date  ) <= tb2.effective_date  and tb2.effective_date < isnull(@vfil_asof_order_date_d2,@vfil_order_date2 ))
*/


	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '.1 finished retrieving administrative orders ' + convert(varchar(26),getdate(),109)


	if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #prp_admin_orders

	if @debug_me='Y' select  @vfil_admin_order_date_range_d1 dateranged1, @vfil_admin_order_date_range_d2 dateranged2, @vIncludeAdminOrder fillflag

	if @debug_me='Y' Print ' @vOrderSummary :' + case when @vOrderSummary=1 then '1' else '0' end


	SEt @vgs_fill_end_time  = getdate() ; -- fill end time

	select @vStep = 70
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)


	--Select '#PRP_Orders3' name,order_summary,order_status, * from #PRP_Orders;


	;with tbBase
	as
	(
	Select
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id
		, c.client_name
		, c.admission_date
		, c.discharge_date
		, c.deceased_date
		, c.sex as gender
		, c.allergy
		, c.location
		, c.date_of_birth
		, c.client_physician_id
		, c.client_physician
		, c.client_pharmacy
		, c.mrn_number
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' +
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by
		, so.advanced_directive								as advanced_directive
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,@vDateFormatStyle)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,@vDateFormatStyle)		as confirmed_date

		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,@vDateFormatStyle)			as created_date

--		, po.directions									as directions
		, replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date


		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,@vDateFormatStyle)					as order_end_date


		, Case when po.order_status = 5  --- on hold
				then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id

		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,@vDateFormatStyle)			 as order_date
		, convert(char(10),po.order_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
            when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status in (11,10)  then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, po.order_summary + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'')
		, isnull(po.order_desc,'') + isnull((replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&apos;')),'')

			+ Case when @vfil_start_end_date_range_review = '1'  and po.hold_date is not NULL
					then ' On hold from ' +convert(char(10),po.hold_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')
			   end


			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,'')))))
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,@vDateFormatStyle)		as revision_date
		, po.route_of_admin
		, Case po.schedule_template
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template
		, convert(char(10),po.start_date,@vDateFormatStyle)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only


		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,@vDateFormatStyle)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,@vDateFormatStyle)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,@vDateFormatStyle)		as supply_last_reorder_date

		---62-9, 124-18, 186-27
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,@vDateFormatStyle )				as schedule_date
		, convert(char(10),po.schedule_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by


		, convert(char(10),po.administered_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		--, po.order_schedule_id

		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join dbo.common_code cc with (nolock ) on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock )
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock)
			on po.std_order_id=so.std_phys_order_id

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src

		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id


		outer apply (Select * From
				(
				select ' On hold'
						+ case when a1.ineffective_date is null
									then ' starting '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end
				from
				(
						Select  effective_date
	 						 , ineffective_date
						from #prp_admin_orders ho with (nolock)
						where ho.phys_order_id = po.phys_order_id
						AND ho.order_relationship_id = 1

				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From

						(	Select  admin_order_status + char(9) +
								convert(char(10),effective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) +
								isnull(convert(char(10),ineffective_date,@vDateFormatStyle) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								reason + char(9) +
								ordered_by
								+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end

								+ char(10)

								from #prp_admin_orders ho with (nolock)
								where ho.phys_order_id = po.phys_order_id
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

--			Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
--							(
--								Select   Case when o.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')
--									from dbo.view_prp_pho_phys_order_schedule po with (nolock)
--									where po.phys_order_id = o.phys_order_id
--									order by po.start_date
--									FOR XML PATH (''), TYPE
--							) a ( order_summary )
--				) OrderSumm

	)
	, tbWithGroupSet
	as
	(
		Select *
	      ,isnull(Case
			  when  @vP1 like  'pho_med_prof%'				then physician_id
			  when  @vP1 =  'client_primary_physician'   then client_physician_id
			  when  @vP1 like 'client_name%'				then client_id_str
			  when  @vP1 = 'client_number'				then client_id_number
			  when  @vP1 like 'client_location%'		    then  client_id_str

			  when  @vP1 = 'pho_order_category'			then order_category_id
			  when  @vP1 = 'pho_order_type'				then order_type_id
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  end,'')
		 +
	      isnull(Case
			  when  @vP2 like  'pho_med_prof%'				then  '_' +physician_id
			  when  @vP2 = 'client_primary_physician'   then  '_' +client_physician_id
			  when  @vP2 like 'client_name%'				then  '_' +client_id_str
			  when  @vP2 = 'client_number'				then  '_' +client_id_number
			  when  @vP2 like 'client_location%'		then  '_' +client_id_str

			  when  @vP2 = 'pho_order_category'			then  '_' +order_category_id
			  when  @vP2 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP2 = 'pho_order_category_type_desc'		then  '_' +isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then  '_' + order_desc
			  when @vP2 = 'pho_order_type_seq'					then  '_' +order_type_seq
			  when @vP2 = 'pho_diet_type'						then  '_' +diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then  '_' +diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then  '_' + fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then  '_' +diet_supplement_desc

			  when @vP2 = 'pho_order_date'						then order_start_date
		   end,'')
		 +
	      isnull(Case
			  when @vP3 like 'pho_med_prof%'				then  '_' +physician_id
			  when @vP3 = 'client_primary_physician'   then  '_' +client_physician_id
			  when @vP3 like 'client_name%'			then  '_' +client_id_str
			  when @vP3 = 'client_number'				then  '_' +client_id_number
			  when @vP3 like 'client_location%'			then   '_' +client_id_str

			  when @vP3 = 'pho_order_category'			then  '_' +order_category_id
			  when @vP3 = 'pho_order_type'				then  '_' +order_type_id
			  when @vP3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then '_' + order_desc
			  when @vP3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vP3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then '_' + order_start_date
		  end,'')
		  as P_set_id
		, Case
			  when @vP1 like 'pho_med_prof%'				then physician
			  when @vP1 = 'client_primary_physician'   then client_physician
			  when @vP1 like 'client_name%'				then client_name
			  when @vP1 = 'client_number'				then client_id_number
			  when @vP1 like 'client_location%'			then location
			  when @vP1 = 'pho_order_category'			then order_category
			  when @vP1 = 'pho_order_type'				then order_type
			  when @vP1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP1 = 'pho_order_desc'						then order_desc
			  when @vP1 = 'pho_order_type_seq'					then order_type_seq
			  when @vP1 = 'pho_diet_type'						then diet_type_desc
			  when @vP1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP1 = 'pho_order_date'						then order_start_date
		  else NULL end as P1

		, Case
			  when @vP2 like 'pho_med_prof%'				then physician
			  when @vP2 = 'client_primary_physician'   then client_physician
			  when @vP2 like 'client_name%'			then client_name
			  when @vP2 = 'client_number'				then client_id_number
			  when @vP2 like  'client_location%'			then location
			  when @vP2 = 'pho_order_category'			then order_category
			  when @vP2 = 'pho_order_type'				then order_type
			  when @vP2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP2 = 'pho_order_desc'						then order_desc
			  when @vP2 = 'pho_order_type_seq'					then order_type_seq
			  when @vP2 = 'pho_diet_type'						then diet_type_desc
			  when @vP2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP2 = 'pho_order_date'						then order_start_date
		  else NULL end as P2

		, Case
			  when @vP3 like 'pho_med_prof%'				then physician
			  when @vP3 = 'client_primary_physician'   then client_physician
			  when @vP3 like 'client_name%'				then client_name
			  when @vP3 = 'client_number'				then client_id_number
			  when @vP3 like 'client_location%'			then location
			  when @vP3 = 'pho_order_category'			then order_category
			  when @vP3 = 'pho_order_type'				then order_type
			  when @vP3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vP3 = 'pho_order_desc'						then order_desc
			  when @vP3 = 'pho_order_type_seq'					then order_type_seq
			  when @vP3 = 'pho_diet_type'						then diet_type_desc
			  when @vP3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vP3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vP3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vP3 = 'pho_order_date'						then order_start_date
		  else NULL end as P3
		,
	      Case
			  when @vG1 like 'pho_med_prof%'				then physician_id
			  when @vG1 = 'client_primary_physician'   then client_physician_id
			  when @vG1 like 'client_name%'				then client_id_str
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then client_id_str
			  when @vG1 = 'pho_order_category'			then order_category_id
			  when @vG1 = 'pho_order_type'				then order_type_id
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
			else NULL --- sending NULL if not found for JRMXL
		  end
		 +
	      isnull(Case
			  when @vG2 like 'pho_med_prof%'				then '_' +physician_id
			  when @vG2 = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG2 like 'client_name%'				then '_' +client_id_str
			  when @vG2 = 'client_number'				then '_' +client_id_number
			  when @vG2 like 'client_location%'				then '_' +client_id_str
			  when @vG2 = 'pho_order_category'			then '_' +order_category_id
			  when @vG2 = 'pho_order_type'				then '_' +order_type_id
			  when @vG2 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then '_' + order_desc
			  when @vG2 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG2 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then '_' + order_start_date



		  end,'')
		 +
	      isnull(Case
			  when @vG3   like 'pho_med_prof%'				then '_' +physician_id
			  when @vG3  = 'client_primary_physician'   then '_' +client_physician_id
			  when @vG3 like 'client_name%'				then '_' +client_id_str
			  when @vG3  ='client_number'				then '_' +client_id_number
			  when @vG3 like 'client_location%'			then '_' +client_id_str
			  when @vG3  = 'pho_order_category'			then '_' +order_category_id
			  when @vG3  = 'pho_order_type'				then '_' +order_type_id
			  when @vG3 = 'pho_order_category_type_desc'		then '_' + isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then '_' + order_desc
			  when @vG3 = 'pho_order_type_seq'					then '_' + order_type_seq
			  when @vG3 = 'pho_diet_type'						then '_' + diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then '_' + diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then '_' + fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then '_' + diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then '_' + order_start_date


		 end ,'')
		 as G_set_id

		, Case
			  when @vG1 like 'pho_med_prof%'				then physician
			  when @vG1 = 'client_primary_physician'   then client_physician
			  when @vG1 like 'client_name%'				then client_name
			  when @vG1 = 'client_number'				then client_id_number
			  when @vG1 like 'client_location%'			then location
			  when @vG1 = 'pho_order_category'			then order_category
			  when @vG1 = 'pho_order_type'				then order_type
			  when @vG1 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG1 = 'pho_order_desc'						then order_desc
			  when @vG1 = 'pho_order_type_seq'					then order_type_seq
			  when @vG1 = 'pho_diet_type'						then diet_type_desc
			  when @vG1 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG1 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG1 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG1 = 'pho_order_date'						then order_start_date
		  else NULL end as G1

		, Case
			  when @vG2 like 'pho_med_prof%'				then physician
			  when @vG2 = 'client_primary_physician'   then client_physician
			  when @vG2 like 'client_name%'				then client_name
			  when @vG2 = 'client_number'				then client_id_number
			  when @vG2 like 'client_location%'			then location
			  when @vG2 = 'pho_order_category'			then order_category
			  when @vG2 = 'pho_order_type'				then order_type
			  when @vG2 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG2 = 'pho_order_desc'						then order_desc
			  when @vG2 = 'pho_order_type_seq'					then order_type_seq
			  when @vG2 = 'pho_diet_type'						then diet_type_desc
			  when @vG2 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG2 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG2 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG2 = 'pho_order_date'						then order_start_date

		  else NULL end as G2

		, Case
			  when @vG3  like 'pho_med_prof%'				then physician
			  when @vG3  = 'client_primary_physician'   then client_physician
			  when @vG3  like 'client_name%'				then client_name
			  when @vG3  = 'client_number'				then client_id_number
			  when @vG3  like 'client_location%'			then location
			  when @vG3  = 'pho_order_category'			then order_category
			  when @vG3  = 'pho_order_type'				then order_type
			  when @vG3 = 'pho_order_category_type_desc'		then isnull(order_category,'') + ' ' + isnull(order_type, '') + ' ' + isnull(order_desc, '')
			  when @vG3 = 'pho_order_desc'						then order_desc
			  when @vG3 = 'pho_order_type_seq'					then order_type_seq
			  when @vG3 = 'pho_diet_type'						then diet_type_desc
			  when @vG3 = 'pho_diet_texture'					then diet_texture_desc
			  when @vG3 = 'pho_fluid_consistency'				then fluid_consistency_desc
			  when @vG3 = 'pho_diet_supplement'					then diet_supplement_desc
			  when @vG3 = 'pho_order_date'						then order_start_date

		  else NULL end as G3

		from tbBase
	)
--Select * From tbWithGroupSet


	, tbWithSort
	as
	(
		Select
			Case @vCol1
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_summary
			  when 'pho_order_summary'			then order_schedule_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end as col_1
		, Case @vCol2
			  when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date


			else '' end as col_2
		, Case @vCol3
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date


			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_3
		, Case @vCol4
			 when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_4
		, Case @vCol5
		when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_5
		, Case @vCol6
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

		else '' end  as col_6
		, Case @vCol7
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_7
		, Case @vCol8
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date

			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc


		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date

			else '' end  as col_8

		, Case @vCol9
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date



			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_9
		, Case @vCol10
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date



			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_10
		, Case @vCol11
			when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date



			else '' end  as col_11
		, Case @vCol12
				when 'client_name'				then client_name
			  when 'client_admission_date'		then admission_date
			  when 'client_discharge_date'		then discharge_date
			  when 'client_deceased_date'		then deceased_date
			  when 'client_birth_date'			then date_of_birth
			  when 'client_location'			then location
			  when 'client_primary_physician'   then client_physician

			  when 'pho_additional_directions'	then additional_directions
			  when 'pho_admin_record'			then administration_record
			  when 'pho_administered_by'		then administered_by
			  when 'pho_advanced_directive'		then advanced_directive
			  when 'pho_communication_method'	then communication_method

			  when 'pho_completed_by'			then completed_by
			  when 'pho_completed_date'			then completed_date
			  when 'pho_completed_info'			then isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')
			  when 'pho_confirmed_by'			then confirmed_by
			  when 'pho_confirmed_date'			then confirmed_date
			  when 'pho_confirmed_info'			then  isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'')
			  when 'pho_created_by'				then created_by
			  when 'pho_created_date'			then created_date
			  when 'pho_created_info'			then isnull(created_by,'') + isnull(@vCharNewLine + created_date,'')

			  when 'pho_directions'				then directions

			  when 'pho_discontinued_by'		then discontinued_by
			  when 'pho_discontinued_date'		then discontinued_date
			  when 'pho_discontinued_reason'	then discontinued_reason
			  when 'pho_discontinued_info'		then isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')

			  when 'pho_end_date'				then order_end_date

			  when 'pho_hold_by'				then hold_by
			  when 'pho_hold_date'				then hold_date
			  when 'pho_hold_reason'			then hold_reason
			  when 'pho_hold_info'				then isnull(hold_by ,'')+ isnull(@vCharNewLine + hold_date + ' - ' + hold_date_end,'') +isnull(@vCharNewLine+hold_reason,'')
			  when 'pho_hold_start_end_date'    then hold_start_end_date


			  when 'pho_indications_for_use'	then indications_for_use
			  when 'pho_med_prof'				then physician
			  when 'pho_order_category'			then order_category
			  when 'pho_order_date'				then order_date
			  when 'pho_order_date_time'		then order_date_time
			  when 'pho_order_desc'				then order_desc


			  when 'pho_order_status'			then order_status

			  when 'pho_order_schedule_summary'	then order_schedule_summary
			  when 'pho_order_summary'			then order_summary

			  when 'pho_order_type'				then order_type
			  when 'pho_permanent_source'		then permanent_source
			  when 'pho_source'					then pharmacy ----pharmacy and provider are same
			  when 'pho_source_pharmacy'		then pharmacy ----pharmacy and provider are same
			  when 'pho_source_provider'		then pharmacy ----pharmacy and provider are same

			  when 'pho_related_generic'		then related_generic
			  when 'pho_related_diagnoses'		then related_diagnoses


			  when 'pho_resume_date'			then resume_date
			  when 'pho_resume_by'				then resume_by
			  when 'pho_resume_reason'			then resume_reason
			  when 'pho_resume_info'			then isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')

			  when 'pho_revision_by'			then revision_by
			  when 'pho_revision_date'			then revision_date
			  when 'pho_revision_info'			then isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')

			  when 'pho_route_of_admin'			then route_of_admin
			  when 'pho_schedule_template'	    then schedule_template
			  when 'pho_start_date'				then order_start_date




			  when 'pho_diet_type'				then diet_type_desc
			  when 'pho_diet_texture'			then diet_texture_desc
			  when 'pho_fluid_consistency'		then fluid_consistency_desc
			  when 'pho_diet_supplement'		then diet_supplement_desc

		      when 'initials_blank'			    then initials_blank
			  when 'notes_blank'			    then notes_blank
			  when 'pho_renew_blank'			then renew_blank
			  when 'pho_stop_blank'				then stop_blank


			  when 'pho_supply_reorder'				then supply_reorder
			  when 'pho_supply_order_date'			then supply_order_date
			  when 'pho_supply_last_order_date'		then supply_last_order_date




			else '' end  as col_12
			, P_set_id
			, P1
			, P2
			, P3
			, G_set_id
			, G1
			, G2
			, G3
			, administrative_details
			----header information
			, phys_order_id  -----for QA TEsting only
			, client_id
			, client_name
			, location
			, admission_date
			, gender
			, date_of_birth
			, client_physician
			, client_pharmacy
			, allergy
			, mrn_number
			, physician ----if P1 = 'pho_med_prof' we need to use this information in header_1
			--, order_schedule_id
			-- was dense_rank
			,dense_rank() over ( ORDER BY
										P1,P2, P3,P_set_id,G1,G2,G3, G_set_id
										,Case @vSort1
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician

											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category

											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc

										, Case @vSort2
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc

											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort3
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end ASC
										, Case @vSort4
											When 'client_name' then client_name
											When 'client_location' then location
											when 'client_number' then client_id_number
											when 'client_primary_physician' then client_physician
											when 'pho_order_category_type_desc' then isnull(order_category,'') + isnull(order_type, '') + isnull(order_desc, '')
											when 'pho_order_desc' then order_desc
											when 'pho_order_type' then order_type
											when 'pho_order_type_seq' then order_type_seq
											when 'pho_order_date'    then order_date
											when 'pho_order_category'			then order_category
											  when 'pho_diet_type'				then diet_type_desc
											  when 'pho_diet_texture'			then diet_texture_desc
											  when 'pho_fluid_consistency'		then fluid_consistency_desc
											  when 'pho_diet_supplement'		then diet_supplement_desc
											when 'pho_supply_order_date' then supply_order_date

										  else NULL end asc


			) as row_num
		from tbWithGroupSet
	)

	, tb
	as
	(
	Select TOP 100 PERCENT
	  @vFacId as fac_id
	 , col_1
	 , col_2
	 , col_3
	 , col_4
	 , col_5
	 , col_6
	 , col_7
	 , col_8
	 , col_9
	 , col_10
	 , col_11
	 , col_12
	 , administrative_details
 	, P_set_id
	, Case when @vHeader  = 'header_0' then @vP1_disp_name + @vSeparator+ P1  + isnull( @vP2_disp_name,'' ) + @vSeparator + isnull(P2,'') + isnull( @vP3_disp_name,'' ) + @vSeparator + isnull(P3,'')
					when @vHeader = 'header_1' then
							  isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator
							+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
							+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator
							+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
							+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator
							+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
							+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator
							+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
							+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator
							+ 'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,@IcdDate,@vFacId) ,'')

			else Null end
		as P1

	, NULL 	as P2
	, NULL 	as P3
	, G_set_id  ---0/1
	, G1
	, G2
	, G3
	,Case when @vFooter = 'footer_2' then
			'Signature'		   + @vSeparator + '' + @vSeparator
	      + 'Date'			   + @vSeparator + '' + @vSeparator
		  + (Select Replace(chart_codes, '[$]', @vSeparator) from @PRP_ChartCodes )
		 when @vFooter = 'footer_1' then
			client_name
			else NULL end
		as page_footer
	, row_num
	, @status_code as status_code
	, @status_text as status_text
	, phys_order_id
	--, order_schedule_id
   	from tbWithSort
	Order by row_num
	)

	--SELECT DISTINCT * FROM tbWithSort
	Select distinct
		 fac_id
		, col_1
		, col_2
		, col_3
		, col_4
		, col_5
		, col_6
		, col_7
		, col_8
		, col_9
		, col_10
		, col_11
		, col_12
		, administrative_details
		, P_set_id   ---0/1
		, P1
		, P2
		, P3
		, G_set_id  ---0/1
		, G1
		, G2
		, G3
		, page_footer
		, (case when row_num = 1 then status_code else null end )status_code
		, (case when row_num = 1 then status_text else null end )status_text
		, phys_order_id
		--, order_schedule_id
		, row_num
		,0 include_healthcard
	from tb
	Order by  row_num


	Set @rows_returned = @@ROWCOUNT;



	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);



END TRY

BEGIN CATCH
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END


	Select
--		NULL as row_type,
		 NULL as fac_id
		, NULL as col_1
		, NULL as  col_2
		, NULL as col_3
		, NULL as col_4
		, NULL as col_5
		, NULL as col_6
		, NULL as col_7
		, NULL as col_8
		, NULL as col_9
		, NULL as col_10
		, NULL as col_11
		, NULL as col_12
		, NULL as administrative_details
		, NULL as P_set_id   ---0/1
		, NULL as P1
		, NULL as P2
		, NULL as P3
		, NULL as G_set_id  ---0/1
		, NULL as G1
		, NULL as G2
		, NULL as G3
		, NULL as page_footer
		, NULL as col_width
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text
		, NULL as phys_order_id
		, NULL as order_schedule_id
		, NULL as row_num
		,NULL include_healthcard
END CATCH
END
RETURN

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_order_based_recap_order_report   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_order_based_recap_order_repor.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_electronic_prescription_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-68693       :   script to create sproc_prp_rl_electronic_prescription_report Procedure  
--						-- 
-- Written By:          Henny Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_electronic_prescription_report for integrated facilities in US 
-- 
-- Special Instruction: 
-- 
-- =================================================================================
/***********************************************************************************************************
Revision History:
-- 2015-01-30	H Ehghaghi			PCC-68693	3.7.6		Fixed duplicate client Id
-- 2015-02-11   H Ehghaghi			PCC-70809	3.7.6.1		Remove all security (facility and client) also add sort option base of user selected
															Showing facility address instead of resident address and add supervisor designation
-- 2015-02-11   H Ehghaghi			PCC-70809	3.7.6.1		No phys order ID exception and field name
-- 2015-02-23   H Ehghaghi			PCC-71400	3.7.6.1		Add Quantity To Dispense And Refills # 
-- 2015-02-27   H Ehghaghi			PCC-71910	3.7.6.1		Show prescription information that was digitally signed and archived instead of current . 
-- 2015-12-22   H Ehghaghi			PCC-87250	3.7.8.2		 add pharmacy name for discharge order . 
-- 2016-01-15   H Ehghaghi			PCC-88050	3.7.9		 Add facility adderss and update client address . 
-- 2016-02-01   H Ehghaghi			PCC-89148	3.7.9		Fixed  No of Refills  issue . 
-- 2016-05-02   H Ehghaghi			PCC-94418	3.7.9		Fixed  order panding issue . 
-- 2016-08-24   H Ehghaghi			PCC-99165	3.7.11		apply sort by on Electronic Prescription Report .
-- 2016-09-07   H Ehghaghi			PCC-100916 3.7.11		Fixed multi schedual order summery and directiond
-- 2016-09-09   H Ehghaghi			PCC-100916 3.7.11		Fixed summery description and showing drug form/strength/dose
-- 2016-09-12   H Ehghaghi			PCC-101215 3.7.11		 Updates on the Sort By options
-- 2017-09-06   Dom Christie		PCC-95068  3.7.14		Electronic Prescription report needs to contain PCC Message Id and Prescriber Order Number
-- 2017-09-22   Dom Christie		PCC-122281  3.7.14      Print message ID when an integrated pharmacy exists as the order source pharmacy
-- 2022-01-07   Jarek Zawojski      CORE-98068 4.4.9        Add attestation and registration_code to be used in CDN version of the report
*************************************************************************************************************/


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_electronic_prescription_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_electronic_prescription_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_rl_electronic_prescription_report
  @fac_id int
, @is_emc  bit = '0'
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @message varchar(max)	 = NULL
, @execution_user_login varchar(60)
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/********************************************************************************
						   
Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_rl_electronic_prescription_report
@fac_id =  '1' 
,@filter_list =  'client_id=-1;'
,@message ='<pharmacyOrderMessageType> 
  <subscriptionList>
       <vendorPharmacyId>173</vendorPharmacyId>
  	   <pccOrderId>2924056</pccOrderId>
	   <transmissionStatus> failed </transmissionStatus>
	   <transmissionDate> 12/17/2014 15:20:55 </transmissionDate> 
  </subscriptionList> 
  <subscriptionList>
       <vendorPharmacyId>173</vendorPharmacyId>
  	   <pccOrderId>2924057</pccOrderId>
	   <transmissionStatus> failed </transmissionStatus>
	   <transmissionDate> 12/18/2014 18:20:55 </transmissionDate> 
  </subscriptionList> 
   <subscriptionList>
       <vendorPharmacyId>5917</vendorPharmacyId>
  	   <pccOrderId>2923693</pccOrderId>
	   <transmissionStatus> failed </transmissionStatus>
	   <transmissionDate> 12/19/2014 7:20:55 </transmissionDate> 
  </subscriptionList> 
</pharmacyOrderMessageType>
'
,@execution_user_login =  '_system_' 
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null


Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;
--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE 
	  @vmessage varchar(max)
	, @vFilterList varchar(max)
	, @vFacId int
	, @vSP_ClientId int
	, @visemc bit 
	, @vGetStatus_statuscode int 
	, @vGetStatus_statustext varchar(3000);


DECLARE   @term_admission varchar(50)
        , @term_client varchar(50)
        , @vTermClient varchar(50)
	    , @vTermClients varchar(50)
	    , @vTermFacility varchar(50)
	    , @vTermFacilities varchar(50)
	    , @vTermAdmission varchar(50)
	    , @vTermAdmissions varchar(50)
	    , @vTermDischarge varchar(50)
	    , @vTermDischarges varchar(50)
	    , @vTermRoom varchar(50)
	    , @vTermRooms varchar(50)
	    , @vTermAdvDirective varchar(50)
	    , @vMRNId int
	    , @vMRNDesc varchar(100)
        , @footer varchar(50)
        , @header varchar(50)

----------Governor and Statistics Variables
Declare  

		@vgsFacCount int
		,@vgsClientCount int
		,@vgsFacID varchar(max)		
		,@vgsClientId varchar(max)
		,@vgsParamName1 varchar(50) --- fields selected
		,@vgsParamValue1 varchar(1500) 
		,@vgsParamName2 varchar(50) ---filters applied
		,@vgsParamValue2 varchar(1500) 

		

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime

DECLARE   @vfil_client_id bit
	    , @vStartDate datetime
		, @vEndDate datetime
		, @XML xml
		, @vfil_integration_enable bit
		, @vSort  varchar(20)
		, @vCopy tinyint 
		, @vCharNewLine char(2)
		, @vReportType varchar(5)
		, @vLocationWithUnit bit='1';
	
CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value varchar(50) );
CREATE TABLE #PRP_Filters (filter_name varchar(100), filter_value varchar(max));

----client Access Varaibles
declare @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

CREATE TABLE #clients( 
		  client_id int
		, client_id_number varchar(35)
		, client_name varchar(200) 
		, client_first_name varchar(100)
		, client_last_name varchar(150)
		, location varchar(500) ----with Facility_name
		, date_of_birth datetime
		, client_address1 varchar(50)
		, client_address2 varchar(50)
		, client_city varchar(75)
		, client_prov_state varchar(20)
		, client_postal varchar(50)
		, sex char(1)
		, bed_id int
		, hasAllergy char(1)
		, hasBed char(1)
		, hasDOB char(1)
		, hasGender char(1)

);

CREATE NONCLUSTERED INDEX _tmp_idx_clients on #Clients(client_id);

CREATE TABLE #PRP_PharmacyOrder	(client_id int ,
								 physician_id int ,
								 pharmacyId int, 
								 phys_order_id int, 
								 trans_status varchar(50),
								 trans_date datetime);


Create Table #tempResult (
		 phys_order_id	int	
		,fac_id	int
		,contact_id int
		,description	varchar(500)
		,drug_strength	varchar	(100)
		,drug_strength_uom	varchar(10)
		,created_date	datetime
		,quantity	varchar(31)
		,quantity_uom	varchar(20)
		,no_of_refills	int	
		,directions	varchar(2000)
		,client_id	int
		,client_id_number	varchar(35)
		,client_first_name	varchar(50)
		,client_last_name	varchar(50)
		,phys_first_name	varchar(50)
		,phys_last_name	varchar(50)
		,long_username	varchar(50)
		,position_desc	varchar(50)
		,designation_desc	varchar(20)
		,dea_number	varchar(13)
		,nadea_number	varchar(9)
		,phys_address1	varchar(35)
		,phys_address2	varchar(35)
		,phys_address3	varchar(35)
		,phys_city	varchar(50)
		,phys_prov_state	varchar(3)
		,phys_postal_zip_code	varchar(15)
		,sup_first_name	varchar(50)
		,sup_last_name	varchar(50)
		,sup_position_desc	varchar(50)
		,sup_designation_desc	varchar(20)
		,sup_dea_number	varchar(13)
		,pharmacyId int
		,trans_status varchar(50)
		,trans_date datetime
		,location  varchar(100)
		,order_date datetime
		,summary varchar(max)
		,registration_code varchar(30)
		,attestation varchar(2800)
			);

BEGIN TRY

    Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	select @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','

	----Parameter Sniffing - use local variables when they are used in a where clause

	SET @vFacID		  = @fac_id;
	SET @vmessage     = replace(@message,'<?xml version="1.0" encoding="UTF-8" standalone="no"?>','');
	SET @vFilterList  = @filter_list;
	SET @visemc       =	@is_emc	;
	SET @vfil_integration_enable =0;
	set @vCharNewLine  = Char(13) + char(10)
	
	
	select @vStep = 2
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@message is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @message=' + isnull(convert(varchar(10),@message),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end
   --select @vmessage
	select @vStep = 5
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Terminoloy' + convert(varchar(26),getdate(),109)
	  Select  
		--@vTermClient = term_client
		  @term_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	 from [dbo].fn_prp_get_terminology(@vFacId,@visemc) ;
	
	 SET @vTermClient=@term_client
	 SET @vTermAdmission=@term_admission;


	
	select @vStep = 20

	INSERT into #PRP_Filters
	Select Left(Items,Charindex('=',Items)-1),right(Items, len(Items)-Charindex('=',Items))  from dbo.Split(@vFilterList,';')

	if @debug_me='Y' 
	select 111,* FROM #PRP_Filters

	if @vCopy is null Set @vCopy = 1;
	if @debug_me='Y' Print @vCopy ;

	select @vStep = 40
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)


	   if Exists( select 1 from #PRP_Filters where filter_name = 'failed')  OR
			Exists( select 1 from #PRP_Filters where filter_name = 'success')
	   BEGIN
		   Select  @vStartDate		= Left(filter_value,Charindex(@vDelim,filter_value)-1)
			     , @vEndDate		= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))  
		   from #PRP_Filters where filter_name in ('failed','success'); 	 
	   END 

	  
	if isDate(@vEndDate) = 1 Set @vEndDate = @vEndDate + 1 ;

	 if Exists( select 1 from #PRP_Filters where filter_name = 'sort_by') 
	   BEGIN
		   Select  @vSort		= filter_value 
		   from #PRP_Filters where filter_name in ('sort_by'); 	 
	   END 
	IF @vSort IS NULL SET @vSort='client_name';


	 if Exists( select 1 from #PRP_Filters where filter_name = 'report_type') 
	   BEGIN
		   Select  @vReportType		= filter_value 
		   from #PRP_Filters where filter_name in ('report_type'); 	 
	   END 

	   if @debug_me='Y' select 'filter_list' name,@vReportType reportType,@vSort sortBy, @vStartDate startdate,@vEndDate enddate


	select @vStep = 45;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';
	
	
	Select @vClientIDs = @client_id

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'
    	Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END

	if @debug_me='Y' SELECT * FROM #PRP_Multi_Filters

	----- transmission datat
	SET @xml =@vmessage;

	INSERT INTO #PRP_PharmacyOrder (client_id, physician_id, pharmacyId, phys_order_id, trans_status, trans_date)
	select po.client_id,po.physician_id,
	  case when x2.value('vendorPharmacyId[1]','int')=po.pharmacy_id then po.pharmacy_id else po.pharmacy_id end	as pharmacyId
	 ,x2.value('pccOrderId[1]','int')	as phys_order_id
	 ,x2.value('transmissionStatus[1]','varchar(25)') tras_Status
	 ,x2.value('transmissionDate[1]','datetime')  tras_Date
	 from  @XML.nodes('/pharmacyOrderMessageType/subscriptionList') AS ParamValues(x2)
	  inner join pho_phys_order po 
	   on po.phys_order_id=x2.value('pccOrderId[1]','int')
	  left join #PRP_Multi_Filters fil_client_id		
	   on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = po.client_id
	 where po.fac_id = @vFacID  
	 AND ((@vfil_client_id	= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null );


	if @debug_me='Y'  	select * from #PRP_PharmacyOrder
	-----getting the list of clients
	select @vStep = 50
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of clients ' + convert(varchar(26),getdate(),109)
	--if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(	  client_id 
			, client_id_number
			, client_name 
			, client_first_name
			, client_last_name
			, sex
			, date_of_birth
			, client_address1 
			, client_address2
			, client_city 
			, client_prov_state 
			, client_postal 
			, bed_id
			, hasallergy
			, hasbed
			, hasdob
			, hasgender
			, location

		)
		select distinct  c.client_id,	c.client_id_number
			, rtrim( ltrim(rtrim(isnull(m.first_name,'')))  + ' ' + ltrim(rtrim(isnull(m.last_name,''))) )
				as client_name
			, rtrim( ltrim(rtrim(isnull(m.first_name,''))))
			, ltrim(rtrim(isnull(m.last_name,'')))
			, m.sex
			, m.date_of_birth ---- Case when m.date_of_birth is not null then datediff(year,m.date_of_birth, @vReportDate) else null end as client_age
			, m.address1 
			, m.address2 
			, m.city 
			, m.prov_state 
			, m.postal_zip_code 
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 
		, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
		from ( Select po.client_id, mpi_id, client_id_number from dbo.clients  with (nolock) 
		inner join #PRP_PharmacyOrder po on po.client_id=clients.client_id
				--left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				
				where clients.fac_id = @vFacID  and clients.deleted = 'N' 
					--AND ((@vfil_client_id	= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id	
		inner JOIN dbo.clients_attribute cla WITH (NOLOCK )
				ON cla.client_id = c.client_id 
		inner join ( Select client_id, bed_id, payer_type,row_num from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type is null or record_type = 'C'))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id ;

				

		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	

	if @debug_me='Y'  select 333,* from #Clients

	select @vStep = 55
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' getting list of orders ' + convert(varchar(26),getdate(),109)


	
	INSERT INTO #tempresult	 
	    (phys_order_id		
		,fac_id	
		,contact_id 
		,description	
		,drug_strength	
		,drug_strength_uom	
		,created_date	
		,quantity	
		,quantity_uom	
		,no_of_refills		
		,directions	
		,client_id	
		,client_id_number	
		,client_first_name	
		,client_last_name	
		,phys_first_name	
		,phys_last_name	
		,long_username	
		,position_desc	
		,designation_desc	
		,dea_number	
		,nadea_number	
		,phys_address1	
		,phys_address2	
		,phys_address3	
		,phys_city	
		,phys_prov_state	
		,phys_postal_zip_code	
		,sup_first_name
		,sup_last_name	
		,sup_position_desc	
		,sup_designation_desc	
		,sup_dea_number	
		,pharmacyId 
		,trans_status 
		,trans_date 
		,location
		,order_date
		,summary
		,registration_code
		,attestation)
	  select 
		   pos.phys_order_id
		  ,pos.fac_id	
		  ,pos.physician_id
		  ,pos.drug_name+' '+isnull(pos.form,'')  description	
		  ,pos.drug_strength	
		  ,pos.drug_strength_uom
		  ,pos.created_date	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then qinf.quantity   -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.quantity   -- discharge signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then qinf.quantity   --  pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.quantity   -- signature  order
		   end quantity	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then qinf.unit_of_measure   -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.quantity_uom   -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then qinf.unit_of_measure   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.quantity_uom   -- signed order
		   end quantity_uom	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then qinf.no_of_refills  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.no_of_refills   -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then qinf.no_of_refills   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.no_of_refills   -- signed order
		    end no_of_refills	
		  ,null directions	
		  ,clients.client_id	
		  ,clients.client_id_number	
		  ,clients.client_first_name	
		  ,clients.client_last_name	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then physician.first_name  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_first_name   -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then physician.first_name   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_first_name   -- signed order
		    end phys_first_name	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then physician.last_name  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_last_name   -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then physician.last_name   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_last_name   -- signed order
		    end phys_last_name
		  ,po.long_username

		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then phys_position.item_description   -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.position_desc  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then phys_position.item_description   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.position_desc   -- signed order
		    end position_desc

		  , case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then ltrim(rtrim(isnull(staff.designation,phys_desig.item_description)))  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.designation_desc  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then ltrim(rtrim(isnull(staff.designation,phys_desig.item_description)))   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.designation_desc   -- signed order
		    end 	designation_desc
		 
		  , case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then   dea.dea_number-- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.dea_number  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  dea.dea_number   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.dea_number   -- signed order
		    end dea_number	
		  ,
		  case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then dea.nadea_number  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.nadea_number  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then dea.nadea_number   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.nadea_number   -- signed order
		    end nadea_number	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.address1  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_address1  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then addres.address1   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_address1   -- signed order
		    end phys_address1	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.address2  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_address2  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then addres.address2   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_address2   -- signed order
		    end phys_address2	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.address3  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_address3  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then addres.address3   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_address3   -- signed order
		    end phys_address3	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.city  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_city  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then addres.city   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_city   -- signed order
		    end phys_city
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.prov_state  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_prov_state  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then addres.prov_state   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_prov_state   -- signed order
		    end phys_prov_state	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then addres.postal_zip_code  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.phys_postal_zip_code  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  addres.postal_zip_code  -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.phys_postal_zip_code   -- signed order
		    end phys_postal_zip_code	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then super.first_name  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.sup_first_name  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  super.first_name  -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.sup_first_name   -- signed order
		    end sup_first_name	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then super.last_name  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.sup_last_name  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  super.last_name  -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.sup_last_name   -- signed order
		    end sup_last_name	
		  ,
		  case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then super_position.item_description  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.sup_position_desc  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  super_position.item_description  -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.sup_position_desc   -- signed order
		    end sup_position_desc	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then isnull(sup_staff.designation,super_desig.item_description)  -- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.sup_designation_desc  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  isnull(sup_staff.designation,super_desig.item_description)  -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.sup_designation_desc   -- signed order
		    end sup_designation_desc	
		  ,case 
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then   sup_dea.dea_number-- discharge pending signature order
		    when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then po.sup_dea_number  -- discharge signature	order
		    when (posnap.phys_order_id is null and po.phys_order_id is null ) then  sup_dea.dea_number   -- pending signature order
		    when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then po.sup_dea_number   -- signed order
		    end sup_dea_number
		  ,OrderId.pharmacyId 
		  ,OrderId.trans_status 
		  ,OrderId.trans_date 
		  ,clients.location 
		  , case when @vReportType='ep' OR @vReportType='orders' then pos.order_date else null end order_date
		  ,pos.description + ' ' + replace ( replace( replace ( replace ( replace( replace( isnull(' ' + ltrim(Stuff(isnull(OrderSumm.order_summary,''),1,5,'')),'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
	      ,case
            when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then staff.registration_code  -- discharge pending signature order
            when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then contact_snapshot.registration_code  -- discharge signature order
            when (posnap.phys_order_id is null and po.phys_order_id is null ) then staff.registration_code   -- pending signature order
            when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then contact_snapshot.registration_code   -- signed order
            end registration_code
          ,case
               when (posnap.phys_order_id is NOT null and po.phys_order_id is null ) then
                   case when attestation.is_controlled_medication = 1 then fac_attestation.ctrl_medication_value else fac_attestation.non_ctrl_medication_value end  -- discharge pending signature order
               when (posnap.phys_order_id is NOT null and po.phys_order_id is not  null ) then order_snapshot_CDN.quantity_attestation  -- discharge signature	order
               when (posnap.phys_order_id is null and po.phys_order_id is null ) then
                   case when attestation.is_controlled_medication = 1 then fac_attestation.ctrl_medication_value else fac_attestation.non_ctrl_medication_value end -- pending signature order
               when (posnap.phys_order_id is null and po.phys_order_id is not  null ) then order_snapshot_CDN.quantity_attestation   -- signed order
          end attestation

	 from view_prp_pho_phys_order_schedule  pos with (nolock)
	    inner JOIN #PRP_PharmacyOrder OrderId  with (nolock)
		  on OrderId.phys_order_id=pos.phys_order_id
	    INNER JOIN #clients clients  with (nolock) 
				 ON clients.client_id=pos.client_id 	
	    left join view_pho_esignature po with (nolock)	-- signed order
	      on po.phys_order_id=pos.phys_order_id
	    left join pho_phys_order_discharge_snapshot posnap	with (nolock) -- discharge order
	       on posnap.phys_order_id =pos.phys_order_id
	    left join dbo.contact physician with (nolock ) on physician.contact_id =  pos.physician_id
	    left join contact_address cadd  with (nolock ) on cadd.contact_id=  physician.contact_id
	    left join address addres with (nolock ) on addres.address_id=cadd.address_id

	    left join dbo.pho_phys_order_quantity_info qinf with (nolock) on  qinf.phys_order_id=pos.phys_order_id

	    left outer join dbo.staff  with (nolock) on physician.contact_id=staff.contact_id
	    
	    left join dbo.common_code phys_desig with (nolock ) on phys_desig.item_id = staff.profession_id and phys_desig.item_code = 'profe'
	    left join dbo.common_code phys_position with (nolock ) on phys_position.item_id = staff.position_id and phys_desig.item_code = 'posit'
	    left join dbo.mp_dea_assignment  dea  with (nolock ) on dea.contact_id= staff.contact_id and dea.fac_id = @vFacId
	    left join dbo.contact super with (nolock ) on super.contact_id =  dea.supervisor_contact_id
	    left outer join dbo.staff sup_staff  with (nolock) on super.contact_id=sup_staff.contact_id
	    left join dbo.common_code super_desig with (nolock ) on super_desig.item_id = sup_staff.profession_id and super_desig.item_code = 'profe'
	    left join dbo.common_code super_position with (nolock ) on super_position.item_id = sup_staff.position_id and super_position.item_code = 'posit'
	    left join dbo.mp_dea_assignment  sup_dea  with (nolock ) on sup_dea.contact_id= sup_staff.contact_id and sup_dea.fac_id = @vFacId
	    left join dbo.pho_phys_order_attestation attestation with (nolock ) on attestation.phys_order_id = pos.phys_order_id
	    left join dbo.facility_medical_attestation fac_attestation with (nolock ) on fac_attestation.facility_medical_attestation_id = attestation.facility_medical_attestation_id
	    left join dbo.pho_phys_order_esignature_contact_snapshot contact_snapshot on contact_snapshot.contact_id = pos.physician_id
	    left join dbo.pho_phys_order_esignature_order_snapshot_CDN order_snapshot_CDN on order_snapshot_CDN.phys_order_id = pos.phys_order_id
	    Cross Apply (	Select order_summary.value('.','varchar(max)') as order_summary from
								( 
									Select   Case when pos.schedule_template = '3' then ' THEN ' else ' AND ' end + isnull(directions,'')  
										from dbo.view_prp_pho_phys_order_schedule ppo with (nolock)	
										where ppo.phys_order_id = pos.phys_order_id
										order by ppo.order_schedule_id
										FOR XML PATH (''), TYPE
								) a ( order_summary )
					) OrderSumm;
	
  	Set @vgs_fill_end_time  = getdate() ; -- fill end time

	if (select count(1) from #tempresult)=0
	Begin
		Set @status_code = 2 ; ----Set it warning
		 Raiserror( ' 0 rows Received', 11, 1 );
	End 
	 

	
	select @vStep = 70
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)

;with tbBase
	as (	
		Select distinct	 
	      @vFacID as fac_id
		, o.contact_id physician_id
		, o.dea_number dea_number
		, o.nadea_number nadea_number
		, isnull( o.phys_first_name,'')  + isnull(' ' + o.phys_last_name,'')   as physician
		, case when isnull( o.designation_desc,'')<>'' then COALESCE(', '+ o.designation_desc, '') else '' end	 as physician_designation
		, CASE WHEN LTRIM(RTRIM(ISNULL(o.phys_address1,'')))<>'' THEN  LTRIM(RTRIM(o.phys_address1))  ELSE '' END
		  + CASE WHEN LTRIM(RTRIM(ISNULL(o.phys_address2,'')))<>'' then COALESCE(' '+ ltrim(rtrim(o.phys_address2)), '') else '' END
		  + CASE WHEN LTRIM(RTRIM(ISNULL(o.phys_address3,'')))<>'' then COALESCE(' '+ ltrim(rtrim(o.phys_address3)), '') else '' END 	phys_address  

		, CASE WHEN LTRIM(RTRIM(ISNULL(o.phys_city ,'')))<>''    THEN  LTRIM(RTRIM(ISNULL(o.phys_city ,''))) ELSE '' END	 phys_city
		, CASE WHEN   LTRIM(RTRIM(ISNULL(o.phys_prov_state,'')))<>''  THEN LTRIM(RTRIM(ISNULL(o.phys_prov_state,''))) else '' end phys_prov_state
		, CASE WHEN  LTRIM(RTRIM(ISNULL(o.phys_postal_zip_code,'')))<>''  then LTRIM(RTRIM(ISNULL(o.phys_postal_zip_code,''))) else '' end phys_postal_zip_code 

		, isnull( o.sup_first_name,'')  + isnull(' ' + o.sup_last_name,'') 	supervisor
		, case when isnull( o.sup_designation_desc,'')<>'' then COALESCE(', '+ o.sup_designation_desc, '')	else '' end as supr_designation
		, o.sup_dea_number supervisor_dea_number
		, convert(varchar,o.client_id)		as client_id_str --- required for building group id 
		, c.client_name 
		, case when o.order_date is not null then convert(char(10),o.order_date,101)	else null end		 as order_date
		, convert(char(10),o.created_date,101)			 as created_date
		,Convert(varchar,case when c.date_of_birth is not null then 
		    case 
			when ((MONTH(c.date_of_birth) * 100) + DAY(c.date_of_birth)) > ((MONTH(getdate()) * 100) + DAY(getdate())) then DATEDIFF(year,c.date_of_birth,getdate()) - 1
			else DATEDIFF(year,c.date_of_birth,getdate()) End 
			end) As client_age

		--, Convert(varchar, Case when c.date_of_birth is not null then datediff(year,c.date_of_birth, o.order_date) else null end ) as client_age -- as per our BA age is calculated when the order date and not on the current date
		, convert(char(10), c.date_of_birth, 101) as date_of_birth
		, c.sex as client_gender
		, fac.name as facility_name
		
		, fac.address1 as fac_address1
		, fac.address2 as fac_address2
		, fac.city as fac_city
		, fac.prov as fac_prov
		, fac.tel  as fac_tel
		, fac.pc as fac_pc
		, c.client_address1 
		, c.client_address2
		, c.client_city 
		, c.client_prov_state 
		, c.client_postal 
		, c.location
		, o.summary order_summary
		  
		 , case when ltrim(rtrim(o.quantity))<>'' then o.quantity else null end quantity
		 , case when ltrim(rtrim(o.quantity_uom))<>'' then o.quantity_uom else null end unit_of_measure
		 , case when ltrim(rtrim(o.no_of_refills))<>'' then o.no_of_refills else null end no_of_refills
		, o.phys_order_id -----phys_order_id  is for QA testing only
		, CASE WHEN cntr.phys_order_id=o.phys_order_id AND mp.message_profile_id=cntr.message_profile_id AND mp.ext_fac_id=o.pharmacyId THEN message_control_id ELSE NULL END message_control_id
		,o.pharmacyId
		,case when o.pharmacyId=0 and disorder.phys_order_id is not null then disorder.organization_name else ext_fac.name end pharmacy_name  
		,o.trans_status
		,case when o.trans_date is not null and o.trans_date<>'' then
		    isnull(convert(char(10),o.trans_date,101) + ' '+  CONVERT(CHAR(5),o.trans_date,114),'') else null end trans_date
		,num
		,o.registration_code registration_code
		,o.attestation attestation

		From  #tempresult o with (nolock )
		inner join #Clients c on c.client_id = o.client_id
		inner join dbo.facility fac with (nolock) on fac.fac_id=@vFacId
		left outer join dbo.emc_ext_facilities ext_fac with (NOLOCK) on  ext_fac.ext_fac_id=o.pharmacyId
		left join message_profile mp on mp.ext_fac_id=o.pharmacyId
		left join pho_phys_order_outbound_message_control cntr on cntr.phys_order_id=o.phys_order_id AND mp.message_profile_id=cntr.message_profile_id
		left outer join pho_phys_order_discharge_snapshot disorder with (NOLOCK) on  disorder.phys_order_id=o.phys_order_id
		Inner join dbo.pcc_num_sequence num with (nolock)
			on num.num <= @vCopy
	 )
	 ,  tbWithSort
	as
	(
		-- this report does not require sorting, setting all of them to null
		Select fac_id
			  ,  physician +  physician_designation as physician_designation
			  , dea_number
			  , nadea_number
			  , case when ltrim(rtrim(phys_address))<>'' then  phys_address
			    + case when phys_city<>'' then 	 COALESCE(', '+phys_city , '') 
					+ case when  phys_prov_state<>'' then COALESCE(', '+phys_prov_state , '') 
					    + case when  phys_postal_zip_code<>'' then  COALESCE(' '+phys_postal_zip_code , '')  else '' end
					  else '' end
				  else 
				       case when  phys_prov_state<>'' then COALESCE(', '+phys_prov_state , '')
				          + case when  phys_postal_zip_code<>'' then  COALESCE(' '+phys_postal_zip_code , '')  else '' end
				       else case when  phys_postal_zip_code<>'' then  COALESCE(' '+phys_postal_zip_code , '')  else '' end 
				  end
				  end
			  	
			    else 
				  case when phys_city<>'' then phys_city else '' end +
				  case when  phys_prov_state<>'' then phys_prov_state
				  	 + case when  phys_postal_zip_code<>'' then COALESCE(' '+phys_postal_zip_code , '') else '' end
				    else  case when  phys_postal_zip_code<>'' then COALESCE(' '+phys_postal_zip_code , '') else '' end end
				  
				end  physician_address
			  , supervisor+supr_designation	 supervisor
			  , supervisor_dea_number
			  , client_name
			  , order_date
			  , created_date
			  , client_age
		      , client_gender
			  , date_of_birth
			  , upper(facility_name) as facility_name
			  
			  , fac_address1
			  , fac_address2
			  , fac_city
			  , fac_prov
			  , fac_tel
			  , fac_pc
			  , client_address1 client_address1 
			  , client_address2 client_address2
			  , client_city client_city 
			  , client_prov_state client_prov_state 
			  , client_postal client_postal 
			  , order_summary as order_summary_related_generic
			  ,	quantity
			  ,	unit_of_measure
			  ,	no_of_refills
			  , phys_order_id
			  ,message_control_id
			  , pharmacy_name
			  , trans_status
			  , trans_date
	      , cast(num as varchar) + '_' + 
			 Case when @vSort = 'physician_name' then
					convert(varchar, tbBase.physician_id)  +  '_'  + tbBase.client_id_str     
				  else 
					tbBase.client_id_str  +  '_'  + convert(varchar, tbBase.physician_id ) 
				end 
				
				as p_set_id
		,
		case when  @vReportType='ep' then
		DENSE_RANK() OVER ( ORDER BY num,
								 Case when @vSort='client_name' then client_name 
								      when @vSort='physician_name' then tbBase.physician+' '+client_name end , 
								    case when   @vSort='trans_date' then tbBase.trans_date
								    end desc,tbBase.order_summary--,physician_name
								
							)
		else 
		 DENSE_RANK() OVER ( ORDER BY num
								, Case when @vSort = 'physician_name' then tbBase.physician
									    else tbBase.client_name
									end 
								
								, Case when @vSort = 'physician_name' then tbBase.client_name
									    else tbBase.physician
									end 
								, Case when @vSort = 'physician_name' then tbBase.physician_id
									    else cast(tbBase.client_id_str as int)
									end 
								, Case when @vSort = 'physician_name' then cast(tbBase.client_id_str as int)
									    else tbBase.physician_id
									end 
								
								,tbBase.trans_date, tbBase.order_summary
							) 
			 end as row_num  
		  , NULL as P1
		  , NULL as P2
		  , NULL as P3
          , registration_code
          , attestation
		from tbBase
	)
		  
	Select
		 fac_id
		, isnull(physician_designation ,'')  physician_designation
		, isnull(dea_number,'') dea_number
		, isnull(nadea_number ,'')  nadea_number
		, isnull(physician_address,'')  physician_address
		, isnull(supervisor,' ')	supervisor
		, isnull(supervisor_dea_number ,' ') supervisor_dea_number
		, client_name
		--, order_date
		, created_date
		, isnull(client_age,'') client_age
		, isnull(client_gender ,'') client_gender
		, isnull(date_of_birth ,'')  date_of_birth
		, isnull(facility_name ,'')  facility_name
		
		, isnull(fac_address1 ,'') fac_address1
		, isnull(fac_address2,'')  fac_address2
		, isnull(fac_city,'')  fac_city
		, isnull(fac_prov,'') fac_prov
		, isnull(fac_tel ,'')  fac_tel
		, isnull(fac_pc ,'')  fac_pc
		, isnull(client_address1 ,'')	client_address1
		, isnull(client_address2	,'')	client_address2
		, isnull(client_city  ,'')  client_city
		, isnull(client_prov_state ,'') client_prov_state
		, isnull(client_postal ,'')client_postal	
		, order_summary_related_generic
		, isnull(quantity,'')  quantity
		, unit_of_measure	unit_of_measure
		, no_of_refills  no_of_refills
		, phys_order_id
		, message_control_id
		, pharmacy_name
		, trans_status
		, trans_date
		,order_date
		, row_num
		, @vTermClient
	 , Case when row_num =1 then @status_code else NULL  end as status_code
	 , Case when row_num =1 then @status_text else NULL  end as status_text
	, isnull(registration_code ,'')  registration_code
    , isnull(attestation ,'')  attestation

   	from tbWithSort
	Order by row_num



	if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + ' ' + convert(varchar(26),getdate(),109);


END TRY 

BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 


	Select 
		NULL fac_id
		,NULL physician_designation
		,NULL dea_number
		,NULL nadea_number
		,NULL physician_address
		,NULL supervisor
		,NULL supervisor_dea_number
		,NULL client_name
		--, order_date
		,NULL created_date
		,NULL client_age
		,NULL client_gender
		,NULL date_of_birth
		,NULL facility_name
		,NULL fac_address1
		,NULL fac_address2
		,NULL fac_city
		,NULL fac_prov
		,NULL fac_tel
		,NULL fac_pc
		,NULL client_address1 
		,NULL client_address2
		,NULL client_city 
		,NULL client_prov_state 
		,NULL client_postal 	
		,NULL order_summary_related_generic
		,NULL quantity
		,NULL unit_of_measure
		,NULL no_of_refills
		,NULL phys_order_id
		,NULL message_control_id
		,NULL pharmacy_name
		,NULL trans_status
		,NULL trans_date
		,NULL row_num
		,@vTermClient
		, (case WHEN charindex('getorderstatus',@status_text)>0 THEN 0 else @status_code END) as status_code
		, @status_text as status_text
        ,NULL registration_code
        ,NULL attestation
		

	

END CATCH 

RETURN 

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_rl_electronic_prescription_report   to PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_electronic_prescription_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_electronic_prescription_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_order_listing_clinical_chart_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*-- ============================================================================== 
-- PCC-83339       :   script to create sproc_prp_rl_order_listing_clinical_chart_report Procedure  
--						-- 
-- Written By:          H Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_order_listing_clinical_chart_report Procedure for Clinical Chart 
-- 
-- Special Instruction: 
-- 
--=================================================================================

Revision History:
-- DATE			NAME				JIRA        VERSION		DESCRIPTION
-- 2015-10-07	     H. Ehghaghi		PCC-83339   3.7.8.1		Initial creation
-- 2015-10-16	     H. Ehghaghi		PCC-83339   3.7.8.1		Fixed order summary issue
-- 2015-11-23	     Dom Christie		PCC-85633   3.7.8.2		Filtering out the Discharge order based on classid=2
-- 2016-08-18		 Rick Penton		PCC-97510	3.7.10.2	Change report sort sequence
-- 2021-01-10        Sree Nagha (naghas) CORE-98327  4.4.9   Update sproc to use SOP Drug Library Topclasses data instead of MMDB
-- ================================================================================= */
 
IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_order_listing_clinical_chart_report' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_order_listing_clinical_chart_report
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO



Create Procedure dbo.sproc_prp_rl_order_listing_clinical_chart_report

  @report_id int 
, @fac_id int
, @is_emc  bit = '0'
--, @env varchar(5) = 'USAR'
, @field_list varchar(max)   = NULL --- which fields to display ( CSV of report_column_ids), it does not send the fields which are not over-writable
, @filter_list varchar(max)  = NULL --- which filters are on ( list of filtername=CSV of Selected ids from value_list for eg 'order_category=3022,3023;communication_method=3025;'
, @sort_list varchar(max)    = NULL --- which are the sort ( list of report_sort_level_id = report_sort_by_id ; report_sort_level_id = report_sort_by_id )
, @execution_user_login varchar(60)
, @all_top_drug_classification	XML
, @rows_returned int out
, @debug_me char(1)  = '0'
, @status_code int  out 
, @status_text varchar(3000) out
/********************************************************************************
							

Sample Execution Script:
---Select * from prp_report_column

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_rl_order_listing_clinical_chart_report
 @report_id =  '-9999'--'-13' 
,@fac_id =  '1' 
,@field_list =  '' 
,@filter_list =  'client_id=360357;client_unit=-1;client_floor=-1;client_status=0;pho_order_date_range=08/01/2013,09/30/2015;pho_order_category=3028,3031;pho_order_status=1,3,2,5,8,9,4;pho_include_admin_order=1'
,@sort_list =  '0=-1' 
,@execution_user_login =  '_system_' 
,@rows_returned = null
,@debug_me = 'n'
,@status_code = null
,@status_text = null
Select @rows_ret, @statuscode int, @statustext

**********************************************************************************/


as
Begin


SET NOCOUNT ON;


BEGIN

--declare Standard local variables required for any store proc
DECLARE  @vStep int
		,@vErr varchar(max)
		,@vdelim char(1)
		,@vdelims char(1)
		,@vCharNewLine  char(2)
	     ,@vSeparator char(6)
		,@vReportDate datetime
		,@vRowCount int

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

Declare @vFacEMAREnabled char(1) -----match Administration_record_id with Alt_administration_id if notEMAREnabled


----Local Variables
DECLARE @vReportId int
	, @vFieldList varchar(max)
	, @vFilterList varchar(max)
	, @vSortList varchar(max)
     , @vGroupList varchar(max)
	, @vFacId int
	, @visemc bit
	, @venv varchar(20)
	, @vSP_ClientId int
	, @vEnableSignature char(1)
	, @vMaxLineLength	int
;
----------Governor and Statistics Variables
DECLARE @vgsClientCount        INT,
        @vGeneric_statuscode   INT,
        @vGeneric_statustext   VARCHAR(3000),
        @vGetStatus_statuscode INT,
        @vGetStatus_statustext VARCHAR(3000);

-----Governor and Statistics Variables 
Declare     @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC 
DECLARE @term_admission    VARCHAR(50),
        @term_client       VARCHAR(50),
        @vTermClient       VARCHAR(50),
        @vTermClients      VARCHAR(50),
        @vTermFacility     VARCHAR(50),
        @vTermFacilities   VARCHAR(50),
        @vTermAdmission    VARCHAR(50),
        @vTermAdmissions   VARCHAR(50),
        @vTermDischarge    VARCHAR(50),
        @vTermDischarges   VARCHAR(50),
        @vTermRoom         VARCHAR(50),
        @vTermRooms        VARCHAR(50),
        @vTermAdvDirective VARCHAR(50)	    ,
        ----MRN Variables for header
        @vMRNId            INT,
        @vMRNDesc          VARCHAR(100);
 
-----variables for each column in the report
DECLARE @vColWidth             VARCHAR(MAX),
        @vSort1                VARCHAR(100),
        @vSort2                VARCHAR(100),
        @vSort3                VARCHAR(100),
        @vSort4                VARCHAR(100)		, --- max of four sort level
	   @vP1				 varchar(50),--   page level group 1 column name
	   @vP1_disp_name         varchar(100),    --- display name for group header 0/3
	   @vG1			      varchar(50),
	   @vG1_disp_name         varchar(100) ,
	   @vPID				 varchar(50),
	   @vGID				 varchar(50),
        ---data intensive columns flag
        @vOrderSummary         BIT		, -----desc + directions for all schedules
        @vOrderScheduleSummary BIT		, -----desc + directions at schedule level
        @vOrderDesc            BIT
        ,   ---- only desc
        @vLocationWithUnit     BIT,
        @vIncludeAdminOrder    BIT,
	   @vInitialBlankIncluded bit;
		
		

		

----date filters are different to store the ON/AFTER/BEFORE/NODATE and date
DECLARE @vfil_client_id                 BIT,
        @vfil_client_status             SMALLINT	, -- one value at a time
        @vfil_floor                     BIT,
        @vfil_administration_record     BIT	,  ---- all types of admin record and its sub sets are using this one variable
        @vfil_communication_method      BIT,
        @vfil_order_category            BIT,

        @vfil_order_date_type           VARCHAR(10),
        @vfil_order_date                DATETIME,
        @vfil_order_date2               DATETIME,

        @ICDDate                        DATETIME,

        @vfil_admin_order_date_range    VARCHAR(100)	,  ---custom_order_date_range introduce to handle new order summary listing
        @vfil_admin_order_date_range_d1 DATETIME,
        @vfil_admin_order_date_range_d2 DATETIME,

        @vfil_order_status              BIT,
        @vfil_order_status_strikeout    BIT,
        @vfil_schedule_template         BIT,
        @vfil_unit                      BIT,
        @vfil_admin_record_emar         INT;      ---- where admin_record has show_on_mar = 'y'
	
    
DECLARE @tsql   VARCHAR(2000),
        @header VARCHAR(MAX);

DECLARE @vReturn VARCHAR(MAX),
        @vline1  VARCHAR(MAX),
        @vline2  VARCHAR(MAX),
        @vline3  VARCHAR(MAX),
        @vline4  VARCHAR(MAX),
        @vline5  VARCHAR(MAX),
        @vline6  VARCHAR(MAX),
        @vline7  VARCHAR(MAX),
        @vline8  VARCHAR(MAX);


CREATE TABLE #PRP_Multi_Filters( filter_name varchar(50), filter_value int );


Create table #PRP_Filters (filter_name varchar(100), filter_value varchar(max));
Create table #PRP_Report_Metadata_FieldstoDisplay (col_seq tinyint, column_name varchar(100), column_width smallint, output_sequence decimal(6,3), display_name varchar(200) );
Create table #PRP_Report_Metadata_Grouping (group_level varchar(10), column_name varchar(100), display_name varchar(200), ref_report_sort_by_id int );
Create table #PRP_Report_Metadata_Sorting (seq tinyint, sort_by_name varchar(100));


Create table #PRP_drug_severity_level (severity varchar(50), severity_id varchar(10));
CREATE table #Prp_drug_warning (phys_order_id int, warning_desc varchar(900))



CREATE TABLE #PRP_Orders ( 
			 administered_by_id int
			, alter_med_src int
			, client_id int
			, communication_method int
			, completed_by varchar(60)
			, completed_date datetime
			, confirmed_by varchar(60)
			, confirmed_by_long_username varchar(50)
			, confirmed_date datetime
			, created_by varchar(60)
			, reviewed_by varchar(60)
			, reviewed_date datetime
			, reviewed_by_long_username varchar(50)
			, signed_by varchar(60)
			, signed_date datetime
			, signed_by_long_username varchar(50)
			, created_by_long_username varchar(50) 
			, created_date datetime
			, diet_supplement_desc varchar(260)
			, diet_texture_desc varchar(260)
			, diet_type_desc varchar(260)
			, directions varchar(2600) 
			, discontinued_date datetime
			, end_date datetime
			, fac_id int
			, fluid_consistency_desc varchar(260)
			, hold_date datetime
			, hold_date_end datetime
			, indications_for_use varchar(250)
			, order_category_id int
			, order_date datetime
			, order_desc varchar(1200)
			, order_status smallint

			, order_relationship smallint

			, order_summary nvarchar(max) ----concatenating all schedules order summary

			, order_type_id int
			, pharmacy_id int
			, phys_order_id int
			, physician_id int
			, related_diagnoses varchar(400)
			, related_generic varchar(250)
	
			, resume_date datetime
			, revision_by varchar(60)
	 		, revision_by_long_username varchar(50)
			, revision_date datetime
			, route_of_admin varchar(260)
			, schedule_template tinyint
			, [start_date] datetime
			, std_order_id int
			, supplementary_notes varchar(2600) ---- addditional directions
			, supply_order_date		    datetime
			, supply_last_order_date	datetime
			, supply_last_reorder_date  datetime
			, supply_reorder char(1)
			
			---Lab report
			, std_freq_id int
			, schedule_date datetime

			--Med Admin Audit Report
			, documented_date datetime --- isnull(psd.effective_date,psd.perform_date)
			, documented_by	varchar(60)	--- perform_by 

			, administered_date datetime
			, order_verified char(1)
			, active_flag char(1)
               , controlled_substance_code int
			, order_schedule_id int
			, drug_warning varchar(max)
			, Esigned_flag char(1)

);

CREATE TABLE #tempResult(phys_order_id             INT,
                         fac_id                    INT,
                         client_id                 INT,
                         order_verified            VARCHAR(1),
                         active_flag               CHAR(1),
                         draft                     BIT,
                         hold_date                 DATETIME,
                         hold_date_end             DATETIME,
                         end_date                  DATETIME,
                         discontinued_date         DATETIME,
                         order_category_id         INT,
                         controlled_substance_code INT); 



CREATE TABLE #PRP_Holds(phys_order_id         INT,
                        effective_date        DATETIME,
                        ineffective_date      DATETIME,
                        admin_order_status    VARCHAR(50),
                        order_relationship_id INT,
                        reason                VARCHAR(500),
                        ordered_by            VARCHAR(200));

CREATE TABLE #PRP_PhoOrderStatus(phys_order_id      INT,
                                 fac_id             INT,
                                 order_status       SMALLINT,
                                 order_relationship INT,
                                 status_reason      VARCHAR(75));
----client Access Varaibles
DECLARE @client_id varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted


CREATE TABLE #clients(client_id           INT,
                      client_name         VARCHAR(200),
                      admission_date      VARCHAR(10),
                      discharge_date      VARCHAR(10),
                      deceased_date       VARCHAR(10),
                      allergy             VARCHAR(1000),
                      location            VARCHAR(500),
                      date_of_birth       VARCHAR(10),
                      client_physician_id VARCHAR(15)		, --- required for building grouping id 
                      client_physician    VARCHAR(100),
                      client_pharmacy     VARCHAR(75),
                      mrn_number          VARCHAR(50),
                      client_id_number    VARCHAR(35),
                      pho_assignment_id   INT,
                      assignment          VARCHAR(15)		,  -----this is used for Med Admin audit report
                      sex                 CHAR(1),
                      bed_id              INT,
                      hasAllergy          CHAR(1),
                      hasBed              CHAR(1),
                      hasDOB              CHAR(1),
                      hasGender           CHAR(1));


CREATE CLUSTERED INDEX _temp_prp_filters_idx on #PRP_Multi_Filters( filter_name, filter_value) ;

CREATE CLUSTERED INDEX _tmp_idx_prp_clients on #clients(client_id);

CREATE CLUSTERED INDEX _temp_PRP_PhoOrderStatus_idx on #PRP_PhoOrderStatus( phys_order_id ) ;


DECLARE @tpmAllTopDrugClassification TABLE (
		classid varchar(10),
		descdisplay varchar(65)
);

BEGIN TRY

    insert into @tpmAllTopDrugClassification
    select classid, descdisplay from fn_xmlToDrugClassification(@all_top_drug_classification);

     Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;
	SET @vStep = 0
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vdelim = ','
	set @vdelims = ';'
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';
	set @vMaxLineLength= 145;


	----Parameter Sniffing - use local variables when they are used in a where clause
	SET @vReportId    = @report_id;
	SET @vFacID		  = @fac_id;
	SET @vReportDate  = @vgs_start_time ; ---curent time
	SET @vFieldList   = @field_list;
	SET @vFilterList  = @filter_list;
	SET @visemc		  = @is_emc
	--SET @venv		  = @env
	SET @vSortList	  = @sort_list;
	
	
	select @vStep = 1
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

	----Validate all input parameters
	if (
		@report_id is null 
		or @fac_id is NULL 
		or @execution_user_login is null
		)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ' @fac_id=' + isnull(convert(varchar(10),@fac_id),'null/empty')
					+  ' @report_id=' + isnull(convert(varchar(10),@report_id),'null/empty')
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
	
		RAISERROR (@vErr -- Message text
					   ,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
					   ,1 -- State
						);
	end

	
	Select @vStep = 2;
	if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting user access fac list ' + convert(varchar(26),getdate(),109);

	Select @vFacIds = fac_id
		  ,@vFacWarningMsg = msg
	From  dbo.fn_prp_get_facility_access_list_delim(@fac_id,@vgs_execution_user); ---filter the fac list with user access

	--facilities warnings
	if @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End 
	
	--fill facids into @PRP_FacList 
	select @vFacId = Cast(items as int) from dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list 
	BEGIN
		if @status_code = 0 Set @status_code = 3;
		RaisError( @status_text,11,1);
	END 

	
     /* ----------------------------------- */
	/* GET FACILITY STANDARD TERMINOLOGIES */
	/* ----------------------------------- */

	select @vStep = 3
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Initializing Terminology variables' + convert(varchar(26),getdate(),109)

	Select  
		  @vTermClient     = term_client
		, @vTermClients    = term_clients
		, @vTermFacility   = term_facility
		, @vTermFacilities = term_facilities
		, @vTermAdmission  = term_admission
		, @term_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge  = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom       = term_room
		, @vTermRooms      = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacId,@visemc) ;


      SET @vStep = 4;
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'Severity Information From Configuration Parameter' + convert(varchar(26),getdate(),109);

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_minor' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Minor', '1') ;
		end


	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_moderate' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Moderate', '2');
		end

	if exists (SELECT 1 from dbo.configuration_parameter with (NOLOCK) WHERE fac_id = @fac_id AND name = 'pho_interaction_level_of_severity_severe' AND value = 'Y')
		begin
		insert into #PRP_drug_severity_level
			VALUES('Severe', '3');
		end


select @vStep = 5
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Getting Medical Record Terminology and ID for Header ' + convert(varchar(20), @vfacid) + convert(varchar(26),getdate(),109);

	/***************************************************************************
							GET MRN INFO
	 ***************************************************************************/
BEGIN
		select @vMRNDesc=case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end, 
			   @vMRNId=cfg.hc_no_id 
		from   ar_configuration cfg
		left join facility fac on fac.fac_id = cfg.fac_id
		left join id_type hid on cfg.hc_no_id = hid.id_type_id
			and ( ( hid.fac_id = @vFacId
					and hid.state_code is null
					and ( hid.reg_id is null
						   or hid.reg_id = -1 ) )
				   or hid.fac_id = -1
				   or ( hid.reg_id = fac.regional_id
						and hid.state_code is null )
				   or ( hid.state_code = fac.prov
						and ( hid.reg_id = fac.regional_id
							   or hid.reg_id is null
							   or hid.reg_id = -1 ) )
					  and hid.deleted = 'N' )
		left join id_type sid on cfg.ssn_id = sid.id_type_id
			and ( ( sid.fac_id = @vFacId
					and sid.state_code is null
					and ( sid.reg_id is null or sid.reg_id = -1 )
		   )
		  or sid.fac_id = -1
		  or ( sid.reg_id = fac.regional_id
			and sid.state_code is null )
		  or ( sid.state_code = fac.prov
						and ( sid.reg_id = fac.regional_id
							   or sid.reg_id is null
							   or sid.reg_id = -1 ) )
					  and sid.deleted = 'N' )
		where  cfg.fac_id = @vFacId and cfg.deleted = 'N'
	END;

	IF @debug_me='Y'  SELECT  @vMRNId MRNId, @vMRNDesc MRNDesc;

     SET @vStep = 6
	IF @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Getting Facility settings for EMAR and non EMAR' + convert(varchar(26),getdate(),109)
    	----Emar Configuration based on FacId
	SET  @vFacEMAREnabled  = ISNULL((SELECT  value FROM [dbo].[configuration_parameter] WITH (NOLOCK) WHERE name = 'enable_emar' AND fac_id = @vFacId),'N');
	SET  @vEnableSignature = ISNULL((SELECT  value FROM [dbo].[configuration_parameter] WITH (NOLOCK) WHERE [name] = 'order_sign_enable' and (fac_id = @vFacId ))  ,'N');

	/*-------------------------------*/
	/* MULTI VALUE FILTER temp table */
	/*-------------------------------*/

	 INSERT INTO #PRP_Filters (filter_name, filter_value)
	 select left(items,charindex('=',items)-1) ,substring(items,charindex('=',items)+1,len(items))from dbo.Split (@vFilterList,@vdelims);

    --administrative order selected
	SELECT @vIncludeAdminOrder = ltrim(rtrim(filter_value)) from #PRP_Filters where filter_name = 'pho_include_admin_order' ;

     SELECT @vfil_client_status = ltrim(rtrim(filter_value)) from #PRP_Filters where filter_name = 'client_status'; 


	-----DATE TIME
	SELECT @vfil_order_date_type	= Left(filter_value,Charindex(@vDelim,filter_value)-1)
		  ,@vfil_order_date			= Right(filter_value, len(filter_value)-Charindex(@vDelim,filter_value))  
	from #PRP_Filters where filter_name like 'pho_order_date%';
	IF @vfil_order_date_type = 'ON'
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
	end

	Else if @vfil_order_date_type = 'BEFORE'
	begin
		Set @vfil_order_date2 = @vfil_order_date
		Set @vfil_order_date = '1900-01-01'
	end

	Else if @vfil_order_date_type = 'AFTER'
	begin
		Set @vfil_order_date  = @vfil_order_date+1
		Set @vfil_order_date2 = '9999-12-31'
	end

	Else if isdate(@vfil_order_date_type) = 1
	begin
		Set @vfil_order_date2 = @vfil_order_date+1
		SET @ICDDate=@vfil_order_date
		SEt @vfil_order_date  = @vfil_order_date_type
	End

	--if @vIncludeAdminOrder = 1	
	--	begin
			
	--		SET @vfil_admin_order_date_range_d1 = @vfil_order_date
	--		SET @vfil_admin_order_date_range_d2 = @vfil_order_date2	
	--	end	;

     set @vInitialBlankIncluded=1;


    select @vStep = 7
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' shredding filter id values ' + convert(varchar(26),getdate(),109)


    Insert into #PRP_Multi_Filters
    Select  a.filter_name, b.items
	from #PRP_Filters a
	cross apply ( Select items from dbo.split( case when a.filter_name in ( 'pho_route_of_admin','pho_signed_by','pho_order_status') then replace( a.filter_value,'_',',') else  a.filter_value end ,@vDelim)) b
	where b.Items not in ('-1' ,'ALL','') and a.filter_name in (/*'client_id'   because client security is included abd hence handled differently */ 

	  'client_floor'
	, 'pho_communication_method'
	, 'pho_order_category'
	, 'pho_order_status'
	
	);

     if @vfil_admin_record_emar is not null and @vfil_admin_record_emar <> '-1'
	Begin ----Admin Record 

		if @debug_me = 'y' print 'admin record EMAR'

		Insert into #PRP_Multi_Filters
		Values ('pho_admin_record', @vfil_admin_record_emar )
	end 

	if @debug_me='Y' SELECT 'Multi' multi, * FROM #PRP_Multi_Filters

    select @vStep = 8
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' determining which filters are used ' + convert(varchar(26),getdate(),109)
     if Exists( select 1 from #PRP_Multi_Filters where filter_name like 'pho_order_category%')			SET @vfil_order_category = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status')			SET @vfil_order_status = '1';
	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'pho_order_status' and filter_value = 4)			SET @vfil_order_status_strikeout = '1';

	if Exists( select 1 from #PRP_Multi_Filters where filter_name = 'client_unit')				SET @vfil_unit = '1';

	if @vIncludeAdminOrder = 1	 
		begin
			
			SET @vfil_admin_order_date_range_d1 = @vfil_order_date
			SET @vfil_admin_order_date_range_d2 = @vfil_order_date2
			
			
		end ;


	----supporting new data structures
	if @vP1 is null and @vG1 is null
	BEGIN
	    SET @vP1='order_category_desc';
	    SET @vP1_disp_name ='Order Category';

	    SET @vG1='order_category_desc';
	    SET @vG1_disp_name ='Order Category';

	    SET @vPId = '1' ;
	    SET @vGID = '1' ;

	   SELECT @vSort1 = 'pho_order_date'   ,@vSort2 = 'pho_order_desc'
	END

	


	

	select @vStep = 9;
	if @debug_me='Y' Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);

	SET @client_id = (Select filter_value from #PRP_Filters where filter_name = 'client_id');
	if  @client_id is null Set @client_id = '-1';
	
	Select @vClientIDs = client_id
			  ,@vClientWarningMsg = msg
	From  dbo.fn_prp_get_client_access_list_delim(@client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	if @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End 

	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' back from Getting user access client list and filling client temp table' + @vClientIds + convert(varchar(26),getdate(),109);

	if isnull(@vClientIDs,'-1') <> '-1'  ----should not be null or -1, if null or -1 then it means there is no filter on clients
	BEGIN
		SET @vfil_client_id = '1'

		Insert into #PRP_Multi_Filters
		Select 'client_id', items from dbo.split(@vClientIds,@vDelim) b
	END

   -----getting the list of clients
	select @vStep = 10
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' getting list of clients' + convert(varchar(26),getdate(),109)
	if @vfil_client_status in (-1,1)  ----ALL or discharged
	BEGIN
		Insert into #clients
		(
			  client_id 
			, client_name 
			, admission_date 
			, discharge_date 
			, deceased_date 
			--, gender 
			, allergy 
			, location 
			, date_of_birth 
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number 
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, 101),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, 101),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, 101),'')  as deceased_date
			--, isnull(m.sex,'') as gender 
			,  isnull(cla.allergy,'')  as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(u.unit_desc,''))) + ' ' else '' end +
				 rtrim(ltrim(isnull(r.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(b.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, 101),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy
			
			, Case when @vMRNId = -2 then c.client_id_number 
				--else ltrim(rtrim(vwClientIds.description)) 
				else NULL 
				end as mrn_number
			, c.client_id_number

			, isnull(m.sex,'') sex
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 




			from ( Select client_id, mpi_id, client_id_number 
							, admission_date
							, discharge_date
							, primary_physician_id
							, pharmacy_id

					from dbo.clients  with (nolock) 
				left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'	and fil_client_id.filter_value = clients.client_id
				where clients.fac_id = @vFacID  and clients.deleted = 'N' 
					AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
					AND (@vfil_client_status = '-1' or clients.discharge_date is not null  ) 
			) c
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id		
		inner join ( Select client_id,
		                    bed_id, 
							payer_type,
							row_num
							 from 
						(select client_id, bed_id, payer_type, row_number() OVER (partition by client_id order by effective_date desc ) as row_num
							From dbo.view_prp_census with (nolock) where fac_id = @vFacId and (record_type = 'C' or record_type is null))  vw
						where row_num = 1
					) loc on c.client_id = loc.client_id and  (loc.payer_type IS NULL OR loc.payer_type <>'OutPatient')-- CDN payer_type is always empty string

		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.[floor] f with (nolock) on f.floor_id=r.floor_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id



		left join dbo.contact ct WITH (NOLOCK) on ct.contact_id = c.primary_physician_id  
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id 	  



		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = f.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = u.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		WHERE  ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			


		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	ELSE -----ONLY Current clients
	BEGIN

		Insert into #clients
		(
			  client_id 
			, client_name 
			, admission_date 
			, discharge_date 
			, deceased_date 
			--, gender 
			, allergy 
			, location 
			, date_of_birth 
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number 
			, client_id_number
			, sex
			, bed_id
			, hasAllergy
			, hasBed
			, hasDOB
			, hasGender
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			, isnull(convert(char(10),c.admission_date, 101),'')	as admission_date
			, isnull(convert(char(10),c.discharge_date, 101),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, 101),'')  as deceased_date
			--, isnull(m.sex,'') as gender 
			, isnull(cla.allergy,'') as allergy
			, Case when @vLocationWithUnit='1' then rtrim(ltrim(isnull(loc.unit_desc,''))) + ' ' else '' end + 
					rtrim(ltrim(isnull(loc.room_desc,'')))  + ' ' + rtrim(ltrim(isnull(loc.bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, 101),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy
		
			, Case when @vMRNId = -2 then c.client_id_number 
				else NULL 
				end as mrn_number
			, c.client_id_number
			, isnull(m.sex,'') as sex
			, loc.bed_id 
			, CASE WHEN (cla.allergy ='To Be Determined' or  cla.allergy='' or cla.allergy is null) THEN 0 ELSE 1 END hasAllergy
    		, CASE WHEN (loc.bed_id=-1 or loc.bed_id is null) THEN 0 ELSE 1 END hasBed
			, CASE WHEN (m.date_of_birth='' or  m.date_of_birth is null) THEN 0 ELSE 1 END hasDOB
    		, CASE WHEN (m.sex='' or  m.sex is null) THEN 0 ELSE 1 END hasGender 



		from dbo.clients c with (nolock)
		inner join dbo.mpi m with (nolock) on c.mpi_id = m.mpi_id		
		inner join dbo.view_prp_latest_client_census_current	loc	with (nolock ) on c.client_id = loc.client_id ---this view will only get current clients only.
		inner join dbo.clients_attribute cla with (nolock) on c.client_id = cla.client_id
		left join dbo.contact ct with (nolock)   on ct.contact_id = c.primary_physician_id  
		left join dbo.emc_ext_facilities pharmacy with (nolock)  ON  ext_fac_id = c.pharmacy_id 	  

		left join #PRP_Multi_Filters fil_client_id		on fil_client_id.filter_name	= 'client_id'			and fil_client_id.filter_value = c.client_id
		Left join #PRP_Multi_Filters fil_floor			on fil_floor.filter_name	= 'client_floor'					and fil_floor.filter_value = loc.floor_id
		Left join #PRP_Multi_Filters fil_unit				on fil_unit.filter_name		= 'client_unit'						and fil_unit.filter_value  = loc.unit_id
		Left join #PRP_Multi_Filters fil_physician		on fil_physician.filter_name = 'client_primary_physician'		and fil_physician.filter_value  = c.primary_physician_id
		

		WHERE 	c.fac_id =  @vFacID	
			AND ((@vfil_client_id		= '1' and fil_client_id.filter_value is not null) or  @vfil_client_id is null )
			AND ((@vfil_floor			= '1' and fil_floor.filter_value is not null) or @vfil_floor is null )
			AND ((@vfil_unit			= '1' and fil_unit.filter_value is not null) or @vfil_unit is null )
			
			AND c.discharge_date is null
		Set @vgsClientCount = @@ROWCOUNT ;  -------get the clients selected count
	END
	
	Update #clients SET mrn_number = ltrim(rtrim(vwClientIds.description)) 
			From #clients c
			inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId 

     if @debug_me='Y'  select * from #clients


	----------------hedear Info:
	SET @tsql='';
	 SET @header='';

	 Select  top 1 @tsql=   isnull(client_name, '')	 from #clients
	 SET @header = @header+ '<b>'+isnull(@vTermClient,'')+ ': </b>' +@tsql +@vCharNewLine

	 SET @tsql='';	
	 select @tsql=  coalesce(@tsql+', ','')+ description  from (select top 1000 case filter_value  when '1' then  'Active' 
	                           when '2' then  'Discontinued'
						  when '3' then  'Completed'
						  when '5' then  'On hold'
						  when '8' then  'Pending Confirmation'
						  when '9' then  'Pending Clinical Review'
						  when '11' then  'Pending Order Signature'
						  when '10' then  'Pending Order Signature'
						  when '4' then  'Struck Out' else '' end  description
	  from #PRP_Multi_Filters where filter_name='pho_order_status'  order by filter_value) tt	 order by description ;

	 SET @header = @header+'<b>Order Status: </b>' + substring(@tsql,2,len(@tsql)) +@vSeparator + 
	                       '<b> Order Date Range: </b>'+convert(char(10),@vfil_order_date,101)+' - '+ convert(char(10),@vfil_order_date2-1,101) +@vSeparator;

	

	 set @tsql='';
	 select @tsql=  coalesce(@tsql+', ','')+ category_desc  from (select top 100 b.category_desc
													    from #PRP_Multi_Filters a
													    inner join pho_order_category b on b.order_category_id=a.filter_value 
													    where filter_name='pho_order_category'   )tt  order by category_desc 
     SET @header = @header+'<b> Order Category: </b>' + substring(@tsql,2,len(@tsql))  ;


  SET @vReturn = REPLACE(@header, @vSeparator, '      ');

BEGIN
    IF @debug_me = 'Y'
        BEGIN
            PRINT 'as one line: ' + @vReturn
        END;
    SET @vline1 = LEFT(LEFT(@vReturn, @vMaxLineLength), DATALENGTH(LEFT(@vReturn, @vMaxLineLength)) - PATINDEX('%     %', REVERSE(LEFT(@vReturn,
    @vMaxLineLength))));
    IF @debug_me = 'Y'
        BEGIN
            PRINT 'vline 1 ' + @vline1
        END;
    SET @vline2 = RIGHT(@vReturn, CHARINDEX(REVERSE(ISNULL(@vline1, '')), REVERSE(@vReturn)));
    IF @debug_me = 'Y'
        BEGIN
            PRINT 'vline 2 ' + @vline2
        END;
    SET @vReturn = @vline1 + @vCharNewLine + LTRIM(ISNULL(@vline2, ''));
    IF DATALENGTH(ISNULL(@vline2, '')) > @vMaxLineLength
        BEGIN
            SET @vline3 = LEFT(LEFT(ISNULL(@vline2, ''), @vMaxLineLength), DATALENGTH(LEFT(ISNULL(@vline2, ''), @vMaxLineLength)) - CHARINDEX('     ',
            REVERSE(LEFT(ISNULL(@vline2, ''), @vMaxLineLength))));
            IF @debug_me = 'Y'
                BEGIN
                    PRINT 'vline 3 ' + @vline3
                END;
            SET @vline4 = RIGHT(ISNULL(@vline2, ''), CHARINDEX(REVERSE(ISNULL(@vline3, '')), REVERSE(ISNULL(@vline2, ''))) - 1);
            IF @debug_me = 'Y'
                BEGIN
                    PRINT 'vline 4 pat index ' + CONVERT(VARCHAR, CHARINDEX(' ', REVERSE(LEFT(ISNULL(@vline2, ''), @vMaxLineLength))))
                END;
            IF @debug_me = 'Y'
                BEGIN
                    PRINT 'vline 4 ' + @vline4
                END;
            SET @vline2 = '';
            SET @vReturn = @vline1 + @vCharNewLine + LTRIM(ISNULL(@vline3, '')) + @vCharNewLine + LTRIM(ISNULL(@vline4, ''));
            IF DATALENGTH(ISNULL(@vline4, '')) > @vMaxLineLength
                BEGIN
                    SET @vline5 = LEFT(LEFT(ISNULL(@vline4, ''), @vMaxLineLength), DATALENGTH(LEFT(ISNULL(@vline4, ''), @vMaxLineLength)) - CHARINDEX
                    (' ', REVERSE(LEFT(ISNULL(@vline4, ''), @vMaxLineLength))));
                    SET @vline6 = RIGHT(ISNULL(@vline4, ''), CHARINDEX(REVERSE(ISNULL(@vline5, '')), REVERSE(ISNULL(@vline4, ''))) - 1);
                    SET @vline4 = '';
                    SET @vReturn = @vline1 + @vCharNewLine + LTRIM(ISNULL(@vline3, '')) + @vCharNewLine + LTRIM(ISNULL(@vline5, '')) +
                    @vCharNewLine + LTRIM(ISNULL(@vline6, ''));
                    IF DATALENGTH(ISNULL(@vline6, '')) > @vMaxLineLength
                        BEGIN
                            SET @vline7 = LEFT(LEFT(ISNULL(@vline6, ''), @vMaxLineLength), DATALENGTH(LEFT(ISNULL(@vline6, ''), @vMaxLineLength)) -
                            CHARINDEX(' ', REVERSE(LEFT(ISNULL(@vline6, ''), @vMaxLineLength))));
                            SET @vline8 = RIGHT(ISNULL(@vline6, ''), CHARINDEX(REVERSE(ISNULL(@vline7, '')), REVERSE(ISNULL(@vline6, ''))) - 1);
                            --if @debug_me='Y' select '8888',@vline7,@vline8		
                            SET @vline6 = '';
                            SET @vReturn = @vline1 + @vCharNewLine + LTRIM(ISNULL(@vline3, '')) + @vCharNewLine + LTRIM(ISNULL(@vline5,
                            '')) + @vCharNewLine + LTRIM(ISNULL(@vline7, '')) + @vCharNewLine + LTRIM(ISNULL(@vline8, ''));
                        END;
                END;
        END;
END;

 if 	replace(ltrim(rtrim(@vReturn)),@vCharNewLine ,'')<>''
	set @header= replace(@vReturn,'     ',@vSeparator);
	 else
	set  @header=@vCharNewLine





	------

	select @vStep = 11
	if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' GETTING LIST OF ORDERS '+ convert(varchar(26),getdate(),109);
	BEGIN

	;
	with tb1
	as (

	select  
				  po.administered_by_id 
				, po.alter_med_src 
				, po.client_id 
				, po.communication_method 
				, po.completed_by
				, po.max_end_date
				, null  	as confirmed_by
				, null  	as confirmed_by_long_username
				, null	 as confirmed_date 
				, po.created_by      as [created_by]
				, null      as [created_by_long_username]
				, po.created_date
				, clinical.reviewed_by 
	        	     , clinical.reviewed_date
				,NULL AS reviewed_by_long_username
				, case  
				     when  esg.sign_user_id is null then null   
					when esg.sign_user_id is not null then esg.sign_user_id 
				  end signed_by
				, case  
				    when  esg.sign_date is null then null   
				    when  esg.sign_date is not null then esg.sign_date 
				  end   signed_date 
				, case  
				     when  esg.sign_user_id is null then null   
					when  esg.sign_user_id is not null then isnull(esu.long_username,esu.loginname) 
				  end	  [signed_by_long_username]
				, po.diet_type
				, po.diet_texture
				, po.diet_supplement
				, po.diet_supplement_desc as diet_supplement_desc
				, po.diet_texture_desc as diet_texture_desc
				, po.diet_type_desc  as  diet_type_desc
				, replace(po.directions, '<', '&lt;')   as directions 
				, po.discontinued_date 
				, po.end_date 
				, po.fac_id 
				, po.fluid_consistency_desc  as fluid_consistency_desc
				, po.hold_date 
				, po.hold_date_end
				, po.indications_for_use   as indications_for_use 
				, po.order_category_id 
				, po.order_date
				, po.[description]  as order_desc 
				, NULL as order_status 
				, null as order_relationship 
				, po.order_type_id 
				, po.pharmacy_id 
				, po.phys_order_id 
				, po.physician_id 
				, po.diagnoses		  as related_diagnoses 
				, po.related_generic  as related_generic	
				, po.resume_date 
				, po.revision_by       as [revision_by]
				, null       as [revision_by_long_username]
				, po.revision_date
				, po.route_of_admin_desc   as route_of_admin_desc
				, po.schedule_template 
				, po.[start_date]
				, po.std_order_id 
				, po.supplementary_notes   as supplementary_notes
				, po.date_ordered		  as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)	 as supply_last_order_date
				, po.last_reorder_date						 as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, po.fluid_consistency
				, po.active_flag
				, po.order_verified
				, po.draft
				, po.std_freq_id
				, po.description
				, po.order_schedule_id
				, po.last_reorder_date
				, po.date_ordered
				, po.diagnoses
				, po.route_of_admin as route_of_admin
                    , po.controlled_substance_code 
				, case  
				     when esg.sign_user_id is null then 'N'   
					when  esg.sign_user_id is not null then 'E' 
				  else null end Eflag

		from view_prp_pho_phys_order_schedule po
		INNER JOIN pho_phys_order ppyo ON ppyo.phys_order_id=po.phys_order_id AND ppyo.order_class_id=1		

				inner join #clients clients  with (nolock) 
						on clients.client_id=po.client_id 	
				
				left join pho_order_clinical_review	clinical 
			        on clinical.phys_order_id=po.phys_order_id
	
				left join pho_phys_order_esignature	esg 	 with (nolock) 
					   on esg.phys_order_id=po.phys_order_id
				
				left join sec_user esu with (nolock)
				   on esu.userid=esg.sign_user_id
		where  po.draft='0' 
			and po.order_category_id  <> 3030
			AND po.fac_id = @vFacId
 

		union all

		select   null as administered_by_id
			, ppo.alter_med_src
			, ppo.client_id
			, ppo.communication_method
			, ppo.completed_by
			, ppo.max_end_date
			, ppo.confirmed_by   
			, ppo.confirmed_by_long_username
			, ppo.confirmed_date
			, ppo.created_by
			, ppo.created_by_long_username
			, ppo.created_date
			, NULL AS reviewed_by
		     , NULL AS reviewed_date
			, NULL AS reviewed_by_long_username
			, NULL AS signed_by
		     , NULL AS signed_date
			, NULL AS signed_by_long_username
			, ppo.diet_type
			, ppo.diet_texture
			, ppo.diet_supplement
			, ppo.diet_supplement_desc  as diet_supplement_desc
			, ppo.diet_texture_desc  as diet_texture_desc
			, ppo.diet_type_desc as  diet_type_descf
			, ppo.directions as directions  
			, ppo.discontinued_date
			, ppo.end_date
			, ppo.fac_id
			, ppo.fluid_consistency_desc as fluid_consistency_desc
			, ppo.hold_date
			, ppo.hold_date_end
			, ppo.indications_for_use  as indications_for_use 
			, ppo.order_category_id
			, ppo.order_date
			, ppo.[description]  as order_desc 
			, ppo.order_status
			, null as order_relationship
			, ppo.order_type_id
			, ppo.pharmacy_id
			, ppo.phys_order_id
			, ppo.physician_id
			, ppo.diagnoses	as related_diagnoses
			, ppo.related_generic as related_generic
			, ppo.resume_date
			, ppo.revision_by
			, ppo.revision_by as revision_long_username
			, ppo.revision_date
			, ppo.route_of_admin_desc as route_of_admin_desc
			, null schedule_template
			, ppo.[start_date]
			, ppo.std_order_id
			, ppo.supplementary_notes as supplementary_notes
			, ppo.date_ordered as supply_order_date
			, isnull(ppo.last_reorder_date ,ppo.date_ordered) as supply_last_order_date
			, ppo.last_reorder_date as supply_last_reorder_date
			, (Case when ppo.last_reorder_date is null then 'N' else 'Y' end) as supply_reorder
			, ppo.fluid_consistency
			, ppo.active_flag
			, ppo.order_verified
			, ppo.draft
			, ppo.std_freq_id
			, ppo.description
			, null as order_schedule_id
			, ppo.last_reorder_date
			, ppo.date_ordered
			, ppo.diagnoses
			, ppo.route_of_admin as route_of_admin
               , null as controlled_substance_code
		  	,'N' eflag 

		 from dbo.view_prp_pho_phys_order_strike_out ppo with (NOLOCK)
		 INNER JOIN (SELECT phys_order_id FROM pho_phys_order_audit WHERE order_class_id=1 AND event_type='S') audit  ON audit.phys_order_id=ppo.phys_order_id 
		
				inner join #clients clients  with (nolock) 
						on clients.client_id=ppo.client_id --- no information is fetched from this table at this point but this join is to filter the phys orders for selected clients o
	
		where ppo.order_category_id  not in ( -1, 3030) 
		AND ppo.fac_id = @vFacId
		and @vfil_order_status_strikeout = 1
		)

		Insert into #PRP_Orders
			( administered_by_id 
				, alter_med_src 
				, client_id 
				, communication_method 
				, completed_by
				, completed_date 
				, confirmed_by 
				, confirmed_by_long_username
				, confirmed_date 
				, created_by 
				, created_by_long_username
				, created_date
				, diet_supplement_desc 
				, diet_texture_desc
				, diet_type_desc 
				, directions 
				, discontinued_date 
				, end_date 
				, fac_id 
				, fluid_consistency_desc
				, hold_date 
				, hold_date_end
				, indications_for_use 
				, order_category_id 
				, order_date 
				, order_desc 
				, order_status 
				, order_relationship
				, order_type_id 
				, pharmacy_id 
				, phys_order_id 
				, physician_id 
				, related_diagnoses 
				, related_generic 
				, resume_date 
				, revision_by 
				, revision_by_long_username
				, revision_date 
				, route_of_admin 
				, schedule_template 
				, [start_date] 
				, std_order_id 
				, supplementary_notes
				, supply_order_date		    
				, supply_last_order_date	
				, supply_last_reorder_date  
				, supply_reorder 
				, std_freq_id
				, schedule_date
				, documented_date
				, documented_by
				, administered_date
				, order_verified
				, active_flag
                    , controlled_substance_code 
				, order_schedule_id
				, reviewed_by 
			     , reviewed_date 
				, reviewed_by_long_username
				, signed_by 
			     , signed_date 
				, signed_by_long_username
				, Esigned_flag
				, order_summary


		)
		Select 

				  po.administered_by_id 
				, po.alter_med_src 
				, po.client_id 
				, po.communication_method 
				, po.completed_by
				, po.max_end_date 
				, po.confirmed_by
				, po.confirmed_by_long_username
				, po.confirmed_date
				, po.created_by 
				, po.created_by_long_username
				, po.created_date
				, po.diet_supplement_desc as diet_supplement_desc
				, po.diet_texture_desc as diet_texture_desc
				, po.diet_type_desc  as  diet_type_desc
				, po.directions  as directions  
				, po.discontinued_date 
				, po.end_date 
				, po.fac_id 
				, po.fluid_consistency_desc as fluid_consistency_desc
				, po.hold_date 
				, po.hold_date_end
				, po.indications_for_use as indications_for_use 
				, po.order_category_id 
				, po.order_date

				, '<b>'+
					   
					 --po.[description] 
						replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;')
																			, '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
						+ '</b>' as order_desc 


				, po.order_status
				, po.order_relationship
				, po.order_type_id 
				, po.pharmacy_id 
				, po.phys_order_id 
				, po.physician_id 
				, po.diagnoses	as related_diagnoses 
				, po.related_generic as related_generic	
				, po.resume_date 
				, po.revision_by 
				, po.revision_by_long_username
				, po.revision_date
				, po.route_of_admin_desc as route_of_admin_desc
				, po.schedule_template 
				, po.[start_date]
				, po.std_order_id 
				, po.supplementary_notes as supplementary_notes
				, po.date_ordered												as supply_order_date
				, isnull(po.last_reorder_date ,po.date_ordered)					as supply_last_order_date
				, po.last_reorder_date											as supply_last_reorder_date
				, Case when po.last_reorder_date is null then 'N' else 'Y' end  as supply_reorder
				, NULL as std_freq_id
				, NULL as schedule_date
				, NULL as documented_date
				, NULL as documented_by
				, NULL as administered_date
				, po.order_verified
				, po.active_flag
                    , po.controlled_substance_code 
				, po.order_schedule_id
				, po.reviewed_by 
			     , po.reviewed_date 
				, po.reviewed_by_long_username
				, po.signed_by 
			     , po.signed_date 
				, po.signed_by_long_username
				, po.eflag
				,'<b>'+
					   isnull(
					 --po.[description] 
						replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.[description] ,'') , '& ', '&amp;')
																			, '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
						,'')+ '</b>' +' '+ po.directions 

		From tb1 po with (nolock)

		left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		left  join dbo.pho_administration_record adminrec with (nolock) on adminrec.administration_record_id =  Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
					and isnull(adminrec.show_on_mar,'') = Case when @vfil_admin_record_emar is NULL then isnull(adminrec.show_on_mar,'') else 'Y' end 
		
		left join #PRP_Multi_Filters ad			on ad.filter_name			 = 'pho_administered_by'		and ad.filter_value = po.administered_by_id

		left join #PRP_Multi_Filters adminrec_fil	on adminrec_fil.filter_name like  'pho_admin_record%'		
				and adminrec_fil.filter_value = adminrec.administration_record_id

		left join #PRP_Multi_Filters cm			on cm.filter_name		= 'pho_communication_method' and cm.filter_value = po.communication_method


		left join #PRP_Multi_Filters oc			on oc.filter_name		like 'pho_order_category%'	and oc.filter_value = po.order_category_id
		

		where  (po.active_flag = 'Y' or po.active_flag is null)
			----MULTIPLE VALUES SUPPORTED
	
			AND ((@vfil_administration_record  = '1' and adminrec_fil.filter_value is not null) or @vfil_administration_record  is null )
			AND ((@vfil_communication_method = '1'	 and cm.filter_value is not null)			or @vfil_communication_method  is null )


			AND	((@vfil_order_category = '1'		 and oc.filter_value is not null)	  or @vfil_order_category is null )

		

			------DATE FILTERS 
			
			AND 1 = case when (@vfil_order_date_type is NULL) then 1
						when po.order_date >= @vfil_order_date  and  po.order_date < @vfil_order_date2 then 1 
					else 0 end 
			
	END ;

	if @debug_me = 'y'	select 'Orders' Orders, * From #prp_orders;

	select @vStep = 12
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' INSERTING UNIQUE ORDER ID IN PREPARATION FOR GETTING THE ORDER STATUS ' + convert(varchar(26),getdate(),109)
		
	INSERT INTO #tempResult
	SELECT distinct phys_order_id
			, fac_id 
			, client_id 
			, order_verified
			, active_flag
			, 0
			, hold_date
			, hold_date_end
			, completed_date
			, discontinued_Date
			, order_category_id
               , controlled_substance_code 
	FROM #prp_orders po 
	WHERE po.order_status is NULL; -- struck out order has order status
	
	if @client_id <> '-1' set @vSP_ClientId = @client_id  ;

	INSERT INTO #PRP_PhoOrderStatus
	EXEC sproc_pho_getOrderStatus 
			@facId = @vFacId
			,@clientId = @vSP_ClientId
			,@physOrderId = null
			,@date = @vgs_start_time
			,@fromPortal = 'Y'
			,@debug = 'N'
			,@status_code = @vGetStatus_statuscode output
			,@status_text = @vGetStatus_statustext output ;

	SET @vRowCount=@@rowcount;

    IF ISNULL(@vGetStatus_statuscode, 0)=1
    BEGIN
	   SET @status_text='sproc_pho_getOrderStatus returned the following error: '+ISNULL(@vGetStatus_statuscode, '');
	   RAISERROR(@status_text, 11, 1);
    END;
    ELSE
	   IF @vRowCount=0
		  RAISERROR('sproc_pho_getOrderStatus returned 0 rows.', 11, 1);

   if @debug_me = 'y'	select '#PRP_PhoOrderStatus' Status, * From #PRP_PhoOrderStatus;

   -- update orders with their current status

	    UPDATE p 
		SET p.order_status = os.order_status,
			p.order_relationship = os.order_relationship	
		FROM #prp_orders p INNER JOIN #PRP_PhoOrderStatus os
		ON p.phys_order_id = os.phys_order_id;


	-- delete orders if they are not part of the filter
	   DELETE  pr
		FROM #prp_orders pr
			LEFT JOIN #PRP_Multi_Filters os			
			   ON os.filter_name = 'pho_order_status' AND os.filter_value = pr.order_status
		WHERE (@vfil_order_status = '1'  AND os.filter_value IS NULL) ;
	
	SET @vstep = 13
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  +' UPDATING ORDERS WITH AUDIT INFORMATION ' +  convert(varchar(26),getdate(),109)	
	  BEGIN
			UPDATE #PRP_Orders
			SET revision_by			   =	isnull(cpsecuser_revision.loginname, secuser_revision.loginname )
				,revision_by_long_username  =	isnull(cpsecuser_revision.long_username, secuser_revision.long_username )
				,confirmed_by			   =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.loginname, cpsecuser_created.loginname, secuser_created.loginname 	) else NULL end
				,confirmed_by_long_username =	Case when po.order_status <> 8 then coalesce( cpsecuser_confirmed.long_username, cpsecuser_created.long_username, secuser_created.long_username 	) else NULL end 
				,confirmed_date		   =	Case when po.order_status <> 8 then isnull(useraudit.confirmed_date, po.created_date) else NULL end 		 
				,created_by			   =	isnull(cpsecuser_created.loginname, secuser_created.loginname ) 
				,created_by_long_username   =	isnull(cpsecuser_created.long_username, secuser_created.long_username )  
				,reviewed_by			   = secuser_reviewed.loginname
				,reviewed_by_long_username  = secuser_reviewed.long_username
				
			FROM #PRP_Orders po
					
				Left join dbo.pho_phys_order_useraudit useraudit with (nolock) 
					on useraudit.phys_order_id = po.phys_order_id
				
				Left join dbo.cp_sec_user_audit cpsecuser_created with (nolock)
					on cpsecuser_created.cp_sec_user_audit_id = useraudit.created_by_audit_id
				
				Left join dbo.cp_sec_user_audit cpsecuser_revision with (nolock)
					on cpsecuser_revision.cp_sec_user_audit_id = useraudit.edited_by_audit_id
				
				left join dbo.cp_sec_user_audit cpsecuser_confirmed with (nolock)
					on cpsecuser_confirmed.cp_sec_user_audit_id = useraudit.confirmed_by_audit_id
				
				Left join dbo.sec_user secuser_created	with (NOLOCK)
					on  secuser_created.loginname = po.created_by
				
				Left join dbo.sec_user secuser_revision	 with (NOLOCK)
					on  secuser_revision.loginname = po.revision_by
                left join dbo.sec_user secuser_reviewed with (NOLOCK)
				   on secuser_reviewed.loginname=po.reviewed_by;
	end ;

	SET @vstep = 14
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + '1 RETRIEVING ADMINISTRATIVE ORDERS ' + convert(varchar(26),getdate(),109)

	;With tb1
		   as
		   (
		   Select

			    pro.related_phys_order_id Original_phys_order_id
			   , pro.order_related_id
			   , pro.phys_order_id as admin_phys_order_id
			   , pro.order_relationship_id
			   , pao.effective_date
			   , pao.ineffective_date
			   , pao.physician_id
			   , pao.reason 
			   , pao.created_date as admin_order_created_date
			   , row_number() OVER (PARTITION BY pro.related_phys_order_id ORDER BY pao.effective_date) as row_num
			   from dbo.pho_related_order  pro with (nolock )
			   inner Join dbo.pho_admin_order pao  with (nolock )
			   on pro.phys_order_id = pao.phys_order_id 
			
			   inner join (Select distinct phys_order_id from #PRP_Orders  with (nolock)) po on  pro.related_phys_order_id = po.phys_order_id 
			   where 
				    (pro.deleted IS NULL OR pro.deleted = 'N')
				   and  (pao.deleted IS NULL OR pao.deleted = 'N')
				   and pao.exclude_eom_status_calculation=0
				   AND pro.fac_id = @vFacID 

				   AND 1= CASE
					when 	@vIncludeAdminOrder=1   and pao.effective_date < @vfil_admin_order_date_range_d2 
				   and (pao.ineffective_date is null or pao.ineffective_date >= @vfil_admin_order_date_range_d1)   then 1
				  
				   else 0 end 
		
		   )
		   , tb2 as
		   (
			Select tb1.original_phys_order_id
			   , tb1.order_related_id
			   , tb1.admin_phys_order_id
			   , tb1.order_relationship_id
			   , tb1.effective_date
			   , case when nextrow.effective_date < tb1.ineffective_date or tb1.ineffective_date is null  then nextrow.effective_date else tb1.ineffective_date end as ineffective_date
			   , tb1.physician_id
			   , tb1.reason
			   , tb1.admin_order_created_date
			   , nextrow.admin_phys_order_id as next_admin_phys_order_id
			   From tb1
				   left outer join tb1 as nextrow on nextrow.Original_phys_order_id = tb1.Original_phys_order_id and nextrow.row_num = tb1.row_num+1
		   )

		   Insert into #PRP_Holds(phys_order_id , effective_date , ineffective_date ,order_relationship_id, admin_order_status , reason , ordered_by)
		   Select  tb2.original_phys_order_id
			   , tb2.effective_date
			   , tb2.ineffective_date
			   , tb2.order_relationship_id
			   , Case tb2.order_relationship_id 
					   when 1 then 'hold' 
					   when 2 then 'resume'
					   when 3 then 'discontinue'
					   else 'unknown'
					end as relationship
			   , tb2.reason
			   , isnull(ct.last_name + ', ' ,'') + isnull( ct.first_name,'')  + ' ' + isnull(ct.middle_name,'')  as client_physician
		    From tb2
		    left OUTER JOIN dbo.contact ct WITH (NOLOCK ) 
					   on ct.contact_id = tb2.physician_id ;


  if @debug_me='Y' select  'Admin orders'as PRP_Holds, * from #PRP_Holds

 select @vStep = 15
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' updating Order Summary ' + convert(varchar(26),getdate(),109)
  ;with tbBase
	as
	(
	Select 
		po.fac_id
		, po.client_id
		, convert(varchar,po.client_id)		as client_id_str --- required for building group id 
		, c.client_name 
		, c.admission_date 
		, c.discharge_date 
		, c.deceased_date 
		, c.sex as gender
		, c.allergy 
		, c.location 
		, c.date_of_birth 
		, c.client_physician_id
		, c.client_physician 
		, c.client_pharmacy 
		, c.mrn_number 
		, c.client_id_number

		, fac.name as fac_name
		, case when  LEN( ISNULL(fac.address1,'') ) = 0 OR LEN( ISNULL(fac.city,'') ) = 0 OR
			  LEN( ISNULL(fac.prov,'') ) = 0 OR LEN( ISNULL(fac.pc,'') ) = 0 then '' -- if one of the mandatory address fields is missing, return blank address
				else fac.address1 + ' ' + 
					case when  LEN( ISNULL(fac.address2,'') ) = 0 then '' else fac.address2 + ' '  end +
					@vCharNewLine  + fac.city + ', ' + fac.prov + ', ' + fac.pc
				end as fac_address
		, fac.tel as fac_tel

		, po.supplementary_notes							as additional_directions
 		, adminrec.description								as administration_record
		, adminstered_by.description						as administered_by 
		, so.advanced_directive								as advanced_directive 
		, cc.item_description								as communication_method
		, po.completed_by									as completed_by
		, Convert(char(10),po.completed_date,101)			as completed_date

		, po.confirmed_by_long_username 				as confirmed_by
		, Convert(char(10),po.confirmed_date,101)		as confirmed_date
		
		, po.created_by_long_username 			     	as created_by
		, convert(char(10),po.created_date,101)			as created_date

		,  po.reviewed_by_long_username				     	as reviewed_by
		, convert(char(10),po.reviewed_date,101)			as reviewed_date

		,  po.signed_by_long_username				     	as signed_by
		, convert(char(10),po.signed_date,101)			as signed_date

--		, po.directions									as directions
		, replace(replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#') as directions


		------Order can have only one status either hold/discontinue/resume
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then  convert(char(10),po.discontinued_date,101) + ' '+  CONVERT(CHAR(5),po.discontinued_date,114) else NULL End as discontinued_date
					 

		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'') 
				else NULL  end		as discontinued_by
		, Case when po.order_status = 2  -------Only if the order is discontinued show discontinued info
						then hold_discont_resume_info.reason else NULL end				   as discontinued_reason

		, convert(char(10),po.end_date,101)					as order_end_date


		, Case when po.order_status = 5  --- on hold	
				then convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114) else NULL END   as hold_date


		, case when po.order_status = 5 --- on hold
				then convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114)  end	as hold_date_end
		, Case when po.order_status = 5  --- on hold
				then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
				else NULL end		as hold_by
		, Case when po.order_status = 5  --- on hold
				then hold_discont_resume_info.reason else NULL end							as hold_reason

		, Case when po.order_status = 5  then convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'') else NULL end as hold_start_end_date


		, po.indications_for_use								as indications_for_use


		, po.phys_order_id -----phys_order_id  is for QA testing only
		, convert(varchar,po.physician_id) as physician_id  ---- required for building grouping_id
		
		, isnull(physician.last_name + ', ' ,'') + isnull( physician.first_name,'')  + ' ' + isnull(physician.middle_name,'')  as physician

		, convert(varchar,po.order_category_id)				 as order_category_id -----required for builiding group id
		, oc.category_desc									 as order_category
		, convert(char(10),po.order_date,101)			 as order_date	
		, convert(char(10),po.order_date,101) + ' '+  CONVERT(CHAR(5),po.order_date,114)  as order_date_time
		, po.order_desc																	  as order_desc
		--, replace( replace ( replace ( replace( replace( isnull(' ' + po.order_desc,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;') as order_desc
		, Case when po.order_status =1 then 'Active'
			when po.order_status =2 then 'Discontinued'
			when po.order_status =3 then 'Completed'
			when po.order_status =5 then 'On Hold'
			when po.order_status =4 then 'Struck out'
			when po.order_status =8 and po.order_relationship=1 then 'Pending confirmation (Hold)'
			when po.order_status =8 and po.order_relationship=2 then 'Pending confirmation (Resume)'
			when po.order_status =8 and po.order_relationship=3 then 'Pending confirmation (Discontinue)'
			when po.order_status =8 then 'Pending confirmation'
            when po.order_status =9 then 'Pending Clinical Review'
			when po.order_status in (10,11) then 'Pending Order Signature'
			when po.order_status =-1 then 'In Queue'
			else 'Unknown'
			end
															as order_status
		, isnull(order_desc, '') + ' ' + isnull(po.directions, '') + isnull(@vCharNewLine + ltrim(hold_dates.summary),'')	as order_summary
--		, isnull(po.order_desc,'') + isnull(' ' + po.directions,'') 
		, isnull(po.order_desc,'') + isnull((replace (replace( replace ( replace ( replace( replace( isnull(' ' + po.directions,'') , '& ', '&amp;'), '<', '&lt;'), '>', '&gt;'), '"', '&quot;'), '''', '&#39;'), '&amp;#', '&#')
							),'') 

			+ Case  when po.hold_date is not NULL 
					then ' On hold from ' +convert(char(10),po.hold_date,101) + ' '+  CONVERT(CHAR(5),po.hold_date,114)+ isnull( ' to '  + convert(char(10),po.hold_date_end,101) + ' '+  CONVERT(CHAR(5),po.hold_date_end,114 ),'')
				else isnull(@vCharNewLine + ltrim(hold_dates.summary),'')									  
			   end

			
			as order_schedule_summary
		, convert(varchar,po.order_type_id)					as order_type_id  --- required for buidling group id 
		, ot.description									as order_type
		, perm_source.med_source_desc						as permanent_source
		, pharm.name										as pharmacy     
		, po.related_diagnoses								as related_diagnoses

		, Case when po.order_status = 1  and  po.resume_date is not null --------for resume it is an exta check to see resume_date is not null to see if order is active , is it really resumed ..
			then convert(char(10),po.resume_date,101) + ' '+  CONVERT(CHAR(5),po.resume_date,114 )  else NULL end			as resume_date

		, Case when po.order_status = 1  and  po.resume_date is not null
			--then  rtrim(ltrim( rtrim(ltrim(isnull(hold_discont_resume_physician.title,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.first_name,''))) + ' ' + rtrim(ltrim(isnull(hold_discont_resume_physician.last_name,''))))) 
			then isnull(hold_discont_resume_physician.last_name + ', ' ,'') + isnull( hold_discont_resume_physician.first_name,'')  + ' ' + isnull(hold_discont_resume_physician.middle_name,'')
			else NULL end as resume_by

		, Case when po.order_status = 1  and  po.resume_date is not null
					then  hold_discont_resume_info.reason else NULL end				as resume_reason


		, po.revision_by_long_username 					as revision_by
		, convert(char(10),po.revision_date,101)		as revision_date
		, po.route_of_admin	
		, Case po.schedule_template 
				when 1 then 'PRN'
				when 2 then 'Routine'
				when 3 then 'Titration'
				when 4 then 'One Time Only'
				when 5 then 'STAT'
			else 'Unknown' end									as schedule_template 
		, convert(char(10),po.start_date,101)			 	   as order_start_date

		, po.related_generic									as related_generic
		, right('00000'+  convert(varchar(5), ot.sequence),5)	as order_type_seq --- require for sorting purpose only
	

		, po.diet_type_desc
		, po.diet_texture_desc
		, po.fluid_consistency_desc
		, po.diet_supplement_desc

		, po.supply_reorder
		, convert(char(10),po.supply_order_date,101)			as supply_order_date
		, convert(char(10),po.supply_last_order_date,101)		as supply_last_order_date
		, convert(char(10),po.supply_last_reorder_date,101)		as supply_last_reorder_date

		---62-9, 124-18, 186-27 
		, replicate('_',9)  as initials_blank
		, replicate('_',18) as notes_blank
		, replicate('_',9)  as renew_blank
		, replicate('_',9)  as stop_blank

		, replace(convert(char(5), po.schedule_date,8), ':', '') as schedule_time
		, convert(char(10), po.schedule_date,101 )				as schedule_date
		, convert(char(10),po.schedule_date,101) + ' '+  CONVERT(CHAR(5),po.schedule_date,114 ) as schedule_date_time
		, stdfreq.description										as std_freq_desc

		, convert(char(10),po.documented_date,101) + ' '+  CONVERT(CHAR(5),po.documented_date,114 )  as documented_date
		, po.documented_by
		

		, convert(char(10),po.administered_date,101) + ' '+  CONVERT(CHAR(5),po.administered_date,114 )  as administered_date
		, case when @vIncludeAdminOrder = '1' then  admin_details.admin_orders else null end as administrative_details
		, po.order_schedule_id
		, po.drug_warning
		, medication_class.descdisplay medication_class 
		From  #PRP_Orders po with (nolock )
			INNER JOIN #clients c WITH (NOLOCK ) ON c.client_id = po.client_id

		inner join dbo.facility fac with (nolock) on po.fac_id=fac.fac_id


		left join dbo.pho_order_category oc with (nolock ) on oc.order_category_id = po.order_category_id
		Left join dbo.pho_order_type ot with (nolock ) on ot.order_type_id = po.order_type_id
		Left join common_code cc on cc.item_id = po.communication_method and cc.item_code = 'phocom'
		Left join dbo.contact physician with (nolock ) on physician.contact_id =  po.physician_id
		left join dbo.pho_administration_record  adminrec with (nolock ) 
			ON adminrec.administration_record_id = Case when @vFacEMAREnabled = 'Y'  then ot.administration_record_id 
												else isnull(ot.alt_administration_record_id, ot.administration_record_id) end
		Left join ( Select a.related_phys_order_id, a.order_relationship_id, b.effective_date, b.physician_id, b.reason 
						from dbo.pho_related_order  a with (nolock )
					Inner Join dbo.pho_admin_order b  with (nolock )
						on a.phys_order_id = b.phys_order_id ) hold_discont_resume_info
			on  hold_discont_resume_info.related_phys_order_id = po.phys_order_id
			and hold_discont_resume_info.order_relationship_id = ( Case when po.order_status = 1  and po.resume_date is not null then  2 --- resume
																		when po.order_status = 5  and po.hold_date  is not null then  1   --- hold
																		when po.order_status = 2  and po.discontinued_date  is not null then  3   --- discontinue
																	else NULL end )
			and hold_discont_resume_info.effective_date			=	( Case when po.order_status = 1   then po.resume_date --- resume date
																		when po.order_status = 5		then po.hold_date  --- hold date
																		when po.order_status = 2		then po.discontinued_date  --- discontinue date
																	else NULL end )
		Left join dbo.contact hold_discont_resume_physician with (nolock ) on hold_discont_resume_physician .contact_id =  hold_discont_resume_info.physician_id

		left join dbo.emc_ext_facilities pharm with (nolock) on po.pharmacy_id=pharm.ext_fac_id

		left outer join dbo.pho_std_phys_order so with (nolock) 
			on po.std_order_id=so.std_phys_order_id 

		left join dbo.pho_std_administered_by adminstered_by with (nolock)
			on adminstered_by.administered_by_id = po.administered_by_id

		left join dbo.pho_med_source_type perm_source  with (nolock)
				on perm_source.med_source_type_id = po.alter_med_src
		
		left join dbo.pho_std_time_frequency stdFreq with (nolock) on stdfreq.id = po.std_freq_id 
		

		outer apply (Select * From 
				(
				select ' On hold' 
						+ case when a1.ineffective_date is null 
									then ' starting '  +  convert(char(10),a1.effective_date,101) + ' '+  CONVERT(CHAR(5),a1.effective_date,114)
									else ' from '  +  convert(char(10),a1.effective_date,101) + ' '+  CONVERT(CHAR(5),a1.effective_date,114) + ' to '  +  convert(char(10),a1.ineffective_date,101) + ' '+  CONVERT(CHAR(5),a1.ineffective_date,114)--+@vCharNewLine
							end 
				from 
				(
						Select  effective_date
	 						 , ineffective_date 
						from #PRP_Holds ho with (nolock) 
						where ho.phys_order_id = po.phys_order_id 
						AND ho.order_relationship_id = 1
						
				) a1
				order by effective_date FOR XML PATH('')
				) a ( summary )
				) hold_dates

		outer apply (Select admin_orders.value('.','varchar(max)') as admin_orders From 
					
						(	Select  admin_order_status + char(9) + 
								    convert(char(10),effective_date,101) + ' '+  CONVERT(CHAR(5),effective_date,114) + char(9) + 
								    isnull(convert(char(10),ineffective_date,101) + ' '+  CONVERT(CHAR(5),ineffective_date,114),' ')  + char(9) +
								   reason + char(9) + 
								    ordered_by 
								--+ char(9) + case when @vInitialBlankIncluded = 1 then replicate('_',9) else  ' '  end 
								
								+ char(10)									

								from #PRP_Holds ho with (nolock) 
								where ho.phys_order_id = po.phys_order_id 
								order by effective_date FOR XML PATH(''), TYPE
						) a ( admin_orders )
				) admin_details

				outer apply( select medication.value('.','varchar(max)') as descdisplay From  
				  (SELECT  atdc.descdisplay+', '
	                from (select prf.phys_order_id, phys_order_ext_lib_rec_id  
							  from dbo.pho_order_ext_lib_med_ref prf with (nolock) where  prf.phys_order_id=po.phys_order_id
								union 
							 select pref_audit.phys_order_id, phys_order_ext_lib_rec_id 
							   from  dbo.pho_order_ext_lib_med_ref_audit  pref_audit with (nolock) where  pref_audit.phys_order_id=po.phys_order_id
							) poelmr 
					INNER JOIN  (
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
									UNION
									SELECT poelc.phys_order_ext_lib_rec_id, pho_ext_lib_sub_class_id 'class_id' from dbo.pho_order_ext_lib_cls_audit poelc with (nolock)
						) classes 
			         ON classes.phys_order_ext_lib_rec_id = poelmr.phys_order_ext_lib_rec_id
                     LEFT JOIN @tpmAllTopDrugClassification atdc on atdc.classid= classes.class_id
					order by poelmr.phys_order_ext_lib_rec_id,atdc.descdisplay FOR XML PATH(''), TYPE
					) a (medication) 
	 		  
				) medication_class



	)
	, The_sort as (
 	 select client_id,client_name,mrn_number,gender,admission_date	,discharge_date,deceased_date,date_of_birth,location ,client_physician,administered_by,
	phys_order_id,communication_method, client_pharmacy,allergy,
	completed_by,completed_date,isnull(completed_by,'') + isnull(@vCharNewLine+completed_date,'')  as pho_completed_info, 
	confirmed_by,confirmed_date,isnull(confirmed_by,'') + isnull(@vCharNewLine+confirmed_date,'') pho_confirmed_info  ,
	created_by,created_date,isnull(created_by,'') + isnull(@vCharNewLine + created_date,'') pho_created_info,
	discontinued_by,discontinued_date,discontinued_reason, isnull(discontinued_by ,'')+ isnull(@vCharNewLine+discontinued_date,'')+isnull(@vCharNewLine+discontinued_reason,'')  pho_discontinued_info,
	order_end_date,order_category,order_status,order_date,order_date_time ,physician ,order_summary,	related_generic,resume_date, resume_by,resume_reason,
	isnull(resume_by ,'')+ isnull(@vCharNewLine+resume_date,'')+isnull(@vCharNewLine+resume_reason,'')   pho_resume_info
	,revision_by, revision_date,isnull(revision_by ,'') +  isnull(@vCharNewLine+revision_date,'')  pho_revision_info ,
	schedule_template, order_start_date,left(rtrim(ltrim(medication_class)),len(rtrim(ltrim(medication_class)))-1) medication_class ,
	dense_rank() over ( ORDER BY order_date_time DESC, order_category,order_summary asc) row_num   ,
	order_category_id G_set_id,cast(order_category_id as varchar)+'-'+cast(client_id as varchar) P_set_id ,administrative_details
	from tbBase  )

	select @vFacId as fac_id,
	client_id,phys_order_id, 
	order_category,
	order_summary,	order_status,  order_date,order_start_date start_date,order_end_date end_date, physician ordered_by,medication_class,
	administrative_details ,
	case when row_num=1 then client_name else null end client_name ,
	--case when row_num=1 then isnull(@vTermClient,'')+ @vSeparator  + isnull(client_name, '') + @vSeparator 
	--						+ 'Location' + @vSeparator + isnull(location,'') + @vSeparator
	--						+ isnull(@vTermAdmission,'') + @vSeparator  + isnull(admission_date,'') + @vSeparator 
	--						+ isnull(@vMRNDesc ,'MR/HCN #')+ @vSeparator  + isnull(mrn_number,'') + @vSeparator
	--						+ 'Gender' + @vSeparator + isnull(gender,'') + @vSeparator 
	--						+ 'Date of Birth' + @vSeparator + isnull(date_of_birth,'') + @vSeparator
	--						+ 'Physician' + @vSeparator + isnull(client_physician,'') + @vSeparator 
	--						+ 'Pharmacy' + @vSeparator	+ isnull(client_pharmacy,'') + @vSeparator
	--						+ 'Allergies' + @vSeparator + isnull(allergy,'') + @vSeparator 
	--						+'Diagnoses' + @vSeparator + isnull(dbo.fn_prp_get_diagnosis(client_id,ISNULL(@ICDDate,@vgs_start_time),@vFacId) ,'')  
	--			       else null end client_header	,
	 case when row_num=1 then  @header else null end  filter_header ,
      G_set_id, P_set_id,row_num ,
	 (case when row_num = 1 then @status_code else null end )status_code, 
      (case when row_num = 1 then @status_text else null end )status_text
	 from The_sort
	 order by row_num ;

  


END TRY
BEGIN CATCH 
	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END 

	Select 

		  NULL as fac_id
		, NULL as client_id
		, NULL as phys_order_id
		, NULL as order_category
		, NULL as order_summary
		, NULL as order_status
		, NULL as order_date
		, NULL as start_date
		, NULL as end_date
		, NULL as ordered_by
		, NULL as medication_class
		, NULL as administrative_details
		, NULL as client_name
		--, NULL as client_header
		, NULL as filter_header
		, NULL as G_set_id   ---0/1
		, NULL as P_set_id
		, NULL as row_num
		, (case WHEN (charindex ('getOrderStatus',@status_text)) > 0 THEN 0 ELSE @status_code END) as status_code
		, @status_text as status_text	
		
END CATCH 
END
RETURN 

END
GO

GRANT EXECUTE ON  dbo.sproc_prp_rl_order_listing_clinical_chart_report   to PUBLIC
GO

SET ANSI_NULLS OFF 
GO
SET QUOTED_IDENTIFIER OFF 
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_order_listing_clinical_chart_report.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_order_listing_clinical_chart_report.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_poc_documentation_survey_hybrid.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-80308       :   script to sproc_prp_rl_poc_documentation_survey_hybrid Procedure  
--						-- 
-- Written By:          H Ehghaghi
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_poc_documentation_survey_hybrid Procedure for Document Survey Report
-- 
-- Special Instruction: 

-- 
-- =================================================================================

/***********************************************************************************
Revision History:
-- DATE			NAME				JIRA           VERSION		DESCRIPTION
-- 2015-10-07	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Fixed various bug
-- 2015-10-07	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Fixed Duration Schedule bug
-- 2015-10-15	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Join two result set in one
-- 2015-10-15	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Improve Performance
-- 2015-10-15	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Add is_chart parameter for supporting clinical chart date range
-- 2015-10-15	 	H. Ehghaghi		PCC-80980 	3.7.8.1		fixed Struck Out information and BA request
-- 2015-10-15	 	H. Ehghaghi		PCC-80980 	3.7.8.1		add client_id to struck out information
-- 2015-11-03	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Fixed time zone issue and legend part
-- 2015-11-05	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Fixed various bug
-- 2015-11-05	 	H. Ehghaghi		PCC-80980 	3.7.8.1		Fixed Unschedule task bug   
-- 2015-11-05	 	H. Ehghaghi		PCC-84854 	3.7.8.1		Fixed schedule and Prn issue  
-- 2015-11-05	 	H. Ehghaghi		PCC-84854 	3.7.8.1		Fixed field to display
-- 2015-11-10	 	H. Ehghaghi		PCC-84856 	3.7.8.1		Fixed  Unscheduled documentation not shown  
-- 2015-11-11	 	H. Ehghaghi		PCC-85189 	3.7.9		Fixed  Data Issue for Prn and Qshift  
-- 2015-11-11	 	H. Ehghaghi		PCC-85189 	3.7.9		Fixed  Data Issue  schedule date
-- 2015-11-15	 	H. Ehghaghi		PCC-85189 	3.7.9		Fixed  Multi document PRN and Qshift 
-- 2015-11-20	 	H. Ehghaghi		PCC-85186 	3.7.9		Fixed  Legend and historical picklist 
-- 2015-11-20	 	H. Ehghaghi		PCC-85186 	3.7.9		Fixed  struck out Pick List Issue 
-- 2015-12-15	 	H. Ehghaghi		PCC-86848 	3.7.9		Performance Improvement 
-- 2015-12-17	 	H. Ehghaghi		PCC-86848 	3.7.9		Apply DM Comment
-- 2016-01-05	 	H. Ehghaghi		PCC-86848 	3.7.9		Fixed the date issue
-- 2016-01-08	 	H. Ehghaghi		PCC-87851 	3.7.9		Fixed resolve date issue
-- 2016-02-22		R. Sanchez		PCC-85292	3.7.9.1		Added more struck out information
-- 2016-03-10	 	H. Ehghaghi		PCC-91537 	3.7.9.0.2.5	Fixed effective date of 12/31/1969
-- 2016-07-04	 	L. Mendzeleu	PCC-92983 	3.7.10.2	Fixed reading short codes from POC General Configuration
-- 2016-07-06		R. Sanchez		PCC-97103	3.7.11		Display data base from documented date instead of schedule date
-- 2016-07-06		L. Mendzeleu	PCC-97103	3.7.11		Fixed bug with monthly MD schedule which was introduced earlier by implementation of PCC-97103
-- 2016-07-25		L. Mendzeleu	PCC-97103	3.7.11		Addressing issue of usage prev day schedule for after midnight documentation on night shift. Part of implementation of PCC-97103
-- 2016-08-16		L. Mendzeleu	PCC-93739	3.7.11 		POC: Documentation Survey report V2- documentation not appearing correctly
-- 2016-08-18 		L. Mendzeleu 	PCC-99843 	3.7.11		POC: Documentation Survey report V2-Schedules not appearing in report for some org/facilities
-- 2016-08-30		R. Sanchez		PCC-99875	3.7.11		blank report is displayed when adding another night shift to the facility
-- 2016-09-07		R. Sanchez		PCC-96344	3.7.11		POC: Documentation Survey Report V2 displays with No data found when running the report within POC go live date
-- 2016-09-27		K. Niakhai		PCC-100840	3.7.11.1	POC: Documentation Survey report V2- responses are being repeated in the report output for a schedule with specific time and with overlapping shifts
-- 2016-10-19		R. Sanchez		PCC-96952	3.7.11.1	Support UK terminology and date format
-- 2016-11-09		K. Niakhai		PCC-95083	3.7.11.1	Reports: Documentation Survey Report V2 missing follow up question responses in legend
-- 2016-11-11		K. Niakhai		PCC-104829	3.7.11.1	UK terms- doc survey report v2- dates not formatted in the poc legend in the report
-- 2016-11-21		R. Sanchez		PCC-105011		3.7.11.0.12/3.7.11.1.1	Swap short code with item value when applicable
-- 2016-11-23	Rolly Sanchez		PCC-105564		3.7.12	Update framework related to UK local terminology
-- 2016-11-29		K. Niakhai		PCC-105825		3.7.11.2	Apply date formating for fixed effective date of 12/31/1969
-- 2016-12-02	Rolly Sanchez		PCC-103375		3.7.11.1.4	Return all sched even if the shift is not on POC Assignment setup
-- 2017-01-13 Rolly Sanchez		PCC-107258		3.7.12		Change logic for localization based on user's default facility
-- 2017-02-08		K. Niakhai		PCC-106350 3.7.12.1	Clinical Reports: Documentation Survey Report V2 not displaying intervention that has documentation completed
-- 2017-02-13		R. Sanchez		PCC-107045 3.7.12.1	legend and short code is missing when the picklist item got deleted
-- 2017-02-27		R. Sanchez		PCC-106920 3.7.12.1	include schedule time on the final sort
-- 2017-03-28		R. Sanchez		PCC-111846	 3.7.12.1	Change logic on how to retrieve data from historical
-- 2017-04-11		R. Sanchez		PCC-113577 3.7.12.2	Include 2nd signature
-- 2017-04-21		R.Sanchez		PCC-114737	 3.7.12.2	Exclude struck out secondary signature on legend
-- 2017-04-25		R.Sanchez		PCC-113569	 3.7.12.2	Exclude Daily Notes
-- 2017-05-01		R.Sanchez		PCC-115262 3.7.12.2	Exclude Daily Notes on Struck out information
-- 2017-05-11		K. Niakhai		PCC-104767 3.7.13 Documentation Survey Report v2: Some unscheduled tasks data not shown	
-- 2017-05-12		K. Niakhai		PCC-104767 3.7.13 Documentation Survey Report v2: Some unscheduled tasks data not shown due to intervention marked as resolved.
-- 2017-05-12		R. Sanchez		PCC-97856 3.7.13 POC: Documentation Survey Report V2 User Legend enhancement
-- 2017-05-19		R.Sanchez		PCC-116434 3.7.13	Display legend if its configure to create pass/back dated schedule
-- 2017-06-23		R.Sanchez		PCC-117810		3.7.14	Add blood sugar control type to the report	
-- 2017-09-19		R.Sanchez		PCC-119766 3.7.14.1	Reports: POC Documentation Survey Report V2 is showing "no data found" when there is POC documentation for the resident 
-- 2017-10-06		R.Sanchez		CORE-2713  3.7.13.2.7			Showing incorrect documented response according to what was recorded - it showing item value instead of short code
-- 2017-10-27		R. Sanchez		CORE-5343	3.7.15	POC Documentation survey V2 schedule that fall during DST time change is not adjusted on UK facility
-- 2018-01-22		R. Sanchez		CORE-9946	3.7.15	Report generate no data found incorrectly
-- 2018-01-29		R. Sanchez		CORE-10293	3.7.15.1	Technical jira: log error to execution_statistics table
-- 2018-02-06		R. Sanchez		CORE-9205	3.7.15.2	Follow up question show out of sequence after revision
-- 2018-09-24		R. Sanchez		CORE-13175	3.7.17.1	Enhance to support GHC performance issue
-- 2019-04-24       Mustafa Behrainwala	CORE-38896	Multi-Select: Reporting - Investigate SPROC Change For Documentation Survey Report v2
-- 2019-07-09 		R. Kim			CORE-36082	3.7.20		Documentation Survey Report V2: displays a blank box where there is recorded documentation on first of month
-- 2019-07-24 		R. Kim			CORE-46146	3.7.20		POC: Documentation Survey Report V2 displays "An unexpected error has occurred."
-- 2020-05-22 		R. Kim			CORE-65537	4.2.0		Documentation Survey Report: Support Narrative Text Control Type.
*********************************************************************************************************/


IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_poc_documentation_survey_hybrid' and ROUTINE_TYPE = 'PROCEDURE' )
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_poc_documentation_survey_hybrid
END
GO



Create Procedure dbo.sproc_prp_rl_poc_documentation_survey_hybrid
 @report_id int
, @fac_id int
, @is_emc  bit = '0'
, @field_list varchar(max)
, @filter_list varchar(max)
, @is_chart varchar(200)='0'
, @execution_user_login varchar(60)	--- login username of person running the report
, @rows_returned int out
, @debug_me char(1)
, @status_code int out
, @status_text varchar(3000)	out
/********************************************************************************

Declare  @rows_ret int		,@statuscode int		,@statustext varchar(3000)
exec dbo.sproc_prp_rl_poc_documentation_survey_hybrid
 @report_id = -1026,
 @fac_id = 2,
 @field_list = 'photo,1;initial,1;doc_time,1;user_legend,1;struck_out,1',
 @filter_list = 'client_id=2174;ds_schedule_mth_yr=10,2015;ds_type=-1',
 --@is_chart='2015-10-15,2015-10-31',
 @execution_user_login = 'sanchr',
 @rows_returned = null,
 @debug_me = 'n',
 @status_code = null,
 @status_text = null

**********************************************************************************/
as
Begin

SET NOCOUNT ON;
----Local Variables
DECLARE     @vReportId int
		, @vFacId int
		, @vIsEMC bit
		, @vFieldList varchar(max)
		, @vFilterList varchar(max)
		, @vSortList varchar(max)
		, @vEnv varchar(5)
		, @vIs_chart varchar(max);

----Parameter Sniffing - use local variables when they are used in a where clause
SET @vReportId    = @report_id;
SET @vFacID	   = @fac_id;
SET @vFieldList   = @field_list;
SET @vFilterList  = @filter_list;
SET @vIsEMC	   = @is_emc;
SET @vIs_chart	   = @is_chart;

----MRN Variables for header
DECLARE	  @vMRNId int
		, @vMRNDesc varchar(100);

------TERMINOLOGY VARIABLES and COMMON VARIABLES FOR A FAC
DECLARE @vTermClient       VARCHAR(50),
        @vTermAdmission    VARCHAR(50),
        @vTerm_Client      VARCHAR(50),
        @vTermClients      VARCHAR(50),
        @vTermFacility     VARCHAR(50),
        @vTermFacilities   VARCHAR(50),
        @vTerm_Admission   VARCHAR(50),
        @vTermAdmissions   VARCHAR(50),
        @vTermDischarge    VARCHAR(50),
        @vTermDischarges   VARCHAR(50),
        @vTermRoom         VARCHAR(50),
        @vTermRooms        VARCHAR(50),
		@vTermTask		varchar(1000),
		@vTermIntervention		varchar(1000),
        @vTermAdvDirective VARCHAR(50);

--Standard local variables required for any stored proc
DECLARE @vStep              INT,
        @vStepName          VARCHAR(100),
        @step_start_time    DATETIME,
        @vErr               VARCHAR(MAX),
        @vDelim             CHAR(1),
        @vDelim_s           CHAR(1),
        @vCharNewLine       CHAR(2),
        @vNewLine           CHAR(1),
        @vTab               CHAR(1),
        @vPlaceHolder		CHAR(5),
        @vSeparator         CHAR(6),
        @vReportDate        DATETIME		,	--- usually same as getdate() unless report has some specific requirements
        @vRowCount          INT,
        @vResponseSeparator VARCHAR(17)		,	-- s/b 2 x len(@vTempCharNewLine) + 1
        @vTempCharNewLine   VARCHAR(8);


--Facility Related variables, also used in capturing execution Statistics
DECLARE @vFacIDs VARCHAR(MAX);
DECLARE @vFacWarningMsg VARCHAR(MAX);

-----Governor and Statistics Variables
DECLARE @vgs_program_name   VARCHAR(200),
        @vgs_execution_user VARCHAR(60),
	   @vgs_start_time     DATETIME;

-----Variables for each column and sort in the report
 DECLARE 	 @header        VARCHAR(50)

---max of 3 group levels are supported
DECLARE @vfil_ds_task_choice INT,	-- result of incl (only) task dialog
        @vfil_client_id      BIT,
        @vfil_ds_type        BIT;

 -- Field to Display
DECLARE @vIncludePhoto          BIT,
        @vIncludeDocumentRespon BIT,
        @vIncludeInitial        BIT,
        @vIncludeDocumentTime   BIT,
        @vIncludeStruckOut      BIT,
        @vIncludeUserLegend     BIT;

DECLARE

	   @vfil_ds_schedule_mth_yr      VARCHAR(7),
	   @vfil_ds_schedule_mth         SMALLINT,
	   @vfil_ds_schedule_yr          SMALLINT,
	   @vfil_ds_schedule_date        DATETIME,
	   @vfil_ds_schedule_date2       DATETIME,
	   @vfil_ds_last_day_of_month    DATETIME,
	   @vfil_ds_schedule_date_tzadj  DATETIME	,
	   @vfil_ds_schedule_date2_tzadj DATETIME	,
	   @vfil_ds_schedule_date2_tzadj_plus1 DATETIME	,
	   @vdaylightStart               DATETIME,
	   @vdaylightEnd                 DATETIME,
	   @vyear                        SMALLINT,
	   @vStartOfMarch                DATETIME,
	   @vStartOfNovember             DATETIME,
	   @vPocGoLiveDate			   DATETIME,
	   @vCountryId					INT,
	   @vAdjtoDST				char(1),
	   @vCountryName varchar(260),
	   @vCountryCode char(2),
	   @vdateFormatStyle smallint,
	   @vgoal_flag							tinyint = 1;
----Client access variables
DECLARE @client_id VARCHAR(MAX);

DECLARE @vClientIDs VARCHAR(MAX);

DECLARE @vClientWarningMsg VARCHAR(MAX);--- to know whether it the returned list is restricted

DECLARE @vCurrentDate             DATETIME,
        @vOldestDate              DATETIME,
        @today                    DATETIME,
        @vMaxHist                 DATETIME;

DECLARE @vfil_fuq_options           BIT,
        @vfil_fuq_options_for_mds_g BIT,
        @vfil_poc_advanced          BIT,
        @vseq                       BIGINT,
		@vAllowPastSched char(1),
	   @vShowHistorical            BIT,
	   @SystemPicklist             varchar(max),
	   @vShowAdvancedHistorical    BIT = 0,
	   @AdvancedPicklist           varchar(max);

CREATE TABLE #PRP_Report_Metadata_FieldstoDisplay(filter_name  VARCHAR(100),
                                                  filter_value TINYINT);

CREATE TABLE #PRP_ClientList(client_id           INT,
                             client_name         VARCHAR(200),
                             admission_date      datetime,
                             discharge_date      VARCHAR(10),
                             deceased_date       VARCHAR(10),
                             gender              CHAR(1),
                             allergy             VARCHAR(1000),
                             location            VARCHAR(500),
                             date_of_birth       VARCHAR(10),
                             client_physician_id VARCHAR(15)		, --- required for building grouping id
                             client_physician    VARCHAR(200),
                             client_pharmacy     VARCHAR(75),
                             mrn_number          VARCHAR(50),
                             client_id_number    VARCHAR(35),
                             photo               VARCHAR(50),
					    photo_date          VARCHAR(11),
					    current_care_plan_id  int );

CREATE CLUSTERED INDEX _tmp_idx_prp_clients ON #PRP_ClientList(client_id);

CREATE TABLE #PRP_ds_interventions(client_id           INT,
                                   gen_intervention_id INT,
                                   intervention_id     INT,
                                   std_intervention_id INT,
                                   resolved_date       DATETIME,
                                   flowsheet           CHAR(1),
                                   current_row         CHAR(1),
                                   fac_id              INT,
                                   text1               VARCHAR(MAX),
                                   date_initiated      DATETIME);

CREATE NonCLUSTERED INDEX _tmp_idx_prp_interventions on #PRP_ds_interventions(fac_id,client_id)
INCLUDE (gen_intervention_id,intervention_id,std_intervention_id);



CREATE TABLE #PRP_Filters(filter_name  VARCHAR(50),
                          filter_value VARCHAR(50));

CREATE TABLE #stdQuestionIdTable(genInterventionId           INT,
                                 interventionId              INT,
                                 stdInterventionId           INT,
                                 stdQuestionId               INT,
                                 stdQuestionText             VARCHAR(max),
                                 stdQuestionContorlType      VARCHAR(5),
                                 stdQuestionEffective_Date   DATETIME,
                                 stdQuestionIneffective_Date DATETIME,
                                 stdPickListId               INT,
                                 sequence                    INT,
                                 system_control_flag         CHAR(1),
                                 mds_question_key_old        varchar(max),
                                 less_picklist               BIT,
                                 rowNumber                   INT,
								 stdQuestionRank			 TINYINT,
								 fac_id						 INT );

CREATE CLUSTERED INDEX IDX_stdInterventionId_stdQuestionId_UIDX ON #stdQuestionIdTable(stdQuestionId, fac_id)
CREATE NOnCLUSTERED INDEX IDX_stdInterventionId_stdQuestionIdUIDX ON #stdQuestionIdTable(genInterventionId,interventionId,stdInterventionId)
 INCLUDE (less_picklist, system_control_flag, mds_question_key_old, sequence,stdQuestionIneffective_Date,stdQuestionEffective_Date);

CREATE TABLE #stdPickListTable(genInterventionId     INT,
                               interventionId        INT,
                               stdInterventionId     INT,
                               stdQuestionId         INT,
                               std_pick_list_item_id INT,
                               std_pick_list_id      INT,
                               item_value            VARCHAR(2000),
                               description           VARCHAR(200),
                               sequence              INT,
                               short_code            varchar(max),
                               effective_date        DATETIME,
                               ineffective_date      DATETIME);

CREATE NONCLUSTERED INDEX IDX_InterventionId_stdPickListIdUIDX ON #stdPickListTable(std_pick_list_id);
CREATE NONCLUSTERED INDEX IDX_InterventionId_stdPickListId_UIDX ON #stdPickListTable(genInterventionId,interventionId,stdInterventionId)
INCLUDE (effective_date,ineffective_date,stdQuestionId,std_pick_list_item_id);



DECLARE @pocGeneralConfig TABLE(id_key           INT IDENTITY(1, 1),
                                name             VARCHAR(100),
                                [value]          VARCHAR(100),
                                effective_date   DATETIME,
                                ineffective_date DATETIME);

DECLARE @pocShortCodesConfig TABLE([id]			  INT IDENTITY(1, 1),
						  [default_value_id]  VARCHAR(100),
                                [name]			  VARCHAR(100),
                                [value]			  VARCHAR(max),
                                [effective_date]	  DATETIME,
                                [ineffective_date]  DATETIME);

CREATE TABLE #cp_documentation_responses(schedule_detail_id     VARCHAR(1000),
                                         client_id              INT,
                                         gen_intervention_id    INT,
                                         intervention_id        INT,
                                         std_intervention_id    INT,
                                         text1                  VARCHAR(MAX),
                                         stdQuestionId          INT,
                                         stdQuestionContorlType VARCHAR(5),
                                         stdQuestionText        VARCHAR(max),
                                         sequence               INT,
                                         stdPickListId          INT,
                                         fac_id                 INT,
                                         schedule_id            INT,
                                         std_shift_id           INT,
                                         description            VARCHAR(max),
                                         start_time             VARCHAR(4),
                                         end_time               VARCHAR(4),
                                         shift_date             DATETIME,
                                         schedule_start_date    DATETIME,
                                         schedule_end_date      DATETIME,
                                         schedule_date          DATETIME,
                                         documentation_id       VARCHAR(max),
                                         completed_date         DATETIME,
                                         entered_date           DATETIME,
                                         task_time              SMALLINT,
                                         std_question_id        INT,
                                         item_value_id          VARCHAR(max),
                                         item_value             VARCHAR(max),
                                         retired_date           DATETIME,
                                         resolved_date          DATETIME,
                                         created_by_longname    VARCHAR(60),
                                         created_by_position    VARCHAR(60),
                                         initials               VARCHAR(40),
                                         strikeout_flag         VARCHAR(1),
                                         strikeout_id           INT,
                                         strikeout_description  VARCHAR(max),
                                         strikeout_by           VARCHAR(60),
                                         strikeout_date         DATETIME,
                                         schedule_type          INT,
                                         schedule_time          INT,
										 short_code varchar(max));

CREATE TABLE #prp_shifts(shift_id    INT,
                         shift_name  VARCHAR(50),
                         start_time  INT,
                         end_time    INT,
                         group_name  VARCHAR(15),
                         position_id INT,
                         flg         INT);

CREATE TABLE #prp_shift_link(shift_id    INT,
                             shift_name  VARCHAR(50),
                             start_time  INT,
                             end_time    INT,
                             group_name  VARCHAR(15),
                             position_id INT);

DECLARE @Dateadjust AS TABLE(day_date     DATETIME,
                             std_shift_id INT,
                             shift_name   VARCHAR(MAX),
                             fac_id       INT,
                             s_date       DATETIME,
                             dd           DATETIME,
                             tm           INT);

Create Table #pocData (
                          schedule_detail_id     VARCHAR(max),
                          client_id              INT ,
                          gen_intervention_id    INT ,
                          intervention_id        INT,
                          std_intervention_id    INT,
                          text1                  VARCHAR(MAX),
                          stdQuestionId          INT,
                          stdQuestionContorlType VARCHAR(5),
                          stdQuestionText        VARCHAR(max),
                          sequence               INT,
                          stdPickListId          INT,
                          fac_id                 INT,
                          schedule_id            INT,
                          std_shift_id           varchar(max),
                          description            VARCHAR(max),
                          start_time             VARCHAR(4),
                          end_time               VARCHAR(4),
                          shift_date             DATETIME,
                          schedule_start_date    DATETIME,
                          schedule_end_date      DATETIME,
                          schedule_date          DATETIME,
                          documentation_id       VARCHAR(max),
                          completed_date         DATETIME,
                          entered_date           DATETIME,
                          task_time              SMALLINT,
                          std_question_id        INT,
                          item_value_id          VARCHAR(max),
                          item_value             VARCHAR(max),
                          retired_date           DATETIME,
                          resolved_date          DATETIME,
                          created_by_longname    VARCHAR(60),
                          created_by_position    VARCHAR(60),
                          initials               VARCHAR(40),
                          strikeout_flag         VARCHAR(1),
                          strikeout_id           INT,
                          strikeout_description  VARCHAR(max),
                          strikeout_by           VARCHAR(60),
                          strikeout_date         DATETIME,
                          schedule_type          INT,
                          flag                   VARCHAR(20),
                          schedule_time          INT,
                          day_of_month           TINYINT,
						  short_code varchar(max)
						  );
create clustered index _pocData_idx on #pocData (client_id,fac_id);
create nonclustered index _pocData_2_idx on #pocData (gen_intervention_id,intervention_id,std_intervention_id)
INCLUDE (strikeout_flag,flag,day_of_month,schedule_date,schedule_detail_id) ;


Create Table #poc(
				  seq                 varchar(max),
                      fac_id              INT,
                      client_id           INT,
				  admission_date	  datetime,
                      documentation_id    VARCHAR(max),
                      detail_id           INT,
                      gen_intervention_id INT,
                      intervention_id     INT,
                      std_intervention_id INT,
                      text1               VARCHAR(MAX),
                      schedule_id         INT,
                      shift_name          VARCHAR(100),
                      schedule_date       DATETIME,
                      schedule_start_date DATETIME,
                      schedule_end_date   DATETIME,
                      day_of_month        INT,
                      strikeout_flag      CHAR(1),
                      completed_date      DATETIME,
                      task_time           INT,
                      schedule_time       INT,
                      flag                VARCHAR(500),
                      doc                 VARCHAR(max));

create clustered index _poc_idx on #poc (client_id,fac_id);
create nonclustered index _poc_2_idx on #poc (gen_intervention_id,intervention_id,std_intervention_id)
INCLUDE (admission_date,flag,day_of_month,schedule_start_date,schedule_end_date,shift_name,documentation_id) ;

 Create table #intervention_audit (
                               genInterventionId     INT,
                               interventionId        INT,
                               stdInterventionId     INT,
                               stdQuestionEffective_Date datetime,
                               stdQuestionIneffective_Date datetime,
                               questionText varchar(max),
							   std_question_id int)
create nonclustered index _intervention_audit on #intervention_audit (genInterventionId,interventionId,stdInterventionId)
include (stdQuestionEffective_Date,stdQuestionIneffective_Date);

Create table #event_date (
                               genInterventionId     INT,
                               interventionId        INT,
                               stdInterventionId     INT,
						 stdQuestionId		   INT,
						 questiontext		   varchar(max),
                               effective_date datetime,
                               ineffective_date datetime,
                              )
create nonclustered index _intervention_audit on #event_date (genInterventionId,interventionId,stdInterventionId)
include (effective_date,ineffective_date);


DECLARE @dayTable AS TABLE(day_of_month        INT,
                           seq                 varchar(max),
                           fac_id              INT,
                           client_id           INT,
                           gen_intervention_id INT,
                           intervention_id     INT,
                           std_intervention_id INT,
                           shift_name          VARCHAR(max),
                           day_n               VARCHAR(max),
                           row_id              INT);

--DECLARE @Numbers AS TABLE(number INT);

DECLARE @PRP_ds_interv_schedule AS TABLE(id_key              INT IDENTITY(1, 1) PRIMARY KEY,
                                         row_type            INT,
                                         row_id              INT,
                                         seq                 VARCHAR(5),
                                         seq_name            VARCHAR(50),
                                         fac_id              INT,
                                         client_id           INT,
                                         client_name         VARCHAR(250),
                                         admint_date         datetime,
                                         date_of_birth       VARCHAR(10),
                                         location            VARCHAR(100),
                                         photo               VARCHAR(55),
                                         photo_date          VARCHAR(11),
                                         mrn_number          VARCHAR(50),
                                         user_legend         VARCHAR(MAX),
                                         report_header       VARCHAR(MAX),
								 gen_intervention_id int,
								 intervention_id     int,
                                         std_intervention_id INT,
								 intervention_desc   varchar(max),
                                         text1               VARCHAR(MAX),
                                         schedule_id         INT,
                                         shift_id            INT,
                                         shift_name          VARCHAR(100),
                                         schedule_date       DATETIME,
                                         schedule_time       varchar(10),
                                         day_1               VARCHAR(MAX),
                                         day_2               VARCHAR(MAX),
                                         day_3               VARCHAR(MAX),
                                         day_4               VARCHAR(MAX),
                                         day_5               VARCHAR(MAX),
                                         day_6               VARCHAR(MAX),
                                         day_7               VARCHAR(MAX),
                                         day_8               VARCHAR(MAX),
                                         day_9               VARCHAR(MAX),
                                         day_10              VARCHAR(MAX),
                                         day_11              VARCHAR(MAX),
                                         day_12              VARCHAR(MAX),
                                         day_13              VARCHAR(MAX),
                                         day_14              VARCHAR(MAX),
                                         day_15              VARCHAR(MAX),
                                         day_16              VARCHAR(MAX),
                                         day_17              VARCHAR(MAX),
                                         day_18              VARCHAR(MAX),
                                         day_19              VARCHAR(MAX),
                                         day_20              VARCHAR(MAX),
                                         day_21              VARCHAR(MAX),
                                         day_22              VARCHAR(MAX),
                                         day_23              VARCHAR(MAX),
                                         day_24              VARCHAR(MAX),
                                         day_25              VARCHAR(MAX),
                                         day_26              VARCHAR(MAX),
                                         day_27              VARCHAR(MAX),
                                         day_28              VARCHAR(MAX),
                                         day_29              VARCHAR(MAX),
                                         day_30              VARCHAR(MAX),
                                         day_31              VARCHAR(MAX),
                                         UNIQUE NONCLUSTERED(row_id,row_type),
								  Unique (client_id,gen_intervention_id,intervention_id,std_intervention_id, id_key));

CREATE Table #PRP_ds_interv_schedule_cte (

								 row_type            INT,
                                         row_id              INT,
                                         seq                 VARCHAR(5),
                                         seq_name            VARCHAR(50),
                                         fac_id              INT,
                                         client_id           INT,
                                         client_name         VARCHAR(250),
                                         admint_date         datetime,
                                         date_of_birth       VARCHAR(10),
                                         location            VARCHAR(100),
                                         photo               VARCHAR(55),
                                         photo_date          VARCHAR(11),
                                         mrn_number          VARCHAR(50),
                                         user_legend         VARCHAR(MAX),
                                         report_header       VARCHAR(MAX),
								 gen_intervention_id int,
								 intervention_id     int,
                                         std_intervention_id INT,
								 intervention_desc   varchar(max),
                                         text1               VARCHAR(MAX),
                                         schedule_id         INT,
                                         shift_id            INT,
                                         shift_name          VARCHAR(100),
                                         schedule_date       DATETIME,
                                         schedule_time       varchar(10),
                                         day_1               VARCHAR(MAX),
                                         day_2               VARCHAR(MAX),
                                         day_3               VARCHAR(MAX),
                                         day_4               VARCHAR(MAX),
                                         day_5               VARCHAR(MAX),
                                         day_6               VARCHAR(MAX),
                                         day_7               VARCHAR(MAX),
                                         day_8               VARCHAR(MAX),
                                         day_9               VARCHAR(MAX),
                                         day_10              VARCHAR(MAX),
                                         day_11              VARCHAR(MAX),
                                         day_12              VARCHAR(MAX),
                                         day_13              VARCHAR(MAX),
                                         day_14              VARCHAR(MAX),
                                         day_15              VARCHAR(MAX),
                                         day_16              VARCHAR(MAX),
                                         day_17              VARCHAR(MAX),
                                         day_18              VARCHAR(MAX),
                                         day_19              VARCHAR(MAX),
                                         day_20              VARCHAR(MAX),
                                         day_21              VARCHAR(MAX),
                                         day_22              VARCHAR(MAX),
                                         day_23              VARCHAR(MAX),
                                         day_24              VARCHAR(MAX),
                                         day_25              VARCHAR(MAX),
                                         day_26              VARCHAR(MAX),
                                         day_27              VARCHAR(MAX),
                                         day_28              VARCHAR(MAX),
                                         day_29              VARCHAR(MAX),
                                         day_30              VARCHAR(MAX),
                                         day_31              VARCHAR(MAX),
								 document_id         varchar(500)
                                        );

CREATE TABLE #FollowUpQuestionandPicklistItem(
                                       id_key                 INT IDENTITY(1, 1) PRIMARY KEY,
                                       seq              INT ,
                                       geninterventionid INT,
                                       interventionid     INT,
                                       stdinterventionid INT,
                                       period_start_date        DATETIME,
                                       period_end_date      DATETIME,
							    stdquestionid int,
							    question_text varchar(max),
							    picklist_text varchar(max),
							    sequence int
							    ,std_pick_list_id int,
							    Unique (geninterventionid,interventionid,stdinterventionid, id_key));



----Staff Legend
	CREATE TABLE #PRP_tbUserLegend
	(
            client_id int
		, document_by varchar(60)
		, initials varchar(40)
	);
     CREATE nonCLUSTERED INDEX _tempTbUserLegend ON #PRP_tbUserLegend( client_id );
-- New Code

Create table #PRP_question_periods (seq               INT,
                                       genInterventionId INT,
                                       interventionId    INT,
                                       stdInterventionId INT,
                                       period_start_date DATETIME,
                                       period_end_date   DATETIME,
                                       questiontext      VARCHAR(2000),
                                       std_question_id   INT)

create nonclustered index _PRP_question_periods on #PRP_question_periods (genInterventionId,interventionId,stdInterventionId)
include (period_start_date,period_end_date,std_question_id);
;


DECLARE @vprpFinalPickList AS TABLE(seq               INT,
                                    genInterventionId INT,
                                    interventionId    INT,
                                    stdInterventionId INT,
                                    stdQuestionId     INT,
                                    questiontext      VARCHAR(2000),
                                    std_pick_list_id  INT,
                                    picktext          VARCHAR(MAX),
                                    period_start_date DATETIME,
                                    period_end_date   DATETIME);

Create table #vprpPickList (
                               genInterventionId     INT,
                               interventionId        INT,
                               stdInterventionId     INT,
                               stdQuestionId         INT,
                               std_pick_list_item_id INT,
                               std_pick_list_id      INT,
                               item_value            VARCHAR(2000),
                               description           VARCHAR(200),
                               sequence              INT,
                               short_code            varchar(max),
                               effective_date        DATETIME,
                               ineffective_date      DATETIME)

create nonclustered index _vprpPickList_idx on #vprpPickList (genInterventionId,interventionId,stdInterventionId)
include (std_pick_list_item_id,stdQuestionId,effective_date,ineffective_date);

DECLARE @QuestionXML TABLE(genInterventionId    INT,
                            interventionId       INT,
                            stdInterventionId    INT,
                            text1   varchar(max)
                        );

CREATE TABLE #PRP_localterm
	(
            fac_id int
		, name varchar(100)
		, value varchar(1000)
		, status_code int
		, status_text varchar(max)

	);

CREATE TABLE #PRP_cntrlValues
	(
        description varchar(100)
		, item_value int
		, cntrl_type char(3)
		, sequence int
	);

INSERT INTO #PRP_cntrlValues
-- as per CPStdPickListBuilder, getMealTakenAmountOptions()
select '0% Eaten' as description, 0 as item_value, 'mta' as cntrl_type, 1 as sequence
union all
select '25% Eaten', 2, 'mta', 2
union all
select '50% Eaten', 4, 'mta', 3
union all
select '75% Eaten', 6, 'mta', 4
union all
select '100% Eaten', 8, 'mta', 5
union all
-- as per CPStdPickListBuilder, getPainFaceOptions()
select 'No Hurt', 0, 'pfs', 1
union all
select 'Hurts a Little Bit', 2, 'pfs', 2
union all
select 'Hurts a Little More', 4, 'pfs', 3
union all
select 'Hurts Even More', 6, 'pfs', 4
union all
select 'Hurts a Whole Lot', 8, 'pfs', 5
union all
select 'Hurts Worst', 10, 'pfs', 6;



BEGIN Try

     Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
	set @status_text = null;
	set @rows_returned = 0;
	Set @vgs_program_name = Object_name(@@ProcID);  ---Current Store Proc Name
	Set @vgs_start_time = getdate();
	Set @vgs_execution_user = @execution_user_login ;

	---Insert Debug at every step
	select @vStep = 0 , @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name + ' ' + convert(varchar(26),getdate(),109)

	--set Standard variables
	set @vDelim = ','
	set @vDelim_s =';'
	set @vCharNewLine  = Char(13) + char(10);
	set @vSeparator = 'ZYXWVU';
	SET @vTab = Char(9);
	SET @vNewLine = char(10);
	SET @vPlaceHolder = '|||||';


	select @vAllowPastSched  = value from configuration_parameter
	where fac_id = @fac_id and name = 'generate_past_sd'


	/***************************************************************************
							GET MRN INFO
     ***************************************************************************/
    select @vStep = 1 , @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + 'GET MRN INFO :  '  + convert(varchar(26),getdate(),109)

	select   @vMRNId = cfg.hc_no_id
		   , @vMRNDesc = case when cfg.hc_no_id=-2 then 'Client Id Number' else hid.description end
            from   dbo.ar_configuration cfg WITH (NOLOCK)
            left join dbo.facility fac WITH (NOLOCK) on fac.fac_id = cfg.fac_id
            left join dbo.id_type hid WITH (NOLOCK) on cfg.hc_no_id = hid.id_type_id
                  and ( ( hid.fac_id = @vFacId
                              and hid.state_code is null
                              and ( hid.reg_id is null
                                       or hid.reg_id = -1 ) )
                           or hid.fac_id = -1
                           or ( hid.reg_id = fac.regional_id
                                    and hid.state_code is null )
                           or ( hid.state_code = fac.prov
                                    and ( hid.reg_id = fac.regional_id
                                             or hid.reg_id is null
                                             or hid.reg_id = -1 ) )
                                and hid.deleted = 'N' )
            left join dbo.id_type sid WITH (NOLOCK) on cfg.ssn_id = sid.id_type_id
                  and ( ( sid.fac_id = @vFacId
                              and sid.state_code is null
                              and ( sid.reg_id is null or sid.reg_id = -1 )
               )
              or sid.fac_id = -1
              or ( sid.reg_id = fac.regional_id
                  and sid.state_code is null )
              or ( sid.state_code = fac.prov
                                    and ( sid.reg_id = fac.regional_id
                                             or sid.reg_id is null
                                             or sid.reg_id = -1 ) )
                                and sid.deleted = 'N' )
            where  cfg.fac_id = @vFacId and cfg.deleted = 'N' ;
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me='Y' Select   @vMRNId [MRN Ifo]

	/* -------------------------------- */
	/* GET FACILITY ACCESS RESTRICTIONS */
	/* -------------------------------- */

	Select @vStep = 2, @step_start_time = getdate();
	if @debug_me='Y' Print 'BEGIN STEP '+convert(varchar(20), @vStep)  + ' Getting Facility access fac list ' + convert(varchar(26),getdate(),109);

	EXEC [dbo].[sproc_prp_get_facility_access_list_delim]
	  @fac_id  = @fac_id
	 ,@execution_user_login = @vgs_execution_user
	 ,@fac_id_out =  @vFacIds OUT
	 ,@msg_out    =  @vFacWarningMsg OUT;

    if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

	--facilities warnings
	IF @vFacWarningMsg is NOT NULL --- NOT NULL stands for restricted facilities access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = isnull(@status_text,'') + @vFacWarningMsg ;
	End

	--fill facids into @vFacList
	SELECT @vFacId = Cast(items AS INT) FROM dbo.Split(@vFacIds,@vdelim);  ----Only one FacId is expected at a time
	if @@ROWCOUNT = 0  ---- only if there is any FacCount proceed with getting Client list
	BEGIN
		IF @status_code = 0
		Set @status_code = 3;
		RaisError( @status_text,11,1);
	END

	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	/*-------------------------------*/
	/* MULTI VALUE FILTER temp table */
	/*-------------------------------*/

	select @vStep = 3, @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + 'Filters... ' + convert(varchar(26),getdate(),109)

	---shred column filters value for all integers value
	INSERT INTO #PRP_Filters (filter_name, filter_value)
	select left(items,charindex('=',items)-1) ,substring(items,charindex('=',items)+1,len(items))from dbo.Split (@vFilterList,@vDelim_s);

	if @debug_me='Y' select '#PRP_Filters'
	if @debug_me='Y' select '#PRP_Filters' PRP_Filters, * from #PRP_Filters
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
   	/* -------------------------------- */
	/* GET client ACCESS RESTRICTIONS */
	/* -------------------------------- */

	SELECT @vStep = 4, @step_start_time = getdate();
	IF @debug_me='Y'
	    Print 'BEGIN STEP ' + convert(varchar(20), @vStep) + ' Getting user access client list ' + convert(varchar(26),getdate(),109);
	    Select @vClientIDs = (select filter_value from #PRP_Filters where filter_name='client_id')
			      ,@vClientWarningMsg = msg
	    From  dbo.fn_prp_get_client_access_list_delim(@Client_id,@fac_id,@vgs_execution_user) ---filter the Client list with user access

	IF @vClientWarningMsg is NOT NULL --- NOT NULL stands for restricted Client access warning message
	Begin
		Set @status_code = 2 ; ----Set it warning
		Set @status_text = Isnull(@status_text,'') + @vClientWarningMsg ;
	End

	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'



	-- Facility Type
	select @vEnv=facility_type
			, @vCountryId = country_id
			, @vAdjtoDST = adjust_for_dst
				 from dbo.facility fac
				where fac.fac_id=@vFacId;


	select @vCountryCode = cntry_code.ISO_Country_Alpha_2_Code
		from dbo.facility fac with (nolock)
	inner join dbo.sec_user sec with (nolock)
		on fac.fac_id = sec.fac_id
	left JOIN dbo.common_code cntry with (nolock) ON fac.country_id = cntry.item_id
	left outer join wesreference.dbo.country cntry_code with (nolock)
	on cntry.item_description = cntry_code.ISO_Country_Name
	where sec.loginname = @vgs_execution_user


set  @vdateFormatStyle = dbo.fn_localized_dateformat_style(@vCountryCode, 1)

	/*------------------------------------*/
	/* DETERMINING WHICH FILTERS ARE USED */
	/*------------------------------------*/

	select @vStep = 5, @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Determining which filters are used... ' + convert(varchar(26),getdate(),109)

	if Exists( select 1 from #PRP_Filters where filter_name = 'ds_type'  and filter_value<>'-1') SET @vfil_ds_type = '1';

	SELECT @vfil_ds_task_choice = filter_value from #PRP_Filters where filter_name = 'ds_task_choice' AND filter_value NOT IN ('-1', 'ALL', '');

	SELECT @vgoal_flag = filter_value from #PRP_Filters where filter_name = 'goal_local_term'

   --** GET DATE FILTER value variables
	SELECT @vfil_ds_schedule_mth_yr = filter_value
	FROM #PRP_Filters
	WHERE filter_name = 'ds_schedule_mth_yr';

	if len(@vfil_ds_schedule_mth_yr) = 6
	begin
	set @vfil_ds_schedule_mth_yr = '0'+ @vfil_ds_schedule_mth_yr
	end

	SET @vfil_ds_schedule_mth   = CONVERT(SMALLINT, left(@vfil_ds_schedule_mth_yr, CHARINDEX(@vDelim, @vfil_ds_schedule_mth_yr) - 1));
	SET @vfil_ds_schedule_yr    = CONVERT(SMALLINT, right(@vfil_ds_schedule_mth_yr, LEN(@vfil_ds_schedule_mth_yr) - CHARINDEX(@vDelim, @vfil_ds_schedule_mth_yr)));

	IF len(@vIs_chart)=1
	BEGIN
	    SET @vfil_ds_schedule_date  = CONVERT(DATETIME, CONVERT(VARCHAR(4), @vfil_ds_schedule_yr) + '-' + CONVERT(VARCHAR(2), @vfil_ds_schedule_mth) + '-01');

	    IF @vfil_ds_schedule_mth    = 12
		    SET @vfil_ds_schedule_date2 = convert(datetime, convert(varchar(4), @vfil_ds_schedule_yr + 1) + '-01-01');
	    ELSE
		    SET @vfil_ds_schedule_date2 = convert(datetime, convert(varchar(4), @vfil_ds_schedule_yr) + '-' + convert(varchar(2), @vfil_ds_schedule_mth + 1) + '-01');
	END

	IF len(@vIs_chart)>1--len(@vIs_chart)>1
	BEGIN

		select
			@vfil_ds_schedule_date=cast(substring(@vIs_chart,1,charindex( @vDelim,@vIs_chart)-1) as datetime),
               @vfil_ds_schedule_date2=cast(substring(@vIs_chart,charindex( @vDelim,@vIs_chart)+1,len(@vIs_chart)) as datetime)+1;

			set @vfil_ds_last_day_of_month = DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0)+1


	  END
	  if @debug_me = 'Y' select @vfil_ds_last_day_of_month as ds_last_day_of_month, @vfil_ds_schedule_date2 as fil_ds_schedule_date2

	SET @today = getdate()

	-- can be replaced by doc.effective_date >= @vfil_ds_schedule_date_tzadj
	select @vfil_ds_schedule_date_tzadj  = dateadd(hh, datediff(hh, dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, @today), @today), @vfil_ds_schedule_date)
	select @vfil_ds_schedule_date2_tzadj = dateadd(hh, datediff(hh, dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, @today), @today), @vfil_ds_schedule_date2)

	set @vfil_ds_schedule_date2_tzadj_plus1 = DATEADD(dd,1,@vfil_ds_schedule_date2_tzadj)

	-- extending it for 2 days - 1 second to cater for night shift or hourly schedule that fell on the last day of the month
	-- and documented on the following month
	SET @vCurrentDate= DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,1))
	SET @vOldestDate = convert(datetime, '1969-12-31');

	  ---- POC GO LIVE DATE
	  SELECT  @vPocGoLiveDate=dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID,Cast(value as datetime))
	  from configuration_parameter where name ='poc_go_live_date'and fac_id=@vFacId;

	  --if the POC go live date happened in the middle of the month
	  --the report will still need to run
	  if dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, @vfil_ds_schedule_date2) < 	@vPocGoLiveDate
	  BEGIN
	     Set @status_code = 2 ; ----Set it warning
		 set @status_text = 'POC was not live on the selected date range'
		Raiserror( @status_text, 11, 1 );
	  END
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'


	select @vStep = 6, @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' daylight saving... ' + convert(varchar(26),getdate(),109)

	--- daylight saving
	SET @vyear = @vfil_ds_schedule_yr;
	SET @vStartOfMarch     = DATEADD(MONTH, 2, DATEADD(YEAR, @vyear - 1900, 0)) ;
	 SET @vStartOfNovember  = DATEADD(MONTH, 10, DATEADD(YEAR, @vyear - 1900, 0));

	 if @vCountryId <> 5172
	 begin
			-- start of DST is the 2nd Sunday of March
			-- End of DST is the first Sunday of November

		 SET @vdaylightStart    = DATEADD(HOUR, 2, DATEADD(day, ( ( 15 - DATEPART(dw, @vStartOfMarch) ) % 7 )  + 7, @vStartOfMarch))
		 SET @vdaylightEnd      = DATEADD(HOUR, 2, DATEADD(day,   ( ( 8 - DATEPART(dw, @vStartOfNovember) ) % 7 ),  @vStartOfNovember))
	 end

	 else -- UK DST
			-- start of DST is the last Sunday of March
			-- End of DST is the last Sunday of October
	 begin
		 SET @vStartOfNovember  = DATEADD(MONTH, 9, DATEADD(YEAR, @vyear - 1900, 0));
		 SET @vdaylightStart    = DATEADD(HOUR, 1, DATEADD(day,DATEDIFF(day,'19000107',DATEADD(month,DATEDIFF(MONTH,0, @vStartOfMarch),30))/7*7,'19000107'))
		 SET @vdaylightEnd      = DATEADD(HOUR, 2, DATEADD(day,DATEDIFF(day,'19000107',DATEADD(month,DATEDIFF(MONTH,0, @vStartOfNovember),30))/7*7,'19000107'))

	end
   if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

  ---- Field To Display
     select @vStep = 7, @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Field To Display... ' + convert(varchar(26),getdate(),109)


	 INSERT INTO #PRP_Report_Metadata_FieldstoDisplay
	 select substring(items,1,charindex(@vDelim,items)-1) ,right(items,1)
	       from dbo.Split(@vFieldList,@vDelim_s) ;

	if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'photo') SET @vIncludePhoto = '1' ELSE SET @vIncludePhoto='0';
	--if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'doc_respon') SET @vIncludeDocumentRespon = '1' ELSE SET @vIncludeDocumentRespon='0';
	SET @vIncludeDocumentRespon='1'; -- we always showing documentation respone
	if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'initial'  and filter_value<>'0') SET @vIncludeInitial = '1' ELSE SET @vIncludeInitial='0';
	if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'doc_time' and filter_value<>'0') SET @vIncludeDocumentTime = '1' ELSE SET @vIncludeDocumentTime='0';
	if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'struck_out' and filter_value<>'0') SET @vIncludeStruckOut = '1' ELSE SET @vIncludeStruckOut='0';
	if Exists( select 1 from #PRP_Report_Metadata_FieldstoDisplay where filter_name = 'user_legend' and filter_value<>'0') SET @vIncludeUserLegend = '1' ELSE SET @vIncludeUserLegend='0';


    if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

      select @vStep = 8, @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Terminology... ' + convert(varchar(26),getdate(),109)

  ---- Terminology
  Select
		@vTermClient = term_client
		, @vterm_client = term_client
		, @vTermClients = term_clients
		, @vTermFacility = term_facility
		, @vTermFacilities = term_facilities
		, @vTermAdmission = term_admission
		, @vterm_admission  = term_admission
		, @vTermAdmissions = term_admissions
		, @vTermDischarge = term_discharge
		, @vTermDischarges = term_discharges
		, @vTermRoom = term_room
		, @vTermRooms = term_rooms
		, @vTermAdvDirective = term_adv_directive
	from [dbo].fn_prp_get_terminology(@vFacID,@is_emc) where fac_id = @vFacId;


	insert into #PRP_localterm
	exec dbo.sproc_prp_local_terminology 	@vFacId , @vgoal_flag;

	select @vTermTask = value from #prp_localterm where name = 'term_tsk'
	select @vTermIntervention = value from #prp_localterm where name = 'term_intrvntn'

	select @vTermTask = dbo.fn_format_local_term('term_tsk', @vTermTask, 1,1,0)
	 ,@vTermIntervention = dbo.fn_format_local_term('term_intrvntn', @vTermIntervention, 1,1,0)


	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'


	 select @vStep = 9, @step_start_time = getdate()
	if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Shift Table... ' + convert(varchar(26),getdate(),109)

	--It's using for QSHIFT
      INSERT INTO #prp_shift_link(shift_id,
                            shift_name,
                            start_time,
                            end_time,
                            group_name,
                            position_id)
       SELECT DISTINCT shift.std_shift_id,
                       shift.description+' ('+start_time+'-'+end_time+')' shift_name,
                       shift.start_time,
                             CASE
                                 WHEN CAST(shift.end_time AS INT)-1=-1
                                 THEN 1159
                                 ELSE CAST(shift.end_time AS INT)
                             END AS end_time1,
                       '',
                       0
       FROM dbo.pho_assignment_group_assoc grpass WITH (NOLOCK)
       LEFT JOIN
       cr_shift_group config WITH (NOLOCK)
       ON config.primary_assoc_id=grpass.pho_assignment_group_assoc_id
       INNER JOIN
       dbo.pho_assignment_group grp WITH (NOLOCK)
       ON grpass.pho_assignment_group_id=grp.pho_assignment_group_id
       INNER JOIN
       dbo.cp_std_shift shift WITH (NOLOCK)
       ON grpass.std_shift_id=shift.std_shift_id
      AND shift.deleted='N'
       WHERE shift.deleted='N'
         AND grpass.fac_id=@vFacId
         AND grp.fac_id=grpass.fac_id
         AND grp.deleted='N'
         AND grpass.position_id IS NOT NULL
         AND (grpass.expired_date IS NULL
           OR grpass.expired_date> case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
         AND config.primary_assoc_id IS NOT NULL;


	 INSERT INTO #prp_shift_link(shift_id,
                            shift_name,
                            start_time,
                            end_time,
                            group_name,
                            position_id)
       SELECT DISTINCT sh.std_shift_id,
                       sh.description+' ('+sh.start_time+'-'+sh.end_time+')' shift_name,
                       sh.start_time,
                             CASE
                                 WHEN CAST(sh.end_time AS INT)-1=-1
                                 THEN 1159
                                 ELSE CAST(sh.end_time AS INT)
                             END AS end_time1,
                       '' as group_name,
                       0 as position_id

					    from cp_std_shift sh with (nolock)
			where sh.fac_id in (-1, @vFacId)
			and sh.deleted = 'N'
			and not exists(select 1 from #prp_shift_link b where b.shift_id = sh.std_shift_id )

	if @debug_me='Y' select '#prp_shift_link' prp_shift_link ,* from #prp_shift_link order BY shift_name

	---select * from #prp_shift_link

	--It's using for Non-QSHIFT
	INSERT INTO #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)
       SELECT DISTINCT shift.std_shift_id,
                       shift.description+' ('+start_time+'-'+end_time+')' shift_name,
                       shift.start_time,
                       shift.end_time-1,
                       '',
                       NULL,
                       0
       FROM dbo.pho_assignment_group_assoc grpass WITH (NOLOCK)
       LEFT JOIN
       cr_shift_group config WITH (NOLOCK)
       ON config.primary_assoc_id=grpass.pho_assignment_group_assoc_id
       INNER JOIN
       dbo.pho_assignment_group grp WITH (NOLOCK)
       ON grpass.pho_assignment_group_id=grp.pho_assignment_group_id
       INNER JOIN
       dbo.cp_std_shift shift WITH (NOLOCK)
       ON grpass.std_shift_id=shift.std_shift_id
      AND shift.deleted='N'
       WHERE shift.deleted='N'
         AND grpass.fac_id=@vFacId
         AND grp.fac_id=grpass.fac_id
         AND grp.deleted='N'
         AND grpass.position_id IS NOT NULL
         AND (grpass.expired_date IS NULL
           OR grpass.expired_date> case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
         AND config.primary_assoc_id IS NOT NULL
         AND CONVERT(INT, shift.end_time)-CONVERT(INT, shift.start_time)>0;

     INSERT INTO #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)
       SELECT DISTINCT shift.std_shift_id,
                       shift.description+' ('+start_time+'-'+end_time+')' shift_name,
                       shift.start_time,
                       2400-1,
                       '',
                       NULL,
                       0
       FROM dbo.pho_assignment_group_assoc grpass WITH (NOLOCK)
       LEFT JOIN
       cr_shift_group config WITH (NOLOCK)
       ON config.primary_assoc_id=grpass.pho_assignment_group_assoc_id
       INNER JOIN
       dbo.pho_assignment_group grp WITH (NOLOCK)
       ON grpass.pho_assignment_group_id=grp.pho_assignment_group_id
       INNER JOIN
       dbo.cp_std_shift shift WITH (NOLOCK)
       ON grpass.std_shift_id=shift.std_shift_id
      AND shift.deleted='N'
       WHERE shift.deleted='N'
         AND grpass.fac_id=@vFacId
         AND grp.fac_id=grpass.fac_id
         AND grp.deleted='N'
         AND grpass.position_id IS NOT NULL
         AND (grpass.expired_date IS NULL
           OR grpass.expired_date> case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
         AND config.primary_assoc_id IS NOT NULL
         AND CONVERT(INT, shift.end_time)-CONVERT(INT, shift.start_time)<0;

     INSERT INTO #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)
     SELECT DISTINCT shift.std_shift_id,
                       shift.description+' ('+start_time+'-'+end_time+')' shift_name,
                       '0',
                       shift.end_time-1,
                       '',
                       NULL,
                       1
       FROM dbo.pho_assignment_group_assoc grpass WITH (NOLOCK)
       LEFT JOIN
       cr_shift_group config WITH (NOLOCK)
       ON config.primary_assoc_id=grpass.pho_assignment_group_assoc_id
       INNER JOIN
       dbo.pho_assignment_group grp WITH (NOLOCK)
       ON grpass.pho_assignment_group_id=grp.pho_assignment_group_id
       INNER JOIN
       dbo.cp_std_shift shift WITH (NOLOCK)
       ON grpass.std_shift_id=shift.std_shift_id
      AND shift.deleted='N'
       WHERE shift.deleted='N'
         AND grpass.fac_id=@vFacId
         AND grp.fac_id=grpass.fac_id
         AND grp.deleted='N'
         AND grpass.position_id IS NOT NULL
         AND (grpass.expired_date IS NULL
           OR grpass.expired_date> case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
         AND config.primary_assoc_id IS NOT NULL
         AND CONVERT(INT, shift.end_time)-CONVERT(INT, shift.start_time)<0;


	if @debug_me='Y' select '#prp_shifts' prp_shifts, * from #prp_shifts

	--select * from #prp_shifts

	IF (SELECT adjust_for_dst FROM facility WHERE fac_id= @vFacId)='Y'
	 BEGIN
		   INSERT INTO @Dateadjust (day_date,std_shift_id,shift_name ,fac_id,s_date, dd ,tm )
		    SELECT
			a.day_date,a.std_shift_id,ss.shift_name,a.fac_id,a.s_date,CAST(CONVERT(VARCHAR(10),a.s_date,120) AS DATETIME) dd,
		     CAST(REPLACE(CONVERT(VARCHAR(5),a.s_date,108),':','') as int)tm
		   FROM view_cp_shift_dates a
		    INNER JOIN #prp_shifts ss ON a.std_shift_id=ss.shift_id
		   WHERE a.fac_id=@vFacId
		    AND flg=1
			and a.day_date >= @vfil_ds_schedule_date_tzadj
			and a.day_date <= @vfil_ds_schedule_date2_tzadj_plus1

		   DELETE FROM @Dateadjust WHERE day_date<DATEADD(dd,-1,@vfil_ds_schedule_date) OR day_date> case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ;
		   --if @debug_me='Y' select '@Dateadjust' Dateadjust, * from @Dateadjust  order BY 1
	 END

	if @debug_me='Y' select '@Dateadjust' Dateadjust, * from @Dateadjust
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

	/* GET LIST OF Client */

	select @vStep = 10 , @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Getting list of clients... ' + convert(varchar(26),getdate(),109)

	-- Client Information
		Insert into #PRP_ClientList
		(
			  client_id
			, client_name
			, admission_date
			, discharge_date
			, deceased_date
			, gender
			, allergy
			, location
			, date_of_birth
			, client_physician_id
			, client_physician
			, client_pharmacy
			, mrn_number
			, client_id_number
			, photo
			, photo_date
			, current_care_plan_id
		)
		select  c.client_id
			, rtrim( ltrim(rtrim(isnull(m.last_name,''))) + ', ' + ltrim(rtrim(isnull(m.first_name,''))) + ' ' + ltrim(rtrim(isnull(m.middle_name,''))) ) + ' (' + ltrim(rtrim(isnull(c.client_id_number,'')))+ ')' as client_name
			--, admission_date--isnull(convert(char(10),admission_date, 101),'')	as admission_date
			,  admission_date--isnull(convert(char(10),admission_date, 101),'')	as admission_date

			--, isnull(convert(varchar(10),admission_date, 101),'')	as admission_date

			, isnull(convert(char(10),discharge_date, 101),'')	as discharge_date
			, isnull(convert(char(10),m.deceased_date, 101),'')  as deceased_date
			, isnull(m.sex,'') as gender
			, Case when @header = 'header_1' /* in (@header,@vPHDR2, @vPHDR3)*/ then isnull(c.allergy,'') else NULL end as allergy
			, rtrim(ltrim(isnull(unit_desc,''))) + ' ' +
					rtrim(ltrim(isnull(room_desc,'')))  + ' ' + rtrim(ltrim(isnull(bed_desc,''))) as location
			, isnull(convert(char(10),m.date_of_birth, 101),'')  as date_of_birth
			, convert(varchar,c.primary_physician_id) as client_physician_id
			, isnull(last_name + ', ' ,'') + isnull( first_name,'')  + ' ' + isnull(middle_name,'')  as client_physician
			, isnull(pharmacy.name,'') as client_pharmacy

			, Case when @vMRNId = -2 then c.client_id_number
				else NULL
				end as mrn_number
			, c.client_id_number
			, c.photo_small
			, c.photo_date
			, c.current_care_plan_id

		from ( Select  cl.client_id, cl.client_id_number , cl.mpi_id, cl.pharmacy_id, cl.primary_physician_id
					, cl.original_admission_date AS admission_date

					,cl.photo_date, cl.photo ,cl.photo_small, ca.allergy ,cl.discharge_date ,cl.current_care_plan_id
				from dbo.clients cl  with (nolock)
					inner join ( Select Cast(items as int) as client_id from dbo.split(@vClientIds, @vDelim)) filteredClients
						on filteredClients.client_id = cl.client_id
						and  cl.fac_id = @vFacId and  cl.deleted = 'N'
					INNER  JOIN dbo.clients_attribute ca WITH (NOLOCK)
						on cl.client_id = ca.client_id
			 ) c

		inner join dbo.mpi m with (nolock)	   on m.mpi_id = c.mpi_id
		left join dbo.emc_ext_facilities pharmacy WITH (NOLOCK) ON  ext_fac_id = c.pharmacy_id
  		inner join ( Select row,bed_id,payer_type,client_id from
						(
						 SELECT  ROW_NUMBER()  OVER (partition by client_id ORDER BY census_id desc) AS Row,
					            c.bed_id,
					         	payer_type,
					            c.client_id

						 FROM dbo.census_item c With (nolock)
						 left join dbo.AR_LIB_PAYERS libpayer with (nolock)
							ON c.primary_payer_id = libpayer.payer_id AND (libpayer.deleted = 'N')
						 WHERE c.fac_id = @vFacId and c.deleted = 'N'
							AND c.status_code_id not in (-1,17)
							AND (record_type = 'C' OR record_type IS NULL)
					  ) a
					  where Row = 1
					) loc on c.client_id = loc.client_id and ( loc.payer_type IS NULL OR loc.payer_type  <>  'OutPatient')
		left join dbo.bed b with (nolock) on loc.bed_id=b.bed_id
		left join dbo.room r with (nolock) on b.room_id=r.room_id
		left join dbo.unit u with (nolock) on  u.unit_id=r.unit_id;


	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'


	/*-------------------------------------------------------------------------------------*/
	/* update MRN number for clients if @vMRNID <> -2 and one of the headers is header_1   */
	/*-------------------------------------------------------------------------------------*/

	if @vMRNId <> -2
	BEGIN
		select @vStep = 11 , @step_start_time = getdate()
		if @debug_me='Y' Print 'STEP' +  convert(varchar(20), @vStep)  + ' Updating MRN number from vwClientIDS for  header_1 ' + convert(varchar(26),getdate(),109)

		Update #PRP_ClientList SET mrn_number = ltrim(rtrim(vwClientIds.description))
			  From #PRP_ClientList c
			  inner join dbo.view_client_ids vwClientIds with (nolock) on vwClientIds.client_id  = c.client_id and id_type_id = @vMRNId
		if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	END
	if @debug_me='Y' select '#PRP_ClientList' PRP_ClientList, * from #PRP_ClientList

    ------------------------------------------------------------------------------------------
    ---    POC General Cofiguration PickList
	------------------------------------------------------------------------------------------
	select @vStep = 13 , @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' build variable table of POC General Cofiguration PickList' + convert(varchar(26),getdate(),109)

		 Set @vShowHistorical=0;

		 ;WITH config_audit AS (

						 SELECT 	  fac_id
									, 'fuq_options' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'fuq_options'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)

						 UNION ALL
						  SELECT 	  fac_id
									, 'fuq_options_for_mds_g' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'fuq_options_for_mds_g'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)

						 UNION ALL

						  SELECT 	fac_id, 'poc_advanced_reporting' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'poc_advanced_reporting'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)

						UNION ALL
						 SELECT 	fac_id, 'short_code_resident_not_available' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'short_code_resident_not_available'
							AND (FAC_ID = @vFacId  OR configuration_parameter_audit.FAC_ID = -1)
						UNION ALL
						 SELECT 	 fac_id,'short_code_resident_refused' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'short_code_resident_refused'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)
						UNION ALL
						 SELECT 	 fac_id,'short_code_not_applicable' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'short_code_not_applicable'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)
						UNION ALL
						 SELECT 	 fac_id,'poc_adv_report_tube_short_code' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'poc_adv_report_tube_short_code'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)
						UNION ALL
						 SELECT 	 fac_id,'poc_adv_report_npo_short_code' as [name]
									, [value]
									, CASE WHEN effective_date IS NULL THEN @vOldestDate ELSE  dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, effective_date) END AS effective_date
									, CASE WHEN ineffective_date IS NULL THEN @vCurrentDate ELSE dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, ineffective_date)  END AS ineffective_date
							FROM dbo.configuration_parameter_audit WITH (NOLOCK)
							WHERE
								 [name] = 'poc_adv_report_npo_short_code'
							AND (FAC_ID = @vFacId  OR FAC_ID = -1)
		)
		,
		config_current AS (
							SELECT 	 config.fac_id,config.name,config.value,
									 CASE WHEN MaxHist IS NULL THEN @vOldestDate ELSE MaxHist END AS effective_date,
									 @vCurrentDate AS ineffective_date
							FROM dbo.configuration_parameter config WITH (NOLOCK)
							LEFT JOIN (select fac_id, name, MAX(ineffective_date) MaxHist
							            from config_audit
										group by fac_id,name) config_maxDate
									                         ON config_maxDate.name=config.name and
															    config_maxDate.fac_id=config.fac_id
							WHERE	(config.FAC_ID =  @vFacId  OR config.FAC_ID = -1)
								AND	( config.[name] IN ('fuq_options','poc_advanced_reporting','short_code_resident_not_available','short_code_resident_refused',
			                        'short_code_not_applicable', 'poc_adv_report_tube_short_code','poc_adv_report_npo_short_code','fuq_options_for_mds_g'))
		                  )
						, allConfig AS (
							 SELECT name,value,effective_date,ineffective_date
									 FROM config_audit
											UNION all
							 SELECT name,value,effective_date,ineffective_date
									 FROM config_current
							)
						--	, behave_of_application as (
						--	SELECT 	 config.fac_id,config.name,config.value,
						--			  @vOldestDate effective_date,
						--			  @vCurrentDate AS ineffective_date
						--	FROM dbo.configuration_parameter config WITH (NOLOCK)

						--	WHERE	(config.FAC_ID =  @vFacId  OR config.FAC_ID = -1)
						--		AND	( config.[name] IN ('fuq_options','poc_advanced_reporting','short_code_resident_not_available','short_code_resident_refused',
			   --                     'short_code_not_applicable', 'poc_adv_report_tube_short_code','poc_adv_report_npo_short_code','fuq_options_for_mds_g'))
	--						)


	--				--select * FROM config_current

	-------	handeling audit date in a mounth
		INSERT INTO @pocGeneralConfig ( name,value,effective_date,ineffective_date)
		SELECT pConfig.name,pConfig.value,childConfig.effective_date,childConfig.ineffective_date
		FROM allConfig pConfig
		 INNER JOIN (
					SELECT name,max(effective_date) effective_date,max(ineffective_date)	ineffective_date
					 FROM allConfig
					WHERE  --allConfig.name='fuq_options'	  and
					 1=  CASE
							 WHEN (allConfig.effective_date  >=  @vfil_ds_schedule_date  AND allConfig.effective_date  <  @vfil_ds_schedule_date2) THEN 1
							 WHEN (allConfig.ineffective_date IS NULL OR allConfig.ineffective_date>= @vfil_ds_schedule_date2) AND allConfig.effective_date < @vfil_ds_schedule_date2 THEN 1
							 WHEN (allConfig.ineffective_date IS NOT NULL AND  allConfig.ineffective_date< @vfil_ds_schedule_date2  AND allConfig.ineffective_date>= @vfil_ds_schedule_date)
								AND allConfig.effective_date  <  @vfil_ds_schedule_date2 THEN 1
						 ELSE 0 end
					and name not in ('short_code_resident_not_available','short_code_resident_refused','short_code_not_applicable', 'poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')
					GROUP BY name )	childConfig
		    ON pConfig.name= childConfig.name	 AND pConfig.effective_date= childConfig.effective_date AND	pConfig.ineffective_date= childConfig.ineffective_date
			UNION ALL
		   SELECT name,value, effective_date,	ineffective_date
					 FROM allConfig
					WHERE  --allConfig.name='fuq_options'	  and
					 1=  CASE
							 WHEN (allConfig.effective_date  >=  @vfil_ds_schedule_date  AND allConfig.effective_date  <  @vfil_ds_schedule_date2) THEN 1
							 WHEN (allConfig.ineffective_date IS NULL OR allConfig.ineffective_date>= @vfil_ds_schedule_date2) AND allConfig.effective_date < @vfil_ds_schedule_date2 THEN 1
							 WHEN (allConfig.ineffective_date IS NOT NULL AND  allConfig.ineffective_date< @vfil_ds_schedule_date2  AND allConfig.ineffective_date>= @vfil_ds_schedule_date)
								AND allConfig.effective_date  <  @vfil_ds_schedule_date2 THEN 1
						 ELSE 0 end
					and name  in ('short_code_resident_not_available','short_code_resident_refused','short_code_not_applicable', 'poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')
		;

	if @debug_me = 'y' 	 SELECT '@pocGeneralConfig' pocGeneralConfig,* from @pocGeneralConfig

	if (select count(1) from  @pocGeneralConfig
		   where name in ('short_code_not_applicable','short_code_resident_not_available','short_code_resident_refused'))>3
		  set @vShowHistorical=1;

	     if  @vShowHistorical=1
			BEGIN
		         ;with systemPick  as (
			select  distinct top 1000 effective_date,ineffective_date,
			'Effective Date: ('+
					case when convert(varchar(20), b.effective_date,@vdateFormatStyle) like '%1969%' or  convert(varchar(20),b.effective_date,@vdateFormatStyle) is null then CONVERT(varchar(10), CONVERT(date, '12/31/1969' , 101), @vdateFormatStyle)
						else +convert(varchar(20),b.effective_date ,@vdateFormatStyle)+' '+convert(varchar(5),b.effective_date ,108) end +' - '+
					 case when b.ineffective_date=@vcurrentdate or ineffective_date>@vcurrentdate then 'Current' else convert(varchar(20),b.ineffective_date,@vdateFormatStyle)+' '+convert(varchar(5),b.ineffective_date,108) end + ') '  +
		    (
			 select     case when name='short_code_not_applicable' then value +'- Not Applicable'
					 when name='short_code_resident_not_available' then value +'- Resident Not Available'
					 when name='short_code_resident_refused' then value +'- Resident Refused'	 end + ', '  as [text()]
			  from @pocGeneralConfig a

			   where name in ('short_code_not_applicable','short_code_resident_not_available','short_code_resident_refused')
			    and  a.effective_date=b.effective_date and a.ineffective_date=b.ineffective_date
			    order by effective_date,ineffective_date,value
			   FOR XML PATH('')
			   )  as  systempicklist
			   from  @pocGeneralConfig  b
			   where name in ('short_code_not_applicable','short_code_resident_not_available','short_code_resident_refused')

			  order by effective_date,ineffective_date
				)



					select  @SystemPicklist=@vNewLine+left(txt ,len(txt)-1)
					from( select substring(
					 (Select  left(systempicklist,len(systempicklist)-1)+@vNewLine AS [text()]
							 From systemPick
							 For XML PATH ('')
					  ),1,8000) txt	   ) test
			    ;
		     END
	      ELSE
		    BEGIN

		    select @SystemPicklist=systempicklist
		from (	  --' System Response available for all questions: '+
		select  ' '+systemPicklist
		from (
		select top 10  case when name='short_code_not_applicable' then value +'- Not Applicable'
				  when name='short_code_resident_not_available' then value +'- Resident Not Available'
				  when name='short_code_resident_refused' then value +'- Resident Refused'	 end  systemPicklist
		from  @pocGeneralConfig  where name in ('short_code_not_applicable','short_code_resident_not_available','short_code_resident_refused')
		and 1=case when @vIs_chart<>'0' and (ineffective_date>=@vfil_ds_schedule_date2  or ineffective_date is null) 	 then 1
				  when @vIs_chart='0' and (ineffective_date>=@vcurrentdate  or ineffective_date is null) then 1 else 0 end
		 order by value desc
	    ) a1
		FOR XML PATH('')) a(systempicklist)

		    END


	if @debug_me='Y' select @SystemPicklist [SystemPicklist], @vShowHistorical [vShowHistorical]

	IF EXISTS( SELECT 1 FROM @pocGeneralConfig WHERE name = 'fuq_options' and value='Y')
	BEGIN
	 SET @vfil_fuq_options = '1';
	 IF EXISTS( SELECT 1 FROM @pocGeneralConfig WHERE name = 'fuq_options_for_mds_g'  and value='Y')
	   SET @vfil_fuq_options_for_mds_g='1';

	END

	IF EXISTS( SELECT 1 FROM @pocGeneralConfig WHERE name = 'poc_advanced_reporting' and value='Y')
	 SET @vfil_poc_advanced='1';

   if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

   if @debug_me = 'Y' select @vfil_poc_advanced [vfil_poc_advanced], @vfil_fuq_options_for_mds_g [vfil_fuq_options_for_mds_g],@vfil_fuq_options [vfil_fuq_options]
	--select 888,* FROM @pocGeneralConfig

	--LIST OF INTERVENTIONS/TASKS
	select @vStep = 14 , @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  +  ' build temp table of interventions' + convert(varchar(26),getdate(),109)

	INSERT INTO #PRP_ds_interventions (client_id,gen_intervention_id, intervention_id, std_intervention_id,resolved_date ,
                                        flowsheet, current_row ,fac_id ,text1, date_initiated)
	SELECT  distinct
		  c.client_id
		, intervention.gen_intervention_id
		, intervention.intervention_id
		, intervention.std_intervention_id
		, intervention.resolved_date
		, intervention.flowsheet
		, intervention.current_row
		, intervention.fac_id
		, intervention.text1
		, intervention.date_initiated

		FROM
			dbo.CP_REV_INTERVENTION intervention WITH (NOLOCK)
			INNER JOIN #PRP_ClientList c WITH (NOLOCK) ON
					c.client_id = intervention.clientID

			INNER JOIN dbo.CP_SCHEDULE  schedule WITH (NOLOCK) ON
                          schedule.fac_Id = intervention.fac_id
                       AND schedule.intervention_id = intervention.gen_intervention_id

			LEFT JOIN dbo.CP_REV_NEED need WITH (NOLOCK) ON
				intervention.fac_id = need.fac_id
				and intervention.need_id = need.need_id
				AND need.care_plan_id = c.current_care_plan_id
				AND need.current_row = 'Y'

			LEFT JOIN dbo.cp_fst_type_std_intervention fst WITH (NOLOCK) ON
					fst.std_intervention_id = intervention.std_intervention_id

			LEFT JOIN #PRP_Filters f_ds_type WITH (NOLOCK) ON
			    f_ds_type.filter_name = 'ds_type'
			AND f_ds_type.filter_value = convert(varchar(10),fst.fst_type_id)

		WHERE
		   schedule.fac_id         = @vFacId
		and intervention.fac_id     = @vFacId
		and isnull(schedule.retired_date, @vfil_ds_schedule_date) >= @vfil_ds_schedule_date
		and intervention.flowsheet    = 'Y'
		and (schedule.schedule_type=40 or isnull(intervention.resolved_date,@vfil_ds_schedule_date2)>@vfil_ds_schedule_date )
		 AND 1 = CASE WHEN @vfil_ds_task_choice IS NULL THEN 1
						 WHEN @vfil_ds_task_choice = 1 THEN CASE WHEN intervention.is_task = 'N' OR intervention.is_task IS NULL THEN 1 ELSE 0 END
						 WHEN @vfil_ds_task_choice = 2 THEN CASE WHEN intervention.is_task = 'Y' THEN 1 ELSE 0 END
						 WHEN @vfil_ds_task_choice = 3 THEN 1
					 END
		AND (@vfil_ds_type is null or (@vfil_ds_type = '1' and f_ds_type.filter_value is not null))
		    AND intervention.flowsheet='Y'
			AND intervention.current_row='Y'




	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me = 'Y' select 'PRP_ds_interventions' as PRP_ds_interventions, * from #PRP_ds_interventions


	------------------------------------------------------------------------------------------
     ---    Question
	------------------------------------------------------------------------------------------
	select @vStep = 15 , @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  +  ' build temp table of Question IDs' + convert(varchar(26),getdate(),109)



	 ;with maxdate_intervention as (  
							  -- For All Tasks including custom task
    							     SELECT a.gen_intervention_id,a.intervention_id, b.std_intervention_id,
									 case when @vfil_ds_schedule_date2 < MAX(a.ineffective_date)  then @vfil_ds_schedule_date2 else MAX(a.ineffective_date) end effective_date
							     FROM dbo.cp_rev_intervention_question_audit a WITH (NOLOCK)
							       INNER JOIN  #PRP_ds_interventions b  ON b.gen_intervention_id=a.gen_intervention_id  and  b.intervention_id=a.intervention_id
								WHERE
								 ((((a.effective_date >= @vfil_ds_schedule_date
								    AND a.effective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
								    OR (a.ineffective_date >= @vfil_ds_schedule_date
								    AND a.ineffective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
								    OR (a.effective_date < @vfil_ds_schedule_date
								    AND a.ineffective_date >  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ))
								    ))
							     GROUP BY a.gen_intervention_id,a.intervention_id, b.std_intervention_id

							)
	   , auditQuesion as (
					    -- For All Tasks including custom task
					   SELECT a.gen_intervention_id,a.intervention_id,c.std_intervention_id, a.std_question_id, a.sequence,
					    case
					      when convert(varchar(20),a.effective_date ,101) like '%1969%' then cast(convert(varchar(20),a.effective_date ,101) as datetime)
					      else
					     cast(convert(varchar(20),a.effective_date ,101)+  +' '+convert(varchar(5),a.effective_date ,108) as datetime) end  effective_date,
						cast(convert(varchar(20),a.ineffective_date ,101)+  +' '+convert(varchar(5),a.ineffective_date ,108) as datetime) 	ineffective_date
					    FROM dbo.cp_rev_intervention_question_audit a WITH (NOLOCK)
					    INNER JOIN #PRP_ds_interventions c
						    ON c.gen_intervention_id = a.gen_intervention_id and c.intervention_id=a.intervention_id
					     WHERE
						   ((((a.effective_date >= @vfil_ds_schedule_date
							 AND a.effective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (a.ineffective_date >= @vfil_ds_schedule_date
							 AND a.ineffective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (a.effective_date < @vfil_ds_schedule_date
							 AND a.ineffective_date >  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ))
							 ))

	   )
	   , all_question	 as (
						    SELECT	c.gen_intervention_id,
						          c.intervention_id,
							   c.std_intervention_id,
							   a.std_question_id,
							   a.sequence,
							   cast(convert(varchar(20),tt.effective_date ,101)+  +' '+convert(varchar(5),tt.effective_date ,108) as datetime) effective_date,
							   CAST(NULL AS datetime) ineffective_date
						   FROM dbo.cp_rev_intervention_question a WITH (NOLOCK)
						    INNER JOIN #PRP_ds_interventions c  ON c.gen_intervention_id = a.intervention_id
						    outer apply( select * from maxdate_intervention b  where a.intervention_id = b.gen_intervention_id) tt

						  UNION ALL
						    SELECT c.gen_intervention_id,
								   c.intervention_id,
							     -1 std_intervention_id,
							      a.std_question_id,
							      a.sequence,
							      cast(convert(varchar(20),tt.effective_date ,101)+  +' '+convert(varchar(5),tt.effective_date ,108) as datetime) effective_date,
							      CAST(NULL AS datetime) ineffective_date
						   FROM dbo.cp_rev_intervention_question a WITH (NOLOCK)
						   INNER JOIN #PRP_ds_interventions c on c.gen_intervention_id=a.intervention_id and c.std_intervention_id=-1
						    outer apply( select * from maxdate_intervention b  where c.intervention_id = b.intervention_id) tt

       )



	 INSERT INTO #stdQuestionIdTable (genInterventionId,interventionId,stdInterventionId,stdQuestionId,stdQuestionText,stdQuestionContorlType,stdQuestionEffective_Date,stdQuestionIneffective_Date,
	                                  stdPickListId,sequence,system_control_flag,mds_question_key_old,less_picklist,rowNumber, stdQuestionRank, fac_id)


	  SELECT distinct rev.gen_intervention_id,rev.intervention_id,rev.std_intervention_id, quest.std_question_id, stdQues.question_text, stdQues.control_type
			    , isnull(quest.effective_date,cast('1969-12-31' as datetime))
			    , isnull (quest.ineffective_date,@vCurrentDate)
				, stdQues.std_pick_list_id, quest.sequence ,stdQues.system_control_flag,	stdQues.mds_question_key_old
				, CASE
					  WHEN  @vEnv='CDN' THEN 1
					  WHEN mdsPickList.std_question_id IS NULL AND  @vEnv='USAR' THEN 0 ELSE 1 END
				, dense_rank() over ( order by rev.std_intervention_id
				, case when convert(varchar,quest.effective_date,101)='12/31/1969'  then cast('12/31/1969' as datetime) else  quest.effective_date end,sequence) row_number
				, ROW_NUMBER() over( partition by rev.gen_intervention_id,rev.intervention_id,rev.std_intervention_id, quest.std_question_id order by rev.gen_intervention_id,rev.intervention_id,rev.std_intervention_id, quest.std_question_id,   isnull(quest.effective_date,cast('1969-12-31' as datetime)) )
				, rev.fac_id

	   from  #PRP_ds_interventions  rev
	    LEFT JOIN (
					   select  a.gen_intervention_id,a.intervention_id,a.std_intervention_id ,a.std_question_id,a.sequence,a.effective_date ,a.ineffective_date
					   from auditQuesion a
								where not exists( select 1 from all_question aq where aq.gen_intervention_id=  a.gen_intervention_id																								
																								and  aq.std_question_id = a.std_question_id 
																								and  (effective_date is null OR effective_date < case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end))
					   union ALL

					   select  a.gen_intervention_id,a.intervention_id,a.std_intervention_id ,a.std_question_id,a.sequence,a.effective_date ,a.ineffective_date
						 from  all_question a
					   where
						 exists (select 1 from  maxdate_intervention d where
														d.gen_intervention_id=a.gen_intervention_id														
														and d.intervention_id =a.intervention_id
																		 and  (ISNULL(@vAllowPastSched,'N') = 'Y' or -- skip if they allow to create schedule in the past
																		 d.effective_date<=    case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end 	)
																		 )
						or
								(ineffective_date is null
							   and not exists (select 1 from  maxdate_intervention d where															  
														  d.gen_intervention_id=a.gen_intervention_id
														  and d.intervention_id =a.intervention_id))
			   ) AS quest
			ON  rev.gen_intervention_id= quest.gen_intervention_id
				  and rev.intervention_id=quest.intervention_id
                  --Currently, if a FUQ is changed, both old and new FUQs appear on any past and future report unnecessarily. below is to prevent it, so only the month that the FUQ has changed will show the both and either old or new FUQ will display for past/future month.
                  and (quest.effective_date is null OR quest.effective_date < case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end)
		INNER JOIN dbo.cp_std_fuq_fac fuq  WITH (NOLOCK)
			ON fuq.fac_id=@vFacId AND fuq.question_id=quest.std_question_id

		LEFT JOIN dbo.cp_std_question stdQues WITH (NOLOCK)
			ON stdQues.std_question_id = quest.std_question_id

		LEFT JOIN  ( SELECT  DISTINCT  mds.std_question_id
						FROM cp_std_question_mds mds
						WHERE mds.mds_question_key LIKE 'G0110%' or mds.mds_question_key LIKE 'G0120%'
					) mdsPickList
		ON mdsPickList.std_question_id =stdQues.std_question_id;



   if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
   if @debug_me = 'y' 	 SELECT '#stdQuestionIdTable' as stdQuestionIdTable,* from #stdQuestionIdTable

   ------------------------------------------------------------------------------------------
     ---    Raw Pick List
   ------------------------------------------------------------------------------------------

	select @vStep = 16 , @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' build temp table of PickList ' + convert(varchar, @step_start_time)

       ;WITH lessPicklist AS (
						  SELECT question.stdInterventionId,
						 question.stdQuestionId,
						 question.less_picklist,
						 MAX(CASE
							    WHEN @vfil_fuq_options_for_mds_g=1
							    THEN pk_list.sequence
							    ELSE 0
							END) sequence
							 FROM dbo.cp_std_pick_list_item pk_list WITH (NOLOCK)
							 INNER JOIN  #stdQuestionIdTable question
							       ON question.stdPickListId=pk_list.std_pick_list_id
							 WHERE pk_list.deleted='N'
							   AND question.less_picklist<>0
							 GROUP BY question.stdInterventionId,
									question.stdQuestionId,
									question.less_picklist )
	   ,maxeffectiveDate as(
				   SELECT b.genInterventionId,
						 b.interventionId,
						 b.stdInterventionId,
						 b.stdQuestionId, std_pick_list_id,
						 MAX(a.ineffective_date)  effective_date  ,MAX(a.effective_date)   effective_date_befor
				    FROM dbo.cp_std_pick_list_item_audit a  WITH (NOLOCK)
				    INNER JOIN	 #stdQuestionIdTable b   ON b.stdPickListId=a.std_pick_list_id
				    --where stdInterventionId=8663 and a.std_pick_list_id =81
				    GROUP BY b.genInterventionId,
						   b.interventionId,
						   b.stdInterventionId,
						   b.stdQuestionId ,std_pick_list_id
	  )
	 ,picklist_audit as (

        select  distinct  question.genInterventionId,question.interventionId,question.stdInterventionId,question.stdQuestionId,
             a.std_pick_list_item_id,a.std_pick_list_id,a.item_value
	         ,a.description,a.sequence,a.short_code,
	 	   case
					      when convert(varchar(20),a.effective_date ,101) like '%1969%' then cast(convert(varchar(20),a.effective_date ,101) as datetime)
					      else
					     cast(convert(varchar(20),a.effective_date ,101)+  +' '+convert(varchar(5),a.effective_date ,108) as datetime) end  effective_date,
						cast(convert(varchar(20),a.ineffective_date ,101)+  +' '+convert(varchar(5),a.ineffective_date ,108) as datetime) 	ineffective_date
    FROM dbo.cp_std_pick_list_item_audit a  WITH (NOLOCK)
		inner join #stdQuestionIdTable question on question.stdPickListId=a.std_pick_list_id

		WHERE
				--a.deleted='N' AND
		 --and stdInterventionId=8663 and a.std_pick_list_id =81
		  NOT EXISTS (select 1 FROM lessPicklist lpk where lpk.stdInterventionId=question.stdInterventionId and lpk.stdQuestionId=question.stdQuestionId  and
			 				 lpk.sequence=a.sequence)
		and
								 (  ISNULL(@vAllowPastSched,'N') = 'Y' or
									 (((a.effective_date >= @vfil_ds_schedule_date
										AND a.effective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
										OR (a.ineffective_date >= @vfil_ds_schedule_date
										AND a.ineffective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
										OR (a.effective_date < @vfil_ds_schedule_date
										AND a.ineffective_date >  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ))
										))

	 	 )
	 , all_picklist as (

  	select distinct
	 question.genInterventionId,question.interventionId,question.stdInterventionId,question.stdQuestionId,
             a.std_pick_list_item_id,a.std_pick_list_id,a.item_value
	         ,a.description,a.sequence,a.short_code,
 	 	  cast(convert(varchar(20),tt.effective_date ,101)+  +' '+convert(varchar(5),tt.effective_date ,108) as datetime) effective_date,
							   CAST(NULL AS datetime) ineffective_date
	FROM dbo.cp_std_pick_list_item a  WITH (NOLOCK)
		inner join #stdQuestionIdTable question on question.stdPickListId=a.std_pick_list_id
		 outer apply( select * from maxeffectiveDate b  where question.stdInterventionId = b.stdInterventionId
		 										    and question.InterventionId = b.InterventionId
												    and question.genInterventionId = b.genInterventionId
												    and a.std_pick_list_id = b.std_pick_list_id

		) tt
	 where  (a.deleted='N' or ( a.deleted_date>= @vfil_ds_schedule_date))
	--and question.stdInterventionId=8663 and a.std_pick_list_id =81
	)

	 INSERT INTO #stdPickListTable (genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	                           sequence,short_code,effective_date,ineffective_date )
	  select distinct genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	         sequence,short_code,effective_date, ineffective_date
		    from (
	  select genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	         sequence,short_code,effective_date, ineffective_date
		from picklist_audit
		union all
	    select distinct genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	                               sequence,short_code,effective_date,
							 isnull( ineffective_date,@vCurrentDate)
		from all_picklist a
		 where  (exists (select 1 from  maxeffectiveDate d where
										d.stdInterventionId=a.stdInterventionId
										and d.geninterventionid=a.geninterventionid
										and d.interventionid =a.interventionId
										and d.std_pick_list_id = a.std_pick_list_id
	                                             and  (ISNULL(@vAllowPastSched,'N') = 'Y' or  effective_date<=    case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end 	) )
	    or
	            (ineffective_date is null
			   and not exists (select 1 from  maxeffectiveDate d where
										d.stdInterventionId=a.stdInterventionId
										and d.geninterventionid=a.geninterventionid
										and d.interventionid =a.interventionId
										and d.std_pick_list_id = a.std_pick_list_id)))

			  ) tt


	  INSERT INTO #stdPickListTable (genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,sequence,short_code,
								effective_date,ineffective_date )
		    SELECT distinct  question.genInterventionId,question.interventionId,question.stdInterventionId,question.stdQuestionId,
						 NULL std_pick_list_item_id, NuLL std_pick_list_id, cntrl.item_value, cntrl.description, isnull(cntrl.sequence, question.sequence),NULL short_code,
						 NULL effective_date ,@vCurrentDate ineffective_date
				    FROM #stdQuestionIdTable question
					LEFT JOIN #PRP_cntrlValues cntrl
					on question.stdQuestionContorlType = cntrl.cntrl_type
		    WHERE question.stdPickListId is null
			AND NOT EXISTS (select 1 FROM #stdPickListTable lpk where lpk.stdInterventionId=question.stdInterventionId and
														   lpk.stdQuestionId=question.stdQuestionId  and
														   lpk.genInterventionId=question.genInterventionId
			 					) ;

	 UPDATE  #stdPickListTable
		    SET effective_date=@vOldestDate
		 WHERE effective_date IS NULL;

	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me = 'Y' select '#stdPickListTable' as stdPickListTable, * from #stdPickListTable



     select @vStep = 17, @step_start_time = getdate()
	if @debug_me='Y' Print 'BEGIN STEP ' +  convert(varchar(20), @vStep)  + ' Insert Final PickList by correct date range  ' + convert(varchar, @step_start_time)

	insert into #vprpPickList(genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	  sequence,short_code,effective_date,ineffective_date)

	    	select genInterventionId,interventionId,stdInterventionId,stdQuestionId ,std_pick_list_item_id,std_pick_list_id,item_value,description,
	  sequence,short_code,effective_date,ineffective_date
	from #stdPickListTable a where
						   (  ISNULL(@vAllowPastSched,'N') = 'Y' or
						   (((a.effective_date >= @vfil_ds_schedule_date
							 AND a.effective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (a.ineffective_date >= @vfil_ds_schedule_date
							 AND a.ineffective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (a.effective_date < @vfil_ds_schedule_date
							 AND a.ineffective_date >  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ))
							 ));

 if @debug_me='Y' select  '#vprpPickList' as vprpPickList , * from #vprpPickList

 insert into #intervention_audit (genInterventionId,interventionId,stdInterventionId,stdQuestionEffective_Date,stdQuestionIneffective_Date,questionText, std_question_id)
	    select distinct  a.genInterventionId,a.interventionId,a.stdInterventionId,a.stdQuestionEffective_Date,a.stdQuestionIneffective_Date,
	 (
	 select cast(stdQuestionId as varchar)+',' as [text()]
	  from #stdQuestionIdTable b
	  where b.genInterventionId=a.genInterventionId
	  and b.interventionId=a.interventionId
	  and b.stdInterventionId=a.stdInterventionId
	  and b.stdQuestionEffective_Date=a.stdQuestionEffective_Date
	  order by b.stdQuestionEffective_Date, b.stdQuestionIneffective_Date	,
	  b.genInterventionId,b.interventionId,b.stdInterventionId,b.rowNumber
	  FOR XML PATH('')
	 )  questionText
	 , a.stdQuestionId
	 from #stdQuestionIdTable a;

 if @debug_me='Y' select  '#intervention_audit' as intervention_audit , * from #intervention_audit



 insert into #event_date (effective_date,ineffective_date,genInterventionId,interventionId,stdInterventionId,stdQuestionId,questiontext)
		 select distinct

		 --b.stdQuestioneffective_Date,b.stdQuestionineffective_Date,
		 a.effective_date,a.ineffective_date,
		 --case
			--    when  (a.ineffective_date> b.stdQuestioneffective_Date  and a.ineffective_date<stdQuestionIneffective_Date   and effective_date<	stdQuestioneffective_Date) then 1
			--	when (a.effective_date>= b.stdQuestioneffective_Date  and a.effective_date<=stdQuestionIneffective_Date   and ineffective_date>=	stdQuestionIneffective_Date) then 1
			--	when a.effective_date=b.stdQuestioneffective_Date and a.ineffective_date<stdQuestionIneffective_Date then 1
			--  else 0 end tt ,

			  a.genInterventionId,a.interventionId,a.stdInterventionId,a.stdQuestionId,b.questiontext

			  from #vprpPickList a --picklist_audit a
			  inner join #intervention_audit b
			  on  a.stdInterventionId=b.stdInterventionId
			    and a.genInterventionId=b.genInterventionId
			    and a.interventionId  =b.interventionId
			 where
			 --a.stdInterventionId=8660
			 -- and

			 1 = case
			    when  (a.ineffective_date> b.stdQuestioneffective_Date  and a.ineffective_date<stdQuestionIneffective_Date   and effective_date<	stdQuestioneffective_Date) then 1
				when (a.effective_date>= b.stdQuestioneffective_Date  and a.effective_date<=stdQuestionIneffective_Date   and ineffective_date>=	stdQuestionIneffective_Date) then 1
				when a.effective_date=b.stdQuestioneffective_Date and a.ineffective_date<stdQuestionIneffective_Date then 1
			  else 0 end



;with	    event_all_question as
	    (
		 select 	genInterventionId,interventionId,stdInterventionId ,effective_date,ineffective_date,left(questiontext ,len(questiontext)-1) questiontext
			 ,DENSE_RANK() OVER (ORDER BY genInterventionId,interventionId,stdInterventionId ,questiontext,effective_date,	ineffective_date) seq
			 , std_question_id
		  from (
			   select   distinct
			   --stdQuestioneffective_Date,stdQuestionineffective_Date,effective_date,	ineffective_date ,
			   --case
						-- when effective_date >= stdQuestioneffective_Date and effective_date<=stdQuestionineffective_Date and (case when ineffective_date>@vcurrentdate then @vCurrentDate else ineffective_date end=@vCurrentDate) then 1
						-- when	effective_date <=stdQuestioneffective_Date and (case when ineffective_date>@vcurrentdate then @vCurrentDate else ineffective_date end) <stdQuestionineffective_Date then 2
						-- when b.ineffective_date is null and b.effective_date is null then 3
						-- when stdQuestioneffective_Date=stdQuestionineffective_Date  then 4
					 --  else 0 end	,
			   a.genInterventionId,a.interventionId,a.stdInterventionId,
				   case when b.effective_date is null then a.stdQuestioneffective_Date else b.effective_date end effective_date ,
				   case when b.ineffective_date is null then a.stdQuestionIneffective_Date else
				     case when b.ineffective_date>@vcurrentdate then @vcurrentdate else b.ineffective_date end end  ineffective_date,
				   case when b.questiontext is null then a.questiontext else b.questiontext end questiontext ,
				   a.std_question_id
				   from #intervention_audit a
				   left join #event_date b
				   on  a.stdInterventionId=b.stdInterventionId
				   and a.genInterventionId=b.genInterventionId
				   and a.interventionId  =b.interventionId
				   and a.questiontext=b.questiontext
				   where
				   1=case
						 	 when effective_date >= stdQuestioneffective_Date and effective_date<=stdQuestionineffective_Date and (case when ineffective_date>@vcurrentdate then @vCurrentDate else ineffective_date end=@vCurrentDate) then 1
						 when	effective_date <=stdQuestioneffective_Date and (case when ineffective_date>@vcurrentdate then @vCurrentDate else ineffective_date end) <stdQuestionineffective_Date then 1
						 when b.ineffective_date is null and b.effective_date is null then 1
					   else 0 end
			    )A

)
,fixed_allquestion_date as (

select distinct

a.genInterventionId,a.interventionId,a.stdInterventionId ,
case   when a.effective_date<=b.effective_date  and b.effective_date<a.ineffective_date then a.effective_date
  else  a.effective_date END effective_date,

	case
	when a.effective_date<=b.effective_date  and b.ineffective_date=@vcurrentdate and  b.ineffective_date=a.ineffective_date then b.effective_date
	when b.effective_date<=a.effective_date  and b.ineffective_date=@vcurrentdate and  b.ineffective_date=a.ineffective_date then a.effective_date
     when a.effective_date=b.effective_date  and b.ineffective_date=@vcurrentdate and a.ineffective_date<b.ineffective_date then a.ineffective_date
     else a.ineffective_date
	END ineffective_date	,

a.questiontext,a.seq
, a.std_question_id
FROM event_all_question  a
left join event_all_question b ON
a.stdInterventionId=b.stdInterventionId
and a.genInterventionId=b.genInterventionId
and a.interventionId  =b.interventionId
and a.questiontext=b.questiontext
and a.seq+1=b.seq
--where a.stdInterventionId=8660
)

insert into #PRP_question_periods ( seq,genInterventionId,interventionId,stdInterventionId,period_start_date,period_end_date,questiontext,std_question_id)
Select
    seq,genInterventionId,interventionId,stdInterventionId,effective_date,ineffective_date,questiontext , std_question_id
    From fixed_allquestion_date



  if @debug_me = 'Y'  select '#PRP_question_periods' PRP_question_periods,* from #PRP_question_periods


 ; with picklist as (

select seq,genInterventionId,interventionId ,stdInterventionId,period_start_date,period_end_date,questiontext	,std_question_id,std_pick_list_id,std_pick_list_item_id
	,sequence,pick_desc, rnum
from (
  select distinct a.seq,a.genInterventionId,a.interventionId,a.stdInterventionId,
  --a.period_start_date,a.period_end_date
  b.effective_date period_start_date, b.ineffective_date period_end_date
  ,a.questiontext
  ,b.std_pick_list_id,b.std_pick_list_item_id,b.sequence,b.short_code	, a.std_question_id
   , dense_rank () over ( order by a.genInterventionId,a.interventionId,a.stdInterventionId,
   case when year(b.effective_date) = 1969 and (b.ineffective_date = @vcurrentdate
    or (ISNULL(@vAllowPastSched,'N') = 'Y' and
					 year(b.effective_date) = 1969 and b.ineffective_date >= @vcurrentdate))
	then 0 else 1 end,
   b.effective_date,
case when 	ISNULL(@vAllowPastSched,'N') = 'Y' and
					 year(b.effective_date) = 1969 and b.ineffective_date >= @vcurrentdate then @vcurrentdate else
	b.ineffective_date end
	) rnum

   , isnull( ISNULL(b.short_code, b.item_value) +'- '+ b.description,'-')	as pick_desc
      FROM  #stdPickListTable b
		left join #PRP_question_periods a


--   FROM
--   #PRP_question_periods a
--left join #stdPickListTable b

 on  a.stdInterventionId=b.stdInterventionId
	  and a.genInterventionId=b.genInterventionId
	  and a.interventionId  =b.interventionId
	  and a.std_question_id=b.stdQuestionId
	  and (ISNULL(@vAllowPastSched,'N') = 'Y' or
				(((b.effective_date >= @vfil_ds_schedule_date
							 AND b.effective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (b.ineffective_date >= @vfil_ds_schedule_date
							 AND b.ineffective_date <  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end )
							 OR (b.effective_date < @vfil_ds_schedule_date
							 AND b.ineffective_date >  case when @vIs_chart<>'0' then @vfil_ds_last_day_of_month else @vfil_ds_schedule_date2 end ))
							 ))


	) Allquestion
   )

   insert into @vprpFinalPickList (seq,genInterventionId,interventionId ,stdInterventionId,period_start_date,period_end_date,questiontext
       ,stdQuestionId,std_pick_list_id,picktext)

   select distinct  rnum,genInterventionId,interventionId ,stdInterventionId,period_start_date,
   case when period_end_date >@vcurrentdate then @vcurrentdate else period_end_date end,questiontext
       ,std_question_id,std_pick_list_id,
	(
	  select pick_desc+' ' as [text()]
	  from picklist b
	  where a.seq=b.seq
	  and a.genInterventionId=b.genInterventionId
	  and a.interventionId=b.interventionId
	  and a.stdInterventionId=b.stdInterventionId
	  and a.period_start_date=b.period_start_date
	  and a.period_end_date=b.period_end_date
	  and a.questiontext=b.questiontext
	  and a.std_question_id=b.std_question_id
		and a.rnum = b.rnum
	  and isnull(a.std_pick_list_id,0)=isnull(b.std_pick_list_id,0)

	order by seq,genInterventionId,interventionId,stdInterventionId,rnum, period_start_date,period_end_date,std_question_id,std_pick_list_id,sequence
	 FOR XML PATH('')	) pickText
   from picklist a	;

     if @debug_me = 'Y'  select '@vprpFinalPickList' vprpFinalPickList,* from @vprpFinalPickList

 ; with question as (
   select distinct b.sequence,a.genInterventionId,a.interventionId,a.stdInterventionId,a.period_start_date,a.period_end_date,a.stdQuestionId,seq,
   a.std_pick_list_id,b.stdQuestionText ,a.picktext
   --into #temp14
   from @vprpFinalPickList a
   inner join #stdQuestionIdTable b
    ON a.genInterventionId=b.genInterventionId
	  and a.interventionId=b.interventionId
	  and a.stdInterventionId=b.stdInterventionId
	  and a.stdQuestionId=b.stdQuestionId

	  where ( isnull(a.period_start_date, @vCurrentDate) <= @vCurrentDate and a.period_end_date >=@vfil_ds_schedule_date
					)

	   )



	   insert into #FollowUpQuestionandPicklistItem(seq,genInterventionId,interventionId,stdInterventionId,period_start_date,period_end_date,
	                           stdquestionid,question_text,picklist_text,sequence,std_pick_list_id)
	     select max(seq)  ,genInterventionId,interventionId,stdInterventionId,period_start_date,period_end_date,stdQuestionId,stdQuestionText,picktext,sequence,std_pick_list_id
	    from question a
	     group by genInterventionId,interventionId,stdInterventionId,period_start_date,period_end_date,stdQuestionId,stdQuestionText,picktext,sequence,std_pick_list_id ;



	if @debug_me = 'Y'  select '#FollowUpQuestionandPicklistItem' FollowUpQuestionandPicklistItem,* from #FollowUpQuestionandPicklistItem;
	
	--POC Advanced Reporting responses
	if @vfil_poc_advanced = 1 and exists (select 1 from  @pocGeneralConfig where name in ('poc_adv_report_tube_short_code', 'poc_adv_report_npo_short_code'))
	BEGIN
        if (select count(1) from  @pocGeneralConfig where name in ('poc_adv_report_tube_short_code', 'poc_adv_report_npo_short_code'))>2
              set @vShowAdvancedHistorical=1;
    
             if  @vShowAdvancedHistorical=1
             BEGIN
                ;with advancedPick  as (
                    select  distinct top 1000 effective_date,ineffective_date,
                    'Effective Date: ('+
                            case when convert(varchar(20), b.effective_date,@vdateFormatStyle) like '%1969%' or  convert(varchar(20),b.effective_date,@vdateFormatStyle) is null then CONVERT(varchar(10), CONVERT(date, '12/31/1969' , 101), @vdateFormatStyle)
                                else +convert(varchar(20),b.effective_date ,@vdateFormatStyle)+' '+convert(varchar(5),b.effective_date ,108) end +' - '+
                             case when b.ineffective_date=@vcurrentdate or ineffective_date>@vcurrentdate then 'Current' else convert(varchar(20),b.ineffective_date,@vdateFormatStyle)+' '+convert(varchar(5),b.ineffective_date,108) end + ') '  +
                            (
                             select case 
                                        when name='poc_adv_report_tube_short_code' then value +'- Tube Feeding'
                                        when name='poc_adv_report_npo_short_code' then value +'- NPO'
                                     end + ', '  as [text()]
                              from @pocGeneralConfig a
                              where name in ('poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')
                                and  a.effective_date=b.effective_date and a.ineffective_date=b.ineffective_date
                                order by effective_date,ineffective_date,value
                               FOR XML PATH('')
                               ) as  advancedPickList
                              from  @pocGeneralConfig  b
                              where name in ('poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')        
                              order by effective_date,ineffective_date
                    )
        
                    select  @AdvancedPicklist = @vNewLine + left(txt ,len(txt)-1)
                    from( select substring(
                     (Select  left(advancedPickList,len(advancedPickList)-1)+@vNewLine AS [text()]
                             From advancedPick
                             For XML PATH ('')
                      ),1,8000) txt	   ) adv
                END
              ELSE
                BEGIN
    
                    select @AdvancedPicklist = advancedPickList
                    from (
						select  ' ' + advancedPickList
						from (	 
						    select top 10 case 
                                    when name='poc_adv_report_tube_short_code' then value +'- Tube Feeding'
                                    when name='poc_adv_report_npo_short_code' then value +'- NPO'	 
                                    end  advancedPickList
                            from  @pocGeneralConfig  
                            where name in ('poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')
                            and 1 = case 
                                        when @vIs_chart<>'0' and (ineffective_date>=@vfil_ds_schedule_date2  or ineffective_date is null) then 1
                                        when @vIs_chart='0' and (ineffective_date>=@vcurrentdate  or ineffective_date is null) then 1 
                                        else 0 
                                    end
							order by value desc
						) a1
						FOR XML PATH('')) a(advancedPickList)
    
				END

				SET @AdvancedPicklist = '<br />POC Advanced Reporting Responses: ' + REPLACE(@AdvancedPicklist, @vNewLine, '<br />')

    END


	if @debug_me='Y' select @AdvancedPicklist [AdvancedPicklist], @vShowAdvancedHistorical [vShowAdvancedHistorical]
	
	
	;with   QuestionXML
		as (

				select  distinct seq,b.genInterventionId,b.interventionId,b.stdInterventionId
				,b.period_start_date,b.period_end_date , b.sequence
				,
				replace(replace(replace(replace(
				 '(Effective Date: '+														 +
				 case
					 when convert(varchar(20), b.period_start_date,@vdateFormatStyle) like '%1969%' or  convert(varchar(20), b.period_start_date,@vdateFormatStyle) is null then 'Created Date'
					else +convert(varchar(20),b.period_start_date ,@vdateFormatStyle)+' '+convert(varchar(5),b.period_start_date ,108) end +' - '+
				   case when b.period_end_date=@vcurrentdate then 'Current' else  convert(varchar(20),b.period_end_date,@vdateFormatStyle)+' '+convert(varchar(5),b.period_end_date,108) end + ') '+
				(
				 select
                    '<b>'+cast(sequence as varchar)+'- '+a.question_text+'</b> ' + isnull(picklist_text,'-')+@vtab+'' +
                    case
                        -- Add a static label to the legend if control_type = 'ntv'
                        when q.control_type = 'ntv' then '0 - Narrative Text (see Follow Up Question Report for full response)'
                        else ''
                    end as [text()]

				   FROM #FollowUpQuestionandPicklistItem a
				   left join cp_std_question q on a.stdquestionid = q.std_question_id
				   where a.seq=b.seq
					and a.genInterventionId=b.genInterventionId
				  and a.interventionId=b.interventionId
				  and a.stdInterventionId=b.stdInterventionId
				  and a.sequence = b.sequence
				 order by a.genInterventionId,a.interventionId,a.stdInterventionId,a.period_start_date,a.period_end_date,a.sequence,a.seq ,a.stdQuestionId,a.std_pick_list_id
				 FOR XML PATH('')),'&lt;','<'),'&gt;','>'),'&amp;lt;','<'),'&amp;gt;','>') + 
				 case
					 when @vfil_poc_advanced = 1 and exists (select 1 from cp_std_question_mds qm where b.stdquestionid = qm.std_question_id and qm.mds_question_key in ('K5b', 'K4c'))
					  -- include POC Advanced Reporting responses
					  then @AdvancedPicklist 					     
				      else ''
				 end as question_text

				 --into #temp15
				FROM #FollowUpQuestionandPicklistItem b								
		)

	INSERT INTO @QuestionXML	(genInterventionId,interventionId,stdInterventionId,text1)

	select distinct genInterventionId,interventionId,stdInterventionId
	 , replace(replace(replace(replace(
		(
			select a.question_text+' <br />' as [text()]
				from  QuestionXML	a
				where a.genInterventionId=b.genInterventionId
				and a.interventionId=b.interventionId
				and a.stdInterventionId=b.stdInterventionId

				order by a.genInterventionId,a.interventionId,a.stdInterventionId, a.sequence,a.period_start_date,a.period_end_date
				FOR XML PATH('')
		) ,'&lt;','<'),'&gt;','>'),'&amp;lt;','<'),'&amp;gt;','>')  question_all
 	from  QuestionXML b	 ;

	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me = 'Y' select '@QuestionXML' as QuestionXML, * from @QuestionXML


	------------------------------------------------------------------------------------------
	----	Get All responses from the current tables and put them into the temp table
	------------------------------------------------------------------------------------------

	IF ( @vfil_ds_schedule_date2 >=(select dbo.fn_cp_poc_getDataAgeDate())) -- Current  Data
	BEGIN
	  SELECT @vStep = 18, @step_start_time = getdate()
		IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Geting the current document responses at ' + CONVERT(VARCHAR, @step_start_time)

			--PRN Calculation
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT  distinct
				'-1_P_A' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				CASE WHEN doc.cp_prn_documentation_id IS NULL THEN NULL
				     when strike.cp_prn_documentation_id is not null then null
					 ELSE CONVERT(VARCHAR,doc.cp_prn_documentation_id)+'_P'	END	AS documentation_id	,
				 case when strike.cp_prn_documentation_id is not null then null else doc.effective_date end  as completed_date,
				 case when strike.cp_prn_documentation_id is not null then null else doc.entered_date end,
				 case when strike.cp_prn_documentation_id is not null then null else doc.task_time end,
				 case when strike.cp_prn_documentation_id is not null then null else resp.item_value_id end,
				 case when strike.cp_prn_documentation_id is not null then null else resp.item_value end,
				 schedule.retired_date,
				 intervention.resolved_date,
				 case when strike.cp_prn_documentation_id is not null then null else audit.long_username end AS created_by_longname,
				 case when strike.cp_prn_documentation_id is not null then null else audit.position_description end AS created_by_position ,
				 case when strike.cp_prn_documentation_id is not null then null else audit.initials end,
				 'N'	as strikeout_flag,
				 NULL AS strikeout_id,
				 NULL AS strikeout_description,
				 NULL AS strikeout_by,
				 NULL strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				  INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id

				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
					 ON	 shift.schedule_id = schedule.schedule_id

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					 ON shift.std_shift_id = stdshift.std_shift_id

				  LEFT JOIN dbo.cp_prn_documentation doc WITH (NOLOCK)
					 ON	doc.schedule_id = shift.schedule_id
					  AND doc.std_shift_id = shift.std_shift_id
				       AND  doc.effective_date>= @vfil_ds_schedule_date
				       AND  doc.effective_date <= @vfil_ds_schedule_date2_tzadj

				  LEFT JOIN dbo.cp_prn_documentation_strikeout strike  WITH (NOLOCK)
					ON  doc.cp_prn_documentation_id = strike.cp_prn_documentation_id

				  LEFT JOIN dbo.cp_prn_response resp  WITH (NOLOCK)
					 ON	resp.cp_prn_documentation_id = doc.cp_prn_documentation_id

				  left JOIN #stdQuestionIdTable stdQId
				        on  intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
						 and resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				 LEFT JOIN dbo.cp_sec_user_audit audit  WITH (NOLOCK)
					 ON	doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted = 'N'
				  AND schedule.fac_id=@vFacId
				  AND schedule.fac_id = intervention.fac_id
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)
				  and stdQId.stdQuestionId is not null
				  and strike.cp_prn_documentation_id is  null
					;

				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				select schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type
				 from (
				 	SELECT
				'-1_P_A' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id ,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				convert(datetime,NULL) as schedule_date,
				Null	AS documentation_id	,
				NULL as completed_date,
				NULL as entered_date,
				NULL task_time,
				NULL item_value_id,
				NULL item_value,
				schedule.retired_date,
				 intervention.resolved_date,
			     NULL created_by_longname,
				NULL created_by_position ,
				NULL initials,
				'N'	as strikeout_flag,
				NULL strikeout_id,
				NULL strikeout_description,
				NULL strikeout_by,
				NULL strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				   INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id

				   INNER JOIN  #PRP_ClientList c on c.client_id=intervention.client_id
				    and  1= case
				              when c.admission_date< intervention.date_initiated and  year(intervention.date_initiated)= year(@vfil_ds_schedule_date)
						     and month(intervention.date_initiated)<= month(@vfil_ds_schedule_date)  then 1
							when c.admission_date< intervention.date_initiated and  year(intervention.date_initiated)< year(@vfil_ds_schedule_date)
						     and month(intervention.date_initiated)>= month(@vfil_ds_schedule_date)  then 1
						    when  c.admission_date> intervention.date_initiated and  month( c.admission_date)<= month(@vfil_ds_schedule_date) then 1 else 0 end					
				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
					 ON	 shift.schedule_id = schedule.schedule_id					 

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					 ON shift.std_shift_id = stdshift.std_shift_id

				  left JOIN #stdQuestionIdTable stdQId
				      ON
					 --stdQId.stdquestionid = resp.std_question_id
				       intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
						 and stdQId.stdQuestionRank = 1

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted = 'N'
				  AND schedule.fac_id=@vFacId
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  --and intervention.std_intervention_id=3926
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)  )tt
				where not exists (select 1 from #cp_documentation_responses b where
				    b.schedule_detail_id=tt.schedule_detail_id and
				    b.client_id= tt.client_id and
				    b.gen_intervention_id = tt.gen_intervention_id and
				    b.intervention_id =tt.intervention_id and
				   b.std_intervention_id	  =tt.std_intervention_id  and
				   b.schedule_id=tt.schedule_id AND
				   b.std_shift_id=tt.std_shift_id AND
				   b.stdQuestionId=	tt.stdQuestionId   )  ;

			 -- StruckOut Info.
			     INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT
				'-1_P_A' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				CASE WHEN doc.cp_prn_documentation_id IS NULL THEN NULL
					 ELSE CONVERT(VARCHAR,doc.cp_prn_documentation_id)+'_P'	END	AS documentation_id	,
				 doc.effective_date  as completed_date,
				 doc.entered_date,
				 doc.task_time,
				 resp.item_value_id,
				 resp.item_value,
				 schedule.retired_date,
				 intervention.resolved_date,
				 audit.long_username AS created_by_longname,
				 audit.position_description AS created_by_position ,
				 audit.initials,
				 'Y' as strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				  INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id

				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
					 ON	 shift.schedule_id = schedule.schedule_id					 

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					 ON shift.std_shift_id = stdshift.std_shift_id

				  LEFT JOIN dbo.cp_prn_documentation doc WITH (NOLOCK)
					 ON	doc.schedule_id = shift.schedule_id
					  AND doc.std_shift_id = shift.std_shift_id
					  AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date
				       AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) <= @vfil_ds_schedule_date2_tzadj

				  INNER JOIN dbo.cp_prn_documentation_strikeout strike   WITH (NOLOCK)
					 ON doc.cp_prn_documentation_id = strike.cp_prn_documentation_id

				  INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
					 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				  LEFT JOIN dbo.cp_prn_response resp  WITH (NOLOCK)
					 ON	resp.cp_prn_documentation_id = doc.cp_prn_documentation_id

				  left JOIN #stdQuestionIdTable stdQId
				      --ON	stdQId.stdquestionid = resp.std_question_id
				        on  intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
					     and resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1


				  INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
					 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				  LEFT JOIN dbo.cp_sec_user_audit audit  WITH (NOLOCK)
					 ON	doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted = 'N'
				  AND schedule.fac_id=@vFacId
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)
				  and stdQId.stdQuestionId is not null

			 --QShift details
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)

				SELECT
				    CONVERT(VARCHAR,detail.cp_qshift_detail_id)+'_Q_A' AS schedule_detail_id,
				    rev.client_id,
				    rev.gen_intervention_id,
				    rev.intervention_id,
				    rev.std_intervention_id,
				    rev.text1,
				    case when strike.cp_qshift_documentation_id is not null then null else stdQId.stdQuestionId end,
				    case when strike.cp_qshift_documentation_id is not null then null else stdQId.stdQuestionContorlType end,
				    case when strike.cp_qshift_documentation_id is not null then null else stdQId.stdQuestionText end,
				    case when strike.cp_qshift_documentation_id is not null then null else stdQId.sequence end,
				    case when strike.cp_qshift_documentation_id is not null then null else stdQId.stdPickListId end,
				    detail.fac_id,
				    detail.schedule_id AS schedule_id,
				    detail.std_shift_id as std_shift_id,
				    stdshift.description,stdshift.start_time,stdshift.end_time,
				    detail.shift_date as shift_date,
				    rev.date_initiated AS schedule_start_date,
				    convert(datetime,NULL) AS schedule_end_date,
				    dates.s_date as schedule_date,
				    case when doc.cp_qshift_documentation_id is null THEN  null
				         when strike.cp_qshift_documentation_id is not null then null
					    else convert(varchar,doc.cp_qshift_documentation_id)+'_Q' end	as documentation_id	,
				    case when strike.cp_qshift_documentation_id is not null then null else doc.effective_date end  as completed_date,
				    case when strike.cp_qshift_documentation_id is not null then null else doc.entered_date end,
				    case when strike.cp_qshift_documentation_id is not null then null else doc.task_time end,
				    case when strike.cp_qshift_documentation_id is not null then null else resp.item_value_id end item_value_id,
				    case when strike.cp_qshift_documentation_id is not null then null else resp.item_value end item_value,
				    sched.retired_date,
				    rev.resolved_date,
				    case when strike.cp_qshift_documentation_id is not null then null else audit.long_username end as created_by_longname,
				    case when strike.cp_qshift_documentation_id is not null then null else audit.position_description end AS created_by_position ,
				    case when strike.cp_qshift_documentation_id is not null then null else audit.initials end,
				    'N' as strikeout_flag,
				    Null AS strikeout_id,
				    Null AS strikeout_description,
				    Null AS strikeout_by,
				    Null AS strikeout_date ,
				    sched.schedule_type AS schedule_type
			    from  dbo.cp_schedule sched  WITH (NOLOCK)

				    INNER JOIN #PRP_ds_interventions rev
					ON  sched.intervention_id  = rev.gen_intervention_id
						and sched.fac_id = rev.fac_id
						and sched.fac_id = @vFacID

				    INNER JOIN dbo.cp_qshift_detail detail	 WITH (NOLOCK)
						ON sched.schedule_id = detail.schedule_id
						and rev.fac_id = detail.fac_id

				    INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
						ON stdshift.std_shift_id = detail.std_shift_id

					INNER JOIN view_cp_shift_dates dates WITH (NOLOCK)
					ON	dates.day_date = detail.shift_date
					    AND detail.std_shift_id = dates.std_shift_id
					    AND dates.fac_id = detail.fac_id

					LEFT OUTER JOIN #stdQuestionIdTable stdQId
					 on  rev.std_intervention_id = stdqid.stdinterventionid
						    and rev.gen_intervention_id = stdqid.genInterventionId
							and rev.intervention_id = stdqid.interventionId
							and rev.fac_id = stdQid.fac_id
							and stdQId.stdQuestionRank = 1

				    LEFT JOIN dbo.cp_qshift_documentation doc WITH (NOLOCK)
					ON doc.cp_qshift_detail_id = detail.cp_qshift_detail_id
						AND ISNULL(doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date
						AND ISNULL(doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				    LEFT JOIN dbo.cp_qshift_documentation_strikeout strike  WITH (NOLOCK)
					ON  doc.cp_qshift_documentation_id = strike.cp_qshift_documentation_id

				    LEFT JOIN dbo.cp_qshift_response resp WITH (NOLOCK)
					ON	resp.cp_qshift_documentation_id = doc.cp_qshift_documentation_id
					and resp.std_question_id=stdQId.stdQuestionId

				    LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				 WHERE
				     sched.deleted  = 'N'
				    AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj )
				    AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj )
					AND (ISNULL(doc.effective_date, detail.shift_date) >= @vfil_ds_schedule_date and ISNULL(doc.effective_date, detail.shift_date) < @vfil_ds_schedule_date2_tzadj_plus1)
					;



			    -- StruckOut Info.
				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT
				    CONVERT(VARCHAR,detail.cp_qshift_detail_id)+'_Q_A' AS schedule_detail_id,
				    rev.client_id,
				    rev.gen_intervention_id,
				    rev.intervention_id,
				    rev.std_intervention_id,
				    rev.text1,
				    stdQId.stdQuestionId,
				    stdQId.stdQuestionContorlType,
				    stdQId.stdQuestionText,
				    stdQId.sequence,
				    stdQId.stdPickListId,
				    detail.fac_id,
				    detail.schedule_id AS schedule_id,
				    detail.std_shift_id as std_shift_id,
				    stdshift.description,stdshift.start_time,stdshift.end_time,
				    detail.shift_date as shift_date,
				    rev.date_initiated AS schedule_start_date,
				    convert(datetime,NULL) AS schedule_end_date,
				    dates.s_date as schedule_date,
				    case when doc.cp_qshift_documentation_id is null THEN  null
					    else convert(varchar,doc.cp_qshift_documentation_id)+'_Q' end	as documentation_id	,
				    doc.effective_date as completed_date,
				    doc.entered_date,
				    doc.task_time,
				    resp.item_value_id,
				    resp.item_value,
				    sched.retired_date,
				    rev.resolved_date,
				    audit.long_username as created_by_longname,
				    audit.position_description AS created_by_position ,
				    audit.initials,
				    'Y'as strikeout_flag,
				    strikeaudit.item_id AS strikeout_id,
				    strikeaudit.description AS strikeout_description,
				    strike_audit.long_username AS strikeout_by,
				    strike.entered_date AS strikeout_date ,
				    sched.schedule_type AS schedule_type
			    from  dbo.cp_schedule sched  WITH (NOLOCK)
				    INNER JOIN #PRP_ds_interventions rev
					ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
						and sched.fac_id = @vFacID

				   INNER JOIN dbo.cp_qshift_detail detail	 WITH (NOLOCK)
						ON sched.schedule_id = detail.schedule_id
						and rev.fac_id = detail.fac_id

				    INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
						ON stdshift.std_shift_id = detail.std_shift_id

				    LEFT JOIN dbo.cp_qshift_documentation doc WITH (NOLOCK)
					ON doc.cp_qshift_detail_id = detail.cp_qshift_detail_id
						AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date
						AND	ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				    inner JOIN dbo.cp_qshift_documentation_strikeout strike WITH (NOLOCK)
					ON  doc.cp_qshift_documentation_id = strike.cp_qshift_documentation_id

				    inner JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
					ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				    inner JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
					ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				    LEFT JOIN dbo.cp_qshift_response resp WITH (NOLOCK)
					ON	resp.cp_qshift_documentation_id = doc.cp_qshift_documentation_id

				    LEFT JOIN #stdQuestionIdTable stdQId
					 on  rev.std_intervention_id = stdqid.stdinterventionid
						    and rev.gen_intervention_id = stdqid.genInterventionId
							and rev.intervention_id = stdqid.interventionId
							and resp.std_question_id=stdQId.stdQuestionId
							and stdQId.stdQuestionRank = 1

				    INNER JOIN view_cp_shift_dates dates WITH (NOLOCK)
					ON	dates.day_date = detail.shift_date
					    AND detail.std_shift_id=dates.std_shift_id
					    AND dates.fac_id=detail.fac_id


				    LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				 WHERE sched.deleted  = 'N'
				    AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
				    AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					AND (ISNULL(doc.effective_date, detail.shift_date) >= @vfil_ds_schedule_date and ISNULL(doc.effective_date, detail.shift_date) < @vfil_ds_schedule_date2_tzadj_plus1)
					;

			 ----Scheduled details
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)

			 SELECT
			   CONVERT(VARCHAR,detail.cp_scheduled_detail_id)+'_S_A' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
			     stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id AS schedule_id,
				NULL AS std_shift_id,
				NULL description,
				NULL start_time,
				NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				detail.schedule_date as schedule_date,
				CASE WHEN doc.cp_scheduled_documentation_id IS NULL THEN NULL
				 when strike.cp_scheduled_documentation_id is not null then null
					 ELSE convert(varchar,doc.cp_scheduled_documentation_id)+'_S'
				 END AS documentation_id,
				case when strike.cp_scheduled_documentation_id is not null then null else doc.effective_date end as completed_date,
				case when strike.cp_scheduled_documentation_id is not null then null else doc.entered_date end,
				case when strike.cp_scheduled_documentation_id is not null then null else doc.task_time end,
				case when strike.cp_scheduled_documentation_id is not null then null else resp.item_value_id end,
				case when strike.cp_scheduled_documentation_id is not null then null else resp.item_value end,
				sched.retired_date,
				rev.resolved_date,
				case when strike.cp_scheduled_documentation_id is not null then null else audit.long_username  end as created_by_longname,
				case when strike.cp_scheduled_documentation_id is not null then null else audit.position_description end AS created_by_position ,
				case when strike.cp_scheduled_documentation_id is not null then null else audit.initials end,
				'N' as strikeout_flag,
				Null AS strikeout_id,
				Null AS strikeout_description,
				Null AS strikeout_by,
				Null AS strikeout_date ,
				sched.schedule_type AS schedule_type

			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
				 and sched.fac_id = rev.fac_id
				 and sched.fac_id = @vFacID

				INNER JOIN dbo.cp_scheduled_detail detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
					and sched.fac_id = detail.fac_id

				LEFT JOIN dbo.cp_scheduled_documentation doc WITH (NOLOCK)
				 ON doc.cp_scheduled_detail_id = detail.cp_scheduled_detail_id
				  AND  ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
				  1 = case
				          when
						 ISNULL( doc.effective_date,@vfil_ds_schedule_date2) < @vfil_ds_schedule_date2_tzadj_plus1 and
				           cast(replace(convert (varchar(5),ISNULL(dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, doc.effective_date),@vfil_ds_schedule_date2),108),':','') as int) >=(select top 1 cast(start_time as int)  from #prp_shifts where flg=1)
				       and cast(replace(convert (varchar(5),ISNULL(dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacID, doc.effective_date),@vfil_ds_schedule_date2),108),':','') as int)<=(select top 1  end_time  from #prp_shifts where flg=1)
				          then 1
				          when  ISNULL(doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj then 1
				       else 0 end

				LEFT JOIN dbo.cp_scheduled_documentation_strikeout strike  WITH (NOLOCK)
				  ON  doc.cp_scheduled_documentation_id = strike.cp_scheduled_documentation_id

				LEFT JOIN dbo.cp_scheduled_response resp WITH (NOLOCK)
				 ON	 resp.cp_scheduled_documentation_id = doc.cp_scheduled_documentation_id

				left JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						and  resp.std_question_id=stdQId.stdQuestionId
						and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
				 ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where sched.deleted  = 'N'
					AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					and (detail.schedule_date >= @vfil_ds_schedule_date and detail.schedule_date <= @vfil_ds_schedule_date2_tzadj_plus1)

					;
			      -- Scheduled details StruckOut Info.
				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)

			 SELECT
			   CONVERT(VARCHAR,detail.cp_scheduled_detail_id)+'_S_A' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
			     stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id AS schedule_id,
				NULL AS std_shift_id,
				NULL description,
				NULL start_time,
				NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				detail.schedule_date as schedule_date,
				CASE WHEN doc.cp_scheduled_documentation_id IS NULL THEN NULL
					 ELSE convert(varchar,doc.cp_scheduled_documentation_id)+'_S'
				 END AS documentation_id,
				doc.effective_date as completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username as created_by_longname,
				audit.position_description AS created_by_position ,
					audit.initials,
				'Y'  strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				sched.schedule_type AS schedule_type

			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and sched.fac_id = @vFacID

				INNER JOIN dbo.cp_scheduled_detail detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
					and sched.fac_id = detail.fac_id

				INNER JOIN dbo.cp_scheduled_documentation doc WITH (NOLOCK)
				 ON doc.cp_scheduled_detail_id = detail.cp_scheduled_detail_id
				  AND  ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					  ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				INNER JOIN dbo.cp_scheduled_documentation_strikeout strike WITH (NOLOCK)
				 ON doc.cp_scheduled_documentation_id = strike.cp_scheduled_documentation_id

				INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				LEFT JOIN dbo.cp_scheduled_response resp WITH (NOLOCK)
				 ON	 resp.cp_scheduled_documentation_id = doc.cp_scheduled_documentation_id

				left JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
				 ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where  sched.deleted = 'N'
					AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					and (detail.schedule_date >= @vfil_ds_schedule_date and detail.schedule_date <= @vfil_ds_schedule_date2_tzadj_plus1);

			--Schedule Duration
			-- No overlapping month

			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT
			   CONVERT(VARCHAR,detail.cp_duration_detail_id)+'_D_A' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id as schedule_id,
				NULL AS std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				detail.schedule_end_date AS schedule_end_date,
				detail.schedule_start_date AS schedule_date,
				 CASE WHEN doc.cp_duration_documentation_id IS NULL THEN NULL
				  when strike.cp_duration_documentation_id is not null then null
					ELSE convert(varchar,doc.cp_duration_documentation_id)+'_D'
				 END AS documentation_id,
				case when strike.cp_duration_documentation_id is not null then null else doc.effective_date end AS completed_date,
				case when strike.cp_duration_documentation_id is not null then null else doc.entered_date end,
				case when strike.cp_duration_documentation_id is not null then null else doc.task_time end,
				case when strike.cp_duration_documentation_id is not null then null else resp.item_value_id end,
				case when strike.cp_duration_documentation_id is not null then null else resp.item_value end,
				sched.retired_date,
				rev.resolved_date,
				case when strike.cp_duration_documentation_id is not null then null else audit.long_username end AS created_by_longname,
				case when strike.cp_duration_documentation_id is not null then null else audit.position_description end AS created_by_position ,
				case when strike.cp_duration_documentation_id is not null then null else audit.initials end,
				'N'	AS strikeout_flag,
				NULL AS strikeout_id,
				NULL AS strikeout_description,
				NULL AS strikeout_by,
				NULL AS strikeout_date ,
				sched.schedule_type AS schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and sched.fac_id = @vFacID

				INNER JOIN dbo.cp_duration_detail detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
					and sched.fac_id = detail.fac_id

				LEFT JOIN dbo.cp_duration_documentation doc WITH (NOLOCK)
				 ON doc.cp_duration_detail_id = detail.cp_duration_detail_id
				  AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					 ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				LEFT JOIN dbo.cp_duration_documentation_strikeout strike WITH (NOLOCK)
				 on doc.cp_duration_documentation_id = strike.cp_duration_documentation_id

				LEFT JOIN dbo.cp_duration_response resp WITH (NOLOCK)
				 ON	 resp.cp_duration_documentation_id = doc.cp_duration_documentation_id

				LEFT JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				 on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where sched.deleted = 'N'
					AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)

					and not EXISTS(select 1 from dbo.cp_duration_documentation_strikeout strike WITH (NOLOCK)
									where doc.cp_duration_documentation_id = strike.cp_duration_documentation_id);
				  ;
			--StruckOut Info.
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT
			   CONVERT(VARCHAR,detail.cp_duration_detail_id)+'_D_A' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id as schedule_id,
				NULL AS std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				detail.schedule_end_date AS schedule_end_date,
				detail.schedule_start_date AS schedule_date,
				 CASE WHEN doc.cp_duration_documentation_id IS NULL THEN NULL
					ELSE convert(varchar,doc.cp_duration_documentation_id)+'_D'
				 END AS documentation_id,
				doc.effective_date AS completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username AS created_by_longname,
				audit.position_description AS created_by_position ,
				audit.initials,
				'Y' strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				sched.schedule_type AS schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and sched.fac_id = @vFacID

				INNER JOIN dbo.cp_duration_detail detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id

				INNER JOIN dbo.cp_duration_documentation doc WITH (NOLOCK)
				 ON doc.cp_duration_detail_id = detail.cp_duration_detail_id
				  AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					 ISNULL(doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				INNER JOIN dbo.cp_duration_documentation_strikeout strike WITH (NOLOCK)
				 ON doc.cp_duration_documentation_id = strike.cp_duration_documentation_id

				INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				LEFT JOIN dbo.cp_duration_response resp WITH (NOLOCK)
				 ON	 resp.cp_duration_documentation_id = doc.cp_duration_documentation_id

				LEFT JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				 on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where sched.deleted  = 'N'
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					  AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					  AND (detail.schedule_start_date >= @vfil_ds_schedule_date2_tzadj_plus1 );

			--Unscheduled Calculation
			IF (SELECT value FROM configuration_parameter WHERE name='enable_unscheduled_tasks'  and fac_id=@vFacId)='Y'
			BEGIN

			 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT	distinct
			   '-1_U_A' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				sched.fac_id,
				sched.schedule_id AS schedule_id,
				NULL as std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				 CASE WHEN doc.cp_unscheduled_documentation_id IS NULL THEN NULL
					  ELSE convert(varchar,doc.cp_unscheduled_documentation_id)+'_U'
				 END AS documentation_id,
				doc.effective_date as completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username AS created_by_longname,
				audit.position_description AS created_by_position ,
				audit.initials,
				CASE
					WHEN (strike.cp_strikeout_reason_audit_id IS NOT NULL) THEN
						'Y'
					ELSE
						'N'
				END	as strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				sched.schedule_type AS schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and sched.fac_id = @vFacID

				LEFT JOIN dbo.cp_unscheduled_documentation doc WITH (NOLOCK)
				 ON doc.schedule_id = sched.schedule_id
				  AND doc.effective_date >= @vfil_ds_schedule_date
				  AND doc.effective_date <= @vfil_ds_schedule_date2_tzadj

				LEFT JOIN dbo.cp_unscheduled_documentation_strikeout strike WITH (NOLOCK)
				 ON doc.cp_unscheduled_documentation_id = strike.cp_unscheduled_documentation_id

				LEFT JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				LEFT JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				LEFT JOIN dbo.cp_unscheduled_response resp WITH (NOLOCK)
				 ON	 resp.cp_unscheduled_documentation_id = doc.cp_unscheduled_documentation_id

				left JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				where sched.schedule_Type = 40
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj);

			END
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me = 'Y'
	  select '#cp_documentation_responses_current' as cp_documentation_responses_current, * from #cp_documentation_responses a  order by 1

	END



     -- HISTORICAL  Data
	-- PRN Historical Data
    IF (@vfil_ds_schedule_date < (SELECT current_history_end_date
									FROM dbo.process_configuration
									WHERE process_name = 'poc_prn_history_load' ))
	BEGIN

	  SELECT @vStep = 19, @step_start_time = getdate()
		IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Geting the Historical document responses  at ' + CONVERT(VARCHAR, @step_start_time)
			--PRN Calculation

			--PRN Calculation
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT  distinct
				'-1_P_H' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				CASE WHEN doc.cp_prn_documentation_history_id IS NULL THEN NULL
				     when strike.cp_prn_documentation_history_id is not null then null
					 ELSE CONVERT(VARCHAR,doc.cp_prn_documentation_history_id)+'_P'	END	AS documentation_id	,
				 case when strike.cp_prn_documentation_history_id is not null then null else doc.effective_date end  as completed_date,
				 case when strike.cp_prn_documentation_history_id is not null then null else doc.entered_date end,
				 case when strike.cp_prn_documentation_history_id is not null then null else doc.task_time end,
				 case when strike.cp_prn_documentation_history_id is not null then null else resp.item_value_id end,
				 case when strike.cp_prn_documentation_history_id is not null then null else resp.item_value end,
				 schedule.retired_date,
				 intervention.resolved_date,
				 case when strike.cp_prn_documentation_history_id is not null then null else audit.long_username end AS created_by_longname,
				 case when strike.cp_prn_documentation_history_id is not null then null else audit.position_description end AS created_by_position ,
				 case when strike.cp_prn_documentation_history_id is not null then null else audit.initials end,
				 'N'	as strikeout_flag,
				 NULL AS strikeout_id,
				 NULL AS strikeout_description,
				 NULL AS strikeout_by,
				 NULL strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				  INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id
					 and schedule.fac_id=@vFacId

				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
						ON	 shift.schedule_id = schedule.schedule_id

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
						ON shift.std_shift_id = stdshift.std_shift_id

				  LEFT JOIN dbo.cp_prn_documentation_history doc WITH (NOLOCK)
						ON	doc.schedule_id = shift.schedule_id
						AND doc.std_shift_id = shift.std_shift_id
						AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date
						AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) <= @vfil_ds_schedule_date2_tzadj

				  LEFT JOIN dbo.cp_prn_documentation_strikeout_history strike  WITH (NOLOCK)
					ON  doc.cp_prn_documentation_history_id = strike.cp_prn_documentation_history_id

				  LEFT JOIN dbo.cp_prn_response_history resp  WITH (NOLOCK)
					 ON	resp.cp_prn_documentation_history_id = doc.cp_prn_documentation_history_id

				  left JOIN #stdQuestionIdTable stdQId
				        on  intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
					     and resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				 LEFT JOIN dbo.cp_sec_user_audit audit  WITH (NOLOCK)
					 ON	doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted  = 'N'
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)
				  and stdQId.stdQuestionId is not null
				  and strike.cp_prn_documentation_history_id is  null
					;

				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				select schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type
				 from (
				 	SELECT
				'-1_P_H' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id ,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				convert(datetime,NULL) as schedule_date,
				Null	AS documentation_id	,
				NULL as completed_date,
				NULL as entered_date,
				NULL task_time,
				NULL item_value_id,
				NULL item_value,
				schedule.retired_date,
				 intervention.resolved_date,
			     NULL created_by_longname,
				NULL created_by_position ,
				NULL initials,
				'N'	as strikeout_flag,
				NULL strikeout_id,
				NULL strikeout_description,
				NULL strikeout_by,
				NULL strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				   INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id

				   INNER JOIN  #PRP_ClientList c on c.client_id=intervention.client_id
				    and  1= case
				              when c.admission_date< intervention.date_initiated and  year(intervention.date_initiated)= year(@vfil_ds_schedule_date)
						     and month(intervention.date_initiated)<= month(@vfil_ds_schedule_date)  then 1
							when c.admission_date< intervention.date_initiated and  year(intervention.date_initiated)< year(@vfil_ds_schedule_date)
						     and month(intervention.date_initiated)>= month(@vfil_ds_schedule_date)  then 1
						    when  c.admission_date> intervention.date_initiated and  month( c.admission_date)<= month(@vfil_ds_schedule_date) then 1 else 0 end
				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
					 ON	 shift.schedule_id = schedule.schedule_id

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					 ON shift.std_shift_id = stdshift.std_shift_id

				  left JOIN #stdQuestionIdTable stdQId
				      ON
					 --stdQId.stdquestionid = resp.std_question_id
				       intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
						 and stdQId.stdQuestionRank = 1

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted  = 'N'
				  AND schedule.fac_id=@vFacId
				  AND schedule.fac_id = intervention.fac_id
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)  )tt
				where not exists (select 1 from #cp_documentation_responses b where
				    b.schedule_detail_id=tt.schedule_detail_id and
				    b.client_id= tt.client_id and
				    b.gen_intervention_id = tt.gen_intervention_id and
				    b.intervention_id =tt.intervention_id and
				   b.std_intervention_id	  =tt.std_intervention_id  and
				   b.schedule_id=tt.schedule_id AND
				   b.std_shift_id=tt.std_shift_id AND
				   b.stdQuestionId=	tt.stdQuestionId   )  ;

			 -- StruckOut Info.
			     INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id ,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT
				'-1_P_H' as schedule_detail_id,
				intervention.client_id,
				intervention.gen_intervention_id,
				intervention.intervention_id,
				intervention.std_intervention_id,
				intervention.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				schedule.fac_id,
				shift.schedule_id AS schedule_id,
				shift.std_shift_id AS std_shift_id,
				stdshift.description,stdshift.start_time,stdshift.end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				intervention.date_initiated AS schedule_start_date,
				convert(datetime,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				CASE WHEN doc.cp_prn_documentation_history_id IS NULL THEN NULL
					 ELSE CONVERT(VARCHAR,doc.cp_prn_documentation_history_id)+'_P'	END	AS documentation_id	,
				 doc.effective_date  as completed_date,
				 doc.entered_date,
				 doc.task_time,
				 resp.item_value_id,
				 resp.item_value,
				 schedule.retired_date,
				 intervention.resolved_date,
				 audit.long_username AS created_by_longname,
				 audit.position_description AS created_by_position ,
				 audit.initials,
				 'Y' as strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				schedule.schedule_type AS schedule_type

				 FROM   dbo.cp_schedule schedule WITH (NOLOCK)
				  INNER JOIN  #PRP_ds_interventions intervention
					 ON  schedule.intervention_id = intervention.gen_intervention_id
					 and schedule.fac_id= intervention.fac_id
					 AND schedule.fac_id=@vFacId

				   INNER JOIN dbo.cp_schedule_shift shift WITH (NOLOCK)
					 ON	 shift.schedule_id = schedule.schedule_id

				  INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					 ON shift.std_shift_id = stdshift.std_shift_id

				  INNER JOIN dbo.cp_prn_documentation_history doc WITH (NOLOCK)
					ON	doc.schedule_id = shift.schedule_id
					AND doc.std_shift_id = shift.std_shift_id
					AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date
					AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) <= @vfil_ds_schedule_date2_tzadj

				  INNER JOIN dbo.cp_prn_documentation_strikeout_history strike   WITH (NOLOCK)
					 ON doc.cp_prn_documentation_history_id = strike.cp_prn_documentation_history_id

				  INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
					 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				  INNER JOIN dbo.cp_prn_response_history resp  WITH (NOLOCK)
					 ON	resp.cp_prn_documentation_history_id = doc.cp_prn_documentation_history_id

				  INNER JOIN #stdQuestionIdTable stdQId
				        on  intervention.std_intervention_id = stdqid.stdinterventionid
					     and intervention.gen_intervention_id = stdqid.genInterventionId
						 and intervention.intervention_id = stdqid.interventionId
					     and resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				  INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
					 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				  INNER JOIN dbo.cp_sec_user_audit audit  WITH (NOLOCK)
					 ON	doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				WHERE
					  schedule.schedule_type = 8
				  AND schedule.deleted  = 'N'
				  AND intervention.flowsheet  = 'Y'
				  AND intervention.current_row  = 'Y'
				  AND (schedule.retired_date IS NULL  OR schedule.retired_date >= @vfil_ds_schedule_date_tzadj)
				  AND (intervention.resolved_date IS NULL OR intervention.resolved_date >= @vfil_ds_schedule_date_tzadj)
				  and stdQId.stdQuestionId is not null
				   	;
		END

		IF (@vfil_ds_schedule_date < (SELECT current_history_end_date
									FROM dbo.process_configuration
									WHERE process_name = 'poc_qshift_history_load' ) )
		BEGIN
			IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Geting the QShift Historical document responses  at ' + CONVERT(VARCHAR, @step_start_time)

			 --QShift details
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT
				    CONVERT(VARCHAR,detail.cp_qshift_detail_history_id)+'_Q_H' AS schedule_detail_id,
				    rev.client_id,
				    rev.gen_intervention_id,
				    rev.intervention_id,
				    rev.std_intervention_id,
				    rev.text1,
				    case when strike.cp_qshift_documentation_history_id is not null then null else stdQId.stdQuestionId end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else stdQId.stdQuestionContorlType end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else stdQId.stdQuestionText end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else stdQId.sequence end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else stdQId.stdPickListId end,
				    detail.fac_id,
				    detail.schedule_id AS schedule_id,
				    detail.std_shift_id as std_shift_id,
				    stdshift.description,stdshift.start_time,stdshift.end_time,
				    detail.shift_date as shift_date,
				    rev.date_initiated AS schedule_start_date,
				    convert(datetime,NULL) AS schedule_end_date,
				    dates.s_date as schedule_date,
				    case when doc.cp_qshift_documentation_history_id is null THEN  null
				         when strike.cp_qshift_documentation_history_id is not null then null
					    else convert(varchar,doc.cp_qshift_documentation_history_id)+'_Q' end	as documentation_id	,
				    case when strike.cp_qshift_documentation_history_id is not null then null else doc.effective_date end  as completed_date,
				    case when strike.cp_qshift_documentation_history_id is not null then null else doc.entered_date end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else doc.task_time end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else resp.item_value_id end,
				    case when strike.cp_qshift_documentation_history_id is not null then null else resp.item_value end,
				    sched.retired_date,
				    rev.resolved_date,
				    case when strike.cp_qshift_documentation_history_id is not null then null else audit.long_username end as created_by_longname,
				    case when strike.cp_qshift_documentation_history_id is not null then null else audit.position_description end AS created_by_position ,
				    case when strike.cp_qshift_documentation_history_id is not null then null else audit.initials end,
				    'N' as strikeout_flag,
				    Null AS strikeout_id,
				    Null AS strikeout_description,
				    Null AS strikeout_by,
				    Null AS strikeout_date ,
				    sched.schedule_type AS schedule_type
			    from  #PRP_ds_interventions rev
				    INNER JOIN dbo.cp_schedule sched  WITH (NOLOCK)
					ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and sched.fac_id = @vFacID

					INNER JOIN dbo.cp_qshift_detail_history detail	 WITH (NOLOCK)
					ON sched.schedule_id = detail.schedule_id
						AND sched.fac_id = detail.fac_id						

					INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					ON stdshift.std_shift_id = detail.std_shift_id

					 INNER JOIN dbo.view_cp_shift_dates dates WITH (NOLOCK)
					ON	dates.day_date = detail.shift_date
					    AND detail.std_shift_id=dates.std_shift_id
					    AND dates.fac_id=detail.fac_id

					LEFT JOIN #stdQuestionIdTable stdQId
					 on  rev.std_intervention_id = stdqid.stdinterventionid
						    and rev.gen_intervention_id = stdqid.genInterventionId
							and rev.intervention_id = stdqid.interventionId
							and stdQId.stdQuestionRank = 1

				    LEFT JOIN dbo.cp_qshift_documentation_history doc WITH (NOLOCK)
					ON doc.cp_qshift_detail_history_id = detail.cp_qshift_detail_history_id
						AND  doc.effective_date >= @vfil_ds_schedule_date
						AND	 doc.effective_date <= @vfil_ds_schedule_date2_tzadj

				    LEFT JOIN dbo.cp_qshift_documentation_strikeout_history strike  WITH (NOLOCK)
					ON  doc.cp_qshift_documentation_history_id = strike.cp_qshift_documentation_history_id

				    LEFT JOIN dbo.cp_qshift_response_history resp WITH (NOLOCK)
					ON	resp.cp_qshift_documentation_history_id = doc.cp_qshift_documentation_history_id
						and resp.std_question_id=stdQId.stdQuestionId

				    LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				 WHERE sched.deleted  = 'N'
				    AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
				    AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					AND (ISNULL(doc.effective_date, detail.shift_date) >= @vfil_ds_schedule_date and ISNULL(doc.effective_date, detail.shift_date) < @vfil_ds_schedule_date2_tzadj_plus1)
					;
			    -- StruckOut Info.
				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
				SELECT
				    CONVERT(VARCHAR,detail.cp_qshift_detail_history_id)+'_Q_H' AS schedule_detail_id,
				    rev.client_id,
				    rev.gen_intervention_id,
				    rev.intervention_id,
				    rev.std_intervention_id,
				    rev.text1,
				    stdQId.stdQuestionId,
				    stdQId.stdQuestionContorlType,
				    stdQId.stdQuestionText,
				    stdQId.sequence,
				    stdQId.stdPickListId,
				    detail.fac_id,
				    detail.schedule_id AS schedule_id,
				    detail.std_shift_id as std_shift_id,
				    stdshift.description,stdshift.start_time,stdshift.end_time,
				    detail.shift_date as shift_date,
				    rev.date_initiated AS schedule_start_date,
				    convert(datetime,NULL) AS schedule_end_date,
				    dates.s_date as schedule_date,
				    case when doc.cp_qshift_documentation_history_id is null THEN  null
					    else convert(varchar,doc.cp_qshift_documentation_history_id)+'_Q' end	as documentation_id	,
				    doc.effective_date as completed_date,
				    doc.entered_date,
				    doc.task_time,
				    resp.item_value_id,
				    resp.item_value,
				    sched.retired_date,
				    rev.resolved_date,
				    audit.long_username as created_by_longname,
				    audit.position_description AS created_by_position ,
				    audit.initials,
				    'Y'as strikeout_flag,
				    strikeaudit.item_id AS strikeout_id,
				    strikeaudit.description AS strikeout_description,
				    strike_audit.long_username AS strikeout_by,
				    strike.entered_date AS strikeout_date ,
				    sched.schedule_type AS schedule_type
			    from  dbo.cp_schedule sched  WITH (NOLOCK)
				    INNER JOIN #PRP_ds_interventions rev
					ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id
					and rev.fac_id = @vFacID

					INNER JOIN dbo.cp_qshift_detail_history detail	 WITH (NOLOCK)
							ON sched.schedule_id = detail.schedule_id
								and sched.fac_id = detail.fac_id								

					INNER JOIN dbo.cp_std_shift stdshift WITH (NOLOCK)
					ON stdshift.std_shift_id = detail.std_shift_id

				    INNER JOIN dbo.cp_qshift_documentation_history doc WITH (NOLOCK)
					ON doc.cp_qshift_detail_history_id = detail.cp_qshift_detail_history_id
						and  (doc.effective_date >= @vfil_ds_schedule_date and @vfil_ds_schedule_date_tzadj <= @vfil_ds_schedule_date2_tzadj)

				    inner JOIN dbo.cp_qshift_documentation_strikeout_history strike WITH (NOLOCK)
					ON  doc.cp_qshift_documentation_history_id = strike.cp_qshift_documentation_history_id

				    inner JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
					ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				    inner JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
					ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				    INNER JOIN dbo.cp_qshift_response_history resp WITH (NOLOCK)
					ON	resp.cp_qshift_documentation_history_id = doc.cp_qshift_documentation_history_id

					INNER JOIN dbo.view_cp_shift_dates dates WITH (NOLOCK)
										ON	dates.day_date = detail.shift_date
											AND detail.std_shift_id=dates.std_shift_id
											AND dates.fac_id=detail.fac_id

					INNER JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id

				    LEFT JOIN #stdQuestionIdTable stdQId
					 on  rev.std_intervention_id = stdqid.stdinterventionid
						    and rev.gen_intervention_id = stdqid.genInterventionId
							and rev.intervention_id = stdqid.interventionId
							and resp.std_question_id=stdQId.stdQuestionId
							and stdQId.stdQuestionRank = 1


				 WHERE sched.deleted  = 'N'
				    AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
				    AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					AND (ISNULL(doc.effective_date, detail.shift_date) >= @vfil_ds_schedule_date and ISNULL(doc.effective_date, detail.shift_date) < @vfil_ds_schedule_date2_tzadj_plus1)
					;
		END

		IF (@vfil_ds_schedule_date < (SELECT current_history_end_date
									FROM dbo.process_configuration
									WHERE process_name = 'poc_scheduled_history_load' ) )
		BEGIN
			IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Geting the Scheduled Historical document responses  at ' + CONVERT(VARCHAR, @step_start_time)

			  -- Scheduled details
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)

			 SELECT
			   CONVERT(VARCHAR,detail.cp_scheduled_detail_history_id)+'_S_H' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
			     stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id AS schedule_id,
				NULL AS std_shift_id,
				NULL description,
				NULL start_time,
				NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				detail.schedule_date as schedule_date,
				CASE WHEN doc.cp_scheduled_documentation_history_id IS NULL THEN NULL
				 when strike.cp_scheduled_documentation_history_id is not null then null
					 ELSE convert(varchar,doc.cp_scheduled_documentation_history_id)+'_S'
				 END AS documentation_id,
				case when strike.cp_scheduled_documentation_history_id is not null then null else doc.effective_date end as completed_date,
				case when strike.cp_scheduled_documentation_history_id is not null then null else doc.entered_date end,
				case when strike.cp_scheduled_documentation_history_id is not null then null else doc.task_time end,
				case when strike.cp_scheduled_documentation_history_id is not null then null else resp.item_value_id end,
				case when strike.cp_scheduled_documentation_history_id is not null then null else resp.item_value end,
				sched.retired_date,
				rev.resolved_date,
				case when strike.cp_scheduled_documentation_history_id is not null then null else audit.long_username  end as created_by_longname,
				case when strike.cp_scheduled_documentation_history_id is not null then null else audit.position_description end AS created_by_position ,
				case when strike.cp_scheduled_documentation_history_id is not null then null else audit.initials end,
				'N' as strikeout_flag,
				Null AS strikeout_id,
				Null AS strikeout_description,
				Null AS strikeout_by,
				Null AS strikeout_date ,
				sched.schedule_type AS schedule_type

			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
				 and sched.fac_id = rev.fac_id

				LEFT JOIN dbo.cp_scheduled_detail_history detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
					and sched.fac_id = detail.fac_id

				LEFT JOIN dbo.cp_scheduled_documentation_history doc WITH (NOLOCK)
				 ON doc.cp_scheduled_detail_history_id = detail.cp_scheduled_detail_history_id
				  AND  ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					  ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				LEFT JOIN dbo.cp_scheduled_documentation_strikeout_history strike  WITH (NOLOCK)
				  ON  doc.cp_scheduled_documentation_history_id = strike.cp_scheduled_documentation_history_id

				LEFT JOIN dbo.cp_scheduled_response_history resp WITH (NOLOCK)
				 ON	 resp.cp_scheduled_documentation_history_id = doc.cp_scheduled_documentation_history_id

				left JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
				 ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where
				sched.fac_id=@vFacId
				AND sched.deleted = 'N'
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					  AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					  AND (detail.schedule_date >= @vfil_ds_schedule_date and detail.schedule_date <= @vfil_ds_schedule_date2_tzadj_plus1)

					;
			  -- StruckOut Info.
				 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)

			 SELECT
			   CONVERT(VARCHAR,detail.cp_scheduled_detail_history_id)+'_S_H' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
			     stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id AS schedule_id,
				NULL AS std_shift_id,
				NULL description,
				NULL start_time,
				NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				detail.schedule_date as schedule_date,
				CASE WHEN doc.cp_scheduled_documentation_history_id IS NULL THEN NULL
					 ELSE convert(varchar,doc.cp_scheduled_documentation_history_id)+'_S'
				 END AS documentation_id,
				doc.effective_date as completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username as created_by_longname,
				audit.position_description AS created_by_position ,
					audit.initials,
				'Y'  strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				sched.schedule_type AS schedule_type

			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
				 and sched.fac_id = rev.fac_id

				INNER JOIN dbo.cp_scheduled_detail_history detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
				 and sched.fac_id = rev.fac_id

				INNER JOIN dbo.cp_scheduled_documentation_history doc WITH (NOLOCK)
				 ON doc.cp_scheduled_detail_history_id = detail.cp_scheduled_detail_history_id
				  AND  ISNULL(doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					  ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				INNER JOIN dbo.cp_scheduled_documentation_strikeout_history strike WITH (NOLOCK)
				 ON doc.cp_scheduled_documentation_history_id = strike.cp_scheduled_documentation_history_id

				INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				INNER JOIN dbo.cp_scheduled_response_history resp WITH (NOLOCK)
				 ON	 resp.cp_scheduled_documentation_history_id = doc.cp_scheduled_documentation_history_id

				INNER JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
						 and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
				 ON	 doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where
				detail.fac_id=@vFacId
				AND sched.deleted   = 'N'
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					  AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					  AND (detail.schedule_date >= @vfil_ds_schedule_date and detail.schedule_date <= @vfil_ds_schedule_date2_tzadj_plus1) ;
		END

		IF (@vfil_ds_schedule_date < (SELECT current_history_end_date
									FROM dbo.process_configuration
									WHERE process_name = 'poc_duration_history_load' ) )
		BEGIN
			IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Geting the Duration Historical document responses  at ' + CONVERT(VARCHAR, @step_start_time)


		--Schedule Duration
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT
			   CONVERT(VARCHAR,detail.cp_duration_detail_history_id)+'_D_H' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id as schedule_id,
				NULL AS std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				detail.schedule_end_date AS schedule_end_date,
				detail.schedule_start_date AS schedule_date,
				 CASE WHEN doc.cp_duration_detail_history_id IS NULL THEN NULL
				  when strike.cp_duration_documentation_history_id is not null then null
					ELSE convert(varchar,doc.cp_duration_detail_history_id)+'_D'
				 END AS documentation_id,
				case when strike.cp_duration_documentation_history_id is not null then null else doc.effective_date end AS completed_date,
				case when strike.cp_duration_documentation_history_id is not null then null else doc.entered_date end,
				case when strike.cp_duration_documentation_history_id is not null then null else doc.task_time end,
				case when strike.cp_duration_documentation_history_id is not null then null else resp.item_value_id end,
				case when strike.cp_duration_documentation_history_id is not null then null else resp.item_value end,
				sched.retired_date,
				rev.resolved_date,
				case when strike.cp_duration_documentation_history_id is not null then null else audit.long_username end AS created_by_longname,
				case when strike.cp_duration_documentation_history_id is not null then null else audit.position_description end AS created_by_position ,
				case when strike.cp_duration_documentation_history_id is not null then null else audit.initials end,
				'N'	AS strikeout_flag,
				NULL AS strikeout_id,
				NULL AS strikeout_description,
				NULL AS strikeout_by,
				NULL AS strikeout_date ,
				sched.schedule_type AS schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id

				LEFT JOIN dbo.cp_duration_detail_history detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
				 and sched.fac_id = detail.fac_id

				LEFT JOIN dbo.cp_duration_documentation_history doc WITH (NOLOCK)
				 ON doc.cp_duration_detail_history_id = detail.cp_duration_detail_history_id
				  AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					 ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				LEFT JOIN dbo.cp_duration_documentation_strikeout_history strike WITH (NOLOCK)
				 on doc.cp_duration_documentation_history_id = strike.cp_duration_documentation_history_id

				LEFT JOIN dbo.cp_duration_response_history resp WITH (NOLOCK)
				 ON	 resp.cp_duration_documentation_history_id = doc.cp_duration_documentation_history_id

				LEFT JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				 on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
				         and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where
				detail.fac_id=@vFacId
					 AND sched.deleted  = 'N'
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					  AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj)
					   and not EXISTS(select 1 from dbo.cp_duration_documentation_strikeout_history strike WITH (NOLOCK)
				 where doc.cp_duration_documentation_history_id = strike.cp_duration_documentation_history_id);
				  ;
			--StruckOut Info.
			      INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT
			   CONVERT(VARCHAR,detail.cp_duration_detail_history_id)+'_DH' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				detail.fac_id,
				detail.schedule_id as schedule_id,
				NULL AS std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date,
				detail.schedule_end_date AS schedule_end_date,
				detail.schedule_start_date AS schedule_date,
				 CASE WHEN doc.cp_duration_documentation_history_id IS NULL THEN NULL
					ELSE convert(varchar,doc.cp_duration_documentation_history_id)+'_D'
				 END AS documentation_id,
				doc.effective_date AS completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username AS created_by_longname,
				audit.position_description AS created_by_position ,
				audit.initials,
				'Y' strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date ,
				sched.schedule_type AS schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
					and sched.fac_id = rev.fac_id

				LEFT JOIN dbo.cp_duration_detail_history detail	 WITH (NOLOCK)
				 ON sched.schedule_id = detail.schedule_id
					and sched.fac_id = detail.fac_id

				LEFT JOIN dbo.cp_duration_documentation_history doc WITH (NOLOCK)
				 ON doc.cp_duration_detail_history_id = detail.cp_duration_detail_history_id
				  AND ISNULL( doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					 ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				INNER JOIN dbo.cp_duration_documentation_strikeout_history strike WITH (NOLOCK)
				 ON doc.cp_duration_documentation_history_id = strike.cp_duration_documentation_history_id

				INNER JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				INNER JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				LEFT JOIN dbo.cp_duration_response_history resp WITH (NOLOCK)
				 ON	 resp.cp_duration_documentation_history_id = doc.cp_duration_documentation_history_id

				LEFT JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				 on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
				         and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where
				detail.fac_id=@vFacId
					 AND sched.deleted  = 'N'
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj)
					  AND (rev.resolved_date IS NULL OR rev.resolved_date >= @vfil_ds_schedule_date_tzadj) ;
			--Unscheduled Calculation
			IF (SELECT value FROM configuration_parameter WHERE name='enable_unscheduled_tasks'  and fac_id=@vFacId)='Y'
			BEGIN
			 INSERT INTO #cp_documentation_responses(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type)
			 SELECT	distinct
			   '-1_U_H' AS schedule_detail_id,
				rev.client_id,
				rev.gen_intervention_id,
				rev.intervention_id,
				rev.std_intervention_id,
				rev.text1,
				stdQId.stdQuestionId,
				stdQId.stdQuestionContorlType,
				stdQId.stdQuestionText,
				stdQId.sequence,
				stdQId.stdPickListId,
				sched.fac_id,
				sched.schedule_id AS schedule_id,
				NULL as std_shift_id,
				NULL description,NULL start_time,NULL end_time,
				CONVERT(DATETIME,NULL) AS shift_date,
				rev.date_initiated AS schedule_start_date ,
				CONVERT(DATETIME,NULL) AS schedule_end_date,
				doc.effective_date as schedule_date,
				 CASE WHEN doc.cp_unscheduled_documentation_history_id IS NULL THEN NULL
					  ELSE convert(varchar,doc.cp_unscheduled_documentation_history_id)+'_U'
				 END AS documentation_id,
				doc.effective_date as completed_date,
				doc.entered_date,
				doc.task_time,
				resp.item_value_id,
				resp.item_value,
				sched.retired_date,
				rev.resolved_date,
				audit.long_username AS created_by_longname,
				audit.position_description AS created_by_position ,
				audit.initials,
				CASE
					WHEN (strike.cp_strikeout_reason_audit_id IS NOT NULL) THEN
						'Y'
					ELSE
						'N'
				END	as strikeout_flag,
				strikeaudit.item_id AS strikeout_id,
				strikeaudit.description AS strikeout_description,
				strike_audit.long_username AS strikeout_by,
				strike.entered_date AS strikeout_date  ,
				sched.schedule_type
			 FROM dbo.cp_schedule sched  WITH (NOLOCK)
				INNER JOIN #PRP_ds_interventions rev
				 ON rev.gen_intervention_id = sched.intervention_id
				 and sched.fac_id = rev.fac_id

				LEFT JOIN dbo.cp_unscheduled_documentation_history doc WITH (NOLOCK)
				 ON doc.schedule_id = sched.schedule_id
				    AND
					  ISNULL(doc.effective_date,@vfil_ds_schedule_date) >= @vfil_ds_schedule_date AND
					  ISNULL( doc.effective_date,@vfil_ds_schedule_date2) <= @vfil_ds_schedule_date2_tzadj

				LEFT JOIN dbo.cp_unscheduled_documentation_strikeout_history strike WITH (NOLOCK)
				 ON doc.cp_unscheduled_documentation_history_id = strike.cp_unscheduled_documentation_history_id

				LEFT JOIN dbo.cp_strikeout_reason_audit strikeaudit WITH (NOLOCK)
				 ON strikeaudit.cp_strikeout_reason_audit_id = strike.cp_strikeout_reason_audit_id

				LEFT JOIN dbo.cp_sec_user_audit strike_audit WITH (NOLOCK)
				 ON strike.cp_sec_user_audit_id = strike_audit.cp_sec_user_audit_id

				LEFT JOIN dbo.cp_unscheduled_response_history resp WITH (NOLOCK)
				 ON	 resp.cp_unscheduled_documentation_history_id = doc.cp_unscheduled_documentation_history_id

				 left JOIN #stdQuestionIdTable stdQId WITH (NOLOCK)
				  on  rev.std_intervention_id = stdqid.stdinterventionid
					     and rev.gen_intervention_id = stdqid.genInterventionId
						 and rev.intervention_id = stdqid.interventionId
				         and  resp.std_question_id=stdQId.stdQuestionId
						 and stdQId.stdQuestionRank = 1

				LEFT JOIN dbo.cp_sec_user_audit audit WITH (NOLOCK)
					on doc.cp_sec_user_audit_id = audit.cp_sec_user_audit_id
				where sched.schedule_Type = 40 AND
					  sched.fac_id=@vFacId
					  AND (sched.retired_date IS NULL  OR sched.retired_date >= @vfil_ds_schedule_date_tzadj);
			END
	if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
	if @debug_me = 'Y'
	  select '#cp_documentation_responses_historical' as stdFinalPickListTable, * from #cp_documentation_responses a  order by 1

	END

       SELECT @vStep = 20, @step_start_time = getdate()
		IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Timezone and shift name adjustment at ' + CONVERT(VARCHAR, @step_start_time)


  -- DAY LIGHT SAVING DATE
      UPDATE a
       SET schedule_date=CASE
                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_date) >= @vdaylightStart and schedule_date <= @vdaylightStart

                             THEN dateadd(hh,+1, schedule_date)

                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_date) >=  @vdaylightEnd and schedule_date <= @vdaylightend
                             THEN dateadd(hh,-1, schedule_date)
							 else schedule_date

                         END,
           completed_date=CASE
                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,completed_date) >= @vdaylightStart and completed_date <= @vdaylightStart

                             THEN dateadd(hh,+1, completed_date)

                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,completed_date) >=  @vdaylightEnd and completed_date <= @vdaylightend
                             THEN dateadd(hh,-1, completed_date)
							 else completed_date

                         END,
	      schedule_start_date=CASE
                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_start_date) >= @vdaylightStart and schedule_start_date <= @vdaylightStart

                             THEN dateadd(hh,+1, schedule_start_date)

                             WHEN dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_start_date) >=  @vdaylightEnd and schedule_start_date <= @vdaylightend
                             THEN dateadd(hh,-1, schedule_start_date)
							 else schedule_start_date


                         END
    FROM #cp_documentation_responses a
    WHERE @vAdjtoDST = 'Y'
		and (month(completed_date) = month(@vdaylightStart)
			or month(schedule_date) = month(@vdaylightStart)
			or month(completed_date) = month(@vdaylightEnd)
			or month(schedule_date) = month(@vdaylightEnd)
			)


      UPDATE #cp_documentation_responses
       SET schedule_time=   REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_date), 108), ':', '');

      if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

      SELECT @vStep = 21, @step_start_time = getdate()
	 IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Getting POC Document base of Timezone  description  at ' + CONVERT(VARCHAR, @step_start_time)

	   -- Update short codes accerding to POC generatl configuration

	   INSERT INTO @pocShortCodesConfig([default_value_id], [name], [value], [effective_date], [ineffective_date])
	   SELECT
			 CASE   WHEN name = 'short_code_not_applicable' THEN '-97'
				    WHEN name = 'short_code_resident_refused' THEN '-98'
				    WHEN name = 'short_code_resident_not_available' THEN '-99'
					WHEN name = 'poc_adv_report_tube_short_code' THEN '-95'
					WHEN name = 'poc_adv_report_npo_short_code' THEN '-96'
			 END AS [default_value_id],
			 [name], RTRIM(LTRIM([value])), [effective_date], [ineffective_date]
	   FROM  @pocGeneralConfig
	   WHERE name IN ('short_code_not_applicable','short_code_resident_not_available','short_code_resident_refused','poc_adv_report_tube_short_code','poc_adv_report_npo_short_code')

	   if @debug_me = 'y' SELECT '@pocShortCodesConfig' pocShortCodesConfig,* from @pocShortCodesConfig

	   -- Short codes updated according to POC General Configuration
	   UPDATE r
	   SET r.[item_value_id] = ISNULL(NULLIF(RTRIM(LTRIM(c.[value])), ''), r.[item_value_id])
	   FROM #cp_documentation_responses r
		  INNER JOIN @pocShortCodesConfig c
		  ON r.item_value_id = c.[default_value_id] AND (dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, r.completed_date) BETWEEN [effective_date] AND [ineffective_date])
		  AND r.item_value_id <> '-901'

	   -- Update for Multiselect
	   UPDATE r
	   SET r.[item_value_id] =  dbo.fn_poc_get_Multiselect_DocumentCodeAsString(item_value, stdQuestionId, c1.value, c2.value, c3.value)
	   FROM #cp_documentation_responses r
		  INNER JOIN @pocShortCodesConfig c1
		  ON (dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, r.completed_date) BETWEEN c1.[effective_date] AND c1.[ineffective_date]) AND c1.default_value_id = '-99'
		  INNER JOIN @pocShortCodesConfig c2
		  ON (dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, r.completed_date) BETWEEN c2.[effective_date] AND c2.[ineffective_date]) AND c2.default_value_id = '-98'
		  INNER JOIN @pocShortCodesConfig c3
		  ON (dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, r.completed_date) BETWEEN c3.[effective_date] AND c3.[ineffective_date]) AND c3.default_value_id = '-97'
		  where r.item_value_id = '-901'

	if @debug_me = 'y'
		select 'responses after mlt update', * from #cp_documentation_responses

	-- needed to map the scheduled time with corresponding shifts
	delete from #prp_shift_link
	where shift_id not in (select distinct std_shift_id from #cp_documentation_responses where schedule_date >= @vfil_ds_schedule_date and std_shift_id is not null);



	insert into  #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)

 SELECT DISTINCT sh.shift_id,
                       sh.shift_name,
                       sh.start_time,
                       2400-1,
                       '',
                       NULL,
                       0
					   from #prp_shift_link sh
			where (CONVERT(INT, sh.end_time)-CONVERT(INT, sh.start_time))<0
			and not exists (select 1 from #prp_shifts b where b.shift_id = sh.shift_id and b.flg = 0);

insert into  #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)
 SELECT DISTINCT sh.shift_id,
                       sh.shift_name,
                       '0',
                       sh.end_time-1,
                       '',
                       NULL,
                       1
 from #prp_shift_link sh
 where CONVERT(INT, sh.end_time)-CONVERT(INT, sh.start_time)<0
 and not exists (select 1 from #prp_shifts b where b.shift_id = sh.shift_id and b.flg = 1);

 insert into  #prp_shifts(shift_id,
                        shift_name,
                        start_time,
                        end_time,
                        group_name,
                        position_id,
                        flg)
 SELECT DISTINCT sh.shift_id,
                       sh.shift_name,
                       sh.start_time,
                       sh.end_time-1,
                       '',
                       NULL,
                       0
 from #prp_shift_link sh
 where  not exists (select 1 from #prp_shifts b where b.shift_id = sh.shift_id and b.flg = 0);


	 if @debug_me = 'Y'  select '#cp_documentation_responses' cp_documentation_responses,* from #cp_documentation_responses --where std_shift_id in (354,355,356) ;

		    --   Qshift

	    INSERT INTO #pocData(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,
				schedule_type,flag,schedule_time,short_code )

		 select  schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,a.stdQuestionId ,stdQuestionContorlType,stdQuestionText,a.sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,
		  CASE
			  WHEN ( [shift].end_time - [shift].start_time ) < 0
				  AND ( replace(convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,schedule_date),108),':','')>= [shift].start_time
					    OR replace(convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,schedule_date),108),':','') <= [shift].end_time ) THEN
			  [shift].shift_name
			  WHEN ( shift.end_time - [shift].start_time ) > 0
				  AND ( replace(convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,schedule_date),108),':','') >= [shift].start_time
					   AND replace(convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,schedule_date),108),':','') <= [shift].end_time ) THEN
			  [shift].shift_name
			END                                                AS Shift1,
			a.start_time ,a.end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time,
				case
				  when stdQuestionContorlType in ('bls',  'os2', 'het','num','tmp','pls','wgt') and isnumeric(a.item_value)=1 and isnull(a.item_value,'') not in ('<RNA/>','<NA/>','<RR/>') then a.item_value
				  when stdQuestionContorlType in ( 'rsp', 'sgn')   then a.item_value
				  when stdQuestionContorlType='bpr' and isnumeric(a.item_value)=1 then a.item_value+'/'+cast( item_value_id as varchar(max))
					else cast( item_value_id as varchar(max))
				end item_value_id
				, a.item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type  ,
				case Substring(a.schedule_detail_id,Charindex('_', a.schedule_detail_id) + 1,1)
				 when 'Q' then 'Qshift'
				 when 'P' then 'PRN'
				 when 'S' then 'Schedule'
				 when 'U' then 'Unscheduled'
				 when 'D' then 'Duration' end
				 ,schedule_time
				 , vpl.short_code
		  from #cp_documentation_responses a
		   INNER JOIN dbo.#prp_shift_link [shift]
				   ON a.std_shift_id = [shift].shift_id
			left outer join #vprpPickList vpl
					on a.stdPickListId = vpl.std_pick_list_id
					and a.gen_intervention_id = vpl.genInterventionId
					and a.stdQuestionId  = vpl.stdQuestionId
					and a.item_value_id = vpl.item_value
					and (a.schedule_date >= vpl.effective_date and a.schedule_date < vpl.ineffective_date)

		 where a.schedule_type <>40 and schedule_type<>8  -- No PRN and UnSchedule
		 and schedule_date is not null
		 and schedule_date>= DATEADD(DD, -1, @vfil_ds_schedule_date)
		 and schedule_date<DATEADD(DD, 1, @vfil_ds_schedule_date2) ;



		 -- schedule time
	    INSERT INTO #pocData(
				    schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				    stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				    documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				    created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,
				    schedule_type,flag,schedule_time, short_code)

			select

			schedule_detail_id ,cpsd.client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,cpsd.stdQuestionId ,stdQuestionContorlType,stdQuestionText,cpsd.sequence,
				    stdPickListId,cpsd.fac_id , schedule_id ,
		  Cast(shift.shift_id AS VARCHAR) + '-'
		 + Cast(shift.flg AS VARCHAR)                       shift_id,

		   shift.shift_name  ,
		-- END                                                AS Shift,

		cpsd.start_time ,cpsd.end_time,shift_date,schedule_start_date,
		  case when Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'p' THEN
		    case when resolved_date is not null and  retired_date is null then resolved_date
		  	    when resolved_date is null and  retired_date is not null then retired_date
			    when resolved_date is not null	and  retired_date is not null and 	resolved_date<=retired_date then resolved_date
			    when resolved_date is not null	and  retired_date is not null and 	resolved_date>=retired_date then retired_date
		    else 	schedule_end_date END
	       else schedule_end_date end schedule_end_date
		    ,
		 case
		   when  right(shift.flg,1) in (1,0) and b.std_shift_id is not null and Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'S'
		   THEN schedule_date
		   when Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'p' AND
			   cast(cpsd.end_time as int) -cast(cpsd.start_time as int)<0
			    AND schedule_time < cast(cpsd.start_time as int) THEN dateadd(d, -1, cpsd.schedule_date)
		ELSE schedule_date END schedule_date , documentation_id ,completed_date, entered_date, task_time,
				    case
					 when stdQuestionContorlType in ('bls',  'os2', 'het','num','tmp','pls','wgt') and isnumeric(cpsd.item_value)=1 and isnull(cpsd.item_value,'') not in ('<RNA/>','<NA/>','<RR/>') then cpsd.item_value
					 when stdQuestionContorlType in ('rsp', 'sgn') then cpsd.item_value
					 when stdQuestionContorlType='bpr' and isnumeric(cpsd.item_value)=1 then cpsd.item_value+'/'+cast( item_value_id as varchar(max))	  else cast( item_value_id as varchar(max)) end item_value_id
				    , cpsd.item_value,retired_date,resolved_date,
				    created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type  ,
				    case Substring(cpsd.schedule_detail_id,Charindex('_',cpsd.schedule_detail_id) + 1,1)
					when 'Q' then 'Qshift'
					when 'P' then 'PRN'
					when 'S' then 'Schedule'
					when 'U' then 'Unscheduled'
					when 'D' then 'Duration' end
					,schedule_time
					, vpl.short_code
    FROM   #cp_documentation_responses cpsd
	 INNER JOIN  #PRP_ClientList c on c.client_id=cpsd.client_id
		 INNER JOIN #prp_shifts shift
		 ON 1 = CASE
							WHEN Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) + 1, 1)  = 'P'
								   AND cpsd.std_shift_id =[shift].shift_id and [shift].flg=0 THEN 1
							WHEN Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'S'
								   AND cpsd.std_shift_id IS NULL
								   AND 1 = CASE  WHEN
															( shift.end_time - shift.start_time ) < 0
															AND
															(cpsd.schedule_time >= shift.start_time
															OR cpsd.schedule_time <= shift.end_time )
															THEN 	1

														WHEN ( shift.end_time - shift.start_time ) > 0
															AND (	cpsd.schedule_time >= shift.start_time
															AND cpsd.schedule_time <= shift.end_time ) THEN 	1
														ELSE 0
												END
							THEN 1

							ELSE 0
					END
	  left join dbo.cp_std_shift b  WITH (NOLOCK)
					on b.std_shift_id=shift_id  and cast(b.end_time as int )-cast(b.start_time as int)<0
      left outer join #vprpPickList vpl
					on cpsd.stdPickListId = vpl.std_pick_list_id
					and cpsd.gen_intervention_id = vpl.genInterventionId
					and cpsd.stdQuestionId  = vpl.stdQuestionId
					and cpsd.item_value_id = vpl.item_value
					and (cpsd.schedule_date >= vpl.effective_date and cpsd.schedule_date < vpl.ineffective_date)

    WHERE  cpsd.schedule_type <> 40   --unschedual

		  and Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) +1, 1)<> 'D'
	 	 		and ( schedule_date is null OR
		 (  case when  right(shift.flg,1) in (1,0) and b.std_shift_id is not null and Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'S'
		 THEN schedule_date else schedule_date end  >= DATEADD(DD, -1, @vfil_ds_schedule_date)
		 and case when  right(shift.flg,1) in (1,0) and b.std_shift_id is not null and Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'S'
		 THEN schedule_date else schedule_date end<=@vfil_ds_schedule_date2_tzadj_plus1

		 )
    )  ;

	 ---- Just Duration
         INSERT INTO #pocData(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,
				schedule_type,flag,schedule_time, short_code)

		 select  distinct
		 schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,cpsd.stdQuestionId ,stdQuestionContorlType,stdQuestionText,cpsd.sequence,
				stdPickListId,fac_id , schedule_id ,

	   case when  completed_date is not null  and strikeout_flag<>'Y' and CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)>=shift.start_time
				   AND CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)<=shift.end_time	 then Cast(shift.shift_id AS VARCHAR) + '-' + Cast(shift.flg AS VARCHAR)
			 when  completed_date is  null  then Cast(shift.shift_id AS VARCHAR) + '-' + Cast(shift.flg AS VARCHAR)  else null end
                               shift_id,
        case when  completed_date is not null   and strikeout_flag<>'Y' and 	CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)>=shift.start_time
				   AND CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)<=shift.end_time	 then shift.shift_name
			 when  completed_date is  null  then shift.shift_name  else null end shift_name  ,
      cpsd.start_time ,cpsd.end_time,shift_date,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_start_date), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date) ,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time,
				case
				  when stdQuestionContorlType in ('bls',  'os2', 'het','num','tmp','pls','wgt') and isnumeric(cpsd.item_value)=1 and isnull(cpsd.item_value,'') not in ('<RNA/>','<NA/>','<RR/>') then cpsd.item_value
				  when stdQuestionContorlType in ( 'rsp', 'sgn') then cpsd.item_value
				  when stdQuestionContorlType='bpr' and isnumeric(cpsd.item_value)=1 then cpsd.item_value+'/'+cast( item_value_id as varchar(max))	  else cast( item_value_id as varchar(max)) end item_value_id
				, cpsd.item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type  ,
				case Substring(cpsd.schedule_detail_id,Charindex('_',cpsd.schedule_detail_id) + 1,1)
				 when 'Q' then 'Qshift'
				 when 'P' then 'PRN'
				 when 'S' then 'Schedule'
				 when 'U' then 'Unscheduled'
				 when 'D' then 'Duration' end
				 ,schedule_time
				 , vpl.short_code
FROM    #prp_shifts shift
  left join #cp_documentation_responses  cpsd
  ON 1 = CASE  WHEN   completed_date is not null  and strikeout_flag<>'Y' and  	CAST(REPLACE(CONVERT(VARCHAR(5), completed_date, 108), ':', '') AS INT)>=shift.start_time
				   AND CAST(REPLACE(CONVERT(VARCHAR(5), completed_date, 108), ':', '') AS INT)<=shift.end_time	 then 1
			 when  (completed_date is  null  and strikeout_flag<>'Y') or strikeout_flag='Y'   then 1 else 0 end
    left outer join #vprpPickList vpl
					on cpsd.stdPickListId = vpl.std_pick_list_id
					and cpsd.gen_intervention_id = vpl.genInterventionId
					and cpsd.stdQuestionId  = vpl.stdQuestionId
					and cpsd.item_value_id = vpl.item_value
					and (cpsd.schedule_date >= vpl.effective_date and cpsd.schedule_date < vpl.ineffective_date)

WHERE  cpsd.schedule_type <> 40   --unschedual
       and Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) + 1, 1) = 'D'
		  and ( schedule_date is null OR  ( schedule_date>= DATEADD(DD, -1, @vfil_ds_schedule_date) and schedule_date< @vfil_ds_schedule_date2_tzadj_plus1))   ;

	 ----  Unschedule
	    INSERT INTO #pocData(
				schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,stdQuestionId ,stdQuestionContorlType,stdQuestionText,sequence,
				stdPickListId,fac_id , schedule_id , std_shift_id ,description ,start_time ,end_time,shift_date,schedule_start_date, schedule_end_date,schedule_date ,
				documentation_id ,completed_date, entered_date, task_time, item_value_id, item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,
				schedule_type,flag,schedule_time, short_code)

	 	 select  schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,cpsd.stdQuestionId ,stdQuestionContorlType,stdQuestionText,cpsd.sequence,
				stdPickListId,fac_id , schedule_id ,
        Cast(shift.shift_id AS VARCHAR) + '-'
       + Cast(shift.flg AS VARCHAR)                       shift_id,

          CASE
         WHEN Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) +
                                             1, 1)
              = 'D'
              AND ( shift.end_time - shift.start_time ) < 0
              AND ( cpsd.schedule_time >= shift.start_time
                     OR cpsd.schedule_time <= shift.end_time ) THEN
         shift.shift_name
         WHEN Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) +
                                             1, 1)
              = 'D'
              AND ( shift.end_time - shift.start_time ) > 0
              AND ( cpsd.schedule_time >= shift.start_time
                    AND cpsd.schedule_time <= shift.end_time ) THEN
         shift.shift_name
         WHEN Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) +
                                             1, 1)
              <> 'D'THEN shift.shift_name
       END                          AS Shift_name  ,
      -- END                                                AS Shift,

      cpsd.start_time ,cpsd.end_time,shift_date,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_start_date), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date),
	  case when  right(shift.flg,1)=1 and Substring(cpsd.schedule_detail_id,Charindex('_', cpsd.schedule_detail_id) + 1,1) = 'S'
	  THEN schedule_date
																  ELSE schedule_date
															 END

	 schedule_date ,
				documentation_id ,completed_date, entered_date, task_time,
				case
				  when stdQuestionContorlType in ('bls',  'os2', 'het','num','tmp','pls','wgt') and isnumeric(cpsd.item_value)=1 and isnull(cpsd.item_value,'') not in ('<RNA/>','<NA/>','<RR/>') then cpsd.item_value
				  when stdQuestionContorlType in ( 'rsp', 'sgn') then cpsd.item_value
				  when stdQuestionContorlType='bpr' and isnumeric(cpsd.item_value)=1 then cpsd.item_value+'/'+cast( item_value_id as varchar(max))	  else cast( item_value_id as varchar(max)) end item_value_id
				, cpsd.item_value,retired_date,resolved_date,
				created_by_longname,created_by_position,  initials,strikeout_flag, strikeout_id, strikeout_description, strikeout_by, strikeout_date,schedule_type  ,
				case Substring(cpsd.schedule_detail_id,Charindex('_',cpsd.schedule_detail_id) + 1,1)
				 when 'Q' then 'Qshift'
				 when 'P' then 'PRN'
				 when 'S' then 'Schedule'
				 when 'U' then 'Unscheduled'
				 when 'D' then 'Duration' end
				 ,schedule_time
				 , vpl.short_code
FROM   #cp_documentation_responses cpsd

       INNER JOIN #prp_shifts shift
	  ON 1 = CASE
                        WHEN Substring(cpsd.schedule_detail_id,
                             Charindex('_', cpsd.schedule_detail_id) + 1,
                             1)
                             = 'D'

                             AND cpsd.std_shift_id IS NULL THEN 1
                        WHEN Substring(cpsd.schedule_detail_id,
                             Charindex('_', cpsd.schedule_detail_id) + 1,
                             1) IN ( 'U', 'S' )

                             AND cpsd.std_shift_id IS NULL
                             AND 1 = CASE
                                       WHEN
                                 ( shift.end_time - shift.start_time ) < 0
                                 AND
                        (
                          cpsd.schedule_time >= shift.start_time
                           OR cpsd.schedule_time <= shift.end_time ) THEN
                          1
                          WHEN ( shift.end_time - shift.start_time ) > 0
                               AND (
                          cpsd.schedule_time >= shift.start_time
                          AND cpsd.schedule_time <= shift.end_time ) THEN
                          1
                          ELSE 0
                        END THEN 1
                        WHEN Substring(schedule_detail_id,
                             Charindex('_', schedule_detail_id) + 1,
                             1)
                             = 'S'

                             AND cpsd.std_shift_id IS NULL
                             AND cpsd.schedule_time >= shift.start_time
                             AND cpsd.schedule_time <= shift.end_time THEN 1
                        ELSE 0
                      END
 left outer join #vprpPickList vpl
					on cpsd.stdPickListId = vpl.std_pick_list_id
					and cpsd.gen_intervention_id = vpl.genInterventionId
					and cpsd.stdQuestionId  = vpl.stdQuestionId
					and cpsd.item_value_id = vpl.item_value
					and (cpsd.schedule_date >= vpl.effective_date and cpsd.schedule_date < vpl.ineffective_date)

	  WHERE  cpsd.schedule_type =40   --unschedual
	   AND cpsd.schedule_type <> 8
       and Substring(cpsd.schedule_detail_id, Charindex('_', cpsd.schedule_detail_id) + 1, 1) = 'U'
   and ( schedule_date is null OR  ( schedule_date>= DATEADD(DD, -1, @vfil_ds_schedule_date) and schedule_date<DATEADD(DD, 1, @vfil_ds_schedule_date2)))   ;

	     UPDATE a
			SET description=b.shift_name,
			    std_shift_id=CAST(b.shift_id AS VARCHAR)+'-'+CAST(b.flg AS VARCHAR)
	   FROM #pocData a INNER JOIN
				    #prp_shifts b
				    ON CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)>=b.start_time
				   AND CAST(REPLACE(CONVERT(VARCHAR(5), schedule_date, 108), ':', '') AS INT)<=b.end_time
	   WHERE a.description IS NULL;

	     DELETE FROM #pocData
           WHERE description IS NULL
		  AND SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1)<>'D';

       --Qshift
	   UPDATE a
			SET a.completed_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, completed_date)
			,a.schedule_date=DATEADD(MI, CONVERT(int, SUBSTRING(start_time, 3, 2))+1, DATEADD(HH, CONVERT(int, SUBSTRING(start_time, 1, 2)), shift_date)) -- dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_date)
			,a.schedule_time=CONVERT(int, SUBSTRING(start_time, 3, 2))+1
	   FROM #pocData a
	   WHERE SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1)='Q';

       --NonQshift--- Nightshift
	   UPDATE a SET
	   schedule_date=cast(convert(varchar(20),b.day_date,101)
				    +' '
				    +convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,schedule_date ),108) as datetime),
				    completed_date =cast(convert(varchar(20),c.day_date,101)
				    +' '
				    +convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,completed_date ),108) as datetime)

	    from #pocData a
	    inner join @Dateadjust b
	    on b.std_shift_id=cast(substring(a.std_shift_id,1,charindex('-',a.std_shift_id)-1) as int)
	    and cast(convert(varchar(20),a.schedule_date,101) as datetime)=cast(convert(varchar(20),b.s_date,101) as datetime)
	    left join @Dateadjust c
	    on c.std_shift_id=cast(substring(a.std_shift_id,1,charindex('-',a.std_shift_id)-1) as int)
	    and cast(convert(varchar(20),a.completed_date,101) as datetime)=cast(convert(varchar(20),c.s_date,101) as datetime)
	   where substring(a.schedule_detail_id,charindex('_',a.schedule_detail_id)+1,1) not in ('S','Q','D')
	   and right(a.std_shift_id,1)=1  ;

		UPDATE a SET
			a.schedule_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_date),
			a.completed_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, completed_date)
		FROM #pocData a
		WHERE SUBSTRING(a.schedule_detail_id,CHARINDEX('_',a.schedule_detail_id)+1,1)  in ('S')


	    --- DAY AND EVEING
	   UPDATE a
		 SET a.schedule_date=
		  case when  b.std_shift_id is not null then cast(convert(varchar(20),a.schedule_date,101) +' ' +convert(varchar(5),dbo.fn_adjust_time_fac_time_zone_base_on_date (@vFacId ,a.schedule_date ),108) as datetime)
		   else dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_date) end,
			a.completed_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, completed_date)
		  FROM #pocData a
		  left join dbo.cp_std_shift b  WITH (NOLOCK)
			on b.std_shift_id=cast(left(a.std_shift_id,charindex('-',a.std_shift_id)-1 ) as int ) and  cast(b.end_time as int )-cast(b.start_time as int)<0
		  WHERE SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1) not in ('Q','D', 'S')
		  		    AND RIGHT(a.std_shift_id, 1)=0;

	   UPDATE a
		 SET a.schedule_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_date),
			a.completed_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, completed_date)
		  FROM #pocData a
		  WHERE SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1)='D'


		 -- Re-insert schedules which was used for documentation on night shift after midnight.
		 -- We still want to see this schedule available for documentation for previous day on report (not displayed as X)
		 -- Just copy of schedule, not copy of documentation
		INSERT INTO #pocData(schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,
							fac_id, schedule_id, std_shift_id, description, start_time, end_time, shift_date, schedule_start_date, schedule_end_date, schedule_date,
							strikeout_flag, schedule_type, flag, schedule_time, day_of_month, short_code )
		 SELECT DISTINCT schedule_detail_id ,client_id ,gen_intervention_id,intervention_id,std_intervention_id,text1,
				fac_id, schedule_id, std_shift_id, description, start_time, end_time, shift_date, schedule_start_date, schedule_end_date, schedule_date,
				strikeout_flag, schedule_type, flag, schedule_time, day_of_month, short_code
		 FROM #pocData a
		 WHERE documentation_id IS NOT NULL
			AND DATEPART(DAY, completed_date) > DATEPART(DAY, schedule_date)
			AND NOT EXISTS (
								SELECT 1 FROM #pocData b
								WHERE a.client_id = b.client_id
										AND a.schedule_detail_id = b.schedule_detail_id
										AND a.gen_intervention_id = b.gen_intervention_id
										AND a.intervention_id = b.intervention_id
										AND a.std_intervention_id = b.std_intervention_id
										AND a.schedule_date = b.schedule_date
										AND b.documentation_id is null
										AND b.completed_date is null
							)


 if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'

if @debug_me = 'Y'  select '#pocData' pocData,* from #pocData;
   -----  User Legend
 SELECT @vStep = 22, @step_start_time = getdate()
 IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Getting User Legend INFO  at ' + CONVERT(VARCHAR, @step_start_time)

	   INSERT INTO #PRP_tbUserLegend	(client_id,document_by,initials)
	   SELECT  distinct client_id,created_by_longname,initials
	   FROM #pocData b
	    WHERE b.strikeout_flag='N'
	    and documentation_id is not null;

		-- include 2nd signature in the legend
		 INSERT INTO #PRP_tbUserLegend	(client_id,document_by,initials)
		select distinct re.client_id, su.long_username, re.item_value
				from #cp_documentation_responses re
				inner join dbo.sec_user su with (nolock) on re.item_value_id = convert(varchar(20),su.userid)
				and re.stdQuestionContorlType = 'sgn'
		where not exists (select 1 from #PRP_tbUserLegend t where t.document_by = su.long_username and t.initials = re.item_value )
			and re.strikeout_flag = 'N'
			and re.documentation_id is not null;


 if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
 if @debug_me = 'Y'  select '#PRP_tbUserLegend' name,* from #PRP_tbUserLegend;


 --INSERT INTO  #poc_doc_ids
 --SELECT DISTINCT gen_intervention_id ,intervention_id ,std_intervention_id FROM #pocData;


--- Client Information into the base table

  SELECT @vStep = 23, @vStepName = 'Client Information into the base table ', @step_start_time = getdate()
 IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Client Information into the base table  at ' + CONVERT(VARCHAR, @step_start_time)

 INSERT INTO @PRP_ds_interv_schedule (row_type,row_id,seq,fac_id,client_id,client_name,admint_date,date_of_birth,location	,photo ,photo_date ,mrn_number,user_legend,report_header)
select 1 row_type,0 row_id,'0000' seq, @vFacId   fac_id,c.client_id,c.client_name,
--isnull(convert(char(10),c.admission_date, 101),'') admission_date,
 admission_date,
date_of_birth ,location,photo,photo_date,mrn_number,
       case when @vIncludeUserLegend='1' then UserLegend.user_legend else null end user_legend	,
       @vTermClient+': '+ c.client_name+  case when   @vfil_ds_task_choice is not null then
												@vTab+ @vTermTask +': '+CASE WHEN  @vfil_ds_task_choice = 1 THEN @vTermIntervention + ' Only'
															WHEN @vfil_ds_task_choice = 2 THEN @vTermTask + ' Only'
															WHEN @vfil_ds_task_choice = 3 THEN @vTermIntervention +' and ' + @vTermTask end  else '' end+
	  CASE WHEN @vfil_ds_type=1 THEN  + @vTab+'Type: '+ ( SELECT fst_type_description
												FROM dbo.cp_fst_type fst with (nolock)
												 LEFT JOIN #PRP_Filters f_ds_type WITH (NOLOCK) ON
													   f_ds_type.filter_name = 'ds_type'
												    AND f_ds_type.filter_value = convert(varchar(max),fst.fst_type_id)
					                                 WHERE (fst.fac_id = -1 OR fst.fac_id = @vFacId)  AND fst.deleted = 'N'
											          AND (@vfil_ds_type is null or (@vfil_ds_type = '1' and f_ds_type.filter_value is not null))  )

			 else  @vTab+'Type: All'end +@vTab+'Schedule: '+DATENAME( MONTH , @vfil_ds_schedule_date )+' '+CAST(YEAR(@vfil_ds_schedule_date) as VARCHAR)
from #PRP_ClientList c
Outer apply (
					Select * from
					(	
                        --if user initial contains double quote("), then replace it with '|||||' 
						--above is to avoid an error when converting tab/row seperated user legend into each field on Jasper report
						Select CASE WHEN CHARINDEX('"', initials) > 0 THEN REPLACE(initials, '"', @vPlaceHolder ) 
								ELSE initials END + @vtab + CASE WHEN CHARINDEX('"', document_by) > 0 THEN REPLACE(document_by, '"', @vPlaceHolder )
								ELSE document_by END + @vnewline
						From #PRP_tbUserLegend a
						where a.client_id = c.client_id
						order by initials,document_by
						FOR XML PATH ('')
					) a (user_legend)
		) UserLegend ;

 if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
 if @debug_me = 'Y' select '@PRP_ds_interv_schedule' name,* from @PRP_ds_interv_schedule

  SELECT @vStep = 24, @vStepName = 'POC Info  ', @step_start_time = getdate()
 IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' POC Info   at ' + CONVERT(VARCHAR, @step_start_time)

	 if @debug_me = 'Y'  select '@PRP_ds_interv_schedule_clientInfo' name,* from @PRP_ds_interv_schedule;

;WITH documentedData
	AS
		(SELECT DISTINCT fac_id,documentation_id,
              client_id,
			  gen_intervention_id,
			  intervention_id,
                 std_intervention_id,
                 schedule_detail_id,
                 schedule_id,
                 description,
                   case when SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null then completed_date else schedule_date end  schedule_date,
                 completed_date,
                 entered_date,
                 task_time,
                 schedule_time,
                 flag,
			  schedule_start_date,
                 schedule_end_date,
			   case
			   when DATEPART(dd, completed_date) is not null and DATEPART(dd, schedule_date)= DATEPART(dd, completed_date) then  DATEPART(dd, schedule_date)
			   when DATEPART(dd, completed_date) is not null and  DATEPART(dd, schedule_date)<> DATEPART(dd, completed_date) then  DATEPART(dd, completed_date)
			  else  DATEPART(dd, schedule_date) end day_of_month,
                 text1,
                   initials,
                  CONVERT( VARCHAR(5), completed_date, 108)  documet_time,
					case when flag = 'Duration' then
					 (
							 SELECT
								case
									-- If control_type = 'ntv' and it's not system response, then display '0' instead of full response
									when stdQuestionContorlType = 'ntv' then isnull(item_value_id, IIF(item_value is null, '', '0')) + ' '
									else isnull(short_code, item_value_id)
								end + ',' AS [text()]
							 FROM
								(select distinct fac_id,client_id,gen_intervention_id,intervention_id,std_intervention_id,schedule_detail_id,schedule_id,item_value_id,

										 case
											when SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null then completed_date
											else schedule_date
										end  schedule_date,
										completed_date,entered_date,task_time,schedule_time,flag,schedule_start_date,schedule_end_date,sequence,stdQuestionId	,

										case
										   when DATEPART(dd, completed_date) is not null and DATEPART(dd, schedule_date)= DATEPART(dd, completed_date) then  DATEPART(dd, schedule_date)
										   when DATEPART(dd, completed_date) is not null and  DATEPART(dd, schedule_date)<> DATEPART(dd, completed_date) then  DATEPART(dd, completed_date)
											else  DATEPART(dd, schedule_date)
										end day_of_month

										, text1,initials
										 , CONVERT( VARCHAR(5), completed_date, 108)  documet_time
										 ,strikeout_flag
										 , short_code
								  from #pocData b where b.flag='Duration'   and b.strikeout_flag='N'
								) a
							 WHERE a.std_intervention_id=b.std_intervention_id
							  AND a.gen_intervention_id=b.gen_intervention_id
							  AND a.intervention_id=b.intervention_id
							   AND a.client_id=b.client_id
							   AND a.fac_id=b.fac_id
							   AND a.schedule_detail_id=b.schedule_detail_id
							   AND a.schedule_id=b.schedule_id
							   AND a.schedule_date=(
													  case   when SUBSTRING(b.schedule_detail_id, CHARINDEX('_', b.schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null
														 then b.completed_date
														 else b.schedule_date
													  end
												   )
							  and a.strikeout_flag=b.strikeout_flag
							  and a.completed_date=b.completed_date
							  and a.entered_date=b.entered_date

							 ORDER BY fac_id, client_id, std_intervention_id, schedule_date, schedule_time, sequence
							 FOR XML PATH('')
						)
					else
						(
							SELECT
								case
									-- If control_type = 'ntv' and it's not system response, then display '0' instead of full response
									when stdQuestionContorlType = 'ntv' then isnull(item_value_id, IIF(item_value is null, '', '0')) + ' '
									else isnull(short_code, item_value_id)
								end + ',' AS [text()]
							FROM #pocData a
							WHERE a.strikeout_flag='N'
							and a.std_intervention_id=b.std_intervention_id
							AND a.gen_intervention_id=b.gen_intervention_id
							AND a.intervention_id=b.intervention_id
							AND a.client_id=b.client_id
							AND a.fac_id=b.fac_id
							AND a.schedule_detail_id=b.schedule_detail_id
							AND a.schedule_id=b.schedule_id
							AND a.schedule_date=b.schedule_date
							and a.strikeout_flag=b.strikeout_flag
							and a.documentation_id=b.documentation_id
							and a.std_shift_id = b.std_shift_id --to prevent responses from multiplying for overlaping shifts

							ORDER BY fac_id, client_id, std_intervention_id, schedule_date, schedule_time, sequence
							FOR XML PATH('')
				) end respone
				,
							  CASE WHEN flag = 'QShift'	THEN '0010'
								   WHEN flag = 'Schedule'		THEN '0020'
								   WHEN flag = 'Duration'		THEN '0030'
								   WHEN flag = 'PRN'		THEN '0040'
								   WHEN flag = 'Unscheduled'	THEN '0050'
								   ELSE	'0020'	-- Special cases of SCH (e.g. QnH)
							  END
							 seq
			 FROM #pocData b

			  where  b.strikeout_flag='N'

	)
,
 allPocData as (

	select DISTINCT b.fac_id,
	            b.documentation_id ,
                 b.client_id,
			  b.gen_intervention_id,
			  b.intervention_id,
                 b.std_intervention_id,
			  schedule_detail_id,
                 b.schedule_id,
                 b.description,

			  case when SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null  then completed_date else schedule_date end  schedule_date,

                  case
			   when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then null
			   else b.completed_date end completed_date,


			   case
			   when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then null
			   else b.entered_date end entered_date	,


                 b.task_time,
                 b.schedule_time,
                 b.flag,
			  b.schedule_start_date,

			  	 case when  SUBSTRING(b.schedule_detail_id, CHARINDEX('_', b.schedule_detail_id)+1, 1)='P' THEN
			    case when ( (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)>= cast(b.start_time as int))
			      and (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)< cast(b.end_time as int)) )
				 or
				  ( (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)< cast(b.start_time as int))
			      and (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)> cast(b.end_time as int)) )
				  or
				  ( (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)< cast(b.start_time as int))
			      and (cast (REPLACE(CONVERT( VARCHAR(5), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date), 108), ':', '') as int)>= cast(b.end_time as int)) )
				 then dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date)
			     else null end
			 else
			   dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, b.schedule_end_date)
			 end schedule_end_date,

			    DATEPART(dd,
			    case when SUBSTRING(b.schedule_detail_id, CHARINDEX('_', b.schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null then b.completed_date else b.schedule_date end


			    )   day_of_month,
                 b.text1,
			  case
			   when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then 'N'
			   else b.strikeout_flag end strikeout_flag,

			  CASE
			   when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then NULL
			  else b.initials end initials ,
                 case
			  when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then NULL
			  else CONVERT( VARCHAR(5), b.completed_date, 108) end  documet_time,
                 case
			   when CONVERT( VARCHAR(10), b.completed_date, 101)<>CONVERT( VARCHAR(10), b.schedule_date, 101) then null
			   else
			 	case when flag = 'Duration'  then
		 (
     SELECT isnull(short_code, item_value_id) +',' AS [text()]
     FROM
	(select distinct fac_id,client_id,gen_intervention_id,intervention_id,std_intervention_id,schedule_detail_id,schedule_id,item_value_id	,

				   case when SUBSTRING(schedule_detail_id, CHARINDEX('_', schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null then completed_date else schedule_date end  schedule_date,

                 completed_date,entered_date,task_time,schedule_time,flag,schedule_start_date,schedule_end_date,sequence,stdQuestionId	,
			   case
			   when DATEPART(dd, completed_date) is not null and DATEPART(dd, schedule_date)= DATEPART(dd, completed_date) then  DATEPART(dd, schedule_date)
			   when DATEPART(dd, completed_date) is not null and  DATEPART(dd, schedule_date)<> DATEPART(dd, completed_date) then  DATEPART(dd, completed_date)
			  else  DATEPART(dd, schedule_date) end day_of_month,
                 text1,initials, CONVERT( VARCHAR(5), completed_date, 108)  documet_time,strikeout_flag
				 , short_code
		  from #pocData b where b.flag='Duration' and b.strikeout_flag='N'
	) a
     WHERE a.std_intervention_id=b.std_intervention_id
	  AND a.gen_intervention_id=b.gen_intervention_id
	  AND a.intervention_id=b.intervention_id
       AND a.client_id=b.client_id
       AND a.fac_id=b.fac_id
       AND a.schedule_detail_id=b.schedule_detail_id
       AND a.schedule_id=b.schedule_id
       AND a.schedule_date=(
							  case   when SUBSTRING(b.schedule_detail_id, CHARINDEX('_', b.schedule_detail_id)+1, 1) in ('Q', 'P', 'S', 'U', 'D') and completed_date is not null
								 then b.completed_date
								 else b.schedule_date
							  end
						   )
	  and a.strikeout_flag=b.strikeout_flag
	  and a.completed_date=b.completed_date
	  and a.entered_date=b.entered_date


     ORDER BY fac_id, client_id, std_intervention_id, schedule_date, schedule_time, sequence
     FOR XML PATH(''))
		else
                 (
     SELECT  isnull(short_code, item_value_id)  +',' AS [text()]
     FROM #pocData a
     WHERE a.strikeout_flag='N' and a.std_intervention_id=b.std_intervention_id
	  AND a.gen_intervention_id=b.gen_intervention_id
	  AND a.intervention_id=b.intervention_id
       AND a.client_id=b.client_id
       AND a.fac_id=b.fac_id
       AND a.schedule_detail_id=b.schedule_detail_id
       AND a.schedule_id=b.schedule_id
       AND a.schedule_date=b.schedule_date
	  and a.strikeout_flag=b.strikeout_flag
	  and a.documentation_id=b.documentation_id

     ORDER BY fac_id, client_id, std_intervention_id, schedule_date, schedule_time, sequence
     FOR XML PATH('')) end end respone 	,
				  CASE WHEN b.flag = 'QShift'	THEN '0010'
					   WHEN b.flag = 'Schedule'		THEN '0020'
					   WHEN b.flag = 'Duration'		THEN '0030'
					   WHEN b.flag = 'PRN'		THEN '0040'
					   WHEN b.flag = 'Unscheduled'	THEN '0050'
					   ELSE	'0020'	-- Special cases of SCH (e.g. QnH)
				  END
				 seq
   FROM #pocData b

   where
    1= case
			when b.strikeout_flag='N'  and  flag='Duration' and completed_date is null then 1
			when b.strikeout_flag='N'  and  flag='Duration' and completed_date< =schedule_end_date  and completed_date>=	schedule_date
			then 1
			when b.strikeout_flag='N'   then 1
			else 0 end


 )
 ,  poc as (
  select b.seq,
         b.fac_id,
  	    c.documentation_id documentation_id,
        b.client_id,
	   b.gen_intervention_id,
	   b.intervention_id,
        b.std_intervention_id,
	   b.text1,
        b.schedule_id,
        b.description, b.schedule_date b,
	   b.schedule_date  schedule_date,
	   b.schedule_start_date,
        b.schedule_end_date,
	   b.day_of_month, strikeout_flag,
	    case when b.flag='Duration'
			     then datediff(day,cast(CONVERT( VARCHAR(10), b.schedule_start_date, 101) as datetime) ,cast(CONVERT( VARCHAR(10),  b.schedule_end_date, 101) as datetime))
				 else 0 end duration,
        c.completed_date,
        b.task_time,
        b.schedule_time,
        b.flag,
	   replace(replace(replace(replace(


           isnull(
		  case
		   WHEN LTRIM(RTRIM(c.respone))='' THEN ''
		   WHEN ISNULL(c.respone,'')='' THEN ''
            ELSE
		  case when @vIncludeDocumentRespon='1' then LEFT(c.respone, LEN(c.respone)-1)	else '' end
		  +case
		     when  @vIncludeInitial='0' then  ''
		     when @vIncludeDocumentRespon='1'  and @vIncludeInitial='1' and c.initials is not null then  @vNewLine+isnull(c.initials,'')
			when @vIncludeDocumentRespon='1'  and @vIncludeInitial='1' and c.initials is null then ''
			when @vIncludeDocumentRespon='0'  and @vIncludeInitial='1' then  isnull(c.initials,'')
		   end
		  + case
		     when @vIncludeDocumentTime='0' then ''
			when @vIncludeDocumentTime='1' and @vIncludeInitial='1' then  @vNewLine+CONVERT( VARCHAR(5), c.completed_date, 108)
			when @vIncludeDocumentTime='1' and @vIncludeInitial='0' and @vIncludeDocumentRespon='1' then  @vNewLine+CONVERT( VARCHAR(5), c.completed_date, 108)
			when @vIncludeDocumentTime='1' and @vIncludeInitial='0' and @vIncludeDocumentRespon='0' then  CONVERT( VARCHAR(5), c.completed_date, 108)
		   end
        END,' Y ')

	   ,'&lt;','<'),'&gt;','>'),'&amp;lt;','<'),'&amp;gt;','>')  doc
 from allPocData b
 left join documentedData c
    on c.fac_id=b.fac_id AND
       c.client_id=b.client_id AND
	  c.std_intervention_id=b.std_intervention_id
	  AND c.gen_intervention_id=b.gen_intervention_id
	  AND c.intervention_id=b.intervention_id
       AND c.schedule_id=b.schedule_id
	  and c.description=b.description
	  and c.schedule_detail_id=b.schedule_detail_id
	  and c.documentation_id=b.documentation_id
	  and 1=
	   case
	      when b.flag='Duration' and CONVERT( VARCHAR(10), c.completed_date, 101) is not null  then 1
           when b.flag<> 'Duration' and  b.flag<> 'PRN' and CONVERT( VARCHAR(10), c.completed_date, 101)=CONVERT( VARCHAR(10), b.schedule_date, 101) then 1
	      when b.flag in ( 'PRN'  , 'Qshift')  then 1
	    else 0 end
	    )

INSERT INTo #poc
 (seq,fac_id,client_id,admission_date,documentation_id,detail_id,gen_intervention_id,intervention_id,std_intervention_id ,text1,schedule_id ,shift_name	,
  schedule_date,schedule_start_date,schedule_end_date,day_of_month,strikeout_flag,completed_date,task_time,schedule_time,flag,doc)

  select

  seq, fac_id, poc.client_id,admission_date,documentation_id, null detail_id, gen_intervention_id, intervention_id, std_intervention_id,
	   text1,schedule_id,description,schedule_date  ,schedule_start_date,
	  case when flag='prn' and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<=@vfil_ds_schedule_date2  then schedule_end_date
	       when flag='prn' and schedule_end_date>=@vfil_ds_schedule_date2	 then null
	  when schedule_end_date is null then schedule_end_date else schedule_end_date end  schedule_end_date, day_of_month, strikeout_flag,
      completed_date,task_time, schedule_time,flag,doc
 from POC	 poc
 inner join  #PRP_ClientList client on client.client_id=poc.client_id
  where
    schedule_date>=@vfil_ds_schedule_date   and  schedule_date < @vfil_ds_schedule_date2 and
  1=  case
  when std_intervention_id=-1
  and schedule_date<client.admission_date then 1
   when  flag ='Unscheduled' and convert(varchar(10),dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_start_date),110)=convert(varchar(10),schedule_date,110)
  and schedule_date<client.admission_date then 1
  when  admission_date=dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_start_date)   and  schedule_date<client.admission_date then 1
  when  flag  in ('Schedule','Qshift')	 and  admission_date<>dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_start_date)  and  client.admission_date> schedule_date then 1
  when  flag not in ('Schedule','Qshift')  and admission_date<>dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, schedule_start_date)  and  client.admission_date> schedule_date then 0
  else 1
  end  ;

   if @debug_me = 'Y' select '#poc' poc,* from #poc;
 if @debug_me='h' Print 'STEP1_H ' +   ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@step_start_time,getdate()))))+ ' ms'
-- day time
-----------------------------------------------------------
	-- Handeling Multi Documentation PRN and Qshift
-----------------------------------------------------------
  SELECT @vStep = 25, @vStepName = 'Handeling Multi Documentation PRN and Qshift  ', @step_start_time = getdate()
 IF @debug_me='h' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Handeling Multi Documentation PRN and Qshift   at ' + CONVERT(VARCHAR, @step_start_time)

;with  dayTable as (
SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
      case when day_of_month=1 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else
	 case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case
	                                     when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date
								  when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date
								  else schedule_start_date end )<=1 and
								  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),
								  datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=1  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>1  or datepart(day,@vfil_ds_schedule_date2-1)<1 )  then '*'  end
	 end	 as day_1
 from #poc

 where flag in ( 'PRN'  , 'Qshift')
 and day_of_month=1

union all
SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
	 case when day_of_month=2 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=2 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=2  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>2  or datepart(day,@vfil_ds_schedule_date2-1)<2 )  then '*'  end
	 end	 as day_2
from #poc
 where flag in ( 'PRN'  , 'Qshift')
 and day_of_month=2
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
	 case when day_of_month=3 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=3 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=3  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>3  or datepart(day,@vfil_ds_schedule_date2-1)<3 )  then '*'  end
	 end	 as day_3
from #poc
 where flag in ( 'PRN'  , 'Qshift')
 and day_of_month=3
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=4 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and  datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=4 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=4  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>4  or datepart(day,@vfil_ds_schedule_date2-1)<4 )  then '*'  end
	 end	 as day_4
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=4
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=5 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=5 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=5  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>5  or datepart(day,@vfil_ds_schedule_date2-1)<5 )  then '*'  end
	 end	 as day_5
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=5
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=6 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=6 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=6  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>6  or datepart(day,@vfil_ds_schedule_date2-1)<6 )  then '*'  end
	 end	 as day_6
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=6
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=7 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=7 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=7  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>7  or datepart(day,@vfil_ds_schedule_date2-1)<7 )  then '*'  end
	 end	 as day_7
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=7
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=8 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=8 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=8  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>8  or datepart(day,@vfil_ds_schedule_date2-1)<8 )  then '*'  end
	 end	 as day_8
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=8
 union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=9 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1  and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=9 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=9  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>9  or datepart(day,@vfil_ds_schedule_date2-1)<9 )  then '*'  end
	 end	 as day_9
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=9
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=10 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=10 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=10  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>10  or datepart(day,@vfil_ds_schedule_date2-1)<10 )  then '*'  end
	 end	 as day_10
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=10
    union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=11 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=11 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=11  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>11  or datepart(day,@vfil_ds_schedule_date2-1)<11 )  then '*'  end
	 end	 as day_11
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=11
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=12 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=12 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=12  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>12  or datepart(day,@vfil_ds_schedule_date2-1)<12 )  then '*'  end
	 end	 as day_12
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=12
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=13 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=13 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=13  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>13  or datepart(day,@vfil_ds_schedule_date2-1)<13 )  then '*'  end
	 end	 as day_13
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=13
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=14 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=14 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=14  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>14  or datepart(day,@vfil_ds_schedule_date2-1)<14 )  then '*'  end
	 end	 as day_14
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=14
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=15 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=15 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=15  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>15  or datepart(day,@vfil_ds_schedule_date2-1)<15 )  then '*'  end
	 end	 as day_15
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=15
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=16 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=16 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=16  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>16  or datepart(day,@vfil_ds_schedule_date2-1)<16 )  then '*'  end
	 end	 as day_16
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=16
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=17 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=17 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=17  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>17  or datepart(day,@vfil_ds_schedule_date2-1)<17 )  then '*'  end
	 end	 as day_17
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=17
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=18 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=18 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=18  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>18  or datepart(day,@vfil_ds_schedule_date2-1)<18 )  then '*'  end
	 end	 as day_18
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=18
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=19 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=19 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=19  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>19  or datepart(day,@vfil_ds_schedule_date2-1)<19 )  then '*'  end
	 end	 as day_19
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=19
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=20 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=20 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=20  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>20  or datepart(day,@vfil_ds_schedule_date2-1)<20 )  then '*'  end
	 end	 as day_20
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=20
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=21 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=21 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=21  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>21  or datepart(day,@vfil_ds_schedule_date2-1)<21 )  then '*'  end
	 end	 as day_21
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=21
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=22 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=22 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=22  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>22  or datepart(day,@vfil_ds_schedule_date2-1)<22 )  then '*'  end
	 end	 as day_22
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=22
     union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=23 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	  when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=23 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=23  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>23  or datepart(day,@vfil_ds_schedule_date2-1)<23 )  then '*'  end
	 end	 as day_23
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=23
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=24 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	  when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=24 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=24 then ' Y '
	  when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>24  or datepart(day,@vfil_ds_schedule_date2-1)<24 )  then '*'  end
	 end	 as day_24
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=24
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=25 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=25 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=25  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>25  or datepart(day,@vfil_ds_schedule_date2-1)<25 )  then '*'  end
	 end	 as day_25
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=25
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=26 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=26 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=26  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>26  or datepart(day,@vfil_ds_schedule_date2-1)<26 )  then '*'  end
	 end	 as day_26
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=26
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=27 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	  when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=27 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=27  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>27  or datepart(day,@vfil_ds_schedule_date2-1)<27 )  then '*'  end
	 end	 as day_27
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=27
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=28 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=28 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=28  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>28  or datepart(day,@vfil_ds_schedule_date2-1)<28 )  then '*'  end
	 end	 as day_28
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=28
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=29 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	  when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=29 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=29  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>29  or datepart(day,@vfil_ds_schedule_date2-1)<29 )  then '*'  end
	 end	 as day_29
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=29
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=30 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=30 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=30  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>30  or datepart(day,@vfil_ds_schedule_date2-1)<30 )  then '*'  end
	 end	 as day_30
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=30
   union all

SELECT day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag,
row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,documentation_id, flag
                  order by shift_name) row_id ,
       case when day_of_month=31 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end
	 else case
	 when flag='PRN' and len(@vIs_chart)=1 and datepart(day, case when schedule_end_date is null and  month(schedule_start_date)<month(@vfil_ds_schedule_date) then @vfil_ds_schedule_date   when month(schedule_start_date)=month(@vfil_ds_schedule_date) and schedule_start_date<admission_date then admission_date else schedule_start_date end )<=31 and  isnull(datepart(day,dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId,schedule_end_date)),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>=31  then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>31  or datepart(day,@vfil_ds_schedule_date2-1)<31 )  then '*'  end
	 end	 as day_31
from #poc
 where flag in ( 'PRN'  , 'Qshift')
  and day_of_month=31 )

INSERT INTO @dayTable(day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,row_id,day_n)
  select day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,
  row_number() over (partition by day_of_month,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name, flag
                  order by shift_name)	,day_1
  from(
  select distinct  day_of_month,seq,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name, flag, day_1

  from(
	select a.*
	from dayTable a
	where
	not exists(select 1 from dayTable b where a.std_intervention_id=b.std_intervention_id
	  and a.intervention_id=b.intervention_id
	  and a.gen_intervention_id=b.gen_intervention_id	and a.client_id=b.client_id and a.shift_name=b.shift_name and a.day_of_month=b.day_of_month and
	  a.seq=b.seq and b.day_1<>a.day_1)

	 union all
	  select a.*
	from dayTable a
	where  a.day_1<>' y ' ) tt
) alldoc

if @debug_me = 'Y' select '@dayTable' dayTable,* from @dayTable;
 if @debug_me='h' Print 'STEP1_H ' +   ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@step_start_time,getdate()))))+ ' ms'

 SELECT @vStep = 26, @vStepName = 'Handeling Multi Documentation PRN and Qshift  ', @step_start_time = getdate()
 IF @debug_me='h' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Handeling Multi Documentation PRN and Qshift   at ' + CONVERT(VARCHAR, @step_start_time)

  ;with duplicate_date as (
    select  distinct  day_of_month,seq,poc.text1,poc.flag,poc.fac_id,poc.client_id,poc.gen_intervention_id, poc.intervention_id,poc.std_intervention_id
	        ,shift_name ,schedule_start_date,schedule_end_date,documentation_id
	 from  #poc	 poc
      where poc.flag in ('prn','qshift')   and  documentation_id is not null
      group by  day_of_month,seq,poc.text1,poc.flag,poc.fac_id,poc.client_id,poc.gen_intervention_id, poc.intervention_id,poc.std_intervention_id,shift_name
	 ,schedule_start_date,schedule_end_date ,documentation_id )

	,cte_main  as
 (SELECT seq,fac_id,flag,client_id,gen_intervention_id, intervention_id,std_intervention_id,text1,shift_name
        ,schedule_start_date,schedule_end_date,
         row_number() over (partition by client_id,gen_intervention_id, intervention_id,std_intervention_id,shift_name,flag
                  order by shift_name) row_id
from (

select seq,fac_id,flag,client_id,text1,gen_intervention_id, intervention_id,std_intervention_id,shift_name
       ,schedule_start_date,schedule_end_date,max(cnt) count_shift
     from(
	   select  day_of_month,seq,text1,flag,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id ,shift_name ,schedule_start_date,
	   schedule_end_date,count(1) cnt
   from(
    select day_of_month,seq,poc.text1,poc.flag,poc.fac_id,poc.client_id,poc.gen_intervention_id, poc.intervention_id,poc.std_intervention_id
	        ,shift_name ,schedule_start_date,schedule_end_date,documentation_id
	 from #poc poc
	 where  poc.flag in ('prn','qshift')
	 and not exists  (select 1 from  duplicate_date tt where tt.client_id= poc.client_id and tt.shift_name=poc.shift_name
  and  tt.std_intervention_id=poc.std_intervention_id
  and  tt.gen_intervention_id=poc.gen_intervention_id
  and  tt.intervention_id=poc.intervention_id
  and  tt.fac_id=poc.fac_id
  and tt.day_of_month=poc.day_of_month)

  union

   select  distinct  day_of_month,seq,text1,flag,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id
	        ,shift_name ,schedule_start_date,schedule_end_date,documentation_id
	 from  duplicate_date tt
	 )oo
    group by day_of_month,seq,text1,flag,fac_id,client_id,gen_intervention_id, intervention_id,std_intervention_id ,shift_name ,schedule_start_date,schedule_end_date

	 )  tt
   group by  seq,fac_id,flag,client_id,text1,gen_intervention_id, intervention_id,std_intervention_id,shift_name ,schedule_start_date,schedule_end_date
   ) base ,[dbo].[pcc_num_sequence] n
   where n.num<=base.count_shift
 )

 INSERT INTO #PRP_ds_interv_schedule_cte (row_type,row_id,seq,seq_name,fac_id,client_id,client_name,gen_intervention_id,intervention_id,std_intervention_id ,intervention_desc,text1,schedule_id ,shift_name	,schedule_time	,
							 day_1 ,day_2 , day_3 , day_4 , day_5 , day_6 , day_7 , day_8 , day_9 , day_10, day_11, day_12, day_13, day_14, day_15,
							 day_16, day_17, day_18, day_19, day_20, day_21, day_22, day_23, day_24, day_25, day_26, day_27, day_28, day_29, day_30,
							 day_31 )
 select

  2 row_type,null row_id,
  cte.seq,cte.flag,cte.fac_id,cte.client_id,client.client_name,cte.gen_intervention_id,
	   cte.intervention_id,cte.std_intervention_id,cte.text1 , inter.text1,

        null schedule_id,cte.shift_name,null,

	 case
	     when flag='PRN' and len(@vIs_chart)=1  and day_1.day_n <> ' Y ' then day_1.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_1.day_n  = ' Y '  or isnull(day_1.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=1 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<1  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>1  then ' Y '

		 when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>1  or datepart(day,@vfil_ds_schedule_date2-1)<1 )  then '*'
		 when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<1  AND datepart(day,@vfil_ds_schedule_date2-1)<1 ) or (datepart(day,@vfil_ds_schedule_date)>1  AND datepart(day,@vfil_ds_schedule_date2-1)>1 ) ) THEN '*'
           when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=1  AND datepart(day,@vfil_ds_schedule_date2-1)>=1 ) THEN
	     case when  day_1.day_n <> ' Y ' then day_1.day_n
		     when  (day_1.day_n  = ' Y '  or isnull(day_1.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),@vfil_ds_last_day_of_month,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=1 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=1 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<1  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>1  then ' Y '
		else day_1.day_n end
	    else  day_1.day_n end day_1 ,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_2.day_n <> ' Y ' then day_2.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_2.day_n  = ' Y '  or isnull(day_2.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		  when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		  when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=2 and
		  isnull(datepart(day,
		  case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<2  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>2  then ' Y '

		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>2  or datepart(day,@vfil_ds_schedule_date2-1)<2 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<2  AND datepart(day,@vfil_ds_schedule_date2-1)<2 ) or (datepart(day,@vfil_ds_schedule_date)>2  AND datepart(day,@vfil_ds_schedule_date2-1)>2 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=2  AND datepart(day,@vfil_ds_schedule_date2-1)>=2 ) THEN
	     case when  day_2.day_n <> ' Y ' then day_2.day_n
		     when (day_2.day_n  = ' Y '  or isnull(day_2.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=2 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<2  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>2  then ' Y '
		else day_2.day_n end
	    else  day_2.day_n end day_2 ,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_3.day_n <> ' Y ' then day_3.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_3.day_n  = ' Y '  or isnull(day_3.day_n,'')='' ) and datepart(day,
		case when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=3 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<3  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>3  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>3  or datepart(day,@vfil_ds_schedule_date2-1)<3 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<3  AND datepart(day,@vfil_ds_schedule_date2-1)<3 ) or (datepart(day,@vfil_ds_schedule_date)>3  AND datepart(day,@vfil_ds_schedule_date2-1)>3 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=3  AND datepart(day,@vfil_ds_schedule_date2-1)>=3 ) THEN
	     case when  day_3.day_n <> ' Y ' then day_3.day_n
		     when (day_3.day_n  = ' Y '  or isnull(day_3.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=3 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=3 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<3  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>3  then ' Y '
		else day_3.day_n end
	    else day_3.day_n end day_3,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_4.day_n <> ' Y ' then day_4.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_4.day_n  = ' Y '  or isnull(day_4.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=4 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<4  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>4  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>4  or datepart(day,@vfil_ds_schedule_date2-1)<4 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<4  AND datepart(day,@vfil_ds_schedule_date2-1)<4 ) or (datepart(day,@vfil_ds_schedule_date)>4  AND datepart(day,@vfil_ds_schedule_date2-1)>4 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=4  AND datepart(day,@vfil_ds_schedule_date2-1)>=4 ) THEN
	     case when  day_4.day_n <> ' Y ' then day_4.day_n
		     when (day_4.day_n  = ' Y '  or isnull(day_4.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=4 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=4 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<4  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>4  then ' Y '
		else day_4.day_n end
	    else day_4.day_n end day_4,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_5.day_n <> ' Y ' then day_5.day_n
		 when flag='PRN' and len(@vIs_chart)=1  and (day_5.day_n  = 'Y'  or isnull(day_5.day_n,'')='' ) and datepart(day,
		 case
		 when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=5 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<5  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>5  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>5  or datepart(day,@vfil_ds_schedule_date2-1)<5 )  then '*'
          when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<5  AND datepart(day,@vfil_ds_schedule_date2-1)<5 ) or (datepart(day,@vfil_ds_schedule_date)>5  AND datepart(day,@vfil_ds_schedule_date2-1)>5 ) ) THEN '*'
	     when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=5  AND datepart(day,@vfil_ds_schedule_date2-1)>=5 ) THEN
	     case when  day_5.day_n <> ' Y ' then day_5.day_n
		     when (day_5.day_n  = ' Y '  or isnull(day_5.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=5 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=5 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<5  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>5  then ' Y '
		else day_5.day_n end
	    else day_5.day_n end day_5,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_6.day_n <> ' Y ' then day_6.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_6.day_n  = ' Y '  or isnull(day_6.day_n,'')='' ) and datepart(day,
		case
		 when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=6 and
		  isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<6  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>6  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>6  or datepart(day,@vfil_ds_schedule_date2-1)<6 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<6  AND datepart(day,@vfil_ds_schedule_date2-1)<6 ) or (datepart(day,@vfil_ds_schedule_date)>6  AND datepart(day,@vfil_ds_schedule_date2-1)>6 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=6  AND datepart(day,@vfil_ds_schedule_date2-1)>=6 ) THEN
	     case when  day_6.day_n <> ' Y ' then day_6.day_n
		     when (day_6.day_n  = ' Y '  or isnull(day_6.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=6 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=6 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<6  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>6  then ' Y '
		else day_6.day_n end
	    else  day_6.day_n end  day_6,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_7.day_n <> ' Y ' then day_7.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_7.day_n  = ' Y '  or isnull(day_7.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=7 and  isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<7  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>7  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>7  or datepart(day,@vfil_ds_schedule_date2-1)<7 )  then '*'
          when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<7  AND datepart(day,@vfil_ds_schedule_date2-1)<7 ) or (datepart(day,@vfil_ds_schedule_date)>7  AND datepart(day,@vfil_ds_schedule_date2-1)>7 ) ) THEN '*'
		when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=7  AND datepart(day,@vfil_ds_schedule_date2-1)>=7 ) THEN
	     case when  day_7.day_n <> ' Y ' then day_7.day_n
		     when (day_7.day_n  = ' Y '  or isnull(day_7.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=7 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=7 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<7  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>7  then ' Y '
		else day_7.day_n end
	    else  day_7.day_n end day_7,
	      case
	     when flag='PRN' and len(@vIs_chart)=1  and day_8.day_n <> ' Y ' then day_8.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_8.day_n  = ' Y '  or isnull(day_8.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=8 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<8  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>8  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>8  or datepart(day,@vfil_ds_schedule_date2-1)<8 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<8  AND datepart(day,@vfil_ds_schedule_date2-1)<8 ) or (datepart(day,@vfil_ds_schedule_date)>8  AND datepart(day,@vfil_ds_schedule_date2-1)>8 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=8  AND datepart(day,@vfil_ds_schedule_date2-1)>=8 ) THEN
	     case when  day_8.day_n <> ' Y ' then day_8.day_n
		     when (day_8.day_n  = ' Y '  or isnull(day_8.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=8 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=8 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<8  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>8  then ' Y '
		else day_8.day_n end
	    else day_8.day_n end day_8,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_9.day_n <> ' Y ' then day_9.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_9.day_n  = ' Y '  or isnull(day_9.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=9 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<9  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>9  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>9  or datepart(day,@vfil_ds_schedule_date2-1)<9 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<9  AND datepart(day,@vfil_ds_schedule_date2-1)<9 ) or (datepart(day,@vfil_ds_schedule_date)>9  AND datepart(day,@vfil_ds_schedule_date2-1)>9 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=9 AND datepart(day,@vfil_ds_schedule_date2-1)>=9 ) THEN
	     case when  day_9.day_n <> ' Y ' then day_9.day_n
		     when (day_9.day_n  = ' Y '  or isnull(day_9.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=9 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=9 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<9  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>9  then ' Y '
		else day_9.day_n end
	    else day_9.day_n end day_9
	    ,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_10.day_n <> ' Y ' then day_10.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_10.day_n  = ' Y '  or isnull(day_10.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=10 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<10  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>10  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>10 or datepart(day,@vfil_ds_schedule_date2-1)<10 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<10  AND datepart(day,@vfil_ds_schedule_date2-1)<10 ) or (datepart(day,@vfil_ds_schedule_date)>10  AND datepart(day,@vfil_ds_schedule_date2-1)>10 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=10  AND datepart(day,@vfil_ds_schedule_date2-1)>=10 ) THEN
	     case when  day_10.day_n <> ' Y ' then day_10.day_n
		     when (day_10.day_n  = ' Y '  or isnull(day_10.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=10 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=10 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<10  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>10  then ' Y '
		else day_10.day_n end
	    else  day_10.day_n end day_10,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_11.day_n <> ' Y ' then day_11.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_11.day_n  = ' Y '  or isnull(day_11.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=11 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<11  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>11  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>11 or datepart(day,@vfil_ds_schedule_date2-1)<11 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<11  AND datepart(day,@vfil_ds_schedule_date2-1)<11 ) or (datepart(day,@vfil_ds_schedule_date)>11  AND datepart(day,@vfil_ds_schedule_date2-1)>11 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=11  AND datepart(day,@vfil_ds_schedule_date2-1)>=11 ) THEN
	     case when  day_11.day_n <> ' Y ' then day_11.day_n
		     when (day_11.day_n  = ' Y '  or isnull(day_11.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=11 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=11 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<11  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>11  then ' Y '
		else day_11.day_n end
	    else day_11.day_n end day_11,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_12.day_n <> ' Y ' then day_12.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_12.day_n  = ' Y '  or isnull(day_12.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=12 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<12  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>12  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>12 or datepart(day,@vfil_ds_schedule_date2-1)<12 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<12  AND datepart(day,@vfil_ds_schedule_date2-1)<12 ) or (datepart(day,@vfil_ds_schedule_date)>12  AND datepart(day,@vfil_ds_schedule_date2-1)>12 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=12  AND datepart(day,@vfil_ds_schedule_date2-1)>=12 ) THEN
	     case when  day_12.day_n <> ' Y ' then day_12.day_n
		     when (day_12.day_n  = ' Y '  or isnull(day_12.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=12 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=12 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<12  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>12  then ' Y '
		else day_12.day_n end
	    else day_12.day_n end day_12,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_13.day_n <> ' Y ' then day_13.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_13.day_n  = ' Y '  or isnull(day_13.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=13 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<13  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>13  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>13 or datepart(day,@vfil_ds_schedule_date2-1)<13 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<13  AND datepart(day,@vfil_ds_schedule_date2-1)<13 ) or (datepart(day,@vfil_ds_schedule_date)>13  AND datepart(day,@vfil_ds_schedule_date2-1)>13 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=13  AND datepart(day,@vfil_ds_schedule_date2-1)>=13 ) THEN
	     case when  day_13.day_n <> ' Y ' then day_13.day_n
		     when (day_13.day_n  = ' Y '  or isnull(day_13.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=13 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=13 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<13  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>13  then ' Y '
		else day_13.day_n end
	    else day_13.day_n end day_13,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_14.day_n <> ' Y ' then day_14.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_14.day_n  = ' Y '  or isnull(day_14.day_n,'')='' ) and datepart(day,
		case
		 when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		 when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=14 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<14  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>14  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>14 or datepart(day,@vfil_ds_schedule_date2-1)<14 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<14  AND datepart(day,@vfil_ds_schedule_date2-1)<14 ) or (datepart(day,@vfil_ds_schedule_date)>14  AND datepart(day,@vfil_ds_schedule_date2-1)>14 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=14  AND datepart(day,@vfil_ds_schedule_date2-1)>=14 ) THEN
	     case when  day_14.day_n <> ' Y ' then day_14.day_n
		     when (day_14.day_n  = ' Y '  or isnull(day_14.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=14 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=14 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<14  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>14  then ' Y '
		else day_14.day_n end
	    else day_14.day_n end day_14,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_15.day_n <> ' Y ' then day_15.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_15.day_n  = ' Y '  or isnull(day_15.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=15 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<15  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>15  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>15 or datepart(day,@vfil_ds_schedule_date2-1)<15 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<15  AND datepart(day,@vfil_ds_schedule_date2-1)<15 ) or (datepart(day,@vfil_ds_schedule_date)>15  AND datepart(day,@vfil_ds_schedule_date2-1)>15 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=15  AND datepart(day,@vfil_ds_schedule_date2-1)>=15 ) THEN
	     case when  day_15.day_n <> ' Y ' then day_15.day_n
		     when (day_15.day_n  = ' Y '  or isnull(day_15.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=15 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=15 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<15  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>15  then ' Y '
		else day_15.day_n end
	    else day_15.day_n end day_15,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_16.day_n <> ' Y ' then day_16.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_16.day_n  = ' Y '  or isnull(day_16.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=16 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<16  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>16  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>16 or datepart(day,@vfil_ds_schedule_date2-1)<16 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<16  AND datepart(day,@vfil_ds_schedule_date2-1)<16 ) or (datepart(day,@vfil_ds_schedule_date)>16  AND datepart(day,@vfil_ds_schedule_date2-1)>16 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=16  AND datepart(day,@vfil_ds_schedule_date2-1)>=16 ) THEN
	     case when  day_16.day_n <> ' Y ' then day_16.day_n
		     when (day_16.day_n  = ' Y '  or isnull(day_16.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=16 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=16 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<16  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>16  then ' Y '
		else day_16.day_n  end
	    else day_16.day_n end day_16,
	      case
	     when flag='PRN' and len(@vIs_chart)=1  and day_17.day_n <> ' Y ' then day_17.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_17.day_n  = ' Y '  or isnull(day_17.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=17 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<17  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>17  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>17 or datepart(day,@vfil_ds_schedule_date2-1)<17 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<17  AND datepart(day,@vfil_ds_schedule_date2-1)<17 ) or (datepart(day,@vfil_ds_schedule_date)>17  AND datepart(day,@vfil_ds_schedule_date2-1)>17 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=17  AND datepart(day,@vfil_ds_schedule_date2-1)>=17 ) THEN
	     case when  day_17.day_n <> ' Y ' then day_17.day_n
		     when (day_17.day_n  = ' Y '  or isnull(day_17.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=17 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=17 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<17  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>17  then ' Y '
		else day_17.day_n end
	    else day_17.day_n end  day_17,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_18.day_n <> ' Y ' then day_18.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_18.day_n  = ' Y '  or isnull(day_18.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=18 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<18  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>18  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>18 or datepart(day,@vfil_ds_schedule_date2-1)<18 )  then '*'
          when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<18  AND datepart(day,@vfil_ds_schedule_date2-1)<18 ) or (datepart(day,@vfil_ds_schedule_date)>18  AND datepart(day,@vfil_ds_schedule_date2-1)>18 ) ) THEN '*'
		when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=18  AND datepart(day,@vfil_ds_schedule_date2-1)>=18 ) THEN
	     case when  day_18.day_n <> ' Y ' then day_18.day_n
		     when (day_18.day_n  = ' Y '  or isnull(day_18.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=18 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=18 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<18  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>18  then ' Y '
		else day_18.day_n end
	    else  day_18.day_n end day_18,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_19.day_n <> ' Y ' then day_19.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_19.day_n  = ' Y '  or isnull(day_19.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=19 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<19  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>19  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>19 or datepart(day,@vfil_ds_schedule_date2-1)<19 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<19  AND datepart(day,@vfil_ds_schedule_date2-1)<19 ) or (datepart(day,@vfil_ds_schedule_date)>19  AND datepart(day,@vfil_ds_schedule_date2-1)>19 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=19  AND datepart(day,@vfil_ds_schedule_date2-1)>=19 ) THEN
	     case when  day_19.day_n <> ' Y ' then day_19.day_n
		     when (day_19.day_n  = ' Y '  or isnull(day_19.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=19 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=19 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<19  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>19  then ' Y '
		else day_19.day_n end
	    else  day_19.day_n end day_19,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_20.day_n <> ' Y ' then day_20.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_20.day_n  = ' Y '  or isnull(day_20.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=20 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<20  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>20  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>20 or datepart(day,@vfil_ds_schedule_date2-1)<20 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<20  AND datepart(day,@vfil_ds_schedule_date2-1)<20 ) or (datepart(day,@vfil_ds_schedule_date)>20  AND datepart(day,@vfil_ds_schedule_date2-1)>20 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=20  AND datepart(day,@vfil_ds_schedule_date2-1)>=20 ) THEN
	     case when  day_20.day_n <> ' Y ' then day_20.day_n
		     when (day_20.day_n  = ' Y '  or isnull(day_20.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=20 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<20  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>20  then ' Y '
		else day_20.day_n end
	    else day_20.day_n end day_20,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_21.day_n <> ' Y ' then day_21.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_21.day_n  = ' Y '  or isnull(day_21.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=21 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<21  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>21  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>21 or datepart(day,@vfil_ds_schedule_date2-1)<21 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<21  AND datepart(day,@vfil_ds_schedule_date2-1)<21 ) or (datepart(day,@vfil_ds_schedule_date)>21  AND datepart(day,@vfil_ds_schedule_date2-1)>21 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=21  AND datepart(day,@vfil_ds_schedule_date2-1)>=21 ) THEN
	     case when  day_21.day_n <> ' Y ' then day_21.day_n
		     when (day_21.day_n  = ' Y '  or isnull(day_21.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=21 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=21 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<21  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>21  then ' Y '
		else day_21.day_n end
	    else day_21.day_n end day_21,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_22.day_n <> ' Y ' then day_22.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_22.day_n  = ' Y '  or isnull(day_22.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		 when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=22 and
		   isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<22  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>22  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>22 or datepart(day,@vfil_ds_schedule_date2-1)<22 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<22  AND datepart(day,@vfil_ds_schedule_date2-1)<22 ) or (datepart(day,@vfil_ds_schedule_date)>22  AND datepart(day,@vfil_ds_schedule_date2-1)>22 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=22  AND datepart(day,@vfil_ds_schedule_date2-1)>=22 ) THEN
	     case when  day_22.day_n <> ' Y ' then day_22.day_n
		     when (day_22.day_n  = ' Y '  or isnull(day_22.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=22 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=22 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<22  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>22  then ' Y '
		else day_22.day_n end
	    else day_22.day_n end day_22,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_23.day_n <> ' Y ' then day_23.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_23.day_n  = ' Y '  or isnull(day_23.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=23 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<23  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>23  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>23 or datepart(day,@vfil_ds_schedule_date2-1)<23 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<23  AND datepart(day,@vfil_ds_schedule_date2-1)<23 ) or (datepart(day,@vfil_ds_schedule_date)>23  AND datepart(day,@vfil_ds_schedule_date2-1)>23 ) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=23  AND datepart(day,@vfil_ds_schedule_date2-1)>=23 ) THEN
	     case when  day_23.day_n <> ' Y ' then day_23.day_n
		     when (day_23.day_n  = ' Y '  or isnull(day_23.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=23 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=23 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<23  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>23  then ' Y '
		else day_23.day_n end
	    else day_23.day_n end day_23,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_24.day_n <> ' Y ' then day_24.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_24.day_n  = ' Y '  or isnull(day_24.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=24 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<24  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>24  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>24 or datepart(day,@vfil_ds_schedule_date2-1)<24)  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<24  AND datepart(day,@vfil_ds_schedule_date2-1)<24 ) or (datepart(day,@vfil_ds_schedule_date)>24  AND datepart(day,@vfil_ds_schedule_date2-1)>24) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=24  AND datepart(day,@vfil_ds_schedule_date2-1)>=24 ) THEN
	     case when  day_24.day_n <> ' Y ' then day_24.day_n
		     when (day_24.day_n  = ' Y '  or isnull(day_24.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=24 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=24 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<24  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>24  then ' Y '
		else day_24.day_n end
	    else day_24.day_n end day_24,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_25.day_n <> ' Y ' then day_25.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_25.day_n  = ' Y '  or isnull(day_25.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=25 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<25  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>25  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>25 or datepart(day,@vfil_ds_schedule_date2-1)<25 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<25  AND datepart(day,@vfil_ds_schedule_date2-1)<25 ) or (datepart(day,@vfil_ds_schedule_date)>25  AND datepart(day,@vfil_ds_schedule_date2-1)>25) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=25  AND datepart(day,@vfil_ds_schedule_date2-1)>=25 ) THEN
	     case when  day_25.day_n <> ' Y ' then day_25.day_n
		     when (day_25.day_n  = ' Y '  or isnull(day_25.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=25 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=25 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<25  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>25  then ' Y '
		else day_25.day_n end
	    else day_25.day_n end day_25,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_26.day_n <> ' Y ' then day_26.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_26.day_n  = ' Y '  or isnull(day_26.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=26 and
		isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<26  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>26  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>26 or datepart(day,@vfil_ds_schedule_date2-1)<26 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<26  AND datepart(day,@vfil_ds_schedule_date2-1)<26 ) or (datepart(day,@vfil_ds_schedule_date)>26  AND datepart(day,@vfil_ds_schedule_date2-1)>26) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=26  AND datepart(day,@vfil_ds_schedule_date2-1)>=26 ) THEN
	     case when  day_26.day_n <> ' Y ' then day_26.day_n
		     when (day_26.day_n  = ' Y '  or isnull(day_26.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=26 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=26 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<26  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>26  then ' Y '
		else day_26.day_n  end
	    else day_26.day_n end day_26,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_27.day_n <> ' Y ' then day_27.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_27.day_n  = ' Y '  or isnull(day_27.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=27 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<27  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>27  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>27 or datepart(day,@vfil_ds_schedule_date2-1)<27 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<27  AND datepart(day,@vfil_ds_schedule_date2-1)<27 ) or (datepart(day,@vfil_ds_schedule_date)>27  AND datepart(day,@vfil_ds_schedule_date2-1)>27) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=27  AND datepart(day,@vfil_ds_schedule_date2-1)>=27 ) THEN
	     case when  day_27.day_n <> ' Y ' then day_27.day_n
		     when (day_27.day_n  = ' Y '  or isnull(day_27.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=27 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=27 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<27  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>27  then ' Y '
		else day_27.day_n end
	    else day_27.day_n end day_27,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_28.day_n <> ' Y ' then day_28.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_28.day_n  = ' Y '  or isnull(day_28.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=28 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<28  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>28  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>28 or datepart(day,@vfil_ds_schedule_date2-1)<28 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<28  AND datepart(day,@vfil_ds_schedule_date2-1)<28 ) or (datepart(day,@vfil_ds_schedule_date)>28  AND datepart(day,@vfil_ds_schedule_date2-1)>28) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=28  AND datepart(day,@vfil_ds_schedule_date2-1)>=28 ) THEN
	     case when  day_28.day_n <> ' Y ' then day_28.day_n
		     when (day_28.day_n  = ' Y '  or isnull(day_28.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=28 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=28 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<28 then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>28  then ' Y '
		else day_28.day_n end
	    else day_28.day_n end day_28,
	   case
	     when flag='PRN' and len(@vIs_chart)=1  and day_29.day_n <> ' Y ' then day_29.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_29.day_n  = ' Y '  or isnull(day_29.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<29 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>29 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=29 and
		  isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=29 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<29  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>29  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>29 or datepart(day,@vfil_ds_schedule_date2-1)<29 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<29  AND datepart(day,@vfil_ds_schedule_date2-1)<29 ) or (datepart(day,@vfil_ds_schedule_date)>29  AND datepart(day,@vfil_ds_schedule_date2-1)>29) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=29  AND datepart(day,@vfil_ds_schedule_date2-1)>=29 ) THEN
	     case when  day_29.day_n <> ' Y ' then day_29.day_n
		     when (day_29.day_n  = ' Y '  or isnull(day_29.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<29 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>29 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=29 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=20 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<29  then resolved_date else schedule_end_date end  ),datepart(day,DATEADD(d,-1,DATEADD(mm, DATEDIFF(m,0,@vfil_ds_schedule_date)+1,0))))>29  then ' Y '
		else day_29.day_n end
	    else  day_29.day_n end day_29,
	    case
	     when flag='PRN' and len(@vIs_chart)=1  and day_30.day_n <> ' Y ' then day_30.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_30.day_n  = ' Y '  or isnull(day_30.day_n,'')='' ) and
		datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=30 and
		isnull(datepart(day,
		case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<30  then resolved_date else schedule_end_date end  ),31)>30  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>30 or datepart(day,@vfil_ds_schedule_date2-1)<30 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<30  AND datepart(day,@vfil_ds_schedule_date2-1)<30 ) or (datepart(day,@vfil_ds_schedule_date)>30  AND 31>30) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=30  AND datepart(day,@vfil_ds_schedule_date2-1)>=30 ) THEN
	     case when  day_30.day_n <> ' Y ' then day_30.day_n
		     when (day_30.day_n  = ' Y '  or isnull(day_30.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=30 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=30 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<30  then resolved_date else schedule_end_date end  ),31)>30  then ' Y '
		else day_30.day_n end
	    else day_30.day_n end day_30,
	   case
	     when flag='PRN' and len(@vIs_chart)=1  and day_31.day_n <> ' Y ' then day_31.day_n
		when flag='PRN' and len(@vIs_chart)=1  and (day_31.day_n  = ' Y '  or isnull(day_31.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date2 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)<31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and datepart(day,schedule_end_date)>31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=31 and
		 isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_schedule_date2  and  datepart(day,schedule_end_date)>=31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_schedule_date2 and  datepart(day,resolved_date)<31  then resolved_date else schedule_end_date end  ),32)>31  then ' Y '
		when len(@vIs_chart)>1 and flag<>'PRN' and (datepart(day,@vfil_ds_schedule_date)>31 or datepart(day,@vfil_ds_schedule_date2-1)<31 )  then '*'
		when len(@vIs_chart)>1 and flag='PRN'  and ((datepart(day,@vfil_ds_schedule_date)<31  AND datepart(day,@vfil_ds_schedule_date2-1)<31 ) or (datepart(day,@vfil_ds_schedule_date)>31  AND 32>31) ) THEN '*'
          when len(@vIs_chart)>1 and flag='PRN'  and (datepart(day,@vfil_ds_schedule_date)<=31  AND datepart(day,@vfil_ds_schedule_date2-1)>=31 ) THEN
	     case when  day_31.day_n <> ' Y ' then day_31.day_n
		     when (day_31.day_n  = ' Y '  or isnull(day_31.day_n,'')='' ) and datepart(day,
		case
		when schedule_end_date is null and  schedule_start_date<=@vfil_ds_schedule_date then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_last_day_of_month  and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime)  then @vfil_ds_schedule_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)<31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and datepart(day,schedule_end_date)>31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then @vfil_ds_schedule_date
		when month(schedule_start_date)=month(@vfil_ds_schedule_date) and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then client.admission_date else schedule_start_date end  )<=31 and

	     isnull(datepart(day, case
		when schedule_end_date is not null and schedule_end_date>=@vfil_ds_schedule_date and schedule_end_date<@vfil_ds_last_day_of_month  and  datepart(day,schedule_end_date)>=31 and cast(convert(varchar(20),schedule_start_date,101) as datetime)<cast(convert(varchar(20),client.admission_date)as datetime) then schedule_end_date
		when schedule_end_date is null and resolved_date>=@vfil_ds_schedule_date and resolved_date<@vfil_ds_last_day_of_month and  datepart(day,resolved_date)<31  then resolved_date else schedule_end_date end  ),32)>31  then ' Y '
		else day_31.day_n end
	    else day_31.day_n end day_31

  from
  cte_main cte
  inner join  #PRP_ClientList client on client.client_id=cte.client_id
  left join #PRP_ds_interventions b
 on cte.std_intervention_id=b.std_intervention_id
 and cte.gen_intervention_id=b.gen_intervention_id
 and cte.intervention_id=b.intervention_id
  left join @QuestionXML	 inter
   on inter.stdinterventionid=cte.std_intervention_id
  and inter.interventionid=cte.intervention_id
  and inter.geninterventionid=cte.gen_intervention_id
  left join   @dayTable  day_1
  on cte.client_id= day_1.client_id and cte.shift_name=day_1.shift_name
  and  cte.std_intervention_id=day_1.std_intervention_id
  and  cte.gen_intervention_id=day_1.gen_intervention_id
  and  cte.intervention_id=day_1.intervention_id
  and  cte.fac_id=day_1.fac_id
   and  cte.row_id=day_1.row_id
   and  cte.seq=day_1.seq
   and day_1.day_of_month=1
  left join   @dayTable  day_2
  on cte.client_id= day_2.client_id and cte.shift_name=day_2.shift_name
  and  cte.std_intervention_id=day_2.std_intervention_id
  and  cte.gen_intervention_id=day_2.gen_intervention_id
  and  cte.intervention_id=day_2.intervention_id
  and  cte.fac_id=day_2.fac_id
   and  cte.row_id=day_2.row_id
   and  cte.seq=day_2.seq
   and day_2.day_of_month=2
 left join   @dayTable  day_3
  on cte.client_id= day_3.client_id and cte.shift_name=day_3.shift_name
  and  cte.std_intervention_id=day_3.std_intervention_id
  and  cte.gen_intervention_id=day_3.gen_intervention_id
  and  cte.intervention_id=day_3.intervention_id
  and  cte.fac_id=day_3.fac_id
   and  cte.row_id=day_3.row_id
   and  cte.seq=day_3.seq
   and day_3.day_of_month=3
 left join   @dayTable  day_4
  on cte.client_id= day_4.client_id and cte.shift_name=day_4.shift_name
  and  cte.std_intervention_id=day_4.std_intervention_id
  and  cte.gen_intervention_id=day_4.gen_intervention_id
  and  cte.intervention_id=day_4.intervention_id
  and  cte.fac_id=day_4.fac_id
   and  cte.row_id=day_4.row_id
   and  cte.seq=day_4.seq
   and day_4.day_of_month=4
 left join   @dayTable  day_5
  on cte.client_id= day_5.client_id and cte.shift_name=day_5.shift_name
  and  cte.std_intervention_id=day_5.std_intervention_id
  and  cte.gen_intervention_id=day_5.gen_intervention_id
  and  cte.intervention_id=day_5.intervention_id
  and  cte.fac_id=day_5.fac_id
   and  cte.row_id=day_5.row_id
   and  cte.seq=day_5.seq
   and day_5.day_of_month=5
 left join   @dayTable  day_6
  on cte.client_id= day_6.client_id and cte.shift_name=day_6.shift_name
  and  cte.std_intervention_id=day_6.std_intervention_id
  and  cte.gen_intervention_id=day_6.gen_intervention_id
  and  cte.intervention_id=day_6.intervention_id
  and  cte.fac_id=day_6.fac_id
   and  cte.row_id=day_6.row_id
   and  cte.seq=day_6.seq
   and day_6.day_of_month=6
 left join   @dayTable  day_7
  on cte.client_id= day_7.client_id and cte.shift_name=day_7.shift_name
  and  cte.std_intervention_id=day_7.std_intervention_id
  and  cte.gen_intervention_id=day_7.gen_intervention_id
  and  cte.intervention_id=day_7.intervention_id
  and  cte.fac_id=day_7.fac_id
   and  cte.row_id=day_7.row_id
   and  cte.seq=day_7.seq
   and day_7.day_of_month=7
 left join   @dayTable  day_8
  on cte.client_id= day_8.client_id and cte.shift_name=day_8.shift_name
  and  cte.std_intervention_id=day_8.std_intervention_id
  and  cte.gen_intervention_id=day_8.gen_intervention_id
  and  cte.intervention_id=day_8.intervention_id
  and  cte.fac_id=day_8.fac_id
   and  cte.row_id=day_8.row_id
   and  cte.seq=day_8.seq
   and day_8.day_of_month=8
 left join   @dayTable  day_9
  on cte.client_id= day_9.client_id and cte.shift_name=day_9.shift_name
  and  cte.std_intervention_id=day_9.std_intervention_id
  and  cte.gen_intervention_id=day_9.gen_intervention_id
  and  cte.intervention_id=day_9.intervention_id
  and  cte.fac_id=day_9.fac_id
   and  cte.row_id=day_9.row_id
   and  cte.seq=day_9.seq
   and day_9.day_of_month=9
 left join   @dayTable  day_10
  on cte.client_id= day_10.client_id and cte.shift_name=day_10.shift_name
  and  cte.std_intervention_id=day_10.std_intervention_id
  and  cte.gen_intervention_id=day_10.gen_intervention_id
  and  cte.intervention_id=day_10.intervention_id
  and  cte.fac_id=day_10.fac_id
   and  cte.row_id=day_10.row_id
   and  cte.seq=day_10.seq
   and day_10.day_of_month=10
 left join   @dayTable  day_11
  on cte.client_id= day_11.client_id and cte.shift_name=day_11.shift_name
  and  cte.std_intervention_id=day_11.std_intervention_id
  and  cte.gen_intervention_id=day_11.gen_intervention_id
  and  cte.intervention_id=day_11.intervention_id
  and  cte.fac_id=day_11.fac_id
   and  cte.row_id=day_11.row_id
   and  cte.seq=day_11.seq
   and day_11.day_of_month=11
 left join   @dayTable  day_12
  on cte.client_id= day_12.client_id and cte.shift_name=day_12.shift_name
  and  cte.std_intervention_id=day_12.std_intervention_id
  and  cte.gen_intervention_id=day_12.gen_intervention_id
  and  cte.intervention_id=day_12.intervention_id
  and  cte.fac_id=day_12.fac_id
   and  cte.row_id=day_12.row_id
   and  cte.seq=day_12.seq
   and day_12.day_of_month=12
 left join   @dayTable  day_13
  on cte.client_id= day_13.client_id and cte.shift_name=day_13.shift_name
  and  cte.std_intervention_id=day_13.std_intervention_id
  and  cte.gen_intervention_id=day_13.gen_intervention_id
  and  cte.intervention_id=day_13.intervention_id
  and  cte.fac_id=day_13.fac_id
   and  cte.row_id=day_13.row_id
   and  cte.seq=day_13.seq
   and day_13.day_of_month=13
 left join   @dayTable  day_14
  on cte.client_id= day_14.client_id and cte.shift_name=day_14.shift_name
  and  cte.std_intervention_id=day_14.std_intervention_id
  and  cte.gen_intervention_id=day_14.gen_intervention_id
  and  cte.intervention_id=day_14.intervention_id
  and  cte.fac_id=day_14.fac_id
   and  cte.row_id=day_14.row_id
   and  cte.seq=day_14.seq
   and day_14.day_of_month=14
 left join   @dayTable  day_15
  on cte.client_id= day_15.client_id and cte.shift_name=day_15.shift_name
  and  cte.std_intervention_id=day_15.std_intervention_id
  and  cte.gen_intervention_id=day_15.gen_intervention_id
  and  cte.intervention_id=day_15.intervention_id
  and  cte.fac_id=day_15.fac_id
   and  cte.row_id=day_15.row_id
   and  cte.seq=day_15.seq
   and day_15.day_of_month=15
 left join   @dayTable  day_16
  on cte.client_id= day_16.client_id and cte.shift_name=day_16.shift_name
  and  cte.std_intervention_id=day_16.std_intervention_id
  and  cte.gen_intervention_id=day_16.gen_intervention_id
  and  cte.intervention_id=day_16.intervention_id
  and  cte.fac_id=day_16.fac_id
   and  cte.row_id=day_16.row_id
   and  cte.seq=day_16.seq
   and day_16.day_of_month=16
 left join   @dayTable  day_17
  on cte.client_id= day_17.client_id and cte.shift_name=day_17.shift_name
  and  cte.std_intervention_id=day_17.std_intervention_id
  and  cte.gen_intervention_id=day_17.gen_intervention_id
  and  cte.intervention_id=day_17.intervention_id
  and  cte.fac_id=day_17.fac_id
   and  cte.row_id=day_17.row_id
   and  cte.seq=day_17.seq
   and day_17.day_of_month=17
 left join   @dayTable  day_18
  on cte.client_id= day_18.client_id and cte.shift_name=day_18.shift_name
  and  cte.std_intervention_id=day_18.std_intervention_id
  and  cte.gen_intervention_id=day_18.gen_intervention_id
  and  cte.intervention_id=day_18.intervention_id
  and  cte.fac_id=day_18.fac_id
   and  cte.row_id=day_18.row_id
   and  cte.seq=day_18.seq
   and day_18.day_of_month=18
 left join   @dayTable  day_19
  on cte.client_id= day_19.client_id and cte.shift_name=day_19.shift_name
  and  cte.std_intervention_id=day_19.std_intervention_id
  and  cte.gen_intervention_id=day_19.gen_intervention_id
  and  cte.intervention_id=day_19.intervention_id
  and  cte.fac_id=day_19.fac_id
   and  cte.row_id=day_19.row_id
   and  cte.seq=day_19.seq
   and day_19.day_of_month=19
 left join   @dayTable  day_20
  on cte.client_id= day_20.client_id and cte.shift_name=day_20.shift_name
  and  cte.std_intervention_id=day_20.std_intervention_id
  and  cte.gen_intervention_id=day_20.gen_intervention_id
  and  cte.intervention_id=day_20.intervention_id
  and  cte.fac_id=day_20.fac_id
   and  cte.row_id=day_20.row_id
   and  cte.seq=day_20.seq
   and day_20.day_of_month=20
 left join   @dayTable  day_21
  on cte.client_id= day_21.client_id and cte.shift_name=day_21.shift_name
  and  cte.std_intervention_id=day_21.std_intervention_id
  and  cte.gen_intervention_id=day_21.gen_intervention_id
  and  cte.intervention_id=day_21.intervention_id
  and  cte.fac_id=day_21.fac_id
   and  cte.row_id=day_21.row_id
   and  cte.seq=day_21.seq
   and day_21.day_of_month=21
 left join   @dayTable  day_22
  on cte.client_id= day_22.client_id and cte.shift_name=day_22.shift_name
  and  cte.std_intervention_id=day_22.std_intervention_id
  and  cte.gen_intervention_id=day_22.gen_intervention_id
  and  cte.intervention_id=day_22.intervention_id
  and  cte.fac_id=day_22.fac_id
   and  cte.row_id=day_22.row_id
   and  cte.seq=day_22.seq
   and day_22.day_of_month=22
 left join   @dayTable  day_23
  on cte.client_id= day_23.client_id and cte.shift_name=day_23.shift_name
  and  cte.std_intervention_id=day_23.std_intervention_id
  and  cte.gen_intervention_id=day_23.gen_intervention_id
  and  cte.intervention_id=day_23.intervention_id
  and  cte.fac_id=day_23.fac_id
   and  cte.row_id=day_23.row_id
   and  cte.seq=day_23.seq
   and day_23.day_of_month=23
 left join   @dayTable  day_24
  on cte.client_id= day_24.client_id and cte.shift_name=day_24.shift_name
  and  cte.std_intervention_id=day_24.std_intervention_id
  and  cte.gen_intervention_id=day_24.gen_intervention_id
  and  cte.intervention_id=day_24.intervention_id
  and  cte.fac_id=day_24.fac_id
   and  cte.row_id=day_24.row_id
   and  cte.seq=day_24.seq
   and day_24.day_of_month=24
 left join   @dayTable  day_25
  on cte.client_id= day_25.client_id and cte.shift_name=day_25.shift_name
  and  cte.std_intervention_id=day_25.std_intervention_id
  and  cte.gen_intervention_id=day_25.gen_intervention_id
  and  cte.intervention_id=day_25.intervention_id
  and  cte.fac_id=day_25.fac_id
   and  cte.row_id=day_25.row_id
   and  cte.seq=day_25.seq
   and day_25.day_of_month=25
 left join   @dayTable  day_26
  on cte.client_id= day_26.client_id and cte.shift_name=day_26.shift_name
  and  cte.std_intervention_id=day_26.std_intervention_id
  and  cte.gen_intervention_id=day_26.gen_intervention_id
  and  cte.intervention_id=day_26.intervention_id
  and  cte.fac_id=day_26.fac_id
   and  cte.row_id=day_26.row_id
   and  cte.seq=day_26.seq
   and day_26.day_of_month=26
 left join   @dayTable  day_27
  on cte.client_id= day_27.client_id and cte.shift_name=day_27.shift_name
  and  cte.std_intervention_id=day_27.std_intervention_id
  and  cte.gen_intervention_id=day_27.gen_intervention_id
  and  cte.intervention_id=day_27.intervention_id
  and  cte.fac_id=day_27.fac_id
   and  cte.row_id=day_27.row_id
   and  cte.seq=day_27.seq
   and day_27.day_of_month=27
 left join   @dayTable  day_28
  on cte.client_id= day_28.client_id and cte.shift_name=day_28.shift_name
  and  cte.std_intervention_id=day_28.std_intervention_id
  and  cte.gen_intervention_id=day_28.gen_intervention_id
  and  cte.intervention_id=day_28.intervention_id
  and  cte.fac_id=day_28.fac_id
   and  cte.row_id=day_28.row_id
   and  cte.seq=day_28.seq
   and day_28.day_of_month=28
 left join   @dayTable  day_29
  on cte.client_id= day_29.client_id and cte.shift_name=day_29.shift_name
  and  cte.std_intervention_id=day_29.std_intervention_id
  and  cte.gen_intervention_id=day_29.gen_intervention_id
  and  cte.intervention_id=day_29.intervention_id
  and  cte.fac_id=day_29.fac_id
   and  cte.row_id=day_29.row_id
   and  cte.seq=day_29.seq
   and day_29.day_of_month=29
 left join   @dayTable  day_30
  on cte.client_id= day_30.client_id and cte.shift_name=day_30.shift_name
  and  cte.std_intervention_id=day_30.std_intervention_id
  and  cte.gen_intervention_id=day_30.gen_intervention_id
  and  cte.intervention_id=day_30.intervention_id
  and  cte.fac_id=day_30.fac_id
   and  cte.row_id=day_30.row_id
   and  cte.seq=day_30.seq
   and day_30.day_of_month=30
 left join   @dayTable  day_31
  on cte.client_id= day_31.client_id and cte.shift_name=day_31.shift_name
  and  cte.std_intervention_id=day_31.std_intervention_id
  and  cte.gen_intervention_id=day_31.gen_intervention_id
  and  cte.intervention_id=day_31.intervention_id
  and  cte.fac_id=day_31.fac_id
   and  cte.row_id=day_31.row_id
   and  cte.seq=day_31.seq
   and day_31.day_of_month=31

 where cte.flag in ('Prn','Qshift')   ;

  if @debug_me='h' Print 'STEP1_H ' +   ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@step_start_time,getdate()))))+ ' ms'


if @debug_me = 'Y'
select '#PRP_ds_interv_schedule_cte(prn,Qshift)' ,* from  #PRP_ds_interv_schedule_cte   order by seq,seq_name,client_id,gen_intervention_id,
	   intervention_id,std_intervention_id,shift_name

SELECT @vStep = 27, @vStepName = 'Handeling Multi Documentation PRN and Qshift  ', @step_start_time = getdate()
 IF @debug_me='h' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Handeling Multi Documentation PRN and Qshift   at ' + CONVERT(VARCHAR, @step_start_time)


INSERT INTO #PRP_ds_interv_schedule_cte (row_type,row_id,seq,seq_name,fac_id,client_id,client_name,gen_intervention_id,intervention_id,std_intervention_id ,intervention_desc,text1,schedule_id ,shift_name	,schedule_time	,
							 day_1 ,day_2 , day_3 , day_4 , day_5 , day_6 , day_7 , day_8 , day_9 , day_10, day_11, day_12, day_13, day_14, day_15,
							 day_16, day_17, day_18, day_19, day_20, day_21, day_22, day_23, day_24, day_25, day_26, day_27, day_28, day_29, day_30,
							 day_31,document_id )
select
2 row_type,
       null row_id,
        seq,
	    poc.flag ,
	   poc.fac_id,
        poc.client_id,
	   client.client_name,
	   poc.gen_intervention_id,
	   poc.intervention_id,
        poc.std_intervention_id,
	   poc.text1,inter.text1	,
        schedule_id,
        shift_name,
 	          max(case when flag in ('Schedule','unscheduled') then +cast (schedule_time as varchar)  else ' Y ' end )	,

	  Replace (Isnull(max( case when day_of_month=1 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=1 and
							           datepart(day,schedule_end_date)>=1 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>1  or datepart(day,@vfil_ds_schedule_date2-1)<1 )  then '*'  end end),'X'),' Y ','') as day_1,

	 Replace (Isnull(max( case when day_of_month=2 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=2 and
							           datepart(day,schedule_end_date)>=2 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>2  or datepart(day,@vfil_ds_schedule_date2-1)<2 )  then '*'  end end),'X'),' Y ','') as day_2,

	 Replace (Isnull(max( case when day_of_month=3 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=3 and
							           datepart(day,schedule_end_date)>=3 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>3  or datepart(day,@vfil_ds_schedule_date2-1)<3 )  then '*' end end),'X'),' Y ','') as day_3,

	 Replace (Isnull(max( case when day_of_month=4 THEN case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                            ( datepart(day,schedule_date)<=4 and
							           datepart(day,schedule_end_date)>=4 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>4  or datepart(day,@vfil_ds_schedule_date2-1)<4 )  then '*'   end end),'X'),' Y ','') as day_4,

	 Replace (Isnull(max(

	 case when day_of_month=5 THEN   case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=5 and
							           datepart(day,schedule_end_date)>=5 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>5  or datepart(day,@vfil_ds_schedule_date2-1)<5 )  then '*' end end),'X'),' Y ','') as day_5,

	 Replace (Isnull(max(  case when day_of_month=6 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end 	 else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=6 and
							           datepart(day,schedule_end_date)>=6 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>6  or datepart(day,@vfil_ds_schedule_date2-1)<6 )  then '*'  end end),'X'),' Y ','') as day_6,

	 Replace (Isnull(max( case  when day_of_month=7 THEN case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=7 and
							           datepart(day,schedule_end_date)>=7 and doc='') then ' Y '
	      when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>7  or datepart(day,@vfil_ds_schedule_date2-1)<7 )  then '*'  end end),'X'),' Y ','') as day_7,

	 Replace (Isnull(max( case when day_of_month=8 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=8 and
							           datepart(day,schedule_end_date)>=8 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>8  or datepart(day,@vfil_ds_schedule_date2-1)<8 )  then '*'   end end),'X'),' Y ','') as day_8,

	 Replace (Isnull(max( case when day_of_month=9 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=9 and
							           datepart(day,schedule_end_date)>=9 and doc='')  then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>9  or datepart(day,@vfil_ds_schedule_date2-1)<9 )  then '*'  end end),'X'),' Y ','') as day_9,

	 Replace (Isnull(max( case when day_of_month=10 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration' and   datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=10 and
							           datepart(day,schedule_end_date)>=10 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>10  or datepart(day,@vfil_ds_schedule_date2-1)<10 )  then '*'  end end),'X'),' Y ','') as day_10,

	 Replace (Isnull(max( case when day_of_month=11 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=11 and
							           datepart(day,schedule_end_date)>=11 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>11  or datepart(day,@vfil_ds_schedule_date2-1)<11 )  then '*'  end end),'X'),' Y ','') as day_11,

	 Replace (Isnull(max( case when day_of_month=12 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	 when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=12 and
							           datepart(day,schedule_end_date)>=12 and doc='') then ' Y '
	when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>12  or datepart(day,@vfil_ds_schedule_date2-1)<12 )  then '*'  end end),'X'),' Y ','') as day_12,

	 Replace (Isnull(max( case when day_of_month=13 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end	 else case

	 when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=13 and
							           datepart(day,schedule_end_date)>=13 and doc='') then ' Y '
	 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>13  or datepart(day,@vfil_ds_schedule_date2-1)<13 )  then '*'  end end),'X'),' Y ','') as day_13,

	 Replace (Isnull(max( case when day_of_month=14 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end  else  case

	     when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=14 and
							           datepart(day,schedule_end_date)>=14 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>14  or datepart(day,@vfil_ds_schedule_date2-1)<14 )  then '*'   end end  ),'X'),' Y ','') as day_14
									 ,

	 Replace (Isnull(max( case when day_of_month=15 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	     when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=15 and
							           datepart(day,schedule_end_date)>=15 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>15  or datepart(day,@vfil_ds_schedule_date2-1)<15 ) then '*'
		end end),'X'),' Y ','') as day_15
									 ,

	 Replace (Isnull(max( case when day_of_month=16 THEN case when isnull(doc,'') = '' then  ' Y ' else  doc end	 else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=16 and
							           datepart(day,schedule_end_date)>=16 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>16  or datepart(day,@vfil_ds_schedule_date2-1)<16 )  then '*' end end),'X'),' Y ','') as day_16,

	 Replace (Isnull(max( case when day_of_month=17 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=17 and
							           datepart(day,schedule_end_date)>=17 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>17  or datepart(day,@vfil_ds_schedule_date2-1)<17 )  then '*'  end end),'X'),' Y ','') as day_17,

	 Replace (Isnull(max( case when day_of_month=18 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=18 and
							           datepart(day,schedule_end_date)>=18 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>18  or datepart(day,@vfil_ds_schedule_date2-1)<18 )  then '*'  end end),'X'),' Y ','') as day_18,

	 Replace (Isnull(max( case when day_of_month=19 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=19 and
							           datepart(day,schedule_end_date)>=19 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>19  or datepart(day,@vfil_ds_schedule_date2-1)<19 )  then '*'  end end),'X'),' Y ','') as day_19,

	 Replace (Isnull(max( case when day_of_month=20 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=20 and
							           datepart(day,schedule_end_date)>=20 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>20  or datepart(day,@vfil_ds_schedule_date2-1)<20 )  then '*'  end end),'X'),' Y ','') as day_20,

	 Replace (Isnull(max( case when day_of_month=21 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=21 and
							           datepart(day,schedule_end_date)>=21 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>21  or datepart(day,@vfil_ds_schedule_date2-1)<21 )  then '*' end end),'X'),' Y ','') as day_21,

	 Replace (Isnull(max( case when day_of_month=22 THEN case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=22 and
							           datepart(day,schedule_end_date)>=22 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>22  or datepart(day,@vfil_ds_schedule_date2-1)<22 )  then '*'  end end),'X'),' Y ','') as day_22,

	 Replace (Isnull(max( case when day_of_month=23 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=23 and
							           datepart(day,schedule_end_date)>=23 and doc='')then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>23  or datepart(day,@vfil_ds_schedule_date2-1)<23 )  then '*'  end end),'X'),' Y ','') as day_23,

	 Replace (Isnull(max( case when day_of_month=24 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=24 and
							           datepart(day,schedule_end_date)>=24 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>24  or datepart(day,@vfil_ds_schedule_date2-1)<24 )  then '*'  end end),'X'),' Y ','') as day_24,

	 Replace (Isnull(max( case when day_of_month=25 THEN case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	case
	     when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=25 and
							           datepart(day,schedule_end_date)>=25 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>25  or datepart(day,@vfil_ds_schedule_date2-1)<25 )  then '*'  end end),'X'),' Y ','') as day_25,

	 Replace (Isnull(max( case when day_of_month=26 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=26 and
							           datepart(day,schedule_end_date)>=26 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>26  or datepart(day,@vfil_ds_schedule_date2-1)<26 )  then '*'  end end),'X'),' Y ','') as day_26,

	 Replace (Isnull(max( case when day_of_month=27 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end	 else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=27 and
							           datepart(day,schedule_end_date)>=27 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>27  or datepart(day,@vfil_ds_schedule_date2-1)<27 )  then '*'   end end),'X'),' Y ','') as day_27,

	 Replace (Isnull(max( case when day_of_month=28 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=28 and
							           datepart(day,schedule_end_date)>=28 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>28  or datepart(day,@vfil_ds_schedule_date2-1)<28 )  then '*'  end end),'X'),' Y ','') as day_28,

	 Replace (Isnull(max( case when day_of_month=29 THEN  case when  doc='' then ' Y ' else doc end	 else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=29 and
							           datepart(day,schedule_end_date)>=29 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>29  or datepart(day,@vfil_ds_schedule_date2-1)<29 )  then '*'   end end),'X'),' Y ','') as day_29,

	 Replace (Isnull(max( case when day_of_month=30 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=30 and
							           datepart(day,schedule_end_date)>=30 and doc='') then ' Y '
		when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>30  or datepart(day,@vfil_ds_schedule_date2-1)<30 )  then '*'  end end),'X'),' Y ','') as day_30,

	 Replace (Isnull(max( case when day_of_month=31 THEN  case when isnull(doc,'') = '' then  ' Y ' else  doc end else
	 case
	      when flag='Duration'   and datepart(day,schedule_date)<=datepart(day,schedule_end_date) and
		                             ( datepart(day,schedule_date)<=31 and
							           datepart(day,schedule_end_date)>=31 and doc='') then ' Y '
		 when len(@vIs_chart)>1 and (datepart(day,@vfil_ds_schedule_date)>31  or datepart(day,@vfil_ds_schedule_date2-1)<31 )  then '*'  end end),'X'),' Y ','') as day_31
	, null documentation_id
from  #poc	 poc
inner join  #PRP_ClientList client on client.client_id=poc.client_id
left join @QuestionXML	 inter on
  inter.stdinterventionid=poc.std_intervention_id
  and inter.interventionid=poc.intervention_id
  and inter.geninterventionid=poc.gen_intervention_id
where poc.flag not in ('PRN','Qshift')
 group by seq,
	   fac_id,
        poc.client_id,
	   client.client_name,
        poc.std_intervention_id,poc.gen_intervention_id,
	   poc.intervention_id,inter.text1,poc.text1,
        schedule_id,
	   schedule_time,
        shift_name,
        flag;

  if @debug_me='h' Print 'STEP1_H ' +   ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@step_start_time,getdate()))))+ ' ms'



if @debug_me = 'Y'
select '#PRP_ds_interv_schedule_cte(other)' PRP_ds_interv_schedule_cteother ,* from  #PRP_ds_interv_schedule_cte   order by seq,seq_name,client_id,gen_intervention_id,
	   intervention_id,std_intervention_id,shift_name


  --- Final Schedule table

INSERT INTO @PRP_ds_interv_schedule (row_type,row_id,seq,seq_name,fac_id,client_id,client_name,gen_intervention_id,intervention_id,std_intervention_id ,intervention_desc,text1,schedule_id ,shift_name	,schedule_time	,
							 day_1 ,day_2 , day_3 , day_4 , day_5 , day_6 , day_7 , day_8 , day_9 , day_10, day_11, day_12, day_13, day_14, day_15,
							 day_16, day_17, day_18, day_19, day_20, day_21, day_22, day_23, day_24, day_25, day_26, day_27, day_28, day_29, day_30,
							 day_31 )

select row_type,
	  ROW_NUMBER() over (ORDER BY seq,fac_id, client_id,intervention_desc,right(replicate('0',4)+cast(schedule_time as varchar(4)),4), shift_name) row_id,
	  --ROW_NUMBER() over (ORDER BY seq,fac_id, client_id,intervention_desc, shift_name) row_id,

	  seq,seq_name,fac_id,client_id,client_name,gen_intervention_id,intervention_id,std_intervention_id ,intervention_desc,text1,schedule_id ,shift_name	,schedule_time	,
	  replace(isnull(day_1,'X'),' Y ','') ,
	  replace(isnull(day_2, 'X'),' Y ',''),
	  replace(isnull(day_3,'X'),' Y ','') ,
	  replace(isnull(day_4,'X'),' Y ','') ,
	  replace(isnull(day_5,'X'),' Y ','') ,
	  replace(isnull(day_6,'X'),' Y ','') ,
	  replace(isnull(day_7,'X'),' Y ','') ,
	  replace(isnull(day_8,'X'),' Y ','') ,
	  replace(isnull(day_9,'X'),' Y ','') ,
	  replace(isnull(day_10,'X'),' Y ',''),
	  replace(isnull(day_11,'X'),' Y ',''),
	  replace(isnull(day_12,'X'),' Y ',''),
	  replace(isnull(day_13,'X'),' Y ',''),
	  replace(isnull(day_14,'X'),' Y ',''),
	  replace(isnull(day_15,'X'),' Y ',''),
	  replace(isnull(day_16,'X'),' Y ',''),
	  replace(isnull(day_17,'X'),' Y ',''),
	  replace(isnull(day_18,'X'),' Y ',''),
	  replace(isnull(day_19,'X'),' Y ',''),
	  replace(isnull(day_20,'X'),' Y ',''),
	  replace(isnull(day_21,'X'),' Y ',''),
	  replace(isnull(day_22,'X'),' Y ',''),
	  replace(isnull(day_23,'X'),' Y ',''),
	  replace(isnull(day_24,'X'),' Y ',''),
	  replace(isnull(day_25,'X'),' Y ',''),
	  replace(isnull(day_26,'X'),' Y ',''),
	  replace(isnull(day_27,'X'),' Y ',''),
	  replace(isnull(day_28,'X'),' Y ',''),
	  replace(isnull(day_29,'X'),' Y ',''),
	  replace(isnull(day_30,'X'),' Y ',''),
	  replace(isnull(day_31,'X'),' Y ','')

 from  #PRP_ds_interv_schedule_cte a ;

 if @debug_me = 'Y'
select '@PRP_ds_interv_schedule_final' PRP_ds_interv_schedule_final,* FROM @PRP_ds_interv_schedule	;

if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'
if @debug_me = 'Y' select '@PRP_ds_interv_schedule_all' PRP_ds_interv_schedule_all,* from @PRP_ds_interv_schedule  order by row_id


 SELECT @vStep = 28, @vStepName = 'Final result  ', @step_start_time = getdate()
 IF @debug_me='Y' PRINT 'BEGIN STEP ' +  CONVERT(VARCHAR(20), @vStep)  + ' Final result  at ' + CONVERT(VARCHAR, @step_start_time)

 --select isnull((select count(1) from @PRP_ds_interv_schedule),0), @status_code

 if isnull((select count(1) from @PRP_ds_interv_schedule),0)=0
 BEGIN
  Select
		NULL as row_type,NULL as row_id , NULL as seq ,NULL as seq_name ,NULL as fac_id ,NULL as client_id ,NULL as client_name,NULL as admit_date,NULL as date_of_birth,
		NULL as location,NULL as photo,NULL as photo_date,NULL as mrn_number ,NULL as user_legend,NULL as report_header,
          NULL as gen_intervention_id,NULL as intervention_id,NULL as std_intervention_id ,NULL intervention_desc,NULL as text1 ,NULL as schedule_id ,NULL as shift_id ,NULL as shift_name ,NULL as schedule_date,NULL as schedule_time
		, NULL as day_1
		, NULL as day_2
		, NULL as day_3
		, NULL as day_4
		, NULL as day_5
		, NULL as day_6
		, NULL as day_7
		, NULL as day_8
		, NULL as day_9
		, NULL as day_10
		, NULL as day_11
		, NULL as day_12
		, NULL as day_13
		, NULL as day_14
		, NULL as day_15
		, NULL as day_16
		, NULL as day_17
		, NULL as day_18
		, NULL as day_19
		, NULL as day_20
		, NULL as day_21
		, NULL as day_22
		, NULL as day_23
		, NULL as day_24
		, NULL as day_25
		, NULL as day_26
		, NULL as day_27
		, NULL as day_28
		, NULL as day_29
		, NULL as day_30
		, NULL as day_31
		, NULL as systempicklist
		, NULL as question_text_1
		, NULL as completed_date
		, NULL as question
		, NULL as response
		, NULL as document_by
		, NULL as stdQuestionId
		, @status_code as status_code
		, @status_text as status_text

 END
else if isnull((select count(1) from @PRP_ds_interv_schedule where row_type<>1),0)=0
begin
 Select row_type, row_id , seq , seq_name ,NULL as fac_id , client_id , client_name
	, isnull( convert(varchar(10), admint_date, @vdateFormatStyle) ,'')			as	admit_date

 ,date_of_birth,
 location, photo, photo_date, mrn_number , user_legend,report_header,
         gen_intervention_id, intervention_id, std_intervention_id ,intervention_desc, text1 , schedule_id , shift_id , shift_name , schedule_date, schedule_time
		, day_1
		, day_2
		,  day_3
		,  day_4
		,  day_5
		,  day_6
		,  day_7
		,  day_8
		,  day_9
		,  day_10
		,  day_11
		,  day_12
		,  day_13
		,  day_14
		,  day_15
		,  day_16
		,  day_17
		,  day_18
		,  day_19
		,  day_20
		,  day_21
		,  day_22
		,  day_23
		,  day_24
		,  day_25
		,  day_26
		,  day_27
		,  day_28
		,  day_29
		,  day_30
		,  day_31
		, null systempicklist,
		  NULL question_text_1,NULL completed_date,NULL	question ,NULL response, NULL  document_by,NULL stdQuestionId
		, @status_code as status_code
		, @status_text as status_text
    from @PRP_ds_interv_schedule
    where row_type=1 ;
 end
ELSE
BEGIN



 if @vIncludeStruckOut=0

			  select  row_type, row_id , seq ,
	   case when seq_name='Schedule' then right(replicate('0',4)+cast(schedule_time as varchar(4)),4) --cast(schedule_time as varchar)
	        when seq_name='Duration' then 'MD' else seq_name end seq_name, fac_id , client_id , client_name
			  ,	isnull(convert(varchar(10), admint_date, @vdateFormatStyle) ,'') as	admit_date

				, date_of_birth, location, photo, photo_date, mrn_number
	       , user_legend,report_header, gen_intervention_id, intervention_id, std_intervention_id , intervention_desc, text1 , schedule_id , shift_id
		  , shift_name , schedule_date, schedule_time
		  ,   day_1 , day_2  , day_3  , day_4  , day_5  , day_6  , day_7  , day_8  , day_9  , day_10
		  , day_11, day_12 , day_13 , day_14 , day_15 , day_16 , day_17 , day_18 , day_19 , day_20
		  , day_21 , day_22 , day_23 , day_24 , day_25 , day_26 , day_27 , day_28 , day_29 , day_30 , day_31 ,
		  case
		  when @vfil_fuq_options= 1  and row_id = 0 then 'System Response available for all questions: '+ @SystemPicklist+
		  case when len(@vIs_chart)>1then':  -*-Data not Requested'  else '' end
		    when @vfil_fuq_options= 0  and row_id = 0 then
		    case when len(@vIs_chart)>1then'System Response available for all questions: '+' -*-Data not Requested' else '' end end systempicklist,
		  NULL question_text_1,NULL completed_date,NULL	question ,NULL response, NULL  document_by,NULL stdQuestionId,
		  Case when row_id = 0 then @status_code else NULL end as status_code ,
		  CASE when row_id = 0 then @status_text else NULL end as status_text
	   from @PRP_ds_interv_schedule


else

			  select row_type, row_id , seq ,
	   case when seq_name='Schedule' then right(replicate('0',4)+cast(schedule_time as varchar(4)),4)--cast(schedule_time as varchar)
	        when seq_name='Duration' then 'MD' else seq_name end seq_name, fac_id , client_id , client_name
			,  	isnull(convert(varchar(10), admint_date, @vdateFormatStyle) ,'')	as	admit_date

				, date_of_birth, location, photo, photo_date, mrn_number
	       , user_legend,report_header, gen_intervention_id, intervention_id, std_intervention_id , intervention_desc, text1 , schedule_id , shift_id
		  , shift_name , schedule_date, schedule_time
		  ,   day_1 , day_2  , day_3  , day_4  , day_5  , day_6  , day_7  , day_8  , day_9  , day_10
		  , day_11, day_12 , day_13 , day_14 , day_15 , day_16 , day_17 , day_18 , day_19 , day_20
		  , day_21 , day_22 , day_23 , day_24 , day_25 , day_26 , day_27 , day_28 , day_29 , day_30 , day_31 ,
		  case
		  when @vfil_fuq_options= 1  and row_id = 0 then 'System Response available for all questions: '+ @SystemPicklist+
		  case when len(@vIs_chart)>1then':  -*-Data not Requested'  else '' end
		    when @vfil_fuq_options= 0  and row_id = 0 then
		    case when len(@vIs_chart)>1then'System Response available for all questions: '+' -*-Data not Requested' else '' end end systempicklist,
		  NULL question_text_1,NULL completed_date,NULL	question ,NULL response, NULL  document_by,NULL stdQuestionId,
		  Case when row_id = 0 then @status_code else NULL end as status_code ,
		  CASE when row_id = 0 then @status_text else NULL end as status_text
	   from @PRP_ds_interv_schedule



		union all
			 select
		 3 as row_type,NULL as row_id , NULL as seq ,NULL as seq_name ,@vFacId as fac_id ,client_id as client_id ,NULL as client_name,NULL as admit_date,NULL as date_of_birth,
		 NULL as location,NULL as photo,NULL as photo_date,NULL as mrn_number ,NULL as user_legend,NULL as report_header,
          gen_intervention_id as gen_intervention_id,intervention_id as intervention_id,std_Intervention_Id as std_intervention_id ,intervention_desc ,text1 ,NULL as schedule_id ,NULL as shift_id ,NULL as shift_name ,NULL as schedule_date,NULL as schedule_time
		, NULL as day_1, NULL as day_2 , NULL as day_3, NULL as day_4, NULL as day_5, NULL as day_6, NULL as day_7, NULL as day_8, NULL as day_9, NULL as day_10
		, NULL as day_11, NULL as day_12, NULL as day_13, NULL as day_14, NULL as day_15, NULL as day_16, NULL as day_17, NULL as day_18, NULL as day_19, NULL as day_20
		, NULL as day_21, NULL as day_22, NULL as day_23, NULL as day_24, NULL as day_25, NULL as day_26, NULL as day_27, NULL as day_28, NULL as day_29, NULL as day_30
		, NULL as day_31, NULL as systempicklist ,question_text_1,completed_date,	question ,response, document_by,stdQuestionId ,NULL  as status_code , NULL  status_text
		from
		(
	    	select
		 distinct
		   a.client_id	 ,
		   a.strikeout_by + '<br>' + (

				convert(varchar(10), ( dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, a.strikeout_date)), @vdateFormatStyle)
				+ ' ' + convert( varchar(8),  dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, a.strikeout_date), 108)
				) intervention_desc,
		   a.strikeout_description text1,
		 '<b>'+a.text1 +'</b>  '+cast(b.sequence as varchar)+'- '+
		  CASE WHEN ISNULL(question.system_control_flag,'N')='Y' and (question.mds_question_key_old like 'G01%' or question.mds_question_key_old like 'G2%')
					 THEN isnull(question_text,'-')  ELSE  replace(replace(isnull(question_text,'-'),'<b>',''),'</b>','') END+' '+b.picklist_text
					 question_text_1,

		 (

				convert(varchar(10), ( dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, a.entered_date)), @vdateFormatStyle)
				+ ' '+ convert( varchar(8),  dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, a.entered_date), 108)
				)completed_date

		 --convert(varchar(19), dbo.fn_adjust_time_fac_time_zone_base_on_date(@vFacId, a.entered_date), 120)  completed_date
		 ,
					 CASE WHEN ISNULL(question.system_control_flag,'N')='Y' and (question.mds_question_key_old like 'G01%' or question.mds_question_key_old like 'G2%')
					 THEN isnull(question_text,'-')  ELSE question.stdquestiontext END question,
					IIF(a.item_value_id is null, '', cast(a.item_value_id as varchar(max)))
					+ CASE WHEN a.stdquestioncontorltype='mlt' or a.stdquestioncontorltype='itv' or a.stdquestioncontorltype='bhv' or (a.stdquestioncontorltype='ntv' and a.item_value_id is null) THEN '' ELSE '-' END
					+
				 CASE
				    WHEN a.stdquestioncontorltype  in ('bls',  'os2', 'het','num','tmp','pls','wgt') AND ISNUMERIC(a.item_value)=1 AND ISNULL(a.item_value,'') NOT IN ('<RNA/>','<NA/>','<RR/>') THEN a.item_value
					WHEN a.stdquestioncontorltype in ('rsp', 'sgn') then a.item_value
				    WHEN a.stdquestioncontorltype ='bpr' and isnumeric(a.item_value)=1 then a.item_value+'/'+CAST( a.item_value_id AS VARCHAR)	  ELSE
					   CASE WHEN CAST( a.item_value AS VARCHAR (max)) ='<NA/>'  THEN 'Not Applicable'
						   WHEN cast( a.item_value AS VARCHAR(max)) ='<RR/>'  THEN 'Resident Refused'
						   WHEN cast( a.item_value AS VARCHAR(max)) ='<RNA/>' THEN 'Resident Not Available'
						   ELSE
								CASE WHEN a.stdquestioncontorltype='mlt' or a.stdquestioncontorltype='itv' or a.stdquestioncontorltype='bhv' THEN  ''
								ELSE
									cast( a.item_value AS VARCHAR(max))
								END
						   END
					   END response ,
			a.created_by_longname document_by,
			a.gen_intervention_id,a.intervention_id,a.stdQuestionId,a.std_Intervention_Id

			 from #pocData a

			 left join #FollowUpQuestionandPicklistItem b  on
			  a.gen_Intervention_Id=b.genInterventionId
			  and a.intervention_Id=b.interventionId
			  and a.std_Intervention_Id=b.stdInterventionId
			   and a.stdQuestionId=b.stdQuestionId
			   and isnull(a.stdpicklistid,0)=isnull(std_pick_list_id,0)

			   left outer JOIN #stdQuestionIdTable question
					ON question.stdquestionid = a.stdquestionId
					  and question.stdinterventionid=a.std_intervention_id
					  and question.genInterventionId=a.gen_intervention_id
					  and question.InterventionId=a.intervention_Id
					 and question.sequence=a.sequence

			 where a.strikeout_flag='Y'
			 and (a.completed_date>=isnull(b.period_start_date,  a.completed_date) and a.completed_date<=isnull(b.period_end_date,  a.completed_date))
		) tt

			  order by row_type,row_id,completed_date,question_text_1	;
		;
	  

 end
  if @debug_me = 'Y' Print 'END STEP ' +  convert(varchar(20), @vStep)  + ' Step Time = ' + convert(varchar, datediff(ms, @step_start_time, getdate())) + ' milliseconds'	
  
 

 --end


  END TRY 

BEGIN CATCH 
	 IF @status_code = 0 
            SET @status_code = 1; 

          --- only when unexpected error occured otherwise it could be handled error series 1000 like threshold
      IF @status_code <> 2 
            SELECT @status_text = 
                   Rtrim(LEFT('Stored Procedure failed with Error Code : ' 
                              + Cast(Error_number() AS VARCHAR(10)) 
                              + ', Line Number : ' 
                              + Cast(Error_line() AS VARCHAR(10)) 
                              + ', Description : ' + Error_message(), 3000) 
                   ) 

			
			insert into dbo.execution_statistics 
					(program_name, start_time, end_time, who_done_it, return_code, parm1_name, parm1_value, parm2_name, parm2_value, parm3_name, parm3_value, parm5_name, parm5_value)
			values(@vgs_program_name, @vgs_start_time, getdate(), LEFT(@vgs_execution_user,30),@status_code, 'field_list', LEFT(@vFieldList, 1500), 'filter_list', LEFT(@vFilterList, 1500), 'step_number', convert(varchar(10), @vStep), 'error_msg', LEFT(@status_text, 1500)  )		

	Select 
		NULL as row_type,NULL as row_id , NULL as seq ,NULL as seq_name ,NULL as fac_id ,NULL as client_id ,NULL as client_name,NULL as admit_date,NULL as date_of_birth,
		NULL as location,NULL as photo,NULL as photo_date,NULL as mrn_number ,NULL as user_legend,NULL as report_header, 
          NULL as gen_intervention_id, NULL intervention_id, NULL std_intervention_id , NULL intervention_desc ,NULL as text1 ,NULL as schedule_id ,NULL as shift_id ,NULL as shift_name ,NULL as schedule_date,NULL as schedule_time 
		, NULL as day_1
		, NULL as day_2
		, NULL as day_3
		, NULL as day_4
		, NULL as day_5
		, NULL as day_6
		, NULL as day_7
		, NULL as day_8
		, NULL as day_9
		, NULL as day_10
		, NULL as day_11
		, NULL as day_12
		, NULL as day_13
		, NULL as day_14
		, NULL as day_15
		, NULL as day_16
		, NULL as day_17
		, NULL as day_18
		, NULL as day_19
		, NULL as day_20
		, NULL as day_21
		, NULL as day_22
		, NULL as day_23
		, NULL as day_24
		, NULL as day_25
		, NULL as day_26
		, NULL as day_27
		, NULL as day_28
		, NULL as day_29
		, NULL as day_30
		, NULL as day_31 
		, NULL as systempicklist
		, NULL as question_text_1
		, NULL as completed_date
		, NULL as question 
		, NULL as response
		, NULL as document_by
		, NULL as stdQuestionId
		, @status_code as status_code
		, @status_text as status_text
		
END CATCH 

RETURN 

END
GO
GRANT EXECUTE ON  dbo.sproc_prp_rl_poc_documentation_survey_hybrid   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_poc_documentation_survey_hybrid.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_poc_documentation_survey_hybrid.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_statements.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- ================================================================================= 
-- PCC-117622       :   script to create sproc_prp_rl_statements Procedure  
--						-- 
-- Written By:          Ritch Moore
-- Reviewed By:         
-- 
-- Script Type:         DDL 
-- Target DB Type:      Client
-- Target ENVIRONMENT:  BOTH (US/CA) 
-- 
-- 
-- Re-Runable:          YES 
-- 
-- Description of Script : Create sproc_prp_rl_statements 
-- 
-- Special Instruction: 

-- 
-- =================================================================================

/***********************************************************************************
Revision History:
2017-06-23  Ritch Moore		PCC-117622	Initial creation of this stored proc - based on sproc_prp_rl_consolidated_statement with transaction logic from sproc_prp_rl_transaction_report
2017-06-23  Ritch Moore		PCC-117714	Resident Filter Logic + input param cleanup
2017-07-05  Ritch Moore		PCC-117677	Combine consecutive room charges if the rate has not changed (step 50)
2017-07-05  Ritch Moore		PCC-118468	Append date range at the end of the description when grouping by charge code or charge code category
2017-07-18  Ritch Moore		PCC-118334	Add order by functionality including reprint from
2017-07-26	Ritch Moore		PCC-118334	Accept new "Order By" parameter to statement stored proc
2017-07-26	Ritch Moore		PCC-118679	Add Room Location to Room Charges
2017-07-31	Ritch Moore		PCC-119896	Change sorting in the room combine logic
2017-07-31	Ritch Moore		PCC-119178	Other payer statement logic
2017-08-03	Ritch Moore		PCC-118977	Read checks payable to from the statement config table
2017-08-03	Ritch Moore		PCC-119183	Add resident status as an input parameter
2017-08-16	Ritch Moore		PCC-119293	Add additional values to informational payer data
2017-08-17	Ritch Moore		PCC-118699	Transaction sorting option
2017-08-17	Ritch Moore		PCC-120524	Suppress Net Zeros Transactions
2017-08-18	Ritch Moore		PCC-118685	Add Resident Trust data
2017-08-18	Ritch Moore		PCC-120217	Add EFT bank message
2017-08-21	Ritch Moore		PCC-120087	Reintroduce the Statement Date in configuration
2017-08-23	Ritch Moore		PCC-120806	Summarize Ancillary Charge's child transaction as the parent
2017-08-23	Ritch Moore		PCC-119715	Add additional Show Comments Options
2017-08-23	Ritch Moore		PCC-120749	Add Aging for Other Private statement payers
2017-08-30	Ritch Moore		PCC-121158	Summarize Other Co-insurance items
2017-08-30	Ritch Moore		PCC-121198	Remove Transaction Type Description from Description
2017-09-01	Ritch Moore		PCC-121288	Add Contact Country to output
2017-09-05	Ritch Moore		PCC-121242	Add GST/HST Registration #'s (for CDN statements)
2017-09-06	Ritch Moore		PCC-121426	Add case statement around appending the care level to transaction descriptions.
2017-09-06	Ritch Moore		PCC-121509	Address other payer aging/balance due mismatches
2017-09-08	Ritch Moore		PCC-121456	Conditional EFT statement message logic
2017-09-12	Ritch Moore		PCC-121797	Add if statements around transaction grouping (private and other payers separate
2017-09-13	Ritch Moore		PCC-121523	Payment Reversals will be enclosed by double asterisks
2017-09-20	Ritch Moore		PCC-122170	Wrap child transaction combining in statement type "if" statements
2017-09-22	Ritch Moore		PCC-122292	Keep Facility Group Addresses when run from EMC- no payer overrides
2017-09-26	Ritch Moore		PCC-122303	Add resident number after the resident name in payment coupon - limit to 2
2017-10-04	Ritch Moore		CORE-4190	Replace isnumeric function with try_convert as isnumeric returns true when commas exist (bed description 1,2,3 for instance)
2017-10-18	Ritch Moore		CORE-4612	Adjust invoice gathering joins for Canadian performance (ext)
2017-10-30	Ritch Moore		CORE-5462	Trust balance should not show on Statement when show balance on statement is set to No in the trust client configuration
2017-10-30	Ritch Moore		CORE-772	Support passing of invoice_id's for statement print link and trial billing
2017-11-20	Ritch Moore		CORE-7167	Include billed transactions in other invoices on the trial statement for the same billing date and generated date
2017-11-30	Ritch Moore		CORE-7473	Still generating consolidated statements in Statement when consolidate statement is not checked
2017-12-06	Ritch Moore		CORE-8101	Resolve issue with not pulling Resident Insurance Address into the statement
2017-12-19	Ritch Moore		CORE-7803	Return address needs to display facility/facility group address
2017-12-19	Ritch Moore		CORE-7953	Remove batch number and entry number on transaction description
2017-12-20	Ritch Moore		CORE-7957	Show Reversal transaction at top of each sorting group
2018-01-02	Ritch Moore		CORE-8776	Statement Message needs to be a sticky setting
2018-01-03	Ritch Moore		CORE-7950	Display Transaction Warning Message on the Statement *NEW*
2018-01-04	Ritch Moore		CORE-7975	In EMC, each facility/campus selected will generate statements using their own assigned template
2018-01-04	Ritch Moore		CORE-9169	Update to the source of checks payable to
2018-01-08	Ritch Moore		CORE-8365	Join update for other aging for performance
2018-02-05	Ritch Moore		CORE-10900	Performance tuning for Statement
2018-02-08	Ritch Moore		CORE-10905	Support for Portal Export format
2018-03-19	Ritch Moore		CORE-11907	Configurable Export Specification Updates
2018-04-02	Ritch Moore		CORE-14099	Configurable Export Payer Export filter
2018-04-04	Ritch Moore		CORE-14518	Consecutive room related transactions do not roll up in specific scenario with multiple contacts
2018-04-06	Ritch Moore		CORE-10718	New Identifier on new statement for Payment Portal
2018-04-30	Ritch Moore		CORE-15273	Replace payer temp table with ar_lib_payers with the export condition - performance
2018-06-18	Ritch Moore		CORE-17401	Update to include configurable account number option
2018-06-27	Ritch Moore		CORE-17930	Add the account number label to the Configurable export
2018-06-27	Ritch Moore		CORE-17932	Add the account number option to the Configurable export
2018-07-05	Ritch Moore		CORE-17759	Add distinct to temp invoice table load, when invoice_ids passed
2018-07-16	Ritch Moore		CORE-19445	Replace distinct added in CORE-17759 with Exists - as per DM
2018-08-01	Ritch Moore		CORE-19440	Only show informational payer balance when the balance greater than $0
2018-08-01	Ritch Moore		CORE-15744	New Statement should not consolidate Resident statements by all facility group types
2018-08-01	Ritch Moore		CORE-15353	Duplicate entries for residents in EMC when there are client records for the same resident within the billing office - rechecked in for snrzt issue
***********************************************************************************/

IF EXISTS ( SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE 
				FROM INFORMATION_SCHEMA.ROUTINES
				WHERE ROUTINE_SCHEMA = 'dbo' and ROUTINE_NAME = 'sproc_prp_rl_statements' and ROUTINE_TYPE = 'PROCEDURE' ) 
BEGIN
	DROP PROCEDURE dbo.sproc_prp_rl_statements
END
GO

SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON  --Keep it ON as we have used Reserved words in out database as STatus, floor....
GO


Create Procedure dbo.sproc_prp_rl_statements

  @export_mode bit = 0
, @template_id int = 0
, @fac_id varchar(max) = Null
, @include_inactive_fac_ids bit = 0
, @is_contact bit = 1
, @receiver_ids varchar(max)  = '-1'
, @client_status smallint = -1 --0=current, 1=discharged, -1=all
, @payer_id_list varchar(max) = '0'
, @invoice_id_list varchar(max) = Null
, @last_statement bit = 1
, @statement_start_date datetime = Null
, @statement_end_date datetime = Null
, @show_results varchar(2) = 'D' --D = Detail, C = Summarize by Charge Code, CC = Summarize by Charge Code Category, A = Summarize all Ancillary Charges
, @combine_children tinyint = 0 -- 0 = all transactions, 1 = combine all children, 2 = reimbursement rate (combine CA and CR with parent)
, @billing_group varchar(max) = Null
, @display_admit_date bit = 0
, @display_discharge_date bit = 0
, @reprint_from varchar(20)
, @show_aging bit = 0
, @cash_receipt_comments bit = 0
, @ancillary_comments bit = 0
, @adjustment_comments bit = 0
, @statement_message varchar(254) = ''
, @is_emc  bit = '0'
, @export_resend_flag bit = 0
, @include_prefix_facility_code bit ='0'
, @minimum_balance money = Null
, @use_effective_date_as_bill_date bit = 0
, @sort_by bit = 0 --0='Name', 1='location'
, @transaction_order char(1) = 'P' --'P' = transaction type/date, 'D' = date/trnsaction_type
, @is_new_eft char(1) = 'Y' -- 'N' = Old Canadian method, 'Y' = New method
, @account_number_source char(1) = 'C' -- 'C' = Contact Number, 'R' = Resident Number
, @combine_ancillary_flag bit = 0
, @execution_user_login varchar(60)
, @debug_me char(1)  = 'N'
, @rows_returned int = 0 out
, @status_code int = 0 out 
, @status_text varchar(3000) = Null out


/********************************************************************************

exec dbo.sproc_prp_rl_statements
  @export_mode = 0
, @template_id = 1
, @fac_id = '10'--'35,36,37'--1 --'8'
, @include_inactive_fac_ids = '0'
, @is_contact = 0
, @receiver_ids = '-1'
, @client_status = -1
, @payer_id_list = '0'
, @invoice_id_list = '1762871,1762864,1762872'
, @last_statement = '0'--'0'
, @statement_start_date = '1/1/2018'
, @statement_end_date = '3/31/2018'
, @show_results = 'D'
, @combine_children = 0
, @billing_group = Null--'363'
, @display_admit_date = '0'
, @display_discharge_date = '0'
, @reprint_from = ''
, @show_aging = '0'
, @cash_receipt_comments = 1
, @ancillary_comments = 1
, @adjustment_comments = 1
, @statement_message = ''
, @is_emc = 0
, @export_resend_flag = 1
, @include_prefix_facility_code  ='1'
, @minimum_balance = Null
, @use_effective_date_as_bill_date = 0
, @sort_by = 0
, @transaction_order = 'D'
, @is_new_eft = 'Y'
, @account_number_source = 'C'
, @execution_user_login = 'PCC-adhikj'
, @debug_me  = 'N'
, @rows_returned = 0
, @status_code = ''
, @status_text = ''     

**********************************************************************************/

as
Begin

SET NOCOUNT ON;

	DECLARE @sprocExecId bigint 
	DECLARE @startTime DATETIME = GETDATE()
	DECLARE @endTime DATETIME
	Declare @sprocParamLogEnable int = 0
	select @sprocParamLogEnable = count(1) from configuration_parameter
	where name = 'enable_ar_sproc_param_log' and value = 'Y'
	
	if @sprocParamLogEnable > 0
	BEGIN
		Begin try

			declare @params varchar(max)
			declare @proc_name nvarchar(128) = object_name(@@procid)
			select @params = '@export_mode=' + case when @export_mode is null then 'NULL' else cast(@export_mode as VARCHAR) end 
			+ ',@template_id=' + case when @template_id is null then 'NULL' else cast(@template_id as VARCHAR) end
			+ ',@fac_id=' + case when @fac_id is null then 'NULL' ELSE '''' + @fac_id + '''' end 
			+ ',@include_inactive_fac_ids=' + case when @include_inactive_fac_ids is null then 'NULL' else cast(@include_inactive_fac_ids as VARCHAR) end
			+ ',@is_contact=' + case when @is_contact is null then 'NULL' else cast(@is_contact as VARCHAR) end
			+ ',@receiver_ids=' + case when @receiver_ids is null then 'NULL' ELSE '''' + @receiver_ids + '''' end 
			+ ',@client_status=' + case when @client_status is null then 'NULL' else cast(@client_status as VARCHAR) end
			+ ',@payer_id_list=' + case when @payer_id_list is null then 'NULL' ELSE '''' + @payer_id_list + '''' end 
			+ ',@invoice_id_list=' + case when @invoice_id_list is null then 'NULL' ELSE '''' + @invoice_id_list + '''' end 
			+ ',@last_statement=' + case when @last_statement is null then 'NULL' else cast(@last_statement as VARCHAR) end
			+ ',@statement_start_date=' + case when @statement_start_date is null then 'NULL' else ''''+ convert(VARCHAR, @statement_start_date, 121) + '''' end
			+ ',@statement_end_date=' + case when @statement_end_date is null then 'NULL' else ''''+ convert(VARCHAR, @statement_end_date, 121) + '''' end
			+ ',@show_results=' + case when @show_results is null then 'NULL' ELSE '''' + @show_results + '''' end
			+ ',@combine_children=' + case when @combine_children is null then 'NULL' else cast(@combine_children as VARCHAR) end
			+ ',@billing_group=' + case when @billing_group is null then 'NULL' ELSE '''' + @billing_group + '''' end
			+ ',@display_admit_date=' + case when @display_admit_date is null then 'NULL' else cast(@display_admit_date as VARCHAR) end
			+ ',@display_discharge_date=' + case when @display_discharge_date is null then 'NULL' else cast(@display_discharge_date as VARCHAR) end
			+ ',@reprint_from=' + case when @reprint_from is null then 'NULL' ELSE '''' + @reprint_from + '''' end
			+ ',@show_aging=' + case when @show_aging is null then 'NULL' else cast(@show_aging as VARCHAR) end
			+ ',@cash_receipt_comments=' + case when @cash_receipt_comments is null then 'NULL' else cast(@cash_receipt_comments as VARCHAR) end
			+ ',@ancillary_comments=' + case when @ancillary_comments is null then 'NULL' else cast(@ancillary_comments as VARCHAR) end
			+ ',@adjustment_comments=' + case when @adjustment_comments is null then 'NULL' else cast(@adjustment_comments as VARCHAR) end
			+ ',@statement_message=' + case when @statement_message is null then 'NULL' ELSE '''' + @statement_message + '''' end
			+ ',@is_emc=' + case when @is_emc is null then 'NULL' else cast(@is_emc as VARCHAR) end
			+ ',@export_resend_flag=' + case when @export_resend_flag is null then 'NULL' else cast(@export_resend_flag as VARCHAR) end
			+ ',@include_prefix_facility_code=' + case when @include_prefix_facility_code is null then 'NULL' else cast(@include_prefix_facility_code as VARCHAR) end
			+ ',@minimum_balance=' + case when @minimum_balance is null then 'NULL' else cast(@minimum_balance as VARCHAR) end
			+ ',@use_effective_date_as_bill_date=' + case when @use_effective_date_as_bill_date is null then 'NULL' else cast(@use_effective_date_as_bill_date as VARCHAR) end
			+ ',@sort_by=' + case when @sort_by is null then 'NULL' else cast(@sort_by as VARCHAR) end
			+ ',@transaction_order=' + case when @transaction_order is null then 'NULL' ELSE '''' + @transaction_order + '''' end
			+ ',@is_new_eft=' + case when @is_new_eft is null then 'NULL' ELSE '''' + @is_new_eft + '''' end
			+ ',@account_number_source=' + case when @account_number_source is null then 'NULL' ELSE '''' + @account_number_source + '''' end
			+ ',@combine_ancillary_flag=' + case when @combine_ancillary_flag is null then 'NULL' else cast(@combine_ancillary_flag as VARCHAR) end
			+ ',@execution_user_login=' + case when @execution_user_login is null then 'NULL' ELSE '''' + @execution_user_login + '''' end 
			+ ',@debug_me=' + case when @debug_me is null then 'NULL' ELSE '''' + @debug_me + '''' end 
			+ ',@rows_returned=' + case when @rows_returned is null then 'NULL' else cast(@rows_returned as VARCHAR) end 
			+ ',@status_code=' + case when @status_code is null then 'NULL' else cast(@status_code as VARCHAR) end
			+ ',@status_text=' + case when @status_text is null then 'NULL' ELSE '''' + @status_text + '''' end 
						
			insert into ar_sproc_params_log (sproc_name, params,start_time)
			SELECT @proc_name, @params, @startTime

			set @sprocExecId = @@identity
		END TRY
		BEGIN CATCH
			set @sprocExecId = -1
		END CATCH
	END

--declare Standard local variables required for any store proc
DECLARE   @vStep int
		, @vErr varchar(max)
		, @vdelim char(1)
		, @vReportDate datetime
		, @vRowCount int
		, @vCflr varchar(10)
		, @vTermClient VARCHAR(50)
		, @vTermFacility VARCHAR(50)
		, @vTermAdmission VARCHAR(50)
		, @vTermDischarge VARCHAR(50)
		, @vTermRoom VARCHAR(50)

--Facility Related variables, also used in capturing execution Statistics 
Declare @vFacIDs varchar(max)		
Declare @PRP_FacList as table(FacId int)
Declare @vFacWarningMsg varchar(max) --- to know whether it the returned list is restricted

----Local Variables
DECLARE @vFacId varchar(max)
	, @vTemplateId varchar(max)
	, @vIncludeInactiveFacIds bit 
	, @vIsContact bit
	, @vReceiverIds varchar(max)
	, @vClientStatus smallint
	, @vPayerIdList varchar(max)
	, @vInvoiceIdList varchar(max)
	, @vLastStatement	bit
	, @vStatementStartDate datetime
	, @vLastInvoiceDate datetime
	, @vStatementEndDate datetime
	, @vSummarizeReversals bit
	, @vShowResults varchar(2)
	, @vCombineChildren tinyint
	, @vSuppress0value bit
	, @vBillingGroup varchar(max)
	, @vDisplayAdmitDate bit
	, @vDisplayDischargeDate bit
	, @vReprintFrom varchar(20)
	, @vIncludeResidentMessage bit
	, @vShowAging bit
	, @vOtherPayerSummary bit
	, @vCashReceiptComments bit
	, @vAncillaryComments bit
	, @vAdjustmentComments bit
	, @vStatementMessage varchar(500)
	, @vShowPaymentDueDate bit
    , @vFacIdListNotInGroup varchar(max)
	, @vIsEmc  bit
	, @vIncludeNonContacts  bit
--	, @vNonContactStatementStartDate datetime
    , @vIncludePrefixFacilityCode  bit
	, @vMinimumBalance money
	, @vUseEffectiveDateAsBillDate bit
	, @vChecksPayableTo	varchar(100)
	, @vPrivateStatementsIncluded bit
	, @vOtherStatementsIncluded bit
	, @vSortBy bit
	, @vTransactionOrder char(1)
	, @vIsNewEft char(1)
	, @vIsTrial bit
	, @vExportMode bit
	, @vExportResendFlag bit
	, @vShowInvoiceNumber bit
	, @vShowLocation bit 
	, @vShowResidentNumber bit 
	, @vShowTransactionWarningMessage bit 
	, @vTransactionWarningMessage varchar(200) 
	, @vDisplayUnitAndAmountFlag bit
	, @vPaymentInstructions varchar(1000)
	, @vShowOnlineID bit
	, @vAccountNumberLabel varchar(15)
	, @vAccountNumberSource char(1)
	, @vCombineRecurringAncillary bit
	, @vCombineCouncilPayerContribution bit

create table #client_ids_table
		(
			client_id int
		  );

create table #receiver_ids_table 
		 (
			contact_id numeric(18,1),
			consolidate_statement tinyint
		  );

create table #payer_ids_table 
		 (
			fac_id int,
			payer_id int, 
			bill_payer_id int,
			client_id int,
			statement_date datetime,
			generated_date datetime,
			trial_flag varchar(1)
		  );

create table #invoice_ids_table 
		 (
			invoice_id int,
			client_id int,
			payer_id int,
			statement_date datetime,
			generated_date datetime,
			trial_flag varchar(1)
		  );

create table #billing_group_table
		(
			 group_id int
		);

create table #contact_union_table 
		(
			  contact_id numeric(18,1)
			 ,contact_num int
			 ,payer_id int
			 ,client_id int
			 ,bill_date datetime
			 ,inv_created_date datetime
			 ,generated_date datetime
			 ,row_num int
		);

-----Governor and Statistics Variables 
Declare  @vgs_program_name varchar(200)
		 ,@vgs_start_time datetime
		 ,@vgs_execution_user varchar(60)
		 ,@vgs_fill_end_time datetime
		 ,@vgsStepStartTime datetime
		 ,@vgsStepEndTime datetime

----client Access Varaibles
Declare @vCheckClientId varchar(max)
Declare @vClientIDs varchar(max)		
Declare @vClientWarningMsg varchar(max)--- to know whether it the returned list is restricted

BEGIN TRY

Set @status_code = 0   ---- Status Code 0 = Success, 1 = Exception
set @status_text = null;
set @rows_returned = 0;
Set @vgs_program_name  = Object_name(@@ProcID);  ---Current Store Proc Name
Set @vgs_start_time = getdate();
Set @vgs_execution_user = @execution_user_login;
set @vdelim = ','
set @vCflr = Char(13)
set @vReportDate = getdate();
set @vIsTrial = 0
set @vStep = 0
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' + convert(varchar(20), @vStep) + ' Executing store proc :  ' + @vgs_program_name  + convert(varchar(26),getdate(),109)

----Parameter Sniffing - use local variables when they are used in a where clause
SET @vFacID							= @fac_id;
SET @vTemplateId					= @template_id;
SET @vIncludeInactiveFacIds			= @include_inactive_fac_ids; 
SET @vIsContact						= @is_contact;
SET @vReceiverIds					= @receiver_ids;
SET @vClientStatus					= @client_status
SET @vPayerIdList					= @payer_id_list;
SET @vInvoiceIdList					= @invoice_id_list;
SET @vLastStatement					= @last_statement;
SET @vStatementStartDate			= convert(datetime, convert(varchar(10),@statement_start_date , 101) + ' 00:00:00');
SET @vStatementEndDate				= convert(datetime, convert(varchar(10),@statement_end_date , 101) + ' 23:59:59');
SET @vSummarizeReversals			= 1;
SET @vShowResults					= @show_results;
SET @vCombineChildren				= @combine_children;
SET @vBillingGroup					= isnull(@billing_group,'-1');
SET @vDisplayAdmitDate				= @display_admit_date;
SET @vDisplayDischargeDate			= @display_discharge_date;
SET @vReprintFrom					= @reprint_from; --case when @reprint_from is not null then @reprint_from+'%' else null end;
SET @vIncludeResidentMessage		= 1;
SET @vShowAging						= @show_aging;
SET @vCashReceiptComments			= @cash_receipt_comments;
SET @vAncillaryComments				= @ancillary_comments;
SET @vAdjustmentComments			= @adjustment_comments;
SET @vStatementMessage				= @statement_message;
SET @vShowPaymentDueDate			= 0;
SET @vIsEmc							= @is_emc;
SET @vIncludePrefixFacilityCode		= @include_prefix_facility_code;
SET @vIncludeNonContacts			= 0;
SET @vMinimumBalance				= @minimum_balance;
SET @vUseEffectiveDateAsBillDate	= @use_effective_date_as_bill_date;
SET @vSortBy						= @sort_by;
SET @vTransactionOrder				= @transaction_order;
SET @vIsNewEft						= @is_new_eft;
SET @vSuppress0value				= 1;
SET @vExportMode					= @export_mode;
SET @vExportResendFlag				= @export_resend_flag;

SET @vOtherPayerSummary				= 1;
SET @vShowOnlineID					= 1;
SET @vAccountNumberSource			= @account_number_source;
SET @vCombineRecurringAncillary		= @combine_ancillary_flag;
SET @vCombineCouncilPayerContribution = (select top 1 isnull(cp.value,0)
										from configuration_parameter cp 
										where name = 'combine_council_payer_contribution' and fac_id = -1);


--If @vReceiverIds = '-1' and (@vIsContact = 0 or @vPayerIdList = '0') --for all we want to pull as contacts, but only when private/outpatient is selected alone - other payers need the resident.
--	set @vIsContact = 1

--set hard coded export conditions
if @vExportMode = 1
	begin
		SET @vShowAging				= 0;
		SET @vOtherPayerSummary		= 0;
	end
	
If  @vReceiverIds = '-1'
	set @vIncludeNonContacts = 1
else
	set @vIncludeNonContacts = 0

If  @vReceiverIds <> '-1' and @vIsContact = 0
	begin
		INSERT into #client_ids_table select Cast(items as int) from dbo.Split(@vReceiverIds,@vdelim)
	end
	
If  @vReceiverIds <> '-1' and @vIsContact = 1
	begin
		INSERT into #receiver_ids_table select Cast(items as int), 2 from dbo.Split(@vReceiverIds,@vdelim)
	end
--else
--	begin

--	end

create table #contact_clients
	(
		  fac_id							int
		, contact_id						numeric(18,1) 
		, consolidate_statement				bit
		, client_id							int
		, invoice_id						int
		, statement_invoice_number			int
		, payer_id							int
		, payer								varchar(50)
		, inv_effective_date				datetime
		, inv_eff_date_from					datetime
		, inv_eff_date_to					datetime
		, remit_to_name						varchar(375)
		, remit_to_address1					varchar(70)
		, remit_to_address2					varchar(70)
		, remit_to_address3					varchar(70)
		, remit_to_city						varchar(75)
		, remit_to_county					varchar(75)
		, remit_to_prov_state				varchar(75)
		, remit_to_country					varchar(75)
		, remit_to_postal_zip_code			varchar(75)
		, remit_to_phone					varchar(35)
		, contact_title						varchar(30)
		, contact_first_name				varchar(120)
		, contact_last_name					varchar(50)
		, contact_address1					varchar(105)
		, contact_address2					varchar(120)
		, contact_address3					varchar(120)
		, contact_city						varchar(75)
		, contact_county					varchar(75)
		, contact_prov_state				varchar(75)
		, contact_postal_zip_code			varchar(75)
		, contact_country					varchar(75)
		, contact_email						varchar(75)
		, account_number					varchar(12)
		, generated_date					datetime
		, bill_date							datetime
		, aging_date						datetime
		, payment_due_date					datetime
		, pre_consolidated_payment_due_date	datetime
		, statement_through_date			datetime
		, amount_due						money
		, eft_message						varchar(500)
		, client_message					varchar(500)
		, group_message						varchar(max)
		, global_message					varchar(500)
		, previous_balance_due				money
		, payments							money
		, summary_fac_id					int
		, summary_charge_center				varchar(75)
		, summary_charge_center_code		varchar(5)
		, summary_charge_client_first_name	varchar(50)
		, summary_charge_client_last_name	varchar(50)
		, summary_charge_client_name		varchar(120)
		, summary_charge_client_number		varchar(35)
		, summary_charge_client_location	varchar(100)
		, summary_charge_client_dob			datetime
		, summary_charge_client_admission	datetime
		, summary_charge_client_discharge	datetime
		, summary_current_balance			money
		, summary_previous_balance_due		money
		, summary_payments					money
		, summary_late_fees					money
		, summary_client_balance_due		money
		, private_bills_to					varchar(2)
		, amount_past_due_yn				char(1)
		, term_used_for_client				varchar(25)
		, client_admit_date					datetime
		, client_discharge_date				datetime
		, client_mrn						varchar(25)
		, client_first_name					varchar(50)
		, client_last_name					varchar(50)
		, client_unit						varchar(50)
		, unit_order						numeric
		, client_room						varchar(50)
		, room_order						numeric
		, client_bed						varchar(50)
		, bed_order							numeric
		, patient_specific_message			varchar(500)
		, contact_num						int
		, non_consolidated_contact_num		int
		, client_list						varchar(500)
		, main_location						bit
		, consolidated_location_order		smallint
		, sort_location						varchar(100)
		);

CREATE CLUSTERED INDEX _tmp_idx_contact_clients on #contact_clients(contact_id,client_id,invoice_id);

create table #contact_return_to
	(
		  contact_num						int 
		, campus_id							int 
		, return_to_group_number			varchar(50)
		, return_to_name					varchar(375)
		, return_to_address1				varchar(70)
		, return_to_address2				varchar(70)
		, return_to_address3				varchar(70)
		, return_to_city					varchar(75)
		, return_to_county					varchar(75)
		, return_to_prov_state				varchar(75)
		, return_to_country					varchar(75)
		, return_to_postal_zip_code			varchar(75)
		, return_to_phone					varchar(35)
		);

CREATE CLUSTERED INDEX _tmp_idx_contact_payment_to on #contact_return_to(contact_num);

create table #local_transactions
	(
		  invoice_id					int
		, contact_id					numeric(18,1) 
		, batch_id						int
		, entry_number					int
		, client_id						int
		, auto_generated				varchar(1)
		, transaction_id				int
		, reversing_tx_id				int
		, distribution_tx_id			int
		, applied_payment_id			int
		, payer_id						int
		, parent_payer_id				int
		, days_account_id				int
		, dollars_account_id			int
		, fac_id						int
		, is_billed						bit
		, transaction_type				varchar(2)
		, parent_tx_type				varchar(2)
		, [description]					varchar(100)
		, alt_description				varchar(100)
		, cheque_number					varchar(50)
		, effective_date				datetime
		, transaction_date				datetime
		, bill_date						datetime
		, applied_date					datetime
		, generated_date				datetime
		, days_amount					int
		, daily_rate					money
		, monthly_rate					money
		, amount						money
		, care_level					varchar(5)
		, revenue_code					varchar(5)
		, hcpcs_code					varchar(5)
		, item_type_id					int
		, comment						varchar(200)
		, rate_type_id					int
		, rugs_modifier					varchar(2)
		, medicare_day					int
		, mppr_flag						bit
		, mark_as_billed_by				varchar(60)
		, mark_as_billed_date			datetime
		, mark_as_billed_comment		varchar(256)
		, transaction_type_group		tinyint
		, skip_bit						tinyint
	);

CREATE CLUSTERED INDEX _tmp_idx_local_transactions on #local_transactions(invoice_id,transaction_type,distribution_tx_id,reversing_tx_id);

create table #child_transactions
	(
		  distribution_tx_id			int
		, transaction_type				varchar(2)
		, parent_tx_type				varchar(2)
		, contact_id					numeric(18,1) 
		, invoice_id					int
		, payer_id						int
		, days_amount					int
		, daily_rate					money
		, monthly_rate					money
		, amount						money
		, bill_date						datetime
		, generated_date				datetime
		, skip_bit						bit

	);

create table #transactions

	(
		  invoice_id					int
		, fac_id						int
		, contact_id					numeric(18,1) 
		, contact_num					int
		, client_id						int
		, payer_id						int
		, payer							varchar(100)
		, payer_type					varchar(20)
		, batch_id						int
		, entry_number					int
		, distribution_tx_id			bigint
		, transaction_id				bigint
		, reversing_tx_id				bigint
		, auto_generated				varchar(1)
		, bill_date						datetime
		, posting_date					datetime
		, effective_date				datetime
		, effective_from_date			datetime
		, effective_thru_date			datetime
		, generated_date				datetime
		, charge_code					varchar(12)
		, frequency						varchar(1)
		, revenue_code					varchar(5)
		, hcpcs_code					varchar(5)
		, mppr_flag						bit
		, tx_description				varchar(200)
		, care_level					varchar(5)
		, benefit_days					varchar(10)
		, parent_tx_type				varchar(2)
		, transaction_type				varchar(2)
		, unit_amount					money
		, units							int
		, amount						money
		, gl_account					varchar(75)
		, days_account					varchar(75)
		, billed						varchar(5)
		, comment						varchar(200)
		, cheque_number					varchar(50)
		, adjusted_tx_type				varchar(10)
		, recurring_tx					bit
		, reversed						bit
		, transaction_type_group		tinyint
		, ancillary_year				smallint
		, ancillary_month				tinyint
		, balance_due					money
		, other_payer					tinyint
		, aging_total					money
		, aging_current_label			varchar(10)
		, aging_current_amount			money
		, aging_30_label				varchar(10)
		, aging_30_amount				money
		, aging_60_label				varchar(10)
		, aging_60_amount				money
		, aging_90_label				varchar(10)
		, aging_90_amount				money
		, aging_120_label				varchar(10)
		, aging_120_amount				money
		, aging_150_label				varchar(10)
		, aging_150_amount				money
		, aging_180_label				varchar(10)
		, aging_180_amount				money
		, aging_210_label				varchar(10)
		, aging_210_amount				money
		, detail_order					int

	);

CREATE CLUSTERED INDEX _tmp_idx_consolidated_statement_detail on #transactions(contact_id,client_id,invoice_id);

create table #facilty_group_info
	(
		  facility_group_id				int
		, fac_id						int
		, remit_to_group_number			varchar(50)
		, remit_to_name					varchar(100)
		, remit_to_address1				varchar(120)
		, remit_to_address2				varchar(120)
		, remit_to_address3				varchar(120)
		, remit_to_city					varchar(120)
		, remit_to_county				varchar(120)
		, remit_to_prov_state			varchar(120)
		, remit_to_country				varchar(120)
		, remit_to_postal_zip_code		varchar(120)
		, remit_to_phone				varchar(35)
		, facility_group_number			varchar(50)
		, facility_group_name			varchar(100)
		, facility_group_address1		varchar(75)
		, facility_group_address2		varchar(75)
		, facility_group_address3		varchar(75)
		, facility_group_city			varchar(75)
		, facility_group_county			varchar(75)
		, facility_group_prov_state		varchar(75)
		, facility_group_country			varchar(75)
		, facility_group_postal_zip_code	varchar(75)
		, facility_group_phone				varchar(75)
		, facility_group_fax				varchar(75)
			
	);

create table #balance_forward_union
	(	 contact_id		numeric(18,1) --int
		,contact_num	int
		,client_id		int 
		,payer_id		int
		,invoice_date	datetime
		,payer_type		varchar(20)
		,amount			money 
	);

create table #balance_forward_amount
	(	 contact_id		numeric(18,1) --int
		,contact_num	int
		,client_id		int 
		,payer_id		int 
		,invoice_date	datetime
		,payer_type		varchar(20)
		,amount			money 
	);


create table #facility_list 
		 (
			  fac_id int
			, cheques_payable_to varchar(max)
			, gst_hst varchar(3)
			, gst_number varchar(15)
			, show_payment_due_date bit
			, country varchar(75)
			);

create table #invoices
	(
		  fac_id						int
		, client_id						int
		, invoice_id					int
		, created_date					datetime
		, statement_invoice_number		int
		, payer_id						int
		, effective_date				datetime
		, eff_date_from					datetime
		, eff_date_to					datetime
		, generated_date				datetime
		, payment_due_date				datetime
		, statement_through_date		datetime
		, trial_flag					char(1)
		);

CREATE CLUSTERED INDEX _tmp_idx_invoices on #invoices(client_id);

create table #cfilter (receiver_id int)

create table #subclass (subclass_id int)
create table #relationship (item_id int)
			
set @vgsStepEndTime=GETDATE();
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
			
select @vStep = 10
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Validating Input Parameters  ' +  convert(varchar(26),getdate(),109)

----Validate all input parameters
if (
		@execution_user_login is null
	)
	begin
		set @vErr = 'One or more of the following input parameters is invalid... '
					+ ', @execution_user_login=' + isnull(@execution_user_login,'null/empty')
		
		RAISERROR (@vErr -- Message text
						,11 -- Severity (RAISERROR with severity 11-19 will cause execution to jump to the CATCH block)
						,1 -- State
						);
	end

set @vgsStepEndTime=GETDATE();
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

Select @vStep = 20;
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Loading temp tables ' + convert(varchar(26),getdate(),109);

--CORE-85860 performance tuning: existing logic does not check for deleted column, we're not changing this logic for now
insert into #subclass select item_id from dbo.common_code where item_description = 'Resident'
CREATE CLUSTERED INDEX _tmp_idx_subclass on #subclass(subclass_id);

insert into #relationship select item_id from dbo.common_code where item_description = 'Self'
CREATE CLUSTERED INDEX _tmp_idx_relationship on #relationship(item_id);

INSERT into #facility_list select Cast(items as int) fac_id,'', Null, Null, 0, '' from dbo.Split(@vFacId,@vdelim)

update fac set fac.gst_hst = (case when config.gst_hst = 0 then 'GST' when config.gst_hst = 1 then 'HST' else Null end), fac.gst_number = config.gst_number 
from #facility_list fac
inner join dbo.ar_configuration config with (nolock) on fac.fac_id = config.fac_id
inner join dbo.configuration_parameter parm with (nolock) on fac.fac_id = parm.fac_id and parm.name = 'show_gst' and parm.value = 'Y'

update fl set fl.cheques_payable_to = (case when sct.cheques_payable_to_option = 0 then fac.name when sct.cheques_payable_to_option = 1 
	then grp.name else sct.cheques_payable_to end), fl.show_payment_due_date = (Case when config.show_payment_due_date = 'Y' then 1 else 0 end),
	fl.country = (Case when cntry.item_id is null then '' else cntry.item_description end)
from #facility_list fl
inner join dbo.facility fac with (nolock) on fl.fac_id = fac.fac_id
inner join dbo.view_ar_statement_configuration_template_facility_mapping map with (nolock) on map.fac_id = fac.fac_id
inner join dbo.ar_statement_configuration_template sct with (nolock) on map.template_id = sct.template_id
inner join dbo.ar_configuration config with (nolock) on fl.fac_id = config.fac_id
left join dbo.facility_group_mapping fgm with (nolock) on fac.fac_id = fgm.fac_id
left join dbo.facility_group grp with (nolock) on fgm.facility_group_id = grp.facility_group_id and grp.[type_id] = 1
left join dbo.common_code cntry with (nolock) on fac.country_id = cntry.item_id
--select * from #facility_list
--select * from facility where fac_id in(80,81,82,83)
--print '@vBillingGroup = ' +@vBillingGroup
IF @vBillingGroup <> '-1' --and @vBillingGroup <> '0'
	begin
		insert INTO #billing_group_table select Cast(items as int) from dbo.Split(@vBillingGroup,@vdelim)
	end

declare @vBillingGroupIncludesMissing bit
	
select @vBillingGroupIncludesMissing = count(1) from #billing_group_table where group_id = 0
--select * from #billing_group_table
SET @vPrivateStatementsIncluded = 0
SET @vOtherStatementsIncluded = 0

INSERT into #payer_ids_table (payer_id, bill_payer_id) select Cast(items as int), Cast(items as int) from dbo.Split(@vPayerIdList,@vdelim)

if (select count(*) from #payer_ids_table where payer_id = 0) > 0
	begin
		if @vExportMode = 0
			INSERT into #payer_ids_table 
			select distinct pyr.fac_id,libpayer.payer_id, 0, Null, Null, Null, 'N'
			from dbo.ar_lib_payers libpayer with (nolock)
			inner join dbo.ar_payers pyr with (nolock) on libpayer.payer_id = pyr.payer_id
			inner join #facility_list pf on pyr.fac_id = pf.fac_id
			where libpayer.deleted='N' and 
			--(libpayer.payer_type  = 'Private' OR libpayer.payer_type  = 'Outpatient') and libpayer.bill_form = 'private' --old statment filter method.
			((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))
		else
			INSERT into #payer_ids_table 
			select distinct pyr.fac_id,libpayer.payer_id, 0, Null, Null, Null, 'N'
			from dbo.ar_lib_payers libpayer with (nolock)
			inner join dbo.ar_payers pyr with (nolock) on libpayer.payer_id = pyr.payer_id
			inner join #facility_list pf on pyr.fac_id = pf.fac_id
			where libpayer.deleted='N' and pyr.export_ps_flag = 'Y' and 
			--(libpayer.payer_type  = 'Private' OR libpayer.payer_type  = 'Outpatient') and libpayer.bill_form = 'private' --old statment filter method.
			((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))


		delete from #payer_ids_table where payer_id = 0 and bill_payer_id = 0

		SET @vPrivateStatementsIncluded = 1

	end

if (select count(*) from #payer_ids_table where bill_payer_id > 0) > 0
	SET @vOtherStatementsIncluded = 1

if (select count(*) from #payer_ids_table where bill_payer_id > 0) > 0
	begin
		SET @vOtherStatementsIncluded = 1
		if @vInvoiceIdList is null 
			begin

				insert into #payer_ids_table
				select pyr.fac_id, pyr.payer_id, pyr.payer_id, lpyr.client_id, lpyr.statement_date, lpyr.generated_date, 'N'
				from
				#payer_ids_table lpyr
				inner join dbo.ar_payers pyr on lpyr.payer_id = pyr.payer_id
				inner join #facility_list pf on pyr.fac_id = pf.fac_id
				where lpyr.bill_payer_id > 0

				delete from #payer_ids_table where fac_id is null

			end
	end

if @vInvoiceIdList is not null
	begin
		INSERT into #invoice_ids_table (invoice_id) select Cast(items as int) from dbo.Split(@vInvoiceIdList,@vdelim)

		update prntinv set prntinv.client_id = inv.client_id, prntinv.payer_id = inv.payer_id, prntinv.statement_date = inv.effective_date, prntinv.generated_date = invstat.generated_date,
			prntinv.trial_flag = inv.trial_flag
		from
		#invoice_ids_table prntinv
		inner join dbo.ar_invoice inv on prntinv.invoice_id = inv.invoice_id
		left join dbo.ar_invoice_statement invstat on inv.invoice_id = invstat.invoice_id

		update pyr set pyr.statement_date = prntinv.statement_date, pyr.generated_date = prntinv.generated_date, pyr.trial_flag = prntinv.trial_flag
		from
		#payer_ids_table pyr
		inner join #invoice_ids_table prntinv on pyr.payer_id = prntinv.payer_id

		insert into #payer_ids_table
		select pyr.fac_id, pyr.payer_id, pyr.bill_payer_id, prntinv.client_id, prntinv.statement_date, prntinv.generated_date, prntinv.trial_flag
		from
		#payer_ids_table pyr
		inner join #invoice_ids_table prntinv on pyr.payer_id = prntinv.payer_id

		delete pyr
		from
		#payer_ids_table pyr
		inner join #payer_ids_table dpyr on pyr.payer_id = dpyr.payer_id and pyr.statement_date = dpyr.statement_date and pyr.generated_date = dpyr.generated_date
		where pyr.client_id is null and dpyr.client_id is not null

		insert into #payer_ids_table
		select pyr.fac_id, pyr.payer_id, pyr.bill_payer_id, dpyr.client_id, dpyr.statement_date, dpyr.generated_date, dpyr.trial_flag
		from
		#payer_ids_table pyr
		left join #payer_ids_table dpyr on pyr.bill_payer_id = dpyr.bill_payer_id 
		where pyr.client_id is null and dpyr.client_id is not null
	
		delete from #payer_ids_table where client_id is null;

		with dups 
			as
			(select fac_id, payer_id, bill_payer_id, client_id, statement_date, generated_date, trial_flag,
				row_number() OVER ( PARTITION BY fac_id, payer_id, bill_payer_id, client_id, statement_date, generated_date, trial_flag ORDER BY fac_id, payer_id, bill_payer_id, client_id, statement_date, generated_date, trial_flag ) AS rwnum
				from #payer_ids_table
			)

		delete from dups where rwnum > 1
		
		IF (select COUNT(1) from #invoice_ids_table where trial_flag = 'Y') > 0
		begin
			set @vIsTrial=1
			set @vShowAging = 0 --aging won't include the trial bill transactions and will appear off
		end
	end

if isnull(@vReceiverIds, '-1') <> '-1' 
	insert into #cfilter select Cast(items as int) from dbo.Split(@vReceiverIds,@vdelim)

if @debug_me = 'Y' select * from #receiver_ids_table
if @debug_me = 'Y' select * from #payer_ids_table

--gather export variables

if @vExportMode = 1
	begin

		--select @vTemplateId = facmap.template_id from view_ar_statement_configuration_template_facility_mapping facmap where fac_id = @vFacId
		set @vTemplateId = (select top 1 facmap.template_id 
			from view_ar_statement_configuration_template_facility_mapping facmap 
			inner join #facility_list fl on facmap.fac_id = fl.fac_id order by facmap.fac_id)

		

		select 
			 @vDisplayAdmitDate = cfg.display_admit_date_flag,
			 @vDisplayDischargeDate = cfg.display_discharge_date_flag,
			 @vTransactionOrder = cfg.sort_option,
			 @vUseEffectiveDateAsBillDate = cfg.statement_date_option,
			 @vCombineChildren = cfg.transaction_display_option,
			 @vShowResults = cfg.ancillary_display_option,
			 @vCashReceiptComments = cfg.comment_from_cash,
			 @vAncillaryComments = cfg.comment_from_ancillary,
			 @vAdjustmentComments = cfg.comment_from_adjustments,
			 @vShowLocation = cfg.display_location_flag,
			 @vShowResidentNumber = cfg.display_resident_number_flag,
			 @vShowInvoiceNumber = cfg.display_invoice_number_flag,
			 @vShowTransactionWarningMessage = cfg.display_transaction_warning_message,
			 @vTransactionWarningMessage = cfg.transaction_warning_message,
			 @vDisplayUnitAndAmountFlag = cfg.display_unit_and_amount_flag,
			 @vPaymentInstructions = cfg.payment_instructions,
			 @vIncludePrefixFacilityCode = cfg.prefix_facility_code_to_account_number_flag,
			 @vAccountNumberLabel = cfg.account_number_label,
			 @vAccountNumberSource = cfg.account_number_source
		from dbo.ar_statement_configuration_template cfg with (nolock) where template_id = @vTemplateId
--select * from ar_statement_configuration_template
		--set terms
		if @vIsEmc = 1
			Select @vTermClient = term_client
				, @vTermFacility = term_facility
				, @vTermAdmission = term_admission
				, @vTermDischarge = term_discharge
				, @vTermRoom = term_room
			from [dbo].fn_prp_get_terminology(@vFacId,0)
			where fac_id = -1
		else
			Select @vTermClient = term_client
				, @vTermFacility = term_facility
				, @vTermAdmission = term_admission
				, @vTermDischarge = term_discharge
				, @vTermRoom = term_room
			from [dbo].fn_prp_get_terminology(@vFacId,0)
			where fac_id <> -1

	end

--select @vShowPaymentDueDate = cfg.display_payment_due_date from dbo.ar_statement_configuration_template cfg with (nolock) where template_id = @vTemplateId

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

Select @vStep = 30;
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Gathering invoices ' + convert(varchar(26),getdate(),109);

if @vLastStatement = 1 and @vInvoiceIdList is null
	begin

		if @vIsContact = 1
	
			select @vStatementStartDate = max(inv.effective_date)	
			from dbo.ar_invoice inv with (nolock)
				--inner join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id
				inner join #facility_list fl on inv.fac_id = fl.fac_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and inv.trial_flag = 'N' and inv.deleted = 'N' and payer.bill_payer_id = 0
				inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id and cl.fac_id = inv.fac_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id 
				inner join dbo.contact_relationship conr with (nolock) on conr.reference_id = mpi.mpi_id and conr.deleted='N'
				left join #cfilter confilter on conr.contact_id = confilter.receiver_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id	
				where (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
				and (@vReceiverIds = '-1' or confilter.receiver_id is not null)
				and (@vBillingGroup = '-1' or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') 
					or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) )) or @vBillingGroup is null)

		else

			select @vStatementStartDate = max(inv.effective_date)	
			from dbo.ar_invoice inv with (nolock)
				inner join #facility_list fl on inv.fac_id = fl.fac_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and inv.trial_flag = 'N' and inv.deleted = 'N'
				inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id and cl.fac_id = inv.fac_id 
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id 
				left join #cfilter clfilter on inv.client_id = clfilter.receiver_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id	
				where (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
				and (@vReceiverIds = '-1' or clfilter.receiver_id is not null)
				and (@vBillingGroup = '-1' or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') 
					or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) )) or @vBillingGroup is null)

		SET @vStatementStartDate = convert(datetime, convert(varchar(10),@vStatementStartDate , 101) + ' 00:00:00');
		SET @vStatementEndDate = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@vStatementStartDate)+1,0));
			
		if @debug_me='Y' print '@vStatementStartDate  ' +  convert(varchar(26),@vStatementStartDate,109)
		if @debug_me='Y' print '@vStatementEndDate  ' +  convert(varchar(26),@vStatementEndDate,109)
	
	end

if @vInvoiceIdList is null
	begin
		insert into #invoices
		select 
			  inv.fac_id
			, inv.client_id
			, inv.invoice_id
			, inv.created_date
			, inv.statement_invoice_number
			, inv.payer_id
			, inv.effective_date
			, inv.eff_date_from
			, inv.eff_date_to
			, invstat.generated_date
			, invstat.payment_due_date
			, invstat.statement_through_date
			, inv.trial_flag
		from dbo.ar_invoice inv with (nolock) 
			inner join #facility_list fac on inv.fac_id = fac.fac_id and inv.trial_flag = 'N' and inv.deleted = 'N'
			inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and inv.effective_date >= @vStatementStartDate and inv.effective_date <= @vStatementEndDate and inv.fac_id = payer.fac_id
			left join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id
		where (@vExportMode = 0 OR inv.date_exported_ps IS NULL OR @vExportResendFlag = 1 )
	end

if @vInvoiceIdList is not null and @vOtherStatementsIncluded = 1
	begin
		insert into #invoices
		select 
			  inv.fac_id
			, inv.client_id
			, inv.invoice_id
			, inv.created_date
			, inv.statement_invoice_number
			, inv.payer_id
			, inv.effective_date
			, inv.eff_date_from
			, inv.eff_date_to
			, invstat.generated_date
			, invstat.payment_due_date
			, invstat.statement_through_date
			, inv.trial_flag
		from dbo.ar_invoice inv with (nolock)
			inner join #facility_list fac on inv.fac_id = fac.fac_id 
			inner join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id --and pyrs.generated_date = invstat.generated_Date
			where exists(select 1 from #payer_ids_table pyrs where pyrs.payer_id = inv.payer_id and pyrs.bill_payer_id <> 0 and 
				inv.deleted='N' and pyrs.statement_date = inv.effective_date)

		set @vRowCount = isnull(@vRowCount,0) + @@rowcount

		if @vRowCount = 0
			set @vOtherStatementsIncluded = 0

	end

if @vInvoiceIdList is not null and @vPrivateStatementsIncluded = 1
	begin
		insert into #invoices
		select 
			  inv.fac_id
			, inv.client_id
			, inv.invoice_id
			, inv.created_date
			, inv.statement_invoice_number
			, inv.payer_id
			, inv.effective_date
			, inv.eff_date_from
			, inv.eff_date_to
			, invstat.generated_date
			, invstat.payment_due_date
			, invstat.statement_through_date
			, inv.trial_flag
		from dbo.ar_invoice inv with (nolock)
			inner join #facility_list fac on inv.fac_id = fac.fac_id 
			inner join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id --and pyrs.generated_date = invstat.generated_Date
			where exists(select 1 from #payer_ids_table pyrs where pyrs.payer_id = inv.payer_id and pyrs.bill_payer_id = 0 and 
				inv.deleted='N' and pyrs.statement_date = inv.effective_date)
	end

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

If @vIsEmc = 1
	begin

		Select @vStep = 40;
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Getting facility group info ' + convert(varchar(26),getdate(),109);

		insert into #facilty_group_info
		select 
			  grp.facility_group_id
			, f.fac_id
			, grp.facility_group_code as remit_to_group_number
			, grp.name as remit_to_name
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.address1 
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.address1 
					else grp.address1 end as remit_to_address1 
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.address2
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.address2  
					else grp.address2 end as remit_to_address2
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.address3 
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.address3
					else grp.address3 end as remit_to_address3 
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.city 
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.city   
					else grp.city end as remit_to_city
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then cntygrp.name 
					else cntyadr.name end as remit_to_county
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.prov_state 
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.prov_state   
					else grp.prov_state end as remit_to_prov_state
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then cntrygrp.item_description 
					else cntryadr.item_description end as remit_to_country
			, Case when isnull(grp.use_facility_group_address,0) <> 1 then adr.postal_zip_code
--						when fgm.fac_id is not null and grp.remit_to_address_id is not null then adr.postal_zip_code    
					else grp.postal_zip_code end as remit_to_postal_zip_code
			, Case when grp.use_facility_group_address <> 1 then grp.telephone2 
					else grp.telephone end as remit_to_phone
			, grp.facility_group_code as facility_group_number
			, grp.name as facility_group_name
			, grp.address1 as facility_group_address1
			, grp.address2 as facility_group_address2
			, grp.address3 as facility_group_address3
			, grp.city as facility_group_city
			, cntyadr.name as facility_group_county
			, grp.prov_state as facility_group_prov_state
			, cntrygrp.item_description as facility_group_country
			, grp.postal_zip_code as facility_group_postal_zip_code
			, grp.telephone as facility_group_phone
			, grp.fax as facility_group_fax

		from #facility_list fl
			inner join facility f with (nolock) on fl.fac_id = f.fac_id
			inner join dbo.facility_group_mapping fgm with (nolock) on f.fac_id = fgm.fac_id
			inner join dbo.facility_group grp with (nolock) on fgm.facility_group_id = grp.facility_group_id and grp.[type_id] = 1
			left join dbo.address adr with (nolock) on grp.remit_to_address_id = adr.address_id
			left join dbo.county cntygrp with (nolock) on adr.county_id = cntygrp.county_id
			left join dbo.county cntyadr with (nolock) on grp.county_id = cntyadr.county_id
			left join dbo.common_code cntrygrp with (nolock) on grp.country_id = cntrygrp.item_id
			left join dbo.common_code cntryadr with (nolock) on adr.country_id = cntryadr.item_id

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

	end

if @debug_me='Y' select * from #facilty_group_info
if @debug_me='Y' select * from #facility_list

if @vInvoiceIdList is not null
	begin
	If @vPrivateStatementsIncluded = 1 -- process private statements as they are included
		begin	
			-----getting the list of contacts
			select @vStep = 70
			set @vgsStepStartTime = GETDATE()
			if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering contacts clients and their invoices ' + convert(varchar(26),getdate(),109)
			--*********************************************************************************************************

			insert into #receiver_ids_table
			select distinct
				  conr.contact_id
				, conr.consolidate_statements
			from #invoice_ids_table prntinv
				--inner join dbo.ar_invoice inv with (nolock) on prntinv.invoice_id = inv.invoice_id
				inner join #invoices inv with (nolock) on prntinv.invoice_id = inv.invoice_id
				inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id 
				inner join  #facility_list fl on cl.fac_id = fl.fac_id 
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0
				inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
				inner join dbo.contact_type_audit cta with (nolock) on mpi.mpi_id = cta.reference_id  --and (cta.contact_id = @vReceiverIds or @vReceiverIds = -1) 
					and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id
					and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
				inner join dbo.contact_relationship conr with (nolock) on conr.contact_id = cta.contact_id and conr.deleted='N' 
					and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id --and cta.subclass_id = @vSubClassResidentID --9176
				inner join #subclass subc on cta.subclass_id = subc.subclass_id 
				--inner join dbo.common_code cc with (nolock) on cta.subclass_id = cc.item_id and cc.item_description = 'Resident'
				inner join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
					and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
				left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
					and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
				left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
					and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
				left join dbo.county cnty with (nolock) on cadd.county_id = cnty.county_id
				left join common_code country with (nolock) on cadd.country_id = country.item_id
				left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
					and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)

			--resident statemments
			insert into #contact_clients
			select distinct
					fl.fac_id
				, conr.contact_id
				, conr.consolidate_statements as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, 0 as payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, hfac.name as remit_to_name
				, hfac.address1 as remit_to_address1
				, hfac.address2 as remit_to_address2
				, '' as remit_to_address3
				, hfac.city as remit_to_city
				, faccnty.name as remit_to_county
				, hfac.prov as remit_to_prov_state
				, fl.country
				, hfac.pc as remit_to_postal_zip_code
				, hfac.tel as remit_to_phone
				, title.item_description as contact_title
				, conta.first_name as contact_first_name
				, conta.last_name as contact_last_name
				, cadd.address1 as contact_address1
				, cadd.address2 as contact_address2
				, cadd.address3 as contact_address3
				, cadd.city as contact_city
				, cnty.name as contact_county
				, cadd.prov_state as contact_prov_state
				, cadd.postal_zip_code as contact_postal_zip_code
				, country.item_description as contact_country
				, null as contact_email
				, conr.contact_id as account_number
				, convert(varchar(10),isnull(inv.generated_date,'1/1/1900'), 101) as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, Null as amount_due
				, Null as eft_message
				, Case when @vIncludeResidentMessage = 1 then clcon.invoice_message else Null end as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, '' as private_bills_to				
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, Case when relatcc.item_id is not null then 1 else 0 end as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #receiver_ids_table confilter 
				inner join dbo.contact_relationship conr with (nolock) on confilter.contact_id = conr.contact_id and conr.deleted='N' 
				inner join dbo.mpi with (nolock) on conr.reference_id = mpi.mpi_id
					--and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id 
				inner join dbo.clients cl with (nolock) on mpi.mpi_id = cl.mpi_id
				inner join #facility_list fl on cl.fac_id = fl.fac_id
				--inner join dbo.ar_invoice inv with (nolock) on cl.client_id = inv.client_id and  inv.deleted = 'N'
				inner join #invoices inv with (nolock) on cl.client_id = inv.client_id
				--inner join dbo.ar_payers payr with (nolock) on fl.fac_id = payr.fac_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0 and inv.effective_date = payer.statement_date --and inv.trial_flag = payer.trial_flag and inv.client_id = payer.client_id
				--inner join dbo.ar_payers payr with (nolock) on payer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
				inner join dbo.contact_type_audit cta with (nolock) on  conr.contact_id = cta.contact_id and conr.reference_id = cta.reference_id 
					and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id and conr.subclass_id = cta.subclass_id --and cta.subclass_id = @vSubClassResidentID --9176
					and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
				inner join #subclass subc on cta.subclass_id = subc.subclass_id
				--inner join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id and 
				--	convert(varchar(10),payer.generated_date, 101) = convert(varchar(10),invstat.generated_date, 101) 
				inner join dbo.ar_lib_payers libpayer with (nolock) on payer.payer_id = libpayer.payer_id 
				left join #relationship relatcc on conr.relationship_id = relatcc.item_id
				inner join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
					and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
				left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
					and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
				left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
					and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
				left join dbo.county cnty with (nolock) on cadd.county_id = cnty.county_id
				left join common_code country with (nolock) on cadd.country_id = country.item_id
				left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
					and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
				left join #invoice_ids_table prntinv on cl.client_id = prntinv.client_id
			where (@vIsTrial = 1 or inv.trial_flag = 'N')
				and conr.consolidate_statements = confilter.consolidate_statement and 
				((confilter.consolidate_statement = 0 and prntinv.client_id is not null) or (confilter.consolidate_statement = 1))						

			update con set con.private_bills_to	= payr.private_bills_to
			from #contact_clients con
			inner join dbo.ar_invoice inv with (nolock) on con.invoice_id = inv.invoice_id
			inner join dbo.ar_payers payr with (nolock) on inv.fac_id = payr.fac_id and inv.payer_id = payr.payer_id				

			insert into #contact_clients --residents without contacts
			select distinct
					cl.fac_id
				, 0 as contact_id
				, 0 as consolidate_statement
				, cl.client_id 
				, inv.invoice_id
				, inv.statement_invoice_number
				, 0 as payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, hfac.name as remit_to_name
				, hfac.address1 as remit_to_address1
				, hfac.address2 as remit_to_address2
				, '' as remit_to_address3
				, hfac.city as remit_to_city
				, faccnty.name as remit_to_county
				, hfac.prov as remit_to_prov_state
				, fl.country
				, hfac.pc as remit_to_postal_zip_code
				, hfac.tel as remit_to_phone
				, Null as contact_title
				, mpi.first_name as contact_first_name
				, mpi.last_name as contact_last_name
				, Null as contact_address1
				, Null as contact_address2
				, Null as contact_address3
				, Null as contact_city
				, Null as contact_county
				, Null as contact_prov_state
				, Null as contact_postal_zip_code
				, Null contact_country
				, Null as contact_email
				, 0 as account_number
				, convert(varchar(10),isnull(inv.generated_date,'1/1/1900'), 101) as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, Null as amount_due
				, Null as eft_message
				, Case when @vIncludeResidentMessage = 1 then clcon.invoice_message else Null end as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, cl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due
				, payr.private_bills_to as private_bills_to			
				, null as amount_past_due_yn	
				, null as term_used_for_client				
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message	
				, 0 as  contact_num
				, Dense_rank() over (ORDER BY mpi.last_name, mpi.first_name, cl.client_id, inv.effective_date) non_consolidated_contact_num
				--, 1 as non_consolidated_contact_num			
				, '' as client_list
				, 1 as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #invoice_ids_table prntinv
				inner join dbo.clients cl with (nolock) on prntinv.client_id = cl.client_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				--inner join dbo.ar_invoice inv with (nolock) on prntinv.client_id = inv.client_id and inv.deleted = 'N' --and prntinv.trial_flag = inv.trial_flag
				--and inv.effective_date = prntinv.statement_date
				inner join #invoices inv with (nolock) on prntinv.client_id = inv.client_id --and inv.deleted = 'N' --and prntinv.trial_flag = inv.trial_flag
					and inv.effective_date = prntinv.statement_date
				inner join #facility_list fl on cl.fac_id = fl.fac_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0 and inv.client_id = payer.client_id										
				--inner join dbo.ar_invoice_statement invstat with (nolock) on inv.invoice_id = invstat.invoice_id and 
				--	convert(varchar(10),prntinv.generated_date, 101) = convert(varchar(10),invstat.generated_date, 101)
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = cl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = cl.fac_id
					and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				inner join dbo.ar_configuration config with (nolock) on cl.fac_id  = config.fac_id
				left join #contact_clients concl on inv.invoice_id = concl.invoice_id
				--left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = cl.fac_id and grp.deleted='N'
				--left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on cl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
			where concl.invoice_id is null and (@vIsTrial = 1 or inv.trial_flag = 'N')	

			insert into #contact_clients --we need to check for other multiple contacts that may not have all appropriate invoices assigned
			select distinct
					mycon.fac_id
				, mycon.contact_id
				, mycon.consolidate_statement
				, myadd.client_id 
				, myadd.invoice_id
				, myadd.statement_invoice_number
				, 0 as payer_id	
				, myadd.payer 
				, myadd.inv_effective_date
				, myadd.inv_eff_date_from
				, myadd.inv_eff_date_to
				, mycon.remit_to_name
				, mycon.remit_to_address1
				, mycon.remit_to_address2
				, mycon.remit_to_address3
				, mycon.remit_to_city
				, mycon.remit_to_county
				, mycon.remit_to_prov_state
				, mycon.remit_to_country
				, mycon.remit_to_postal_zip_code
				, mycon.remit_to_phone
				, mycon.contact_title
				, mycon.contact_first_name
				, mycon.contact_last_name
				, mycon.contact_address1
				, mycon.contact_address2
				, mycon.contact_address3
				, mycon.contact_city
				, mycon.contact_county
				, mycon.contact_prov_state
				, mycon.contact_postal_zip_code
				, mycon.contact_country
				, mycon.contact_email
				, mycon.account_number
				, myadd.generated_date
				, myadd.bill_date
				, myadd.aging_date
				, myadd.payment_due_date
				, myadd.pre_consolidated_payment_due_date
				, myadd.statement_through_date	
				, myadd.amount_due
				, myadd.eft_message
				, myadd.client_message
				, myadd.group_message
				, myadd.global_message
				, myadd.previous_balance_due
				, myadd.payments
				, myadd.summary_fac_id
				, myadd.summary_charge_center
				, myadd.summary_charge_center_code
				, myadd.summary_charge_client_first_name
				, myadd.summary_charge_client_last_name
				, myadd.summary_charge_client_name
				, myadd.summary_charge_client_number
				, myadd.summary_charge_client_location
				, myadd.summary_charge_client_dob
				, myadd.summary_charge_client_admission
				, myadd.summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due
				, myadd.private_bills_to				
				, null as amount_past_due_yn	
				, null as term_used_for_client				
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, myadd.client_unit	
				, myadd.unit_order					
				, myadd.client_room	
				, myadd.room_order					
				, myadd.client_bed
				, myadd.bed_order
				, null as patient_specific_message	
				, mycon.contact_num
				, mycon.non_consolidated_contact_num		
				, '' as client_list
				, myadd.main_location
				, myadd.consolidated_location_order	
				, myadd.sort_location
			from #contact_clients mycon
				inner join (SELECT b.contact_id,a.client_id, a.invoice_id, a.bill_date
					FROM(
						SELECT DISTINCT client_id , invoice_id, bill_date FROM #contact_clients where contact_id > 0) A
						INNER JOIN (
						SELECT DISTINCT contact_id, client_id FROM #contact_clients where contact_id > 0) B
						ON a.client_id = b.client_id 
						EXCEPT
						SELECT contact_id,client_id, invoice_id, bill_date FROM #contact_clients where contact_id > 0
						) toget
						on mycon.contact_id = toget.contact_id and mycon.client_id = toget.client_id and mycon.bill_date = toget.bill_date
				inner join #contact_clients myadd on toget.invoice_id = myadd.invoice_id

		end

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

		------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		-- other payer loading here
		if @vOtherStatementsIncluded = 1

		begin

		-----getting the list of contacts
		select @vStep = 80
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering other payer invoices ' + convert(varchar(26),getdate(),109)

		insert into #contact_clients
			select distinct
					fl.fac_id
				, Case when payraud.private_bills_to = 'G'  then  -1 * isnull(CAST(conta.contact_id AS NUMERIC(18,1)),3.1) else -2.1 end  as contact_id  --AMRO
				, 0 as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, libpayer.payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
				, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
				, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
				, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
				, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
				, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
				, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
				, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
				, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
				, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
				, Case when payraud.private_bills_to = 'G' then title.item_description else '' end as contact_title
				, Case when payraud.private_bills_to = 'G' and isnull(conta.first_name,'') <> '' then conta.first_name
					when payraud.private_bills_to = 'G' and isnull(conta.first_name,'') = '' then 'No Data Found'
					when payraud.private_bills_to <> 'G' and isnull(insco.description,'') = '' then 'No Data Found' else insco.description end as contact_first_name 
				, Case when payraud.private_bills_to = 'G' then conta.last_name else '' end as contact_last_name
				, Case when payraud.private_bills_to = 'G' and isnull(cadd.address1,'') = '' and  isnull(cadd.address2,'') = '' then 'No Address Found' 
					when payraud.private_bills_to = 'G' and isnull(cadd.address1,'') <> '' then cadd.address1		
					when payraud.private_bills_to <> 'G' and isnull(inscoadd.address1,'') = '' and isnull(inscoadd.address2,'') = '' then 'No Address Found' 
					else inscoadd.address1 end as contact_address1
				, Case when payraud.private_bills_to = 'G' then cadd.address2 else inscoadd.address2 end as contact_address2
				, Case when payraud.private_bills_to = 'G' then cadd.address3 else inscoadd.address3 end as contact_address3
				, Case when payraud.private_bills_to = 'G' then cadd.city else inscoadd.city end as contact_city
				, Case when payraud.private_bills_to = 'G' then ccnty.name else cnty.name end as contact_county
				, Case when payraud.private_bills_to = 'G' then cadd.prov_state else inscoadd.prov_state end as contact_prov_state
				, Case when payraud.private_bills_to = 'G' then cadd.postal_zip_code else inscoadd.postal_zip_code end as contact_postal_zip_code
				, Case when payraud.private_bills_to = 'G' then ccountry.item_description else country.item_description end as contact_country
				, null as contact_email
				, Case when payraud.private_bills_to = 'G' then conr.contact_id else '' end as account_number
				, '1/1/1900' as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, Null as amount_due
				, Null as eft_message
				, '' as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, payr.private_bills_to as private_bills_to				
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, 1 as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			--select flinv.*
			from #invoice_ids_table flinv
				inner join #invoices inv with (nolock) on flinv.invoice_id = inv.invoice_id
				inner join #facility_list fl on inv.fac_id = fl.fac_id
				inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id > 0
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
				and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
				left join dbo.ar_client_payer_info policy with (nolock) on cl.client_id = policy.client_id and inv.payer_id = policy.payer_id
				left join dbo.client_ids clid with (nolock) on inv.client_id = clid.client_id and policy.policy_no_id = clid.id_type_id
				left join dbo.ar_payer_addresses_audit payradd with (nolock) on payraud.fac_id = payradd.fac_id and payraud.payer_id = payradd.payer_id and payraud.default_address_id = payradd.address_id and
					payradd.effective_date  <= inv.created_date AND (payradd.ineffective_date  >= inv.created_date or payradd.ineffective_date is null)
				left join dbo.ar_lib_insurance_companies_audit insco with (nolock) on payradd.insurance_id = insco.insurance_id and
					insco.effective_date  <= inv.created_date AND (insco.ineffective_date  >= inv.created_date or insco.ineffective_date is null)
				left join dbo.ar_insurance_addresses_audit inscoadd with (nolock) on payradd.address_id = inscoadd.address_id and
					inscoadd.effective_date  <= inv.created_date AND (inscoadd.ineffective_date  >= inv.created_date or inscoadd.ineffective_date is null)
				left join dbo.ar_provider_numbers provnum with (nolock) on inscoadd.address_id = provnum.address_id and fl.fac_id = provnum.fac_id
				left join dbo.county cnty with (nolock) on inscoadd.county_id = cnty.county_id
				left join common_code country with (nolock) on inscoadd.country_id = country.item_id
				left join #client_ids_table clfilter on inv.client_id = clfilter.client_id
				left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
						left join dbo.contact_type_audit cta with (nolock) on mpi.mpi_id = cta.reference_id  --and (cta.contact_id = @vReceiverIds or @vReceiverIds = -1) 
					and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id
					and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
				left join dbo.contact_relationship conr with (nolock) on conr.contact_id = cta.contact_id and conr.deleted='N' 
					and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id --and cta.subclass_id = @vSubClassResidentID 
				left join #subclass subc on cta.subclass_id = subc.subclass_id
				left join #relationship relatcc on conr.relationship_id = relatcc.item_id
				left join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
					and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
				left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
					and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
				left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
					and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
				left join dbo.county ccnty with (nolock) on cadd.county_id = cnty.county_id
				left join common_code ccountry with (nolock) on cadd.country_id = ccountry.item_id
				left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
					and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)		
			where payraud.private_bills_to <> 'I'

		set @vRowCount = @@rowcount

		insert into #contact_clients
			select distinct
					fl.fac_id
				, -2.1  as contact_id
				, 0 as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, libpayer.payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
				, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
				, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
				, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
				, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
				, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
				, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
				, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
				, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
				, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
				, '' as contact_title
				, Case when isnull(insco.description,'') = '' then libpayer.description else insco.description end as contact_first_name 
				, '' as contact_last_name
				, Case when isnull(inscoadd.address1,'') = '' and isnull(inscoadd.address2,'') = '' then 'No Address Found' 
					else inscoadd.address1 end as contact_address1
				, inscoadd.address2 as contact_address2
				, inscoadd.address3 as contact_address3
				, inscoadd.city as contact_city
				, cnty.name as contact_county
				, inscoadd.prov_state as contact_prov_state
				, inscoadd.postal_zip_code as contact_postal_zip_code
				, country.item_description as contact_country
				, null as contact_email
				, '' as account_number
				, '1/1/1900' as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, null as amount_due
				, Null as eft_message
				, '' as client_message
				, Null as group_message
				, null as global_message
				, null as previous_balance_due
				, null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, payr.private_bills_to as private_bills_to				
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, 1 as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #invoice_ids_table flinv
				inner join #invoices inv with (nolock) on flinv.invoice_id = inv.invoice_id
				inner join #facility_list fl on inv.fac_id = fl.fac_id
				inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id > 0
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
				and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				left join dbo.ar_client_payer_info cpiaud with (nolock) on cl.client_id = cpiaud.client_id and payraud.payer_id = cpiaud.payer_id and payraud.fac_id = cpiaud.fac_id and cpiaud.deleted = 'N'
					and cpiaud.effective_date  <= inv.effective_date AND (cpiaud.ineffective_date  >= inv.effective_date or cpiaud.ineffective_date is null) 
				left join dbo.ar_insurance_addresses_audit inscoadd with (nolock) on cpiaud.payer_address_id = inscoadd.address_id and
					inscoadd.effective_date  <= inv.created_date AND (inscoadd.ineffective_date  >= inv.created_date or inscoadd.ineffective_date is null)
				left join dbo.ar_lib_insurance_companies_audit insco with (nolock) on inscoadd.insurance_id = insco.insurance_id and
					insco.effective_date  <= inv.created_date AND (insco.ineffective_date  >= inv.created_date or insco.ineffective_date is null)
				left join dbo.ar_provider_numbers provnum with (nolock) on inscoadd.address_id = provnum.address_id and fl.fac_id = provnum.fac_id
				left join dbo.county cnty with (nolock) on inscoadd.county_id = cnty.county_id
				left join common_code country with (nolock) on inscoadd.country_id = country.item_id
				left join #client_ids_table clfilter on inv.client_id = clfilter.client_id
				left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id							
			where payraud.private_bills_to = 'I'		

		set @vRowCount = isnull(@vRowCount,0) + @@rowcount

		if @vRowCount = 0
			set @vOtherStatementsIncluded = 0

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

		end

	end

else
	begin
		-----getting the list of contacts
		select @vStep = 70
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering contacts clients and their invoices ' + convert(varchar(26),getdate(),109)
		--*********************************************************************************************************
		If @vPrivateStatementsIncluded = 1 -- process private statements as they are included
		begin	
			if @vIsContact = 0 and @vReceiverIds <> '-1' --get contacts for selected residents.  All clients will be treated as all contacts
				begin
					insert into #receiver_ids_table
					select distinct
						  conr.contact_id
						, conr.consolidate_statements
					from #client_ids_table clfilter
						inner join dbo.clients cl with (nolock) on clfilter.client_id = cl.client_id 
						inner join  #facility_list fl on cl.fac_id = fl.fac_id 
						inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
						inner join #invoices inv with (nolock) on cl.client_id = inv.client_id
						inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0
						inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
						inner join dbo.contact_type_audit cta with (nolock) on mpi.mpi_id = cta.reference_id
							and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id
							and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
						inner join dbo.contact_relationship conr with (nolock) on conr.contact_id = cta.contact_id and conr.deleted='N' 
							and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id
						inner join #subclass subc on cta.subclass_id = subc.subclass_id
						inner join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
							and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
						left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
							and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
						left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
							and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
						left join dbo.county cnty with (nolock) on cadd.county_id = cnty.county_id
						left join common_code country with (nolock) on cadd.country_id = country.item_id
						left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
							and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)
						left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
						left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
						left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
						left join #billing_group_table bg on grp.group_id = bg.group_id
						left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
						inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
							and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
						left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id					
					where (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
					and (@vBillingGroup = '-1' --or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
					or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) ))
					or @vBillingGroup is null)

				end

			--resident statemments
			insert into #contact_clients
			select distinct
					fl.fac_id
				, conr.contact_id
				, conr.consolidate_statements as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, 0 as payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
				, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
				, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
				, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
				, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
				, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
				, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
				, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
				, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
				, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
				, title.item_description as contact_title
				, conta.first_name as contact_first_name
				, conta.last_name as contact_last_name
				, cadd.address1 as contact_address1
				, cadd.address2 as contact_address2
				, cadd.address3 as contact_address3
				, cadd.city as contact_city
				, cnty.name as contact_county
				, cadd.prov_state as contact_prov_state
				, cadd.postal_zip_code as contact_postal_zip_code
				, country.item_description as contact_country
				, null as contact_email
				, conr.contact_id as account_number
				, convert(varchar(10),isnull(inv.generated_date,'1/1/1900'), 101) as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, Null as amount_due
				, Null as eft_message
				, Case when @vIncludeResidentMessage = 1 then clcon.invoice_message else Null end as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, payr.private_bills_to as private_bills_to					
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, Case when relatcc.item_id is not null then 1 else 0 end as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #facility_list fl
				inner join dbo.clients cl with (nolock) on fl.fac_id = cl.fac_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #invoices inv with (nolock) on cl.client_id = inv.client_id and fl.fac_id = inv.fac_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
					and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
				inner join dbo.contact_type_audit cta with (nolock) on mpi.mpi_id = cta.reference_id 
					and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id
					and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
				left join #receiver_ids_table confilter on cta.contact_id = confilter.contact_id
				inner join dbo.contact_relationship conr with (nolock) on conr.contact_id = cta.contact_id and conr.deleted='N' 
					and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id 
				inner join #subclass subc on cta.subclass_id = subc.subclass_id
				left join #relationship relatcc on conr.relationship_id = relatcc.item_id				
				inner join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
					and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
				left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
					and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
				left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
					and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
				left join dbo.county cnty with (nolock) on cadd.county_id = cnty.county_id
				left join common_code country with (nolock) on cadd.country_id = country.item_id
				left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
					and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)
				left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
				left join #client_ids_table clids on cl.client_id = clids.client_id						
			where 
			(@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
			and (@vReceiverIds = '-1' or confilter.contact_id is not null)
			and ((@vReceiverIds <> '-1' and @vIsContact = 0 and conr.consolidate_statements = confilter.consolidate_statement and 
				((confilter.consolidate_statement = 0 and clids.client_id is not null) or (confilter.consolidate_statement = 1))) or @vReceiverIds = '-1' or @vIsContact = 1)
			and (@vBillingGroup = '-1' --or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
			or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) ))
			or @vBillingGroup is null)

			if @vReceiverIds = '-1'
				begin
					insert into #contact_clients --residents without contacts
					select distinct
							fl.fac_id
						, 0 as contact_id
						, 0 as consolidate_statement
						, cl.client_id 
						, inv.invoice_id
						, inv.statement_invoice_number
						, 0 as payer_id	
						, libpayer.description as payer 
						, inv.effective_date
						, inv.eff_date_from
						, inv.eff_date_to
						, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
						, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
						, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
						, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
						, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
						, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
						, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
						, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
						, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
						, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
						, Null as contact_title
						, mpi.first_name as contact_first_name
						, mpi.last_name as contact_last_name
						, Null as contact_address1
						, Null as contact_address2
						, Null as contact_address3
						, Null as contact_city
						, Null as contact_county
						, Null as contact_prov_state
						, Null as contact_postal_zip_code
						, Null contact_country
						, Null as contact_email
						, 0 as account_number
						, convert(varchar(10),isnull(inv.generated_date,'1/1/1900'), 101) as generated_date
						, convert(varchar(10),inv.effective_date, 101) as bill_date
						, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
						, inv.payment_due_date
						, Null as pre_consolidated_payment_due_date
						, inv.statement_through_date	
						, Null as amount_due
						, Null as eft_message
						, Case when @vIncludeResidentMessage = 1 then clcon.invoice_message else Null end as client_message
						, null as group_message
						, null as global_message
						, null as previous_balance_due
						, null as payments
						, fl.fac_id as summary_fac_id
						, hfac.name as summary_charge_center
						, hfac.facility_code as summary_charge_center_code
						, mpi.first_name as summary_charge_client_first_name
						, mpi.last_name as summary_charge_client_last_name
						, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
						, cl.client_id_number as summary_charge_client_number
						, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
							when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
							else '' end)) as summary_charge_client_location
						, mpi.date_of_birth as summary_charge_client_dob
						, cl.admission_date as summary_charge_client_admission
						, cl.discharge_date as summary_charge_client_discharge
						, 0.0 as summary_current_balance
						, 0.0 as summary_previous_balance_due
						, 0.0 as summary_payments
						, 0.0 as summary_late_fees
						, 0.0 as summary_client_balance_due
						, payr.private_bills_to as private_bills_to				
						, null as amount_past_due_yn	
						, null as term_used_for_client				
						, null as client_admit_date					
						, null as client_discharge_date				
						, null as client_mrn						
						, null as client_first_name					
						, null as client_last_name					
						, unit.unit_desc as client_unit
						, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
								when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
						, rm.room_desc as client_room
						, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
								when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
						, bd.bed_desc as client_bed
						, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
								when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
						, null as patient_specific_message	
						, 0 as  contact_num
						, Dense_rank() over (ORDER BY mpi.last_name, mpi.first_name, cl.client_id, inv.effective_date) non_consolidated_contact_num
						--, 0 as non_consolidated_contact_num			
						, '' as client_list
						, 1 as main_location
						, 0 as consolidated_location_order
						, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
							when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
							else '' end)) as sort_location
					from #facility_list fl
						inner join #invoices inv with (nolock) on fl.fac_id = inv.fac_id
						inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0											
						inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id
						inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id 
						inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
							and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
						inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
						inner join dbo.clients cl with (nolock) on inv.client_id = cl.client_id
						inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
						left join #contact_clients concl on inv.invoice_id = concl.invoice_id
						left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
						left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
						left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
						left join #billing_group_table bg on grp.group_id = bg.group_id
						left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
						left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
						left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
						left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
						left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
						inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
							and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)
						left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id	
					where --payraud.private_bills_to = 'G' and 
					concl.invoice_id is null and (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
					and (@vBillingGroup = '-1' or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
					or (@vBillingGroup <> '-1' and clgrp.group_id is not null and bg.group_id is not null and isnull(@vBillingGroupIncludesMissing,0) = 0 )
					or @vBillingGroup is null)

				end

			if @vReceiverIds <> '-1'  and  @vIsContact = 0
				begin
					insert into #contact_clients --residents without contacts
					select distinct
							fl.fac_id
						, 0 as contact_id
						, 0 as consolidate_statement
						, cl.client_id 
						, inv.invoice_id
						, inv.statement_invoice_number
						, 0 as payer_id	
						, libpayer.description as payer 
						, inv.effective_date
						, inv.eff_date_from
						, inv.eff_date_to
						, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
						, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
						, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
						, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
						, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
						, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
						, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
						, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
						, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
						, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
						, Null as contact_title
						, mpi.first_name as contact_first_name
						, mpi.last_name as contact_last_name
						, Null as contact_address1
						, Null as contact_address2
						, Null as contact_address3
						, Null as contact_city
						, Null as contact_county
						, Null as contact_prov_state
						, Null as contact_postal_zip_code
						, Null contact_country
						, Null as contact_email
						, 0 as account_number
						, convert(varchar(10),isnull(inv.generated_date,'1/1/1900'), 101) as generated_date
						, convert(varchar(10),inv.effective_date, 101) as bill_date
						, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
						, inv.payment_due_date
						, Null as pre_consolidated_payment_due_date
						, inv.statement_through_date	
						, Null as amount_due
						, Null as eft_message
						, Case when @vIncludeResidentMessage = 1 then clcon.invoice_message else Null end as client_message
						, null as group_message
						, null as global_message
						, null as previous_balance_due
						, null as payments
						, fl.fac_id as summary_fac_id
						, hfac.name as summary_charge_center
						, hfac.facility_code as summary_charge_center_code
						, mpi.first_name as summary_charge_client_first_name
						, mpi.last_name as summary_charge_client_last_name
						, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
						, cl.client_id_number as summary_charge_client_number
						, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
							when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
							else '' end)) as summary_charge_client_location
						, mpi.date_of_birth as summary_charge_client_dob
						, cl.admission_date as summary_charge_client_admission
						, cl.discharge_date as summary_charge_client_discharge
						, 0.0 as summary_current_balance
						, 0.0 as summary_previous_balance_due
						, 0.0 as summary_payments
						, 0.0 as summary_late_fees
						, 0.0 as summary_client_balance_due
						, payr.private_bills_to as private_bills_to					
						, null as amount_past_due_yn	
						, null as term_used_for_client				
						, null as client_admit_date					
						, null as client_discharge_date				
						, null as client_mrn						
						, null as client_first_name					
						, null as client_last_name					
						, unit.unit_desc as client_unit
						, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
								when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
						, rm.room_desc as client_room
						, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
								when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
						, bd.bed_desc as client_bed
						, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
								when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
						, null as patient_specific_message	
						, 0 as  contact_num
						, Dense_rank() over (ORDER BY mpi.last_name, mpi.first_name, cl.client_id, inv.effective_date) non_consolidated_contact_num
						--, 1 as non_consolidated_contact_num			
						, '' as client_list
						, 1 as main_location
						, 0 as consolidated_location_order
						, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
							when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
							else '' end)) as sort_location
					from #facility_list fl
						inner join dbo.clients cl with (nolock) on fl.fac_id = cl.fac_id
						inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
						inner join #invoices inv with (nolock) on cl.client_id = inv.client_id
						inner join #client_ids_table clfilter on inv.client_id = clfilter.client_id
						inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id = 0											
						inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
						inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
						inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
							and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
						inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
						left join #contact_clients concl on inv.invoice_id = concl.invoice_id
						left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
						left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
						left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
						left join #billing_group_table bg on grp.group_id = bg.group_id
						left join dbo.ar_client_configuration clcon with (nolock) on cl.client_id = clcon.client_id and clcon.deleted='N'
						left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
						left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
						left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
						left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
						inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
							and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)
						left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id	
					where --payraud.private_bills_to = 'G' and 
					concl.invoice_id is null and (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date <= @vReportDate)) 
					and (@vBillingGroup = '-1' --or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
					or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) ))
					or @vBillingGroup is null)
				end

			if @vReceiverIds = '-1'  or (@vReceiverIds <> '-1'  and  @vIsContact = 0)
				begin
					insert into #contact_clients --we need to check for other multiple contacts that may not have all appropriate invoices assigned
					select distinct
							mycon.fac_id
						, mycon.contact_id
						, mycon.consolidate_statement
						, myadd.client_id 
						, myadd.invoice_id
						, myadd.statement_invoice_number
						, 0 as payer_id	
						, myadd.payer 
						, myadd.inv_effective_date
						, myadd.inv_eff_date_from
						, myadd.inv_eff_date_to
						, mycon.remit_to_name
						, mycon.remit_to_address1
						, mycon.remit_to_address2
						, mycon.remit_to_address3
						, mycon.remit_to_city
						, mycon.remit_to_county
						, mycon.remit_to_prov_state
						, mycon.remit_to_country
						, mycon.remit_to_postal_zip_code
						, mycon.remit_to_phone
						, mycon.contact_title
						, mycon.contact_first_name
						, mycon.contact_last_name
						, mycon.contact_address1
						, mycon.contact_address2
						, mycon.contact_address3
						, mycon.contact_city
						, mycon.contact_county
						, mycon.contact_prov_state
						, mycon.contact_postal_zip_code
						, mycon.contact_country
						, mycon.contact_email
						, mycon.account_number
						, myadd.generated_date
						, myadd.bill_date
						, myadd.aging_date
						, myadd.payment_due_date
						, myadd.pre_consolidated_payment_due_date
						, myadd.statement_through_date	
						, myadd.amount_due
						, myadd.eft_message
						, myadd.client_message
						, myadd.group_message
						, myadd.global_message
						, myadd.previous_balance_due
						, myadd.payments
						, myadd.summary_fac_id
						, myadd.summary_charge_center
						, myadd.summary_charge_center_code
						, myadd.summary_charge_client_first_name
						, myadd.summary_charge_client_last_name
						, myadd.summary_charge_client_name
						, myadd.summary_charge_client_number
						, myadd.summary_charge_client_location
						, myadd.summary_charge_client_dob
						, myadd.summary_charge_client_admission
						, myadd.summary_charge_client_discharge
						, 0.0 as summary_current_balance
						, 0.0 as summary_previous_balance_due
						, 0.0 as summary_payments
						, 0.0 as summary_late_fees
						, 0.0 as summary_client_balance_due
						, myadd.private_bills_to				
						, null as amount_past_due_yn	
						, null as term_used_for_client				
						, null as client_admit_date					
						, null as client_discharge_date				
						, null as client_mrn						
						, null as client_first_name					
						, null as client_last_name					
						, myadd.client_unit	
						, myadd.unit_order					
						, myadd.client_room	
						, myadd.room_order					
						, myadd.client_bed
						, myadd.bed_order
						, null as patient_specific_message	
						, mycon.contact_num
						, mycon.non_consolidated_contact_num		
						, '' as client_list
						, myadd.main_location
						, myadd.consolidated_location_order	
						, myadd.sort_location
					from #contact_clients mycon
						inner join (SELECT b.contact_id,a.client_id, a.invoice_id, a.bill_date
							FROM(
								SELECT DISTINCT client_id , invoice_id, bill_date FROM #contact_clients where contact_id > 0) A
								INNER JOIN (
								SELECT DISTINCT contact_id, client_id FROM #contact_clients where contact_id > 0) B
								ON a.client_id = b.client_id 
								EXCEPT
								SELECT contact_id,client_id, invoice_id, bill_date FROM #contact_clients where contact_id > 0
								) toget
								on mycon.contact_id = toget.contact_id and mycon.client_id = toget.client_id and mycon.bill_date = toget.bill_date
						inner join #contact_clients myadd on toget.invoice_id = myadd.invoice_id

				end
		end

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

		-- other payer loading here
		if @vOtherStatementsIncluded = 1

		begin		
		-----getting the list of contacts
		select @vStep = 80
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering other payer invoices ' + convert(varchar(26),getdate(),109)
		------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		insert into #contact_clients
			select distinct
					fl.fac_id
				, Case when payraud.private_bills_to = 'G'  then  -1 * isnull(CAST(conta.contact_id AS NUMERIC(18,1)),3.1) else -2.1 end  as contact_id  --AMRO
				, 0 as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, libpayer.payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
				, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
				, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
				, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
				, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
				, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
				, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
				, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
				, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
				, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
				, Case when payraud.private_bills_to = 'G' then title.item_description else '' end as contact_title
				, Case when payraud.private_bills_to = 'G' and isnull(conta.first_name,'') <> '' then conta.first_name
					when payraud.private_bills_to = 'G' and isnull(conta.first_name,'') = '' then 'No Data Found'
					when payraud.private_bills_to <> 'G' and isnull(insco.description,'') = '' then 'No Data Found' else insco.description end as contact_first_name 
				, Case when payraud.private_bills_to = 'G' then conta.last_name else '' end as contact_last_name
				, Case when payraud.private_bills_to = 'G' and isnull(cadd.address1,'') = '' and  isnull(cadd.address2,'') = '' then 'No Address Found' 
					when payraud.private_bills_to = 'G' and isnull(cadd.address1,'') <> '' then cadd.address1		
					when payraud.private_bills_to <> 'G' and isnull(inscoadd.address1,'') = '' and isnull(inscoadd.address2,'') = '' then 'No Address Found' 
					else inscoadd.address1 end as contact_address1
				, Case when payraud.private_bills_to = 'G' then cadd.address2 else inscoadd.address2 end as contact_address2
				, Case when payraud.private_bills_to = 'G' then cadd.address3 else inscoadd.address3 end as contact_address3
				, Case when payraud.private_bills_to = 'G' then cadd.city else inscoadd.city end as contact_city
				, Case when payraud.private_bills_to = 'G' then ccnty.name else cnty.name end as contact_county
				, Case when payraud.private_bills_to = 'G' then cadd.prov_state else inscoadd.prov_state end as contact_prov_state
				, Case when payraud.private_bills_to = 'G' then cadd.postal_zip_code else inscoadd.postal_zip_code end as contact_postal_zip_code
				, Case when payraud.private_bills_to = 'G' then ccountry.item_description else country.item_description end as contact_country
				, null as contact_email
				, Case when payraud.private_bills_to = 'G' then conr.contact_id else '' end as account_number
				, '1/1/1900' as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date		
				, Null as amount_due
				, Null as eft_message
				, '' as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, payr.private_bills_to as private_bills_to					
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, 1 as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #facility_list fl
				inner join dbo.clients cl with (nolock) on fl.fac_id = cl.fac_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #invoices inv with (nolock) on cl.client_id = inv.client_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id > 0
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
				and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				inner join dbo.ar_configuration config with (nolock) on fl.fac_id  = config.fac_id
				left join dbo.ar_client_payer_info policy with (nolock) on cl.client_id = policy.client_id and inv.payer_id = policy.payer_id
				left join dbo.client_ids clid with (nolock) on inv.client_id = clid.client_id and policy.policy_no_id = clid.id_type_id
				left join dbo.ar_payer_addresses_audit payradd with (nolock) on payraud.fac_id = payradd.fac_id and payraud.payer_id = payradd.payer_id and payraud.default_address_id = payradd.address_id and
					payradd.effective_date  <= inv.created_date AND (payradd.ineffective_date  >= inv.created_date or payradd.ineffective_date is null)
				left join dbo.ar_lib_insurance_companies_audit insco with (nolock) on payradd.insurance_id = insco.insurance_id and
					insco.effective_date  <= inv.created_date AND (insco.ineffective_date  >= inv.created_date or insco.ineffective_date is null)
				left join dbo.ar_insurance_addresses_audit inscoadd with (nolock) on payradd.address_id = inscoadd.address_id and
					inscoadd.effective_date  <= inv.created_date AND (inscoadd.ineffective_date  >= inv.created_date or inscoadd.ineffective_date is null)
				left join dbo.ar_provider_numbers provnum with (nolock) on inscoadd.address_id = provnum.address_id and fl.fac_id = provnum.fac_id
				left join dbo.county cnty with (nolock) on inscoadd.county_id = cnty.county_id
				left join common_code country with (nolock) on inscoadd.country_id = country.item_id
				left join #client_ids_table clfilter on inv.client_id = clfilter.client_id
				left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
						left join dbo.contact_type_audit cta with (nolock) on mpi.mpi_id = cta.reference_id 
					and config.contact_type_id = cta.[type_id] and cta.fac_id = inv.fac_id
					and cta.effective_date  <= inv.created_date AND (cta.ineffective_date  >= inv.created_date or cta.ineffective_date is null)
				left join dbo.contact_relationship conr with (nolock) on conr.contact_id = cta.contact_id and conr.deleted='N' 
					and conr.reference_id = cta.reference_id and conr.subclass_id = cta.subclass_id 
				left join #relationship relatcc on conr.relationship_id = relatcc.item_id
				left join dbo.contact_audit conta with (nolock) on cta.contact_id = conta.contact_id and conta.deleted='N'			
					and conta.effective_date  <= inv.created_date AND (conta.ineffective_date  >= inv.created_date or conta.ineffective_date is null)
				left join dbo.contact_address_audit conadd with (nolock) on cta.contact_id = conadd.contact_id 			
					and conadd.effective_date  <= inv.created_date AND (conadd.ineffective_date  >= inv.created_date or conadd.ineffective_date is null)
				left join dbo.address_audit cadd with (nolock) on conadd.address_id = cadd.address_id			
					and cadd.effective_date  <= inv.created_date AND (cadd.ineffective_date  >= inv.created_date or cadd.ineffective_date is null)	
				left join dbo.county ccnty with (nolock) on cadd.county_id = cnty.county_id
				left join common_code ccountry with (nolock) on cadd.country_id = ccountry.item_id
				left join common_code_audit title with (nolock)	on isnull(title.deleted, 'N') = 'N' and conta.title_id = title.item_id 
					and title.effective_date  <= inv.created_date AND (title.ineffective_date  >= inv.created_date or title.ineffective_date is null)				
			where payraud.private_bills_to <> 'I' and (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date is not null and cl.discharge_date <= @vReportDate)) 
			and (@vReceiverIds = '-1' or clfilter.client_id is not null)
			and (@vBillingGroup = '-1' --or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
			or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) ))
			or @vBillingGroup is null)

		set @vRowCount = @@rowcount

		insert into #contact_clients
			select distinct
					fl.fac_id
				, -2.1  as contact_id
				, 0 as consolidate_statement
				, cl.client_id 
				, inv.invoice_id 
				, inv.statement_invoice_number
				, libpayer.payer_id	
				, libpayer.description as payer 
				, inv.effective_date
				, inv.eff_date_from
				, inv.eff_date_to
				, case when fgi.fac_id is null then hfac.name else fgi.remit_to_name end as remit_to_name
				, case when fgi.fac_id is null then hfac.address1 else fgi.remit_to_address1 end as remit_to_address1
				, case when fgi.fac_id is null then hfac.address2 else fgi.remit_to_address2 end as remit_to_address2
				, case when fgi.fac_id is null then '' else fgi.remit_to_address3 end as remit_to_address3
				, case when fgi.fac_id is null then hfac.city else fgi.remit_to_city end as remit_to_city
				, case when fgi.fac_id is null then faccnty.name else fgi.remit_to_county end as remit_to_county
				, case when fgi.fac_id is null then hfac.prov else fgi.remit_to_prov_state end as remit_to_prov_state
				, case when fgi.fac_id is null then fl.country else fgi.remit_to_country end as remit_to_country
				, case when fgi.fac_id is null then hfac.pc else fgi.remit_to_postal_zip_code end as remit_to_postal_zip_code
				, case when fgi.fac_id is null then hfac.tel else fgi.remit_to_phone end as remit_to_phone
				, '' as contact_title
				, Case when isnull(insco.description,'') = '' then libpayer.description else insco.description end as contact_first_name 
				, '' as contact_last_name
				, Case when isnull(inscoadd.address1,'') = '' and isnull(inscoadd.address2,'') = '' then 'No Address Found' 
					else inscoadd.address1 end as contact_address1
				, inscoadd.address2 as contact_address2
				, inscoadd.address3 as contact_address3
				, inscoadd.city as contact_city
				, cnty.name as contact_county
				, inscoadd.prov_state as contact_prov_state
				, inscoadd.postal_zip_code as contact_postal_zip_code
				,  country.item_description as contact_country
				, null as contact_email
				, '' as account_number
				, '1/1/1900' as generated_date
				, convert(varchar(10),inv.effective_date, 101) as bill_date
				, dateadd(mm, datediff(mm, 0, inv.effective_date) + 1, 0) as aging_date
				, inv.payment_due_date
				, Null as pre_consolidated_payment_due_date
				, inv.statement_through_date	
				, Null as amount_due
				, Null as eft_message
				, '' as client_message
				, Null as group_message
				, Null as global_message
				, Null as previous_balance_due
				, Null as payments
				, fl.fac_id as summary_fac_id
				, hfac.name as summary_charge_center
				, hfac.facility_code as summary_charge_center_code
				, mpi.first_name as summary_charge_client_first_name
				, mpi.last_name as summary_charge_client_last_name
				, mpi.last_name + ', ' + mpi.first_name as summary_charge_client_name
				, cl.client_id_number as summary_charge_client_number
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as summary_charge_client_location
				, mpi.date_of_birth as summary_charge_client_dob
				, cl.admission_date as summary_charge_client_admission
				, cl.discharge_date as summary_charge_client_discharge
				, 0.0 as summary_current_balance
				, 0.0 as summary_previous_balance_due
				, 0.0 as summary_payments
				, 0.0 as summary_late_fees
				, 0.0 as summary_client_balance_due	
				, payr.private_bills_to as private_bills_to						
				, null as amount_past_due_yn	
				, null as term_used_for_client	
				, null as client_admit_date					
				, null as client_discharge_date				
				, null as client_mrn						
				, null as client_first_name					
				, null as client_last_name					
				, unit.unit_desc as client_unit
				, case when TRY_CONVERT(numeric,unit.unit_desc) is not null then convert(numeric, unit.unit_desc)
						when TRY_CONVERT(numeric,left(unit.unit_desc,1)) is not null  then convert(numeric,(left(unit.unit_desc,PATINDEX('%[^0-9]%',unit.unit_desc)-1))) else 9999999 end as unit_order						
				, rm.room_desc as client_room
				, case when TRY_CONVERT(numeric,rm.room_desc) is not null  then convert(numeric, rm.room_desc)
						when TRY_CONVERT(numeric,left(rm.room_desc,1)) is not null  then convert(numeric,(left(rm.room_desc,PATINDEX('%[^0-9]%',rm.room_desc)-1))) else 9999999 end as room_order						
				, bd.bed_desc as client_bed
				, case when TRY_CONVERT(numeric,bd.bed_desc) is not null  then convert(numeric, bd.bed_desc)
						when TRY_CONVERT(numeric,left(bd.bed_desc,1)) is not null  then convert(numeric,(left(bd.bed_desc,PATINDEX('%[^0-9]%',bd.bed_desc)-1))) else 9999999 end as bed_order	
				, null as patient_specific_message
				, 0 as  contact_num
				, 0 as non_consolidated_contact_num			
				, '' as client_list
				, 1 as main_location
				, 0 as consolidated_location_order
				, ltrim(rtrim(case when bd.bed_id is not null and isnull(bd.bed_desc,'') <> '' then unit.unit_desc + ' ' +rm.room_desc + '-' + bd.bed_desc 
					when bd.bed_id is not null and isnull(bd.bed_desc,'') = '' then unit.unit_desc + ' ' +rm.room_desc
					else '' end)) as sort_location
			from #facility_list fl
				inner join dbo.clients cl with (nolock) on fl.fac_id = cl.fac_id
				inner join dbo.mpi with (nolock) on cl.mpi_id = mpi.mpi_id
				inner join #invoices inv with (nolock) on cl.client_id = inv.client_id
				inner join #payer_ids_table payer on inv.payer_id = payer.payer_id and payer.bill_payer_id > 0
				inner join dbo.ar_lib_payers libpayer with (nolock) on inv.payer_id = libpayer.payer_id 
				inner join dbo.ar_payers payr with (nolock) on libpayer.payer_id = payr.payer_id and payr.fac_id = fl.fac_id
				inner join dbo.ar_payers_audit payraud with (nolock) on libpayer.payer_id = payraud.payer_id and payraud.fac_id = fl.fac_id
				and payraud.effective_date  <= inv.created_date AND (payraud.ineffective_date  >= inv.created_date or payraud.ineffective_date is null)
				left join dbo.ar_client_payer_info cpiaud with (nolock) on cl.client_id = cpiaud.client_id and payraud.payer_id = cpiaud.payer_id and payraud.fac_id = cpiaud.fac_id and cpiaud.deleted = 'N'
					and cpiaud.effective_date  <= inv.effective_date AND (cpiaud.ineffective_date  >= inv.effective_date or cpiaud.ineffective_date is null) 
				left join dbo.ar_insurance_addresses_audit inscoadd with (nolock) on cpiaud.payer_address_id = inscoadd.address_id and
					inscoadd.effective_date  <= inv.created_date AND (inscoadd.ineffective_date  >= inv.created_date or inscoadd.ineffective_date is null)
				left join dbo.ar_lib_insurance_companies_audit insco with (nolock) on inscoadd.insurance_id = insco.insurance_id and
					insco.effective_date  <= inv.created_date AND (insco.ineffective_date  >= inv.created_date or insco.ineffective_date is null)
				left join dbo.ar_provider_numbers provnum with (nolock) on inscoadd.address_id = provnum.address_id and fl.fac_id = provnum.fac_id
				left join dbo.county cnty with (nolock) on inscoadd.county_id = cnty.county_id
				left join common_code country with (nolock) on inscoadd.country_id = country.item_id
				left join #client_ids_table clfilter on inv.client_id = clfilter.client_id
				left join #facilty_group_info fgi on fl.fac_id = fgi.fac_id
				left join dbo.ar_client_group clgrp with (nolock) on cl.client_id = clgrp.client_id
				left join dbo.ar_group grp with (nolock) on clgrp.group_id = grp.group_id and grp.fac_id = fl.fac_id and grp.deleted='N'
				left join #billing_group_table bg on grp.group_id = bg.group_id
				left join dbo.census_item ci with (nolock) on cl.current_census_id = ci.census_id
				left join dbo.bed bd with (nolock) on ci.bed_id = bd.bed_id
				left join dbo.room rm with (nolock) on bd.room_id = rm.room_id
				left join dbo.unit unit with (nolock) on rm.unit_id = unit.unit_id
				inner join dbo.facility_audit hfac with (nolock) on fl.fac_id = hfac.fac_id
					and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
				left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id							
			where payraud.private_bills_to = 'I' and (@vClientStatus = -1 or (@vClientStatus = 0 and (cl.discharge_date is null or cl.discharge_date > @vReportDate)) or (@vClientStatus = 1 and cl.discharge_date is not null and cl.discharge_date <= @vReportDate)) 
			and (@vReceiverIds = '-1' or clfilter.client_id is not null)
			and (@vBillingGroup = '-1' --or (@vBillingGroup <> '-1' and isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null )
			or (@vBillingGroup <> '-1' and ((clgrp.group_id is not null and bg.group_id is not null and @vBillingGroup <> '0') or (isnull(@vBillingGroupIncludesMissing,0) = 1 and clgrp.group_id is null) ))
			or @vBillingGroup is null)

		set @vRowCount = isnull(@vRowCount,0) + @@rowcount

		if @vRowCount = 0
			set @vOtherStatementsIncluded = 0

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

		end

	end

select @vStep = 85
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' grouping invoices ' + convert(varchar(26),getdate(),109)

--break by generated date
--select contact_num,* from #contact_clients order by 1
if @vSortBy = 1

	begin
		update con set 
				 con.client_unit = main.client_unit
				,con.unit_order = main.unit_order						
				,con.client_room = main.client_room
				,con.room_order = main.room_order						
				,con.client_bed = main.client_bed
				,con.bed_order = main.bed_order
				,con.sort_location = main.sort_location	
		from #contact_clients con
		inner join #contact_clients main on con.contact_id = main.contact_id and con.non_consolidated_contact_num = main.non_consolidated_contact_num
			and con.bill_date = main.bill_date and con.payer_id = main.payer_id and con.consolidate_statement = 1 and main.consolidate_statement = 1
			and con.main_location = 0 and main.main_location = 1

		--when there isn't a "main resident" in a multi resident statement, set it to the first location
		update con set 
				 con.client_unit = sortby.client_unit
				,con.unit_order = sortby.unit_order						
				,con.client_room = sortby.client_room
				,con.room_order = sortby.room_order						
				,con.client_bed = sortby.client_bed
				,con.bed_order = sortby.bed_order
				,con.sort_location = sortby.sort_location	
		from #contact_clients con
		inner join(
					select mincon.contact_id,mincon.bill_date,mincon.payer_id,mincon.generated_date,
					min(mincon.client_unit) as client_unit,min(mincon.unit_order) as unit_order,min(mincon.client_room) as client_room,min(mincon.room_order) as room_order,
					min(mincon.client_bed) as client_bed,min(mincon.bed_order) bed_order,min(mincon.sort_location) as sort_location
					from #contact_clients mincon
					inner join(
								select contact_id,non_consolidated_contact_num,bill_date,contact_last_name, contact_first_name,payer_id, generated_date
								from #contact_clients where main_location = 0 
								group by contact_id,non_consolidated_contact_num,bill_date,contact_last_name, contact_first_name,payer_id, generated_date
								having count(1) > 1
								) nomain on mincon.contact_id = nomain.contact_id and mincon.bill_date = nomain.bill_date and mincon.payer_id = nomain.payer_id and mincon.generated_date = nomain.generated_date
								group by  mincon.contact_id,mincon.bill_date,mincon.payer_id,mincon.generated_date
				) sortby on con.contact_id = sortby.contact_id and con.bill_date = sortby.bill_date and con.payer_id = sortby.payer_id and con.generated_date = sortby.generated_date

		update  con set con.contact_num = rnk.contact_num
		from #contact_clients con
		left join #facilty_group_info fg on con.fac_id = fg.fac_id
		inner join (select contact_id,non_consolidated_contact_num,bill_date,payer_id, generated_date, consolidate_statement, 
				case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end as grp,
				invoice_id, 
			Dense_rank()  over (ORDER BY unit_order, client_unit, room_order, client_room, bed_order, client_bed, inv_effective_date, generated_date,(case when contact_id < 0 then invoice_id else 0 end) ,
				contact_last_name, contact_first_name, contact_id, consolidate_statement, 
				(case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end),
				(case when consolidate_statement = 0 then client_id else 0 end)
				) contact_num from #contact_clients
				left join #facilty_group_info fgi on #contact_clients.fac_id = fgi.fac_id
				) rnk
			on con.contact_id= rnk.contact_id and con.bill_date= rnk.bill_date and con.payer_id= rnk.payer_id and con.non_consolidated_contact_num= rnk.non_consolidated_contact_num 
				and con.generated_date =  rnk.generated_date and con.consolidate_statement =  rnk.consolidate_statement and ((fg.fac_id is null and rnk.grp = con.fac_id) or (fg.fac_id is not null and rnk.grp = fg.facility_group_id))
			where (con.invoice_id = rnk.invoice_id)
	end
else
	If @vIsContact = 0
		begin
			update con set con.sort_location = con.summary_charge_client_name
			from #contact_clients con

			update con set con.sort_location = main.summary_charge_client_name
			from #contact_clients con
			inner join #contact_clients main on con.contact_id = main.contact_id and con.non_consolidated_contact_num = main.non_consolidated_contact_num
				and con.bill_date = main.bill_date and con.payer_id = main.payer_id and con.consolidate_statement = 1 and main.consolidate_statement = 1
				and con.main_location = 0 and main.main_location = 1
			
			--when there isn't a "main resident" in a multi resident statement, set it to the first resident alphabetically
			update con set con.sort_location = sortby.summary_charge_client_name
			from #contact_clients con
			inner join(
						select mincon.contact_id,mincon.bill_date,mincon.payer_id,mincon.generated_date,min(mincon.summary_charge_client_name) as summary_charge_client_name
						from #contact_clients mincon
						inner join(
									select contact_id,non_consolidated_contact_num,bill_date,contact_last_name, contact_first_name,payer_id, generated_date
									from #contact_clients where main_location = 0 
									group by contact_id,non_consolidated_contact_num,bill_date,contact_last_name, contact_first_name,payer_id, generated_date
									having count(1) > 1
								 ) nomain on mincon.contact_id = nomain.contact_id and mincon.bill_date = nomain.bill_date and mincon.payer_id = nomain.payer_id and mincon.generated_date = nomain.generated_date
									group by mincon.contact_id,mincon.bill_date,mincon.payer_id,mincon.generated_date
					) sortby on con.contact_id = sortby.contact_id and con.bill_date = sortby.bill_date and con.payer_id = sortby.payer_id and con.generated_date = sortby.generated_date

			update  con set con.contact_num = rnk.contact_num
			from #contact_clients con
			left join #facilty_group_info fg on con.fac_id = fg.fac_id
			inner join (select distinct contact_id,non_consolidated_contact_num,bill_date,payer_id, generated_date, consolidate_statement, 
					case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end as grp,
					invoice_id, 
				Dense_rank()  over (ORDER BY sort_location ,inv_effective_date, generated_date, (case when consolidate_statement = 1 then '0' else sort_location end), case when contact_id < 0 then invoice_id else 0 end, 
					contact_last_name, contact_first_name, contact_id, (case when contact_id < 0 then invoice_id else 0 end), consolidate_statement, 
					(case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end),
					(case when consolidate_statement = 0 then client_id else 0 end) 
					) contact_num from #contact_clients
					left join #facilty_group_info fgi on #contact_clients.fac_id = fgi.fac_id
					) rnk
				on con.contact_id= rnk.contact_id and con.bill_date= rnk.bill_date and con.payer_id= rnk.payer_id and con.non_consolidated_contact_num= rnk.non_consolidated_contact_num 
					and con.generated_date =  rnk.generated_date and con.consolidate_statement =  rnk.consolidate_statement and ((fg.fac_id is null and rnk.grp = con.fac_id) or (fg.fac_id is not null and rnk.grp = fg.facility_group_id))
			where (con.invoice_id = rnk.invoice_id)

		end
	else
		begin
			update  con set con.contact_num = rnk.contact_num
			from #contact_clients con
			left join #facilty_group_info fg on con.fac_id = fg.fac_id
			inner join (select contact_id,non_consolidated_contact_num,bill_date,contact_last_name, contact_first_name,payer_id, generated_date, consolidate_statement, 
					case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end as grp,
					invoice_id, Dense_rank() over 
				(ORDER BY contact_last_name, contact_first_name, contact_id,payer_id
						, consolidate_statement, inv_effective_date, generated_date,(case when contact_id < 0 then invoice_id else 0 end), 
						(case when fgi.fac_id is null then #contact_clients.fac_id else fgi.facility_group_id end),
						(case when consolidate_statement = 0 then client_id else 0 end)  ) contact_num from #contact_clients
						left join #facilty_group_info fgi on #contact_clients.fac_id = fgi.fac_id 
						) rnk
				on con.contact_id= rnk.contact_id and con.bill_date= rnk.bill_date and con.payer_id= rnk.payer_id and con.non_consolidated_contact_num= rnk.non_consolidated_contact_num
				and con.generated_date =  rnk.generated_date and con.consolidate_statement =  rnk.consolidate_statement 
				and con.contact_last_name = rnk.contact_last_name and con.contact_first_name = rnk.contact_first_name and ((fg.fac_id is null and rnk.grp = con.fac_id) or (fg.fac_id is not null and rnk.grp = fg.facility_group_id))
				where (con.invoice_id = rnk.invoice_id)

		end

If @vIsContact = 0 and @vIsEmc = 1 and isnull(@vReceiverIds,'-1') <> '-1'

	delete dcon
	from #contact_clients dcon
	left join (select cc.contact_num from #contact_clients cc inner join #client_ids_table cl on cc.client_id = cl.client_id group by cc.contact_num) kcon
	on dcon.contact_num = kcon.contact_num
	where kcon.contact_num is null 

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

-----getting the list of contacts
select @vStep = 90
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering messages + get latest contact info' + convert(varchar(26),getdate(),109)


if @vBillingGroup = '-1' or @vIsEmc = 1
	begin
		update  con set con.group_message = LEFT(invoicemessage.value('.','varchar(max)') , LEN(invoicemessage.value('.','varchar(max)')) -1 )--AS invoicemsg 
		FROM #contact_clients con
		CROSS APPLY
		( 
		SELECT ag.invoice_message + char(9) --+ ', '
			FROM  dbo.ar_group ag WITH (NOLOCK)
			inner join dbo.ar_client_group acg WITH (NOLOCK) on ag.group_id = acg.group_id
			WHERE acg.client_id = con.client_id and isnull(ag.invoice_message,'')<>''
			ORDER BY ag.created_date desc
			FOR XML PATH (''), TYPE
		) a ( invoicemessage )
	end

if @vBillingGroup <> '-1' and @vBillingGroup <> '0' and  @vIsEmc = 0
	begin
		update  con set con.group_message = LEFT(invoicemessage.value('.','varchar(max)') , LEN(invoicemessage.value('.','varchar(max)')) -1 )--AS invoicemsg 
		FROM #contact_clients con
		CROSS APPLY
		( 
		SELECT ltrim(rtrim(ag.invoice_message)) + char(9) --+ ', '
			FROM  dbo.ar_group ag WITH (NOLOCK)
			inner join dbo.ar_client_group acg WITH (NOLOCK) on ag.group_id = acg.group_id
			inner join #billing_group_table bg on ag.group_id = bg.group_id
			WHERE acg.client_id = con.client_id and isnull(ag.invoice_message,'')<>''
			ORDER BY ag.created_date desc
			FOR XML PATH (''), TYPE
		) a ( invoicemessage )
	end

--add eft messages
If  @vIsNewEft = 'N'
	begin
		update  con set con.eft_message = eft_info.invoice_message
		FROM #contact_clients con
		inner join dbo.ar_client_configuration config with (nolock) on con.client_id = config.client_id and isnull(eft_client,'N') = 'Y'
		inner join dbo.ar_eft_bank_info eft_info with (nolock) on config.fac_id = eft_info.fac_id
	end
else
	begin
		update  con set con.eft_message = coalesce(usfbc.invoice_message,cdnfbc.invoice_message,libeft.invoice_message)
		FROM #contact_clients con
		inner join #invoices inv with (nolock) on con.invoice_id = inv.invoice_id
		inner join dbo.ar_eft_client_configuration_history eftconfig with (nolock) on inv.client_id = eftconfig.client_id and eftconfig.[enabled] = 1
			and eftconfig.effective_date  <= inv.created_date and (eftconfig.ineffective_date  >= inv.created_date or eftconfig.ineffective_date is null)
		inner join dbo.ar_eft_facility_bank_configuration_history  fbc with (nolock) on inv.fac_id = fbc.fac_id
			and fbc.effective_date  <= inv.created_date and (fbc.ineffective_date  >= inv.created_date or fbc.ineffective_date is null)	 	
		inner join dbo.ar_lib_eft_bank_configuration_history libeft with (nolock) on fbc.eft_bank_configuration_id = libeft.eft_bank_configuration_id
			and libeft.effective_date  <= inv.created_date and (libeft.ineffective_date  >= inv.created_date or libeft.ineffective_date is null)	
		left join dbo.ar_eft_facility_us_bank_configuration_history usfbc with (nolock) on fbc.eft_bank_configuration_id = usfbc.eft_bank_configuration_id and inv.fac_id = usfbc.fac_id 
			and usfbc.effective_date  <= inv.created_date and (usfbc.ineffective_date  >= inv.created_date or usfbc.ineffective_date is null)	
		left join dbo.ar_eft_facility_ca_bank_configuration_history cdnfbc with (nolock) on fbc.eft_bank_configuration_id = cdnfbc.eft_bank_configuration_id and inv.fac_id = cdnfbc.fac_id 
			and cdnfbc.effective_date  <= inv.created_date and (cdnfbc.ineffective_date  >= inv.created_date or cdnfbc.ineffective_date is null)
	end	

--we need to determine if multiple invoices exist in a month, for different contacts, and update them to the contact info tied to the last created invoice

insert into #contact_union_table 
select a.contact_id, a.contact_num, a.payer_id, a.client_id, a.bill_date, a.inv_created_date, a.generated_date,
	ROW_NUMBER() OVER ( PARTITION BY a.payer_id, a.client_id, a.bill_date 
			order by  a.payer_id, a.client_id, a.bill_date desc, a.inv_created_date desc, a.generated_date desc) as rwnum

from
(select clcon.contact_id, clcon.contact_num, clcon.payer_id, clcon.client_id, clcon.bill_date, clcon.generated_date, max(inv.created_date) as inv_created_date
from #contact_clients clcon
	inner join #invoices inv with (nolock) on clcon.invoice_id	= inv.invoice_id and clcon.contact_id > -1
group by clcon.contact_id, clcon.payer_id, clcon.contact_num, clcon.client_id, clcon.bill_date, clcon.generated_date) a
inner join 	(select clcon.contact_id, clcon.contact_num, clcon.payer_id, clcon.client_id, clcon.bill_date, clcon.generated_date, max(inv.created_date) as inv_created_date
from #contact_clients clcon
	inner join #invoices inv with (nolock) on clcon.invoice_id	= inv.invoice_id and clcon.contact_id > -1
group by clcon.contact_id, clcon.contact_num, clcon.payer_id, clcon.client_id, clcon.bill_date, clcon.generated_date) b
on a.client_id = b.client_id and a.payer_id = b.payer_id and a.bill_date = b.bill_date and a.generated_date = b.generated_date and a.inv_created_date <> b.inv_created_date

delete mcon
from #contact_union_table mcon
inner join (select a.payer_id, a.client_id, a.bill_date, a.generated_date, a.inv_created_date
from #contact_union_table a
group by a.payer_id, a.client_id, a.bill_date, a.generated_date, a.inv_created_date having count(*)>1) dbl 
	on mcon.payer_id = dbl.payer_id and mcon.client_id = dbl.client_id and mcon.inv_created_date = dbl.inv_created_date and mcon.bill_date = dbl.bill_date and mcon.generated_date = dbl.generated_date
left join (select  c.payer_id, c.client_id, c.bill_date, c.generated_date, c.inv_created_date
from #contact_union_table c
group by c.payer_id, c.client_id, c.bill_date, c.generated_date, c.inv_created_date having count(*)=1) sgl on mcon.payer_id = sgl.payer_id and mcon.client_id = sgl.client_id
	and mcon.bill_date = sgl.bill_date and mcon.generated_date = sgl.generated_date
where sgl.client_id is null

if @debug_me='Y' select * from #contact_union_table order by row_num

IF (select COUNT(1) from #contact_union_table) > 0
	Begin	
		update a set a.contact_id = b.contact_id
				, a.contact_num = b.contact_num
				, a.consolidate_statement = b.consolidate_statement
				, a.non_consolidated_contact_num = b.non_consolidated_contact_num
				, a.remit_to_name = b.remit_to_name
				, a.remit_to_address1 = b.remit_to_address1
				, a.remit_to_address2 = b.remit_to_address2
				, a.remit_to_address3 = b.remit_to_address3
				, a.remit_to_city = b.remit_to_city
				, a.remit_to_county = b.remit_to_county
				, a.remit_to_prov_state = b.remit_to_prov_state
				, a.remit_to_postal_zip_code = b.remit_to_postal_zip_code
				, a.remit_to_phone = b.remit_to_phone
				, a.contact_title = b.contact_title
				, a.contact_first_name = b.contact_first_name
				, a.contact_last_name = b.contact_last_name
				, a.contact_address1 = b.contact_address1
				, a.contact_address2 = b.contact_address2
				, a.contact_address3 = b.contact_address3
				, a.contact_city = b.contact_city
				, a.contact_county = b.contact_county
				, a.contact_prov_state = b.contact_prov_state
				, a.contact_postal_zip_code = b.contact_postal_zip_code
				, a.contact_country = b.contact_country
				, a.contact_email = b.contact_email
				, a.account_number = b.account_number
				, a.summary_fac_id = b.summary_fac_id
				, a.summary_charge_center = b.summary_charge_center
		from #contact_clients a
			inner join #contact_union_table cutold on a.client_id = cutold.client_id and a.contact_num = cutold.contact_num 
				and a.bill_date = cutold.bill_date and cutold.row_num > 1
			inner join #contact_union_table cutnew on cutold.client_id = cutnew.client_id and cutold.bill_date = cutnew.bill_date
			inner join #contact_clients b on b.client_id = cutnew.client_id and b.contact_num = cutnew.contact_num 
				and b.bill_date = cutnew.bill_date and cutnew.row_num = 1

		update a set a.contact_id = b.contact_id
				, a.contact_num = b.contact_num
				, a.consolidate_statement = b.consolidate_statement
				, a.non_consolidated_contact_num = b.non_consolidated_contact_num
				, a.remit_to_name = b.remit_to_name
				, a.remit_to_address1 = b.remit_to_address1
				, a.remit_to_address2 = b.remit_to_address2
				, a.remit_to_address3 = b.remit_to_address3
				, a.remit_to_city = b.remit_to_city
				, a.remit_to_county = b.remit_to_county
				, a.remit_to_prov_state = b.remit_to_prov_state
				, a.remit_to_postal_zip_code = b.remit_to_postal_zip_code
				, a.remit_to_phone = b.remit_to_phone
				, a.contact_title = b.contact_title
				, a.contact_first_name = b.contact_first_name
				, a.contact_last_name = b.contact_last_name
				, a.contact_address1 = b.contact_address1
				, a.contact_address2 = b.contact_address2
				, a.contact_address3 = b.contact_address3
				, a.contact_city = b.contact_city
				, a.contact_county = b.contact_county
				, a.contact_prov_state = b.contact_prov_state
				, a.contact_postal_zip_code = b.contact_postal_zip_code
				, a.contact_country = b.contact_country
				, a.contact_email = b.contact_email
				, a.account_number = b.account_number
				, a.summary_fac_id = b.summary_fac_id
				, a.summary_charge_center = b.summary_charge_center
		from #contact_clients a
			inner join #contact_clients b on a.client_id = b.client_id and a.contact_num = b.contact_num and a.bill_date = b.bill_date
			--inner join dbo.ar_invoice inv with (nolock) on b.invoice_id	= inv.invoice_id
			inner join #invoices inv on b.invoice_id = inv.invoice_id
			inner join #contact_union_table ujoin on b.client_id = ujoin.client_id and b.contact_num = ujoin.contact_num 
				and b.bill_date = ujoin.bill_date and inv.created_date = ujoin.inv_created_date and ujoin.row_num = 1
		where a.invoice_id <> b.invoice_id

	end

if @vReprintFrom is not null
	begin

		declare @min_contact_num int
		if @vSortBy = 1
			select @min_contact_num = min(contact_num) from #contact_clients where sort_location like @vReprintFrom +'%'
		else
			If @vIsContact = 1
				select @min_contact_num = min(contact_num) from #contact_clients where contact_last_name like @vReprintFrom +'%'
			else
				select @min_contact_num = min(contact_num) from #contact_clients where summary_charge_client_name like @vReprintFrom +'%'

		delete from #contact_clients where contact_num < @min_contact_num
		
	end

if @vExportMode = 1 
	begin
			UPDATE dbo.ar_invoice
			SET ar_invoice.date_exported_ps = getDate()
			FROM dbo.ar_invoice
			JOIN #contact_clients ON ar_invoice.client_id = #contact_clients.client_id 
				AND ar_invoice.invoice_id = #contact_clients.invoice_id
	end

if @debug_me='Y'  select * from #contact_clients order by contact_num,non_consolidated_contact_num

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 100
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering transaction detail data ' + convert(varchar(26),getdate(),109)
--*********************************************************************************************************

--update generated date on "other" statement rows for uniqueness in each bill date
update ccl set ccl.generated_date = dateadd(mm,contact_num,ccl.generated_date)
from #contact_clients ccl
inner join (select invoice_id from #contact_clients where contact_id <= -2.1  group by invoice_id having count(*) = 1) sngl on ccl.invoice_id = sngl.invoice_id
where ccl.contact_id <= -2.1  

if @vIsTrial = 0
	begin
		insert into #local_transactions
	
		select tx.invoice_id
			, ccl.contact_id
			, tx.batch_id
			, tx.entry_number
			, tx.client_id
			--, 'N' as auto_generated
			, isnull(tx.auto_generated,'N')
			, tx.transaction_id
			, tx.reversing_tx_id
			, tx.distribution_tx_id
			, 0 as applied_payment_id
			, tx.payer_id
			, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
			, tx.days_account_id
			, tx.dollars_account_id
			, tx.fac_id
			, tx.is_billed
			, tx.transaction_type
			, tx.parent_tx_type
			, tx.[description]
			, tx.alt_description
			, tx.cheque_number
			, tx.effective_date
			, tx.transaction_date
			, ccl.bill_date as bill_date
			, Null as applied_date
			, ccl.generated_date
			, tx.days_amount
			, tx.daily_rate
			, tx.monthly_rate
			, tx.amount
			, tx.care_level
			, Case when isnull(tx.revenue_code,'') = '' or tx.revenue_code = '-1' then '' else tx.revenue_code end as revenue_code
			, tx.hcpcs_code	
			, tx.item_type_id
			, tx.comment
			, tx.rate_type_id
			, tx.rugs_modifier
			, tx.medicare_day
			, tx.mppr_flag
			, tx.mark_as_billed_by
			, tx.mark_as_billed_date
			, tx.mark_as_billed_comment
			, Case when (tx.transaction_type in('r','dr','cl','cr','d') and tx.parent_tx_type = 'r'
				or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
				and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
				and tx.parent_tx_type = 'r')) then 1 
				when tx.transaction_type = 'c' then 3 
				else 2 end as transaction_type_group
			, 1
		from dbo.ar_transactions tx with (nolock)
			inner join (select distinct contact_id,invoice_id,bill_date,generated_date from #contact_clients) ccl on tx.invoice_id = ccl.invoice_id
			inner join dbo.ar_payers payer with (nolock) on tx.payer_id = payer.payer_id and tx.fac_id = payer.fac_id
			where tx.deleted = 'N'
			and not (tx.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
			and not (tx.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
	end
else
	begin
		insert into #local_transactions --trials
		select tx.trial_invoice_id
			, ccl.contact_id
			, tx.batch_id
			, tx.entry_number
			, tx.client_id
			--, 'N' as auto_generated
			, isnull(tx.auto_generated,'N')
			, tx.transaction_id
			, tx.reversing_tx_id
			, tx.distribution_tx_id
			, 0 as applied_payment_id
			, tx.payer_id
			, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
			, tx.days_account_id
			, tx.dollars_account_id
			, tx.fac_id
			, tx.is_billed
			, tx.transaction_type
			, tx.parent_tx_type
			, tx.[description]
			, tx.alt_description
			, tx.cheque_number
			, tx.effective_date
			, tx.transaction_date
			, ccl.bill_date as bill_date
			, Null as applied_date
			, ccl.generated_date
			, tx.days_amount
			, tx.daily_rate
			, tx.monthly_rate
			, tx.amount
			, tx.care_level
			, Case when isnull(tx.revenue_code,'') = '' or tx.revenue_code = '-1' then '' else tx.revenue_code end as revenue_code
			, tx.hcpcs_code	
			, tx.item_type_id
			, tx.comment
			, tx.rate_type_id
			, tx.rugs_modifier
			, tx.medicare_day
			, tx.mppr_flag
			, tx.mark_as_billed_by
			, tx.mark_as_billed_date
			, tx.mark_as_billed_comment
			, Case when (tx.transaction_type in('r','dr','cl','cr','d') and tx.parent_tx_type = 'r'
				or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
				and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
				and tx.parent_tx_type = 'r')) then 1 
				when tx.transaction_type = 'c' then 3 
				else 2 end as transaction_type_group
			, 1
		from dbo.ar_transactions tx with (nolock)
			inner join (select distinct contact_id,invoice_id,bill_date,generated_date from #contact_clients) ccl on tx.trial_invoice_id = ccl.invoice_id
			inner join dbo.ar_payers payer with (nolock) on tx.payer_id = payer.payer_id and tx.fac_id = payer.fac_id
			where tx.deleted = 'N'
			and not (tx.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
			and not (tx.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 

		insert into #local_transactions	 --merged non-trials
		select tx.invoice_id
			, ccl.contact_id
			, tx.batch_id
			, tx.entry_number
			, tx.client_id
			--, 'N' as auto_generated
			, isnull(tx.auto_generated,'N')
			, tx.transaction_id
			, tx.reversing_tx_id
			, tx.distribution_tx_id
			, 0 as applied_payment_id
			, tx.payer_id
			, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
			, tx.days_account_id
			, tx.dollars_account_id
			, tx.fac_id
			, tx.is_billed
			, tx.transaction_type
			, tx.parent_tx_type
			, tx.[description]
			, tx.alt_description
			, tx.cheque_number
			, tx.effective_date
			, tx.transaction_date
			, ccl.bill_date as bill_date
			, Null as applied_date
			, ccl.generated_date
			, tx.days_amount
			, tx.daily_rate
			, tx.monthly_rate
			, tx.amount
			, tx.care_level
			, Case when isnull(tx.revenue_code,'') = '' or tx.revenue_code = '-1' then '' else tx.revenue_code end as revenue_code
			, tx.hcpcs_code	
			, tx.item_type_id
			, tx.comment
			, tx.rate_type_id
			, tx.rugs_modifier
			, tx.medicare_day
			, tx.mppr_flag
			, tx.mark_as_billed_by
			, tx.mark_as_billed_date
			, tx.mark_as_billed_comment
			, Case when (tx.transaction_type in('r','dr','cl','cr','d') and tx.parent_tx_type = 'r'
				or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
				and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
				and tx.parent_tx_type = 'r')) then 1 
				when tx.transaction_type = 'c' then 3 
				else 2 end as transaction_type_group
			, 1
		from dbo.ar_transactions tx with (nolock)
			inner join (select distinct contact_id,invoice_id,bill_date,generated_date from #contact_clients) ccl on tx.invoice_id = ccl.invoice_id
			inner join dbo.ar_payers payer with (nolock) on tx.payer_id = payer.payer_id and tx.fac_id = payer.fac_id
			where tx.deleted = 'N'
			and not (tx.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
			and not (tx.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 

	end

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 103
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' updating values based on transaction creation issues ' + convert(varchar(26),getdate(),109)

--update missing rate types on reversing transactions, so we can build the description later - reversing bug	
update rev set rev.rate_type_id = src.rate_type_id
from #local_transactions rev
inner join dbo.ar_transactions src with (nolock) on rev.reversing_tx_id = src.transaction_id and src.deleted='N' and rev.rate_type_id is null 

--CORE-9223 - 2 versions.  They both seem to result in the same descriptions
--update MPPR adjustment descriptions based on the parents charge code description
--update mppr set mppr.description = cc.description + ' Adjustment' 
--from #local_transactions mppr
--inner join dbo.ar_mppr_bumpup bmp with (nolock) on mppr.distribution_tx_id = bmp.bumpup_transaction_id 
--inner join dbo.ar_transactions src with (nolock) on mppr.distribution_tx_id = src.transaction_id and src.deleted='N' and mppr.description = 'MPPR Adjustment' 
--inner join dbo.ar_lib_charge_codes cc with (nolock) on src.item_type_id = cc.charge_code_id

--update MPPR adjustment descriptions based on the ancillary transaction description
--update mppr set mppr.description = prnt.description + ' Adjustment' 
--from #local_transactions mppr
--inner join dbo.ar_mppr_bumpup bmp with (nolock) on mppr.distribution_tx_id = bmp.bumpup_transaction_id 
--inner join dbo.ar_transactions src with (nolock) on bmp.reduction_transaction_id = src.transaction_id and src.deleted='N' and mppr.description = 'MPPR Adjustment' 
--inner join dbo.ar_transactions prnt with (nolock) on src.distribution_tx_id = prnt.transaction_id and src.deleted='N' 

update childcash set childcash.comment = parentcash.comment, childcash.cheque_number = parentcash.cheque_number 
	--,childcash.skip_bit = (case when lclpc.transaction_id is not null then 2 else 1 end)
from #local_transactions childcash
inner join dbo.ar_transactions parentcash with (nolock) on childcash.distribution_tx_id = parentcash.transaction_id
	and childcash.distribution_tx_id <> childcash.transaction_id and parentcash.distribution_tx_id = parentcash.transaction_id
	and childcash.transaction_type = 'C' and parentcash.transaction_type = 'C'

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

if @vSummarizeReversals = 1
	begin

		Select @vStep = 105;
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Summarizing Reversals ' + convert(varchar(26),getdate(),109);

		if @vPrivateStatementsIncluded =1
			begin
				insert into #local_transactions
	
				select tx.invoice_id
					, tx.contact_id
					, tx.batch_id
					, tx.entry_number
					, tx.client_id
					, tx.auto_generated
					, tx.transaction_id
					, tx.reversing_tx_id
					, tx.distribution_tx_id
					, tx.applied_payment_id
					, tx.payer_id
					, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
					, tx.days_account_id
					, tx.dollars_account_id
					, tx.fac_id
					, tx.is_billed
					, tx.transaction_type
					, tx.parent_tx_type
					, tx.[description]
					, tx.alt_description
					, tx.cheque_number
					, tx.effective_date
					, tx.transaction_date
					, tx.bill_date
					, tx.applied_date
					, tx.generated_date
					, tx.days_amount
					, tx.daily_rate
					, tx.monthly_rate
					, tx.amount + isnull(revtx.amount,0)
					, tx.care_level
					, tx.revenue_code
					, tx.hcpcs_code	
					, tx.item_type_id
					, tx.comment
					, tx.rate_type_id
					, tx.rugs_modifier
					, tx.medicare_day
					, tx.mppr_flag
					, tx.mark_as_billed_by
					, tx.mark_as_billed_date
					, tx.mark_as_billed_comment
					, tx.transaction_type_group
					, 2 as skip_bit
				from #local_transactions tx with (nolock)
				left join #local_transactions revtx with (nolock) on tx.reversing_tx_id = revtx.transaction_id and tx.bill_date = revtx.bill_date and 
					tx.generated_date = revtx.generated_date
				WHERE tx.contact_id > -2.1 and 
					((((tx.amount + isnull(revtx.amount,0)) <> 0 and revtx.reversing_tx_id is not null) or revtx.reversing_tx_id is null))

				delete from #local_transactions where skip_bit = 1 and contact_id >-2.1  
				update #local_transactions set skip_bit = 1 where skip_bit = 2 and contact_id >-2.1  
			end

	if @vOtherStatementsIncluded = 1
		begin
			insert into #local_transactions
	
				select tx.invoice_id
					, tx.contact_id
					, tx.batch_id
					, tx.entry_number
					, tx.client_id
					, tx.auto_generated
					, tx.transaction_id
					, tx.reversing_tx_id
					, tx.distribution_tx_id
					, tx.applied_payment_id
					, tx.payer_id
					, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
					, tx.days_account_id
					, tx.dollars_account_id
					, tx.fac_id
					, tx.is_billed
					, tx.transaction_type
					, tx.parent_tx_type
					, tx.[description]
					, tx.alt_description
					, tx.cheque_number
					, tx.effective_date
					, tx.transaction_date
					, tx.bill_date
					, tx.applied_date
					, tx.generated_date
					, tx.days_amount
					, tx.daily_rate
					, tx.monthly_rate
					, tx.amount + isnull(revtx.amount,0)
					, tx.care_level
					, tx.revenue_code
					, tx.hcpcs_code	
					, tx.item_type_id
					, tx.comment
					, tx.rate_type_id
					, tx.rugs_modifier
					, tx.medicare_day
					, tx.mppr_flag
					, tx.mark_as_billed_by
					, tx.mark_as_billed_date
					, tx.mark_as_billed_comment
					, tx.transaction_type_group
					, 2 as skip_bit
				from #local_transactions tx with (nolock)
				left join #local_transactions revtx with (nolock) on tx.reversing_tx_id = revtx.transaction_id and tx.bill_date = revtx.bill_date and 
					tx.generated_date = revtx.generated_date and tx.invoice_id = revtx.invoice_id
				WHERE tx.contact_id <= -2.1 and 
					((((tx.amount + isnull(revtx.amount,0)) <> 0 and revtx.reversing_tx_id is not null) or revtx.reversing_tx_id is null))

				delete from #local_transactions where skip_bit = 1 and contact_id <=-2.1  
				update #local_transactions set skip_bit = 1 where skip_bit = 2 and contact_id <=-2.1  
			end
		
		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms' 
	end

if @vPrivateStatementsIncluded = 1
	begin
		if @vCombineChildren > 0
			begin

				Select @vStep = 110;
				set @vgsStepStartTime = GETDATE()
				if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Combining Private Child Transactions ' + convert(varchar(26),getdate(),109);

			if @vCombineChildren = 1
				begin

					insert into #child_transactions
					select 	  ctx.distribution_tx_id
							--, ctx.transaction_type
							, '' AS transaction_type
							, ctx.parent_tx_type
							, ctx.contact_id 
							, 0 as invoice_id
							, ctx.payer_id
							, sum(ctx.days_amount)
							, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
							, sum(ctx.monthly_rate)
							, sum(ctx.amount)
							, ctx.bill_date
							,ctx.generated_date
							, 0
					from #local_transactions ctx
					inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and anctx.payer_id = ctx.payer_id and ctx.contact_id = anctx.contact_id
					where  ctx.contact_id > -2.1 and anctx.contact_id > -2.1 and ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
						and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and isnull(ctx.generated_date,'1/1/1900') = isnull(anctx.generated_date,'1/1/1900')
					group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
					order by 1

					insert into #local_transactions
	
					select tx.invoice_id
						, tx.contact_id
						, tx.batch_id
						, tx.entry_number
						, tx.client_id
						, tx.auto_generated
						, tx.transaction_id
						, tx.reversing_tx_id
						, tx.distribution_tx_id
						, tx.applied_payment_id
						, tx.payer_id
						, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
						, tx.days_account_id
						, tx.dollars_account_id
						, tx.fac_id
						, tx.is_billed
						, tx.transaction_type
						, tx.parent_tx_type
						, tx.[description]
						, tx.alt_description
						, tx.cheque_number
						, tx.effective_date
						, tx.transaction_date
						, tx.bill_date
						, tx.applied_date
						, tx.generated_date
						, tx.days_amount
						, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
						, Null as monthly_rate
						, tx.amount + isnull(txca.amount,0) as amount
						, tx.care_level				
						, tx.revenue_code
						, tx.hcpcs_code	
						, tx.item_type_id
						, tx.comment
						, tx.rate_type_id
						, tx.rugs_modifier
						, tx.medicare_day
						, tx.mppr_flag
						, tx.mark_as_billed_by
						, tx.mark_as_billed_date
						, tx.mark_as_billed_comment
						, tx.transaction_type_group
						, 0
					from #local_transactions tx with (nolock)
					inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') 
						and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900') and tx.contact_id = txca.contact_id
						and tx.payer_id = txca.payer_id and tx.contact_id > -2.1

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.payer_id = parent.payer_id and tx.contact_id = parent.contact_id	
					inner join #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')  and tx.contact_id = txca.contact_id
					where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id > -2.1 and parent.contact_id > -2.1

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id	
					where tx.skip_bit = 1 and parent.skip_bit = 0 and tx.contact_id > -2.1 and parent.contact_id > -2.1

		--********************************************************** children on different payer than parent
					delete from #child_transactions

					insert into #child_transactions
					select 	  ctx.distribution_tx_id
							--, ctx.transaction_type
							, '' AS transaction_type
							, ctx.parent_tx_type
							, ctx.contact_id 
							, 0 as invoice_id
							, ctx.payer_id
							, sum(ctx.days_amount)
							, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
							, sum(ctx.monthly_rate)
							, sum(ctx.amount)
							, ctx.bill_date
							,ctx.generated_date
							, 0
					from #local_transactions ctx
					inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and anctx.payer_id <> ctx.payer_id and ctx.contact_id = anctx.contact_id 
					where   ctx.contact_id > -2.1 and anctx.contact_id > -2.1 and ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
					group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
					order by 1

					insert into #local_transactions
	
					select tx.invoice_id
						, tx.contact_id
						, tx.batch_id
						, tx.entry_number
						, tx.client_id
						, tx.auto_generated
						, tx.transaction_id
						, tx.reversing_tx_id
						, tx.distribution_tx_id
						, tx.applied_payment_id
						, txca.payer_id
						, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
						, tx.days_account_id
						, tx.dollars_account_id
						, tx.fac_id
						, tx.is_billed
						, tx.transaction_type
						, tx.parent_tx_type
						, tx.[description]
						, tx.alt_description
						, tx.cheque_number
						, tx.effective_date
						, tx.transaction_date
						, txca.bill_date
						, tx.applied_date
						, tx.generated_date
						, tx.days_amount
						, isnull(txca.daily_rate,0) as daily_rate
						, Null as monthly_rate
						, isnull(txca.amount,0) as amount
						, tx.care_level				
						, tx.revenue_code
						, tx.hcpcs_code	
						, tx.item_type_id
						, tx.comment
						, tx.rate_type_id
						, tx.rugs_modifier
						, tx.medicare_day
						, tx.mppr_flag
						, tx.mark_as_billed_by
						, tx.mark_as_billed_date
						, tx.mark_as_billed_comment
						, tx.transaction_type_group
						, 0
					from #local_transactions tx with (nolock)
					inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id --and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and tx.payer_id <> txca.payer_id and tx.contact_id > -2.1 and tx.contact_id = txca.contact_id

					delete tx 
					from #local_transactions tx
					inner join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id--and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
					where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id > -2.1

		--********************************************************** 
				end

				if @vCombineChildren = 2
				begin
					insert into #child_transactions
					select 	  ctx.distribution_tx_id
							, '' AS transaction_type
							, ctx.parent_tx_type
							, ctx.contact_id 
							, 0 as invoice_id
							, ctx.payer_id
							, sum(ctx.days_amount)
							, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
							, sum(ctx.monthly_rate)
							, sum(ctx.amount)
							, ctx.bill_date
							, ctx.generated_date
							, 0
					from #local_transactions ctx
					inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and ctx.contact_id = anctx.contact_id
					where  ctx.contact_id > -2.1 and anctx.contact_id > -2.1 and ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type and ctx.transaction_type in('CR', 'CA')
						and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and isnull(ctx.generated_date,'1/1/1900') = isnull(anctx.generated_date,'1/1/1900')
					group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
					order by 1

					insert into #local_transactions
	
					select tx.invoice_id
						, tx.contact_id
						, tx.batch_id
						, tx.entry_number
						, tx.client_id
						, tx.auto_generated
						, tx.transaction_id
						, tx.reversing_tx_id
						, tx.distribution_tx_id
						, tx.applied_payment_id
						, tx.payer_id
						, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
						, tx.days_account_id
						, tx.dollars_account_id
						, tx.fac_id
						, tx.is_billed
						, tx.transaction_type
						, tx.parent_tx_type
						, tx.[description]
						, tx.alt_description
						, tx.cheque_number
						, tx.effective_date
						, tx.transaction_date
						, tx.bill_date
						, tx.applied_date
						, tx.generated_date
						, tx.days_amount
						, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
						, Null as monthly_rate
						, tx.amount + isnull(txca.amount,0) as amount
						, tx.care_level				
						, tx.revenue_code
						, tx.hcpcs_code	
						, tx.item_type_id
						, tx.comment
						, tx.rate_type_id
						, tx.rugs_modifier
						, tx.medicare_day
						, tx.mppr_flag
						, tx.mark_as_billed_by
						, tx.mark_as_billed_date
						, tx.mark_as_billed_comment
						, tx.transaction_type_group
						, 0
					from #local_transactions tx with (nolock)
					inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')
						and tx.payer_id = txca.payer_id and tx.contact_id > -2.1 and tx.contact_id = txca.contact_id

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.payer_id = parent.payer_id and tx.contact_id = parent.contact_id		
					inner join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900') and tx.contact_id = txca.contact_id
					where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.transaction_type in('CR', 'CA') and tx.contact_id > -2.1

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id	
					where tx.skip_bit = 1 and parent.skip_bit = 0 and tx.contact_id > -2.1 and parent.contact_id > -2.1

				end

				set @vgsStepEndTime=GETDATE()
				if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
			end
		end

if @vOtherStatementsIncluded = 1
	begin
		if @vCombineChildren > 0
			begin

				Select @vStep = 112;
				set @vgsStepStartTime = GETDATE()
				if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Combining Other Child Transactions ' + convert(varchar(26),getdate(),109);

			if @vCombineChildren = 1
				begin

					insert into #child_transactions
					select 	  ctx.distribution_tx_id
							--, ctx.transaction_type
							, '' AS transaction_type
							, ctx.parent_tx_type
							, ctx.contact_id 
							, ctx.invoice_id
							, ctx.payer_id
							, sum(ctx.days_amount)
							, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
							, sum(ctx.monthly_rate)
							, sum(ctx.amount)
							, ctx.bill_date
							, ctx.generated_date
							, 0
					from #local_transactions ctx
					inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and anctx.payer_id = ctx.payer_id and ctx.contact_id = anctx.contact_id
					where  ctx.contact_id <= -2.1 and anctx.contact_id <= -2.1 and ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
						and ctx.invoice_id = anctx.invoice_id
					group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.invoice_id, ctx.generated_date
					order by 1

					insert into #local_transactions
	
					select tx.invoice_id
						, tx.contact_id
						, tx.batch_id
						, tx.entry_number
						, tx.client_id
						, tx.auto_generated
						, tx.transaction_id
						, tx.reversing_tx_id
						, tx.distribution_tx_id
						, tx.applied_payment_id
						, tx.payer_id
						, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
						, tx.days_account_id
						, tx.dollars_account_id
						, tx.fac_id
						, tx.is_billed
						, tx.transaction_type
						, tx.parent_tx_type
						, tx.[description]
						, tx.alt_description
						, tx.cheque_number
						, tx.effective_date
						, tx.transaction_date
						, tx.bill_date
						, tx.applied_date
						, tx.generated_date
						, tx.days_amount
						, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
						, Null as monthly_rate
						, tx.amount + isnull(txca.amount,0) as amount
						, tx.care_level				
						, tx.revenue_code
						, tx.hcpcs_code	
						, tx.item_type_id
						, tx.comment
						, tx.rate_type_id
						, tx.rugs_modifier
						, tx.medicare_day
						, tx.mppr_flag
						, tx.mark_as_billed_by
						, tx.mark_as_billed_date
						, tx.mark_as_billed_comment
						, tx.transaction_type_group
						, 0
					from #local_transactions tx with (nolock)
					inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') 
						and tx.invoice_id = txca.invoice_id and tx.payer_id = txca.payer_id and tx.contact_id <= -2.1 and tx.contact_id = txca.contact_id

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.payer_id = parent.payer_id and tx.contact_id = parent.contact_id		
					inner join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and tx.invoice_id = txca.invoice_id  and tx.contact_id = txca.contact_id
					where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id <= -2.1 and parent.contact_id <= -2.1

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id	
					where tx.skip_bit = 1 and parent.skip_bit = 0 and tx.contact_id <= -2.1 and parent.contact_id <= -2.1

				end

				if @vCombineChildren = 2
				begin
					insert into #child_transactions
					select 	  ctx.distribution_tx_id
							, '' AS transaction_type
							, ctx.parent_tx_type
							, ctx.contact_id 
							, ctx.invoice_id
							, ctx.payer_id
							, sum(ctx.days_amount)
							, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
							, sum(ctx.monthly_rate)
							, sum(ctx.amount)
							, ctx.bill_date
							, ctx.generated_date
							, 0
					from #local_transactions ctx
					inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and ctx.contact_id = anctx.contact_id
					where  ctx.contact_id <= -2.1 and anctx.contact_id <= -2.1 and ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type and ctx.transaction_type in('CR', 'CA')
						and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and ctx.invoice_id = anctx.invoice_id
					group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.invoice_id, ctx.generated_date
					order by 1

					insert into #local_transactions
	
					select tx.invoice_id
						, tx.contact_id
						, tx.batch_id
						, tx.entry_number
						, tx.client_id
						, tx.auto_generated
						, tx.transaction_id
						, tx.reversing_tx_id
						, tx.distribution_tx_id
						, tx.applied_payment_id
						, tx.payer_id
						, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
						, tx.days_account_id
						, tx.dollars_account_id
						, tx.fac_id
						, tx.is_billed
						, tx.transaction_type
						, tx.parent_tx_type
						, tx.[description]
						, tx.alt_description
						, tx.cheque_number
						, tx.effective_date
						, tx.transaction_date
						, tx.bill_date
						, tx.applied_date
						, tx.generated_date
						, tx.days_amount
						, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
						, Null as monthly_rate
						, tx.amount + isnull(txca.amount,0) as amount
						, tx.care_level				
						, tx.revenue_code
						, tx.hcpcs_code	
						, tx.item_type_id
						, tx.comment
						, tx.rate_type_id
						, tx.rugs_modifier
						, tx.medicare_day
						, tx.mppr_flag
						, tx.mark_as_billed_by
						, tx.mark_as_billed_date
						, tx.mark_as_billed_comment
						, tx.transaction_type_group
						, 0
					from #local_transactions tx with (nolock)
					inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and tx.invoice_id = txca.invoice_id	and tx.payer_id = txca.payer_id and tx.contact_id <= -2.1 and tx.contact_id = txca.contact_id

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.payer_id = parent.payer_id and tx.contact_id = parent.contact_id		
					inner join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
						and tx.invoice_id = txca.invoice_id and tx.contact_id = txca.contact_id
					where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.transaction_type in('CR', 'CA') and tx.contact_id <= -2.1 and parent.contact_id <= -2.1

					delete tx 
					from #local_transactions tx
					inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id		
					where tx.skip_bit = 1 and parent.skip_bit = 0 and tx.contact_id <= -2.1 and parent.contact_id <= -2.1

				end

				set @vgsStepEndTime=GETDATE()
				if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
			end
		end

--for ancillary charges that we are grouping, and the parent transaction doesn't exist, we want to ensure the group correctly
if @vShowResults = 'A' or @vShowResults = 'C' or @vShowResults = 'CC' or @vShowResults = 'R'
	begin

		Select @vStep = 115;
		set @vgsStepStartTime = GETDATE()
		if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' @vShowResults in(A,C,CC,R) - Combining Ancillary Child Transactions to parent not in the dataset ' + convert(varchar(26),getdate(),109);

		if @vPrivateStatementsIncluded = 1
		begin
			-- insert empty parent anicillary charge to roll children into - need this because the parent contains the charge code info
			insert into #local_transactions
	
			select distinct lcltx.invoice_id
				, lcltx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				--, 'N' as auto_generated
				, isnull(tx.auto_generated,'N')
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, 0 as applied_payment_id
				, lcltx.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id		
				, lcltx.days_account_id
				, lcltx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				, tx.transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, lcltx.bill_date
				, Null as applied_date
				, lcltx.generated_date
				, tx.days_amount
				, 0 as daily_rate
				, Null as monthly_rate
				, 0 as amount
				, tx.care_level
				, tx.revenue_code
				, tx.hcpcs_code		
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, Case when (tx.transaction_type in('r','dr','cl','cr','d')
					or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
					and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
					and tx.parent_tx_type = 'r')) then 1 
					when tx.transaction_type = 'c' then 3 
					else 2 end as transaction_type_group
				, 5
			from #local_transactions lcltx with (nolock)
			left join #local_transactions ntx on lcltx.distribution_tx_id = ntx.transaction_id and lcltx.parent_tx_type = 'A' and ntx.contact_id >-2.1
				and ntx.distribution_tx_id = ntx.transaction_id and lcltx.contact_id = ntx.contact_id 
			inner join dbo.ar_transactions tx with (nolock) on lcltx.distribution_tx_id = tx.transaction_id and lcltx.parent_tx_type = 'A'  
			where lcltx.contact_id >-2.1 and lcltx.parent_tx_type = 'A' and ntx.transaction_id is null and lcltx.payer_id = tx.payer_id

			delete from #child_transactions

			insert into #child_transactions
			select 	  ctx.distribution_tx_id
					--, ctx.transaction_type
					, '' AS transaction_type
					, ctx.parent_tx_type
					, ctx.contact_id 
					, 0 as invoice_id
					, ctx.payer_id
					, sum(ctx.days_amount)
					, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
					, sum(ctx.monthly_rate)
					, sum(ctx.amount)
					, ctx.bill_date
					, ctx.generated_date
					, 0
			from #local_transactions ctx
			inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and anctx.transaction_type = 'A' and anctx.skip_bit = 5
				and ctx.contact_id = anctx.contact_id 
			where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
				and ctx.contact_id >-2.1 and anctx.contact_id >-2.1 
				and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and isnull(ctx.generated_date,'1/1/1900') = isnull(anctx.generated_date,'1/1/1900')
			group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
			order by 1

			insert into #local_transactions
			select tx.invoice_id
				, tx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				, tx.auto_generated
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, tx.applied_payment_id
				, tx.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
				, tx.days_account_id
				, tx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				, tx.transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, tx.bill_date
				, tx.applied_date
				, tx.generated_date
				, tx.days_amount
				--, tx.days_amount + isnull(txca.days_amount,0) as days_amount
				, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
				, Null as monthly_rate
				, tx.amount + isnull(txca.amount,0) as amount
				, tx.care_level
				, tx.revenue_code
				, tx.hcpcs_code		
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, tx.transaction_type_group
				, 0
			from #local_transactions tx with (nolock)
			inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id
				and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')
			where tx.skip_bit = 5 and tx.contact_id >-2.1 

			--********************************************************** children on different payer than parent
	-- insert empty parent anicillary charge to roll children into - need this because the parent contains the charge code info
			insert into #local_transactions
	
			select distinct lcltx.invoice_id
				, lcltx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				--, 'N' as auto_generated
				, isnull(tx.auto_generated,'N')
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, 0 as applied_payment_id
				, lcltx.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
				, lcltx.days_account_id
				, lcltx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				, tx.transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, lcltx.bill_date
				, Null as applied_date
				, lcltx.generated_date
				, tx.days_amount
				, 0 as daily_rate
				, Null as monthly_rate
				, 0 as amount
				, tx.care_level
				, tx.revenue_code
				, tx.hcpcs_code		
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, Case when (tx.transaction_type in('r','dr','cl','cr','d')
					or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
					and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
					and tx.parent_tx_type = 'r')) then 1 
					when tx.transaction_type = 'c' then 3 
					else 2 end as transaction_type_group
				, 5
			from #local_transactions lcltx with (nolock)
			left join #local_transactions ntx on lcltx.distribution_tx_id = ntx.transaction_id and lcltx.parent_tx_type = 'A' and ntx.contact_id >-2.1 
				and ntx.distribution_tx_id = ntx.transaction_id and lcltx.payer_id <> ntx.payer_id and lcltx.contact_id = ntx.contact_id
			inner join dbo.ar_transactions tx with (nolock) on lcltx.distribution_tx_id = tx.transaction_id and lcltx.parent_tx_type = 'A'  
			where lcltx.parent_tx_type = 'A' and ntx.transaction_id is null and lcltx.payer_id <> tx.payer_id and lcltx.contact_id >-2.1  

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id 	and tx.contact_id = parent.contact_id
			left join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id
			where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id >-2.1  and parent.contact_id >-2.1 
			and txca.distribution_tx_id is not null and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')
			and tx.contact_id >-2.1  and parent.contact_id >-2.1 

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id
			where tx.skip_bit = 1 and parent.skip_bit = 0 and isnull(tx.bill_date,'1/1/1900') = isnull(parent.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(parent.generated_date,'1/1/1900')
				and tx.contact_id >-2.1  and parent.contact_id >-2.1 

			delete from #child_transactions

			insert into #child_transactions
			select 	  ctx.distribution_tx_id
					--, ctx.transaction_type
					, '' AS transaction_type
					, ctx.parent_tx_type
					, ctx.contact_id 
					, 0 as invoice_id
					, ctx.payer_id
					, sum(ctx.days_amount)
					, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
					, sum(ctx.monthly_rate)
					, sum(ctx.amount)
					, ctx.bill_date
					, ctx.generated_date
					, 0
			from #local_transactions ctx
			inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.contact_id = anctx.contact_id
				and anctx.transaction_type = 'A' and anctx.skip_bit = 5
			where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type and ctx.contact_id >-2.1  and anctx.contact_id >-2.1 
				--and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900')
			group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
			order by 1 

			insert into #local_transactions
	
			select tx.invoice_id
				, tx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				, tx.auto_generated
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, tx.applied_payment_id
				, txca.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
				, tx.days_account_id
				, tx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				--, tx.transaction_type
				, 'A' as transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, txca.bill_date
				, tx.applied_date
				, tx.generated_date
				, tx.days_amount
				, isnull(txca.daily_rate,0) as daily_rate
				, Null as monthly_rate
				, isnull(txca.amount,0) as amount
				, tx.care_level				
				, tx.revenue_code
				, tx.hcpcs_code	
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, tx.transaction_type_group
				, 0
			from #local_transactions tx with (nolock)
			inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id  and tx.contact_id = txca.contact_id--and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
				--and tx.payer_id <> txca.payer_id
			where tx.skip_bit = 5

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.contact_id = parent.contact_id
			left join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id 
			where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id >-2.1  and parent.contact_id >-2.1 
			and txca.distribution_tx_id is not null and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id
			where tx.skip_bit = 1 and parent.skip_bit = 0 and isnull(tx.bill_date,'1/1/1900') = isnull(parent.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(parent.generated_date,'1/1/1900')
			and tx.contact_id >-2.1  and parent.contact_id >-2.1 
	
			delete from #local_transactions where skip_bit=5	
		end

		if @vOtherStatementsIncluded = 1
		begin
			-- insert empty parent anicillary charge to roll children into - need this because the parent contains the charge code info
			insert into #local_transactions
	
			select distinct lcltx.invoice_id
				, lcltx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				--, 'N' as auto_generated
				, isnull(tx.auto_generated,'N')
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, 0 as applied_payment_id
				, lcltx.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
				, lcltx.days_account_id
				, lcltx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				, tx.transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, lcltx.bill_date
				, Null as applied_date
				, lcltx.generated_date
				, tx.days_amount
				, 0 as daily_rate
				, Null as monthly_rate
				, 0 as amount
				, tx.care_level
				, tx.revenue_code
				, tx.hcpcs_code		
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, Case when (tx.transaction_type in('r','dr','cl','cr','d')
					or ((tx.transaction_type = 'co'or tx.transaction_type = 'cw')
					and tx.auto_generated = 'y') or (tx.transaction_type = 'xr' 
					and tx.parent_tx_type = 'r')) then 1 
					when tx.transaction_type = 'c' then 3 
					else 2 end as transaction_type_group
				, 5
			from #local_transactions lcltx with (nolock)
			left join #local_transactions ntx on lcltx.distribution_tx_id = ntx.transaction_id and lcltx.parent_tx_type = 'A' and ntx.contact_id <= -2.1
				and ntx.distribution_tx_id = ntx.transaction_id and lcltx.contact_id = ntx.contact_id and lcltx.invoice_id = ntx.invoice_id 
			inner join dbo.ar_transactions tx with (nolock) on lcltx.distribution_tx_id = tx.transaction_id and lcltx.parent_tx_type = 'A'  
			where lcltx.contact_id <= -2.1 and lcltx.parent_tx_type = 'A' and ntx.transaction_id is null and lcltx.payer_id = tx.payer_id

			delete from #child_transactions

			insert into #child_transactions
			select 	  ctx.distribution_tx_id
					--, ctx.transaction_type
					, '' AS transaction_type
					, ctx.parent_tx_type
					, ctx.contact_id 
					, ctx.invoice_id
					, ctx.payer_id
					, sum(ctx.days_amount)
					, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
					, sum(ctx.monthly_rate)
					, sum(ctx.amount)
					, ctx.bill_date
					, ctx.generated_date
					, 0
			from #local_transactions ctx
			inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and anctx.transaction_type = 'A' and anctx.skip_bit = 5
				and ctx.contact_id = anctx.contact_id and ctx.invoice_id = anctx.invoice_id
			where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
				and ctx.contact_id <= -2.1 and anctx.contact_id <= -2.1 
				and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') 
			group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.invoice_id, ctx.generated_date
			order by 1

			insert into #local_transactions
			select tx.invoice_id
				, tx.contact_id
				, tx.batch_id
				, tx.entry_number
				, tx.client_id
				, tx.auto_generated
				, tx.transaction_id
				, tx.reversing_tx_id
				, tx.distribution_tx_id
				, tx.applied_payment_id
				, tx.payer_id
				, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
				, tx.days_account_id
				, tx.dollars_account_id
				, tx.fac_id
				, tx.is_billed
				, tx.transaction_type
				, tx.parent_tx_type
				, tx.[description]
				, tx.alt_description
				, tx.cheque_number
				, tx.effective_date
				, tx.transaction_date
				, tx.bill_date
				, tx.applied_date
				, tx.generated_date
				, tx.days_amount
				--, tx.days_amount + isnull(txca.days_amount,0) as days_amount
				, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
				, Null as monthly_rate
				, tx.amount + isnull(txca.amount,0) as amount
				, tx.care_level
				, tx.revenue_code
				, tx.hcpcs_code		
				, tx.item_type_id
				, tx.comment
				, tx.rate_type_id
				, tx.rugs_modifier
				, tx.medicare_day
				, tx.mppr_flag
				, tx.mark_as_billed_by
				, tx.mark_as_billed_date
				, tx.mark_as_billed_comment
				, tx.transaction_type_group
				, 0
			from #local_transactions tx with (nolock)
			inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id
				and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and tx.invoice_id = txca.invoice_id and tx.contact_id = txca.contact_id 
			where tx.skip_bit = 5 and tx.contact_id <= -2.1 

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id and tx.contact_id = parent.contact_id and tx.invoice_id = parent.invoice_id
			left join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.invoice_id = txca.invoice_id and tx.contact_id = txca.contact_id
			where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id <= 2  and parent.contact_id <= -2.1 
			and txca.distribution_tx_id is not null and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')

			delete tx 
			from #local_transactions tx
			inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id = parent.contact_id
				and tx.invoice_id = parent.invoice_id
			where tx.skip_bit = 1 and parent.skip_bit = 0 and isnull(tx.bill_date,'1/1/1900') = isnull(parent.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(parent.generated_date,'1/1/1900')
			and tx.contact_id <= -2.1  and parent.contact_id <= -2.1 
	
			delete from #local_transactions where skip_bit=5	
		end

--********************************************************** 

		set @vgsStepEndTime=GETDATE()
		if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

		if @vCombineChildren = 0 --need to summarize ancillaries that have a parent and combine children was not selected
			begin
				if @vPrivateStatementsIncluded = 1
					begin
							Select @vStep = 120;
							set @vgsStepStartTime = GETDATE()
							if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' @vShowResults in(A,C,CC,R) - Combining Children not selected - Combine Ancillary Child Transactions to parent ' + convert(varchar(26),getdate(),109);

							delete from #child_transactions --eliminate the missing parent ones

							insert into #child_transactions
							select 	  ctx.distribution_tx_id
									--, ctx.transaction_type
									, '' AS transaction_type
									, ctx.parent_tx_type
									, ctx.contact_id 
									, 0 as invoice_id
									, ctx.payer_id
									, sum(ctx.days_amount)
									, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
									, sum(ctx.monthly_rate)
									, sum(ctx.amount)
									, ctx.bill_date
									, ctx.generated_date
									, 0
							from #local_transactions ctx
							inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and anctx.transaction_type = 'A' and anctx.skip_bit <> 5 and ctx.contact_id = anctx.contact_id
							where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type and ctx.contact_id >-2.1  and anctx.contact_id >-2.1 
								and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and isnull(ctx.generated_date,'1/1/1900') = isnull(anctx.generated_date,'1/1/1900')
							group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
							order by 1

							insert into #local_transactions
							select tx.invoice_id
								, tx.contact_id
								, tx.batch_id
								, tx.entry_number
								, tx.client_id
								, tx.auto_generated
								, tx.transaction_id
								, tx.reversing_tx_id
								, tx.distribution_tx_id
								, tx.applied_payment_id
								, tx.payer_id
								, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
								, tx.days_account_id
								, tx.dollars_account_id
								, tx.fac_id
								, tx.is_billed
								, tx.transaction_type
								, tx.parent_tx_type
								, tx.[description]
								, tx.alt_description
								, tx.cheque_number
								, tx.effective_date
								, tx.transaction_date
								, tx.bill_date
								, tx.applied_date
								, tx.generated_date
								, tx.days_amount
								--, tx.days_amount + isnull(txca.days_amount,0) as days_amount
								, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
								, Null as monthly_rate
								, tx.amount + isnull(txca.amount,0) as amount
								, tx.care_level
								, tx.revenue_code
								, tx.hcpcs_code		
								, tx.item_type_id
								, tx.comment
								, tx.rate_type_id
								, tx.rugs_modifier
								, tx.medicare_day
								, tx.mppr_flag
								, tx.mark_as_billed_by
								, tx.mark_as_billed_date
								, tx.mark_as_billed_comment
								, tx.transaction_type_group
								, 0
							from #local_transactions tx with (nolock)
							inner join dbo.ar_payers payr with (nolock) on tx.payer_id = payr.payer_id and tx.fac_id = payr.fac_id
							inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id
								and tx.contact_id >-2.1  and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')

						delete tx 
						from #local_transactions tx
						inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id	and tx.contact_id >-2.1  and parent.contact_id >-2.1 
						left join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id 
						where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id = txca.contact_id
						and txca.distribution_tx_id is not null and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(txca.generated_date,'1/1/1900')

						delete tx 
						from #local_transactions tx
						inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id >-2.1  and parent.contact_id >-2.1 
						where tx.skip_bit = 1 and parent.skip_bit = 0 and isnull(tx.bill_date,'1/1/1900') = isnull(parent.bill_date,'1/1/1900') and isnull(tx.generated_date,'1/1/1900') = isnull(parent.generated_date,'1/1/1900')

			--********************************************************** children on different payer than parent
						delete from #child_transactions

						insert into #child_transactions
						select 	  ctx.distribution_tx_id
								--, ctx.transaction_type
								, '' AS transaction_type
								, ctx.parent_tx_type
								, ctx.contact_id 
								, 0 as invoice_id
								, ctx.payer_id
								, sum(ctx.days_amount)
								, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
								, sum(ctx.monthly_rate)
								, sum(ctx.amount)
								, ctx.bill_date
								, ctx.generated_date
								, 0
						from #local_transactions ctx
						join dbo.ar_payers payer on payer.payer_id = ctx.payer_id and payer.fac_id = ctx.fac_id 
						inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and anctx.payer_id <> ctx.payer_id and anctx.transaction_type = 'A' and anctx.skip_bit <> 5
							and ctx.contact_id >-2.1  and anctx.contact_id >-2.1  and ctx.contact_id = anctx.contact_id
						where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type 
							--and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900')
						group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.generated_date
						order by 1

						insert into #local_transactions
	
						select tx.invoice_id
							, tx.contact_id
							, tx.batch_id
							, tx.entry_number
							, tx.client_id
							, tx.auto_generated
							, tx.transaction_id
							, tx.reversing_tx_id
							, tx.distribution_tx_id
							, tx.applied_payment_id
							, txca.payer_id
							, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
							, tx.days_account_id
							, tx.dollars_account_id
							, tx.fac_id
							, tx.is_billed
							, tx.transaction_type
							, tx.parent_tx_type
							, tx.[description]
							, tx.alt_description
							, tx.cheque_number
							, tx.effective_date
							, tx.transaction_date
							, txca.bill_date
							, tx.applied_date
							, tx.generated_date
							, tx.days_amount
							, isnull(txca.daily_rate,0) as daily_rate
							, Null as monthly_rate
							, isnull(txca.amount,0) as amount
							, tx.care_level				
							, tx.revenue_code
							, tx.hcpcs_code	
							, tx.item_type_id
							, tx.comment
							, tx.rate_type_id
							, tx.rugs_modifier
							, tx.medicare_day
							, tx.mppr_flag
							, tx.mark_as_billed_by
							, tx.mark_as_billed_date
							, tx.mark_as_billed_comment
							, tx.transaction_type_group
							, 0
						from #local_transactions tx with (nolock)
						inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id  and tx.contact_id = txca.contact_id--and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
							and tx.payer_id <> txca.payer_id and tx.contact_id >-2.1

						delete tx 
						from #local_transactions tx
						inner join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id--and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900')
							and tx.contact_id >-2.1
						where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0

						delete tx 
						from #local_transactions tx
						inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id >-2.1
						where tx.skip_bit = 1 and parent.skip_bit = 0
			
			--********************************************************** 
						set @vgsStepEndTime=GETDATE()
						if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
			end

				if @vOtherStatementsIncluded = 1
					begin
							Select @vStep = 121;
							set @vgsStepStartTime = GETDATE()
							if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' @vShowResults in(A,C,CC,R) - Combining Children not selected - Combine Ancillary Child Transactions to parent ' + convert(varchar(26),getdate(),109);

							delete from #child_transactions --eliminate the missing parent ones

							insert into #child_transactions
							select 	  ctx.distribution_tx_id
									--, ctx.transaction_type
									, '' AS transaction_type
									, ctx.parent_tx_type
									, ctx.contact_id 
									, ctx.invoice_id
									, ctx.payer_id
									, sum(ctx.days_amount)
									, sum(case when isnull(ctx.days_amount,0) < 0 and isnull(ctx.daily_rate,0) < 0 and ctx.amount < 0 then (ctx.daily_rate * -1) else ctx.daily_rate end)
									, sum(ctx.monthly_rate)
									, sum(ctx.amount)
									, ctx.bill_date
									, ctx.generated_date
									, 0
							from #local_transactions ctx
							inner join #local_transactions anctx on ctx.distribution_tx_id = anctx.transaction_id and ctx.payer_id = anctx.payer_id and anctx.transaction_type = 'A' and anctx.skip_bit <> 5
								and ctx.contact_id <= -2.1  and anctx.contact_id <= -2.1  and ctx.contact_id = anctx.contact_id
							where  ctx.parent_tx_type is not null and ctx.transaction_type <> ctx.parent_tx_type
								and isnull(ctx.bill_date,'1/1/1900') = isnull(anctx.bill_date,'1/1/1900') and ctx.invoice_id = anctx.invoice_id
							group by ctx.distribution_tx_id, ctx.parent_tx_type, ctx.contact_id, ctx.payer_id, ctx.bill_date, ctx.invoice_id, ctx.generated_date
							order by 1

							insert into #local_transactions
							select tx.invoice_id
								, tx.contact_id
								, tx.batch_id
								, tx.entry_number
								, tx.client_id
								, tx.auto_generated
								, tx.transaction_id
								, tx.reversing_tx_id
								, tx.distribution_tx_id
								, tx.applied_payment_id
								, tx.payer_id
								, Case when tx.transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 then isnull(tx.parent_payer_id, 0) else null end as parent_payer_id
								, tx.days_account_id
								, tx.dollars_account_id
								, tx.fac_id
								, tx.is_billed
								, tx.transaction_type
								, tx.parent_tx_type
								, tx.[description]
								, tx.alt_description
								, tx.cheque_number
								, tx.effective_date
								, tx.transaction_date
								, tx.bill_date
								, tx.applied_date
								, tx.generated_date
								, tx.days_amount
								--, tx.days_amount + isnull(txca.days_amount,0) as days_amount
								, tx.daily_rate + isnull(txca.daily_rate,0) as daily_rate
								, Null as monthly_rate
								, tx.amount + isnull(txca.amount,0) as amount
								, tx.care_level
								, tx.revenue_code
								, tx.hcpcs_code		
								, tx.item_type_id
								, tx.comment
								, tx.rate_type_id
								, tx.rugs_modifier
								, tx.medicare_day
								, tx.mppr_flag
								, tx.mark_as_billed_by
								, tx.mark_as_billed_date
								, tx.mark_as_billed_comment
								, tx.transaction_type_group
								, 0
							from #local_transactions tx with (nolock)
							inner join dbo.ar_payers payr with (nolock) on tx.payer_id = payr.payer_id and tx.fac_id = payr.fac_id
							inner join #child_transactions txca with (nolock) on tx.transaction_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id and tx.contact_id = txca.contact_id
								and tx.contact_id <= -2.1 and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and tx.invoice_id = txca.invoice_id

						delete tx 
						from #local_transactions tx
						inner join #local_transactions parent on parent.transaction_id = tx.distribution_tx_id	and tx.contact_id <= -2.1  and parent.contact_id <= -2.1 and parent.contact_id = tx.contact_id	
						left join  #child_transactions txca on tx.distribution_tx_id = txca.distribution_tx_id and tx.payer_id = txca.payer_id 
						where tx.transaction_id <> tx.distribution_tx_id and tx.skip_bit <> 0 and tx.contact_id = txca.contact_id
						and txca.distribution_tx_id is not null and isnull(tx.bill_date,'1/1/1900') = isnull(txca.bill_date,'1/1/1900') and tx.invoice_id = txca.invoice_id

						delete tx 
						from #local_transactions tx
						inner join #local_transactions parent on parent.distribution_tx_id = tx.distribution_tx_id and parent.transaction_id = tx.transaction_id and tx.contact_id <= -2.1  and parent.contact_id <= -2.1 and parent.contact_id = tx.contact_id	
						where tx.skip_bit = 1 and parent.skip_bit = 0 and isnull(tx.bill_date,'1/1/1900') = isnull(parent.bill_date,'1/1/1900') and tx.invoice_id = parent.invoice_id


						set @vgsStepEndTime=GETDATE()
						if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
				end

		end
	end

Select @vStep = 125;
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Combining Consecutive Room Charges with no rate change ' + convert(varchar(26),getdate(),109);

delete from #local_transactions where parent_tx_type='R' and amount = 0.00 --cleanup before useless data before combining

If @vPrivateStatementsIncluded = 1 
	begin
		--flag duplicates to be skipped
		update tx set tx.skip_bit = 8
		from
		#local_transactions tx
		inner join (select tx.bill_date,tx.generated_date,tx.contact_id,tx.client_id,tx.effective_Date,tx.parent_tx_type,tx.transaction_type,tx.daily_rate,tx.monthly_rate,tx.days_amount, 
						case when tx.reversing_tx_id is null then 0 else 1 end as reversed
					from #local_transactions tx
					inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
					where tx.parent_tx_type='R' and ccl.contact_id > -2.1
					group by tx.bill_date,tx.generated_date,tx.contact_id,tx.client_id,tx.effective_Date,tx.parent_tx_type,tx.transaction_type,tx.daily_rate,tx.monthly_rate,tx.days_amount,
						case when tx.reversing_tx_id is null then 0 else 1 end
					having count(*) >1
					) dups on tx.bill_date = dups.bill_date and tx.generated_date = dups.generated_date and tx.client_id = dups.client_id and tx.contact_id = dups.contact_id and
					tx.effective_Date = dups.effective_Date and	tx.parent_tx_type = dups.parent_tx_type and tx.transaction_type = dups.transaction_type and
					isnull(tx.daily_rate,0) = isnull(dups.daily_rate,0) and isnull(tx.monthly_rate,0) = isnull(dups.monthly_rate,0) and tx.days_amount = dups.days_amount
					and (case when tx.reversing_tx_id is null then 0 else 1 end) = dups.reversed

		--flag groups that sum to $0 to be skipped
		update marked set skip_bit = 8
		from #local_transactions marked
		inner join (
					select tx.client_id, tx.contact_id, tx.bill_date, tx.generated_date, tx.effective_date, tx.transaction_type,tx.description, sum(tx.amount) as ttl, count(*) as cnt
					from #local_transactions tx
					inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
					where tx.parent_tx_type='R' and ccl.contact_id > -2.1 
					group by tx.client_id, tx.contact_id, tx.bill_date, tx.generated_date, tx.effective_date, tx.transaction_type, description having count (*) > 1
					) sum0 on marked.client_id = sum0.client_id and marked.contact_id = sum0.contact_id and marked.bill_date = sum0.bill_date
						and marked.generated_date = sum0.generated_date and marked.effective_date = sum0.effective_date and marked.transaction_type = sum0.transaction_type
						and marked.description = sum0.description and sum0.ttl = 0 and marked.skip_bit <> 8

		--non-reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R')
					or (@vCombineCouncilPayerContribution = 1 and pre.parent_payer_id = nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' 
					))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' 
					or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null)
					or (@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC'))
					and tx.reversing_tx_id is null and tx.skip_bit <> 8  and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1) 
					) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' 
				  or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null)
				  or (@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC'))
				and tx.reversing_tx_id is null and tx.skip_bit <> 8  and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1) 
				) nxt
			on pre.client_id=nxt.client_id and pre.contact_id=nxt.contact_id and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl--, myup.skip_bit = 7
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit, 
				generated_date,
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate,
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' 
										or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R')
										or (transaction_type = 'PC' and @vCombineCouncilPayerContribution = 1 )) 
				and reversing_tx_id is null and skip_bit = 9
			group by contact_id, client_id, generated_date, skip_bit, transaction_type, isnull(parent_payer_id,0),isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.contact_id =  conttl.contact_id and myup.client_id =  conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id = conttl.client_id and myup.generated_date = conttl.generated_date and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date)  = conttl.min_date and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is null
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)

			delete from #local_transactions where skip_bit=9

		--negative reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (@vCombineCouncilPayerContribution=1 and pre.parent_payer_id=nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R'))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC'))
			and tx.reversing_tx_id is not null and tx.days_amount < 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1)) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1))
			and tx.reversing_tx_id is not null and tx.days_amount < 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1) ) nxt			
			on pre.contact_id=nxt.contact_id and pre.client_id=nxt.client_id and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit, 
				generated_date,
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate,
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R') OR (transaction_type='PC' and @vCombineCouncilPayerContribution=1 )) 
				and reversing_tx_id is not null and skip_bit = 9 and days_amount < 0
			group by contact_id,client_id, skip_bit, generated_date, transaction_type, isnull(parent_payer_id,0), isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.contact_id =  conttl.contact_id and myup.client_id =  conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id =  conttl.client_id and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date)  = conttl.min_date and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is not null and myup.days_amount < 0 and myup.generated_date =  conttl.generated_date
				and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)

			delete from #local_transactions where skip_bit=9

		--positive reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (@vCombineCouncilPayerContribution=1 and pre.parent_payer_id=nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R'))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) OR (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
				and tx.reversing_tx_id is not null and tx.days_amount > 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1)) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.generated_date
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.contact_id,tx.client_id
					order by  tx.contact_id,tx.client_id,tx.generated_date,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
				and tx.reversing_tx_id is not null and tx.days_amount > 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1)) nxt
			on pre.contact_id=nxt.contact_id and pre.client_id=nxt.client_id and pre.generated_date=nxt.generated_date and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit,
				generated_date, 
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate, 
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R') or (transaction_type='PC' and @vCombineCouncilPayerContribution=1 )) 
				and reversing_tx_id is not null and skip_bit = 9 and days_amount > 0
			group by contact_id,client_id, skip_bit, generated_date, transaction_type, isnull(parent_payer_id,0), isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.client_id =  conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id =  conttl.client_id and myup.contact_id =  conttl.contact_id and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date)  = conttl.min_date and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is not null and myup.days_amount > 0 and myup.generated_date =  conttl.generated_date
				and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)				

			delete from #local_transactions where skip_bit=9
			update #local_transactions set skip_bit = 1 where skip_bit = 8

	end

if @vOtherStatementsIncluded = 1 
	begin

		--flag duplicates to be skipped
		update tx set tx.skip_bit = 8
		from
		#local_transactions tx
		inner join (select tx.bill_date,tx.invoice_id,tx.contact_id,tx.client_id,tx.effective_Date,tx.parent_tx_type,tx.transaction_type,tx.daily_rate,tx.monthly_rate,tx.days_amount, 
						case when tx.reversing_tx_id is null then 0 else 1 end as reversed
					from #local_transactions tx
					inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
					where tx.parent_tx_type='R' and ccl.contact_id <= -2.1
					group by tx.bill_date,tx.invoice_id,tx.contact_id,tx.client_id,tx.effective_Date,tx.parent_tx_type,tx.transaction_type,tx.daily_rate,tx.monthly_rate,tx.days_amount,
						case when tx.reversing_tx_id is null then 0 else 1 end
					having count(*) >1
					) dups on tx.bill_date = dups.bill_date and tx.invoice_id = dups.invoice_id and tx.client_id = dups.client_id and tx.contact_id = dups.contact_id and
					tx.effective_Date = dups.effective_Date and	tx.parent_tx_type = dups.parent_tx_type and tx.transaction_type = dups.transaction_type and
					isnull(tx.daily_rate,0) = isnull(dups.daily_rate,0) and isnull(tx.monthly_rate,0) = isnull(dups.monthly_rate,0) and tx.days_amount = dups.days_amount
					and (case when tx.reversing_tx_id is null then 0 else 1 end) = dups.reversed

		--flag groups that sum to $0 to be skipped
		update marked set skip_bit = 8
		from #local_transactions marked
		inner join (
					select tx.contact_id,tx.client_id, tx.bill_date, tx.invoice_id, tx.effective_date, tx.transaction_type,tx.description, sum(tx.amount) as ttl, count(*) as cnt
					from #local_transactions tx
					inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
					where tx.parent_tx_type='R' and ccl.contact_id <= -2.1 
					group by tx.contact_id,tx.client_id, tx.bill_date, tx.invoice_id, tx.effective_date, tx.transaction_type, description having count (*) > 1
					) sum0 on marked.contact_id = sum0.contact_id and marked.client_id = sum0.client_id and marked.bill_date = sum0.bill_date
						and marked.invoice_id = sum0.invoice_id and marked.effective_date = sum0.effective_date and marked.transaction_type = sum0.transaction_type
						and marked.description = sum0.description and sum0.ttl = 0 and marked.skip_bit <> 8

		--non-reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (@vCombineCouncilPayerContribution=1 and pre.parent_payer_id=nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R'))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
				and tx.reversing_tx_id is null and tx.skip_bit <> 8  and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC')  or ccl.contact_id > -2.1) 
				) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
				and tx.reversing_tx_id is null and tx.skip_bit <> 8  and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC') or ccl.contact_id <= -2.1) 
				) nxt
			on pre.contact_id=nxt.contact_id and pre.client_id=nxt.client_id and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl--, myup.skip_bit = 7
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit, 
				invoice_id,
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate,
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R')
															   or (transaction_type='PC' and @vCombineCouncilPayerContribution=1 )) 
				and reversing_tx_id is null and skip_bit = 9
			group by contact_id,client_id, invoice_id, skip_bit, transaction_type, isnull(parent_payer_id,0), isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.contact_id =  conttl.contact_id and myup.client_id =  conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id = conttl.client_id and myup.invoice_id = conttl.invoice_id and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date)  = conttl.min_date and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is null
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)
				

			delete from #local_transactions where skip_bit=9

		--negative reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (@vCombineCouncilPayerContribution=1 and pre.parent_payer_id=nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R'))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
			and tx.reversing_tx_id is not null and tx.days_amount < 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC') or ccl.contact_id <= -2.1)) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
			and tx.reversing_tx_id is not null and tx.days_amount < 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC') or ccl.contact_id <= -2.1)) nxt
			on pre.contact_id=nxt.contact_id and pre.client_id=nxt.client_id and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit, 
				invoice_id,
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate,
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R') or (transaction_type='PC' and @vCombineCouncilPayerContribution=1 )) 
				and reversing_tx_id is not null and skip_bit = 9 and days_amount < 0
			group by contact_id,client_id, skip_bit, invoice_id, transaction_type, isnull(parent_payer_id,0), isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.contact_id = conttl.contact_id and myup.client_id = conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id =  conttl.client_id and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date) = conttl.min_date and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is not null and myup.days_amount < 0 and myup.invoice_id =  conttl.invoice_id
				and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)

			delete from #local_transactions where skip_bit=9

		--positive reversed charges
			update nxt set nxt.skip_bit =(case when pre.daily_rate=nxt.daily_rate and pre.monthly_rate=nxt.monthly_rate and dateadd(dd,abs(pre.days_amount),pre.effective_date) = nxt.effective_date
				and datepart(mm,pre.effective_date) = datepart(mm,nxt.effective_date) and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and ((@vCombineRecurringAncillary=1 and pre.item_type_id=nxt.item_type_id and pre.transaction_type='A' and nxt.transaction_type='A' ) OR (@vCombineCouncilPayerContribution=1 and pre.parent_payer_id=nxt.parent_payer_id and pre.transaction_type='PC' and nxt.transaction_type='PC' ) OR (pre.parent_tx_type='R' and nxt.parent_tx_type='R'))
				then 9 else 1 end)
			from (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1  ))
				and tx.reversing_tx_id is not null and tx.days_amount > 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC') or ccl.contact_id <= -2.1)) pre
			join (select tx.transaction_id
				,tx.contact_id
				,tx.client_id
				,tx.invoice_id
				,tx.parent_tx_type
				,tx.transaction_type
				,tx.effective_date
				,isnull(tx.daily_rate,0) as daily_rate
				,isnull(tx.monthly_rate,0) as monthly_rate
				,tx.days_amount
				,tx.amount
				,tx.item_type_id
				,tx.parent_payer_id
				,tx.skip_bit
				,ROW_NUMBER() OVER ( PARTITION BY tx.client_id
					order by  tx.contact_id,tx.client_id,tx.invoice_id,tx.transaction_type,tx.parent_payer_id,isnull(tx.daily_rate,0),isnull(tx.monthly_rate,0),tx.effective_date,tx.transaction_id) as rwnum
			from #local_transactions tx
			inner join #contact_clients ccl on tx.invoice_id = ccl.invoice_id and tx.contact_id = ccl.contact_id
			where (tx.parent_tx_type='R' or (tx.transaction_type='A' and @vCombineRecurringAncillary=1 and tx.auto_generated='R' and tx.item_type_id is not null) or (tx.transaction_type='PC' and @vCombineCouncilPayerContribution=1 ))
				and tx.reversing_tx_id is not null and tx.days_amount > 0 and tx.skip_bit <> 8 and ((@vCombineCouncilPayerContribution = 1 and tx.transaction_type = 'PC') or ccl.contact_id <= -2.1)) nxt
			on pre.contact_id=nxt.contact_id and pre.client_id=nxt.client_id and pre.invoice_id=nxt.invoice_id and pre.transaction_type=nxt.transaction_type 
				and pre.rwnum=(nxt.rwnum-1)

		update myup set myup.days_amount = myup.days_amount + conttl.days_ttl, myup.amount = myup.amount + conttl.ttl
		from #local_transactions myup
		inner join 
			(select contact_id,
				client_id, 
				skip_bit,
				invoice_id, 
				transaction_type,
				isnull(parent_payer_id,0) as parent_payer_id,
				isnull(daily_rate,0) as daily_rate,
				isnull(monthly_rate,0) as monthly_rate, 
				year(effective_date) as grp_year, 
				month(effective_date) as grp_month, 
				min(effective_date) as min_date,
				max(effective_date) as max_date, 
				sum(days_amount) as days_ttl, 
				sum(amount) as ttl
			from #local_transactions where (parent_tx_type='R' or (transaction_type='A' and @vCombineRecurringAncillary=1 and auto_generated='R') or (transaction_type='PC' and @vCombineCouncilPayerContribution=1 )) 
				and reversing_tx_id is not null and skip_bit = 9 and days_amount > 0
			group by contact_id, client_id, skip_bit, invoice_id, transaction_type, isnull(parent_payer_id,0), isnull(daily_rate,0),isnull(monthly_rate,0), year(effective_date), month(effective_date)) conttl
			on myup.contact_id = conttl.contact_id and myup.client_id = conttl.client_id and myup.transaction_type =  conttl.transaction_type and myup.client_id =  conttl.client_id and 
				dateadd(dd,abs(myup.days_amount),myup.effective_date) = conttl.min_date and myup.skip_bit <> 9 and myup.skip_bit <> 8
				and myup.reversing_tx_id is not null and myup.days_amount > 0 and myup.invoice_id =  conttl.invoice_id
				and isnull(myup.daily_rate,0) =  conttl.daily_rate and isnull(myup.monthly_rate,0) =  conttl.monthly_rate 
				and (myup.transaction_type <> 'PC' or myup.parent_payer_id = conttl.parent_payer_id)

			delete from #local_transactions where skip_bit=9
			update #local_transactions set skip_bit = 1 where skip_bit = 8

	end

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

Select @vStep = 130;
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP '+convert(varchar(20), @vStep)  + ' Formating and grouping transaction Data ' + convert(varchar(26),getdate(),109);
	
if @vShowResults = 'D'

	begin

		INSERT INTO #transactions	
		SELECT 
			  concl.invoice_id
			, tx.fac_id
			, concl.contact_id
			, concl.contact_num
			, tx.client_id
			, tx.payer_id
			, libpayer.description AS payer
			, libpayer.payer_type
			, tx.batch_id
			, tx.entry_number
			, tx.distribution_tx_id
			, tx.transaction_id
			, tx.reversing_tx_id
			, isnull(tx.auto_generated, 'N') as auto_generated
			, concl.bill_date
			, tx.transaction_date as posting_date
			, tx.effective_date
			, Null as effective_from_date
			, Null as effective_thru_date
			, tx.generated_date
			, libcc.charge_code
			, isnull(rtx.charge_frequency,'O') as frequency
			, tx.revenue_code
			, tx.hcpcs_code
			, tx.mppr_flag
			, Case when tx.transaction_type = 'R' and isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> '' 
					then rtype.long_description + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then 
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' + convert(varchar(4),YEAR(tx.effective_date))
					end) 
					+ (case when isnull(arpayer.show_care_level,'N') = 'Y'  and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
				and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') = ''  
				and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'CL' and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X','CA') and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')='' then tx.description
				when tx.transaction_type ='PC' and @vCombineCouncilPayerContribution=1  then 
					LEFT(tx.description,CHARINDEX(':',tx.description)-1)+': ' + FORMAT(tx.effective_date,'MMM dd') + 
						(case 
							when (abs(tx.days_amount) > 1 and (DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) < 10) then '-' + '0' + CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' + convert(varchar(4),YEAR(tx.effective_date))
							when abs(tx.days_amount) > 1 then '-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' + convert(varchar(4),YEAR(tx.effective_date))
							else ' ' +	convert(varchar(4),YEAR(tx.effective_date)) end)
				when tx.transaction_type ='CA' and isnull(tx.alt_description,'')='' then tx.description + ' ('+FORMAT(tx.effective_date,'MMM')+')'
				when tx.transaction_type = 'CO' and tx.parent_tx_type <> 'R' then tx.description --+  ' Coinsurance'
				when tx.transaction_type = 'XR' and tx.parent_tx_type ='A' then tx.description --+  ' Reimb. Reduction' 
				when tx.transaction_type = 'CX' and tx.parent_tx_type ='R' then 'Room Excess' 
				when (tx.transaction_type in('XR','CO', 'D', 'CR') or (tx.transaction_type = 'CL' and isnull(tx.alt_description,'')='')) and tx.parent_tx_type = 'R' then
				(Case 
					when isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> ''  
						then rtype.long_description + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(arpayer.show_care_level,'N') = 'Y' and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
						and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' +
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then  
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'XR'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'CO'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else
							' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end) --+ ' Coinsurance'
					else 
						(case when tx.transaction_type = 'XR' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
							(case when abs(tx.days_amount) > 1 then
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else  ' ' +	convert(varchar(4),YEAR(tx.effective_date))
							end)
						else 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') +
							(case when abs(tx.days_amount) > 1 then 
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else ' ' + convert(varchar(4),YEAR(tx.effective_date))
							end) --+
							--(case when tx.transaction_type = 'D' then ' Deductible' 
							--	when tx.transaction_type = 'CO' then ' Coinsurance' else '' end)  
						end)
					end
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				) --+ (case when tx.transaction_type = 'CL' then ' Coverage Deductible' else '' end) 
				 --+ (case when tx.transaction_type = 'CR' then ' Contractural Adj.' else '' end) 
				else tx.description end as detail_description
			, tx.care_level
			, Case when tx.transaction_type = 'R' and libpayer.pps_flag='Y' then ltrim(rtrim(str(tx.medicare_day))) + '-' 
				+ltrim(rtrim(str((
					case when tx.days_amount < 0 and (tx.days_amount*-1) > 1 then tx.days_amount*-1 + tx.medicare_day -1
					when tx.days_amount > 0 and (tx.days_amount*-1) = 1 then tx.days_amount*-1  + tx.medicare_day
					when tx.days_amount > 1 then tx.days_amount + tx.medicare_day -1
					else tx.days_amount + tx.medicare_day end))))
				else Null
					end as benefit_days
			, tx.parent_tx_type
			, tx.transaction_type
			, tx.daily_rate as unit_amount
			, case when tx.transaction_type = 'XR' then Null else tx.days_amount end as number_of_units
			, tx.amount
			, acct.account_number as gl_account
			, daysacct.account_number as days_account
			, case when tx.is_billed = 1 and isnull(tx.invoice_id,0) > 0 then 'Y'
				when tx.is_billed = 1 and isnull(tx.invoice_id,0) < 0 then 'N/A' else 'N' end as billed
			, tx.comment
			, tx.cheque_number
			, case when libcc.adjustment_type is not null and tx.transaction_type = 'X' then libcc.transaction_type + '_' + libcc.adjustment_type 
				when recur.transaction_id is not null then 'Recur'
				when tx.mppr_flag = 1 or convert(bit, case when bump.bumpup_transaction_id is null then 0 else 1 end) = 'true' then 'MPPR'
				else tx.transaction_type end as adjusted_tx_type
			, case when recur.transaction_id is null then 0 else 1 end as recurring_tx
			, case when tx.reversing_tx_id is null then 0 else 1 end as reversed
			, tx.transaction_type_group
			, 0 as ancillary_year
			, 0 as ancillary_month
			, 0 as balance_due
			, 0 as other_payer
			, NULL as aging_total
			, NULL as aging_current_label
			, NULL as aging_current_amount
			, NULL as aging_30_label
			, NULL as aging_30_amount
			, NULL as aging_60_label
			, NULL as aging_60_amount
			, NULL as aging_90_label
			, NULL as aging_90_amount
			, NULL as aging_120_label
			, NULL as aging_120_amount
			, NULL as aging_150_label
			, NULL as aging_150_amount
			, NULL as aging_180_label
			, NULL as aging_180_amount
			, NULL as aging_210_label
			, NULL as aging_210_amount
			, 0 as detail_order		
		FROM #local_transactions tx with (nolock)
		inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
		inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
		inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'
		left join dbo.ar_transactions_location_room roomLocation with (nolock) on roomLocation.transaction_id = tx.transaction_id    
		left join dbo.ar_transaction_recurring_tx_refs recur with (nolock) on tx.transaction_id = recur.transaction_id
		left join dbo.ar_recurring_transactions rtx with (nolock) on rtx.transaction_id = recur.recurring_tx_id
		left join dbo.ar_batch batch with (nolock) on tx.batch_id = batch.batch_id
		left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
		left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
		left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
		left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
		left join dbo.ar_mppr_bumpup bump with (nolock) on tx.distribution_tx_id = bump.bumpup_transaction_id  
		where tx.transaction_type <> 'TA'
	end

if @vShowResults = 'A'

	begin

		INSERT INTO #transactions	
		SELECT 
			  concl.invoice_id
			, tx.fac_id
			, concl.contact_id
			, concl.contact_num
			, tx.client_id
			, tx.payer_id
			, libpayer.description AS payer
			, libpayer.payer_type
			, tx.batch_id
			, tx.entry_number
			, tx.distribution_tx_id
			, tx.transaction_id
			, tx.reversing_tx_id
			, isnull(tx.auto_generated, 'N') as auto_generated
			, concl.bill_date
			, tx.transaction_date as posting_date
			, tx.effective_date
			, Null as effective_from_date
			, Null as effective_thru_date
			, tx.generated_date
			, libcc.charge_code
			, isnull(rtx.charge_frequency,'O') as frequency
			, tx.revenue_code
			, tx.hcpcs_code
			, tx.mppr_flag
			, Case when tx.transaction_type = 'R' and isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> '' 
					then rtype.long_description + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then 
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' + convert(varchar(4),YEAR(tx.effective_date))
					end) 
					+ (case when isnull(arpayer.show_care_level,'N') = 'Y'  and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
				and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') = ''  
				and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'CL' and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X','CA') and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')='' then tx.description
				when tx.transaction_type ='CA' and isnull(tx.alt_description,'')='' then tx.description + ' ('+FORMAT(tx.effective_date,'MMM')+')'
				when tx.transaction_type = 'CO' and tx.parent_tx_type <> 'R' then tx.description --+  ' Coinsurance'
				when tx.transaction_type = 'XR' and tx.parent_tx_type ='A' then tx.description --+  ' Reimb. Reduction' 
				when tx.transaction_type = 'CX' and tx.parent_tx_type ='R' then 'Room Excess' 
				when (tx.transaction_type in('XR','CO', 'D', 'CR') or (tx.transaction_type = 'CL' and isnull(tx.alt_description,'')='')) and tx.parent_tx_type = 'R' then
				(Case 
					when isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> ''  
						then rtype.long_description + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(arpayer.show_care_level,'N') = 'Y' and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
						and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' +
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then  
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'XR'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'CO'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else
							' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end) --+ ' Coinsurance'
					else 
						(case when tx.transaction_type = 'XR' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
							(case when abs(tx.days_amount) > 1 then
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else  ' ' +	convert(varchar(4),YEAR(tx.effective_date))
							end)
						else 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') +
							(case when abs(tx.days_amount) > 1 then 
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else ' ' + convert(varchar(4),YEAR(tx.effective_date))
							end) --+
							--(case when tx.transaction_type = 'D' then ' Deductible' 
							--	when tx.transaction_type = 'CO' then ' Coinsurance' else '' end)  
						end)
					end
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				) --+ (case when tx.transaction_type = 'CL' then ' Coverage Deductible' else '' end) 
				 --+ (case when tx.transaction_type = 'CR' then ' Contractural Adj.' else '' end) 
				else tx.description end as detail_description
			, tx.care_level
			, Case when tx.transaction_type = 'R' and libpayer.pps_flag='Y' then ltrim(rtrim(str(tx.medicare_day))) + '-' 
				+ltrim(rtrim(str((
					case when tx.days_amount < 0 and (tx.days_amount*-1) > 1 then tx.days_amount*-1 + tx.medicare_day -1
					when tx.days_amount > 0 and (tx.days_amount*-1) = 1 then tx.days_amount*-1  + tx.medicare_day
					when tx.days_amount > 1 then tx.days_amount + tx.medicare_day -1
					else tx.days_amount + tx.medicare_day end))))
				else Null
					end as benefit_days
			, tx.parent_tx_type
			, tx.transaction_type
			, tx.daily_rate as unit_amount
			, case when tx.transaction_type = 'XR' then Null else tx.days_amount end as number_of_units
			, tx.amount
			, acct.account_number as gl_account
			, daysacct.account_number as days_account
			, case when tx.is_billed = 1 and isnull(tx.invoice_id,0) > 0 then 'Y'
				when tx.is_billed = 1 and isnull(tx.invoice_id,0) < 0 then 'N/A' else 'N' end as billed
			, tx.comment
			, tx.cheque_number
			, case when libcc.adjustment_type is not null and tx.transaction_type = 'X' then libcc.transaction_type + '_' + libcc.adjustment_type 
				when recur.transaction_id is not null then 'Recur'
				when tx.mppr_flag = 1 or convert(bit, case when bump.bumpup_transaction_id is null then 0 else 1 end) = 'true' then 'MPPR'
				else tx.transaction_type end as adjusted_tx_type
			, case when recur.transaction_id is null then 0 else 1 end as recurring_tx
			, case when tx.reversing_tx_id is null then 0 else 1 end as reversed
			, tx.transaction_type_group
			, 0 as ancillary_year
			, 0 as ancillary_month
			, 0 as balance_due
			, 0 as other_payer
			, NULL as aging_total
			, NULL as aging_current_label
			, NULL as aging_current_amount
			, NULL as aging_30_label
			, NULL as aging_30_amount
			, NULL as aging_60_label
			, NULL as aging_60_amount
			, NULL as aging_90_label
			, NULL as aging_90_amount
			, NULL as aging_120_label
			, NULL as aging_120_amount
			, NULL as aging_150_label
			, NULL as aging_150_amount
			, NULL as aging_180_label
			, NULL as aging_180_amount
			, NULL as aging_210_label
			, NULL as aging_210_amount
			, 0 as detail_order				
		FROM #local_transactions tx with (nolock)
		inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
		inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
		inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'  
		left join dbo.ar_transactions_location_room roomLocation with (nolock) on roomLocation.transaction_id = tx.transaction_id   
		left join dbo.ar_transaction_recurring_tx_refs recur with (nolock) on tx.transaction_id = recur.transaction_id
		left join dbo.ar_recurring_transactions rtx with (nolock) on rtx.transaction_id = recur.recurring_tx_id
		left join dbo.ar_batch batch with (nolock) on tx.batch_id = batch.batch_id
		left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
		left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
		left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
		left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
		left join dbo.ar_mppr_bumpup bump with (nolock) on tx.distribution_tx_id = bump.bumpup_transaction_id  
		WHERE 
			tx.transaction_type <> 'A' and tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA')

		If @vPrivateStatementsIncluded = 1 
			begin
				INSERT INTO #transactions		
				SELECT 
					  --concl.invoice_id
					 min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, case when tx.is_billed = 0 then 'Ancillary Charges' else 
					--	'Ancillary Charges ' + convert(varchar(3), tx.bill_date,100) +' ' + convert(varchar(4),datepart(yyyy,tx.bill_date),100) end as detail_description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then 'Ancillary Charges: ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else 'Ancillary Charge(s)' end as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, '' as transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, 'A' as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					tx.transaction_type = 'A' and concl.contact_id > -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, '' as transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, 'A' as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.contact_id > -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description 
		end

	if @vOtherStatementsIncluded = 1 
		begin
			INSERT INTO #transactions		
				SELECT 
					 concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, case when tx.is_billed = 0 then 'Ancillary Charges' else 
					--	'Ancillary Charges ' + convert(varchar(3), tx.bill_date,100) +' ' + convert(varchar(4),datepart(yyyy,tx.bill_date),100) end as detail_description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then 'Ancillary Charges: ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else 'Ancillary Charge(s)' end as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, '' as transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, 'A' as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					tx.transaction_type = 'A' and concl.contact_id <= -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id 
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, '' as transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, 'A' as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.contact_id <= -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description 
		end

	end

if @vShowResults = 'C'

	begin

		INSERT INTO #transactions	
		SELECT 
			  concl.invoice_id
			, tx.fac_id
			, concl.contact_id
			, concl.contact_num
			, tx.client_id
			, tx.payer_id
			, libpayer.description AS payer
			, libpayer.payer_type
			, tx.batch_id
			, tx.entry_number
			, tx.distribution_tx_id
			, tx.transaction_id
			, tx.reversing_tx_id
			, isnull(tx.auto_generated, 'N') as auto_generated
			, concl.bill_date
			, tx.transaction_date as posting_date
			, tx.effective_date
			, Null as effective_from_date
			, Null as effective_thru_date
			, tx.generated_date
			, libcc.charge_code
			, isnull(rtx.charge_frequency,'O') as frequency
			, tx.revenue_code
			, tx.hcpcs_code
			, tx.mppr_flag
			, Case when tx.transaction_type = 'R' and isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> '' 
					then rtype.long_description + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then 
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' + convert(varchar(4),YEAR(tx.effective_date))
					end) 
					+ (case when isnull(arpayer.show_care_level,'N') = 'Y'  and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
				and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') = ''  
				and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'CL' and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X','CA') and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')='' then tx.description
				when tx.transaction_type ='CA' and isnull(tx.alt_description,'')='' then tx.description + ' ('+FORMAT(tx.effective_date,'MMM')+')'
				when tx.transaction_type = 'CO' and tx.parent_tx_type <> 'R' then tx.description --+  ' Coinsurance'
				when tx.transaction_type = 'XR' and tx.parent_tx_type ='A' then tx.description --+  ' Reimb. Reduction' 
				when tx.transaction_type = 'CX' and tx.parent_tx_type ='R' then 'Room Excess' 
				when (tx.transaction_type in('XR','CO', 'D', 'CR') or (tx.transaction_type = 'CL' and isnull(tx.alt_description,'')='')) and tx.parent_tx_type = 'R' then
				(Case 
					when isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> ''  
						then rtype.long_description + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(arpayer.show_care_level,'N') = 'Y' and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
						and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' +
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then  
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'XR'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'CO'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else
							' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end) --+ ' Coinsurance'
					else 
						(case when tx.transaction_type = 'XR' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
							(case when abs(tx.days_amount) > 1 then
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else  ' ' +	convert(varchar(4),YEAR(tx.effective_date))
							end)
						else 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') +
							(case when abs(tx.days_amount) > 1 then 
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else ' ' + convert(varchar(4),YEAR(tx.effective_date))
							end) --+
							--(case when tx.transaction_type = 'D' then ' Deductible' 
							--	when tx.transaction_type = 'CO' then ' Coinsurance' else '' end)  
						end)
					end
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				) --+ (case when tx.transaction_type = 'CL' then ' Coverage Deductible' else '' end) 
				 --+ (case when tx.transaction_type = 'CR' then ' Contractural Adj.' else '' end) 
				else tx.description end as detail_description
			, tx.care_level
			, Case when tx.transaction_type = 'R' and libpayer.pps_flag='Y' then ltrim(rtrim(str(tx.medicare_day))) + '-' 
				+ltrim(rtrim(str((
					case when tx.days_amount < 0 and (tx.days_amount*-1) > 1 then tx.days_amount*-1 + tx.medicare_day -1
					when tx.days_amount > 0 and (tx.days_amount*-1) = 1 then tx.days_amount*-1  + tx.medicare_day
					when tx.days_amount > 1 then tx.days_amount + tx.medicare_day -1
					else tx.days_amount + tx.medicare_day end))))
				else Null
					end as benefit_days
			, tx.parent_tx_type
			, tx.transaction_type
			, tx.daily_rate as unit_amount
			, case when tx.transaction_type = 'XR' then Null else tx.days_amount end as number_of_units
			, tx.amount
			, acct.account_number as gl_account
			, daysacct.account_number as days_account
			, case when tx.is_billed = 1 and isnull(tx.invoice_id,0) > 0 then 'Y'
				when tx.is_billed = 1 and isnull(tx.invoice_id,0) < 0 then 'N/A' else 'N' end as billed
			, tx.comment
			, tx.cheque_number
			, case when libcc.adjustment_type is not null and tx.transaction_type = 'X' then libcc.transaction_type + '_' + libcc.adjustment_type 
				when recur.transaction_id is not null then 'Recur'
				when tx.mppr_flag = 1 or convert(bit, case when bump.bumpup_transaction_id is null then 0 else 1 end) = 'true' then 'MPPR'
				else tx.transaction_type end as adjusted_tx_type
			, case when recur.transaction_id is null then 0 else 1 end as recurring_tx
			, case when tx.reversing_tx_id is null then 0 else 1 end as reversed
			, tx.transaction_type_group	
			, 0 as ancillary_year
			, 0 as ancillary_month	
			, 0 as balance_due
			, 0 as other_payer
			, NULL as aging_total
			, NULL as aging_current_label
			, NULL as aging_current_amount
			, NULL as aging_30_label
			, NULL as aging_30_amount
			, NULL as aging_60_label
			, NULL as aging_60_amount
			, NULL as aging_90_label
			, NULL as aging_90_amount
			, NULL as aging_120_label
			, NULL as aging_120_amount
			, NULL as aging_150_label
			, NULL as aging_150_amount
			, NULL as aging_180_label
			, NULL as aging_180_amount
			, NULL as aging_210_label
			, NULL as aging_210_amount
			, 0 as detail_order		
		FROM #local_transactions tx with (nolock)
		inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
		inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
		inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'
		left join dbo.ar_transactions_location_room roomLocation with (nolock) on roomLocation.transaction_id = tx.transaction_id     
		left join dbo.ar_transaction_recurring_tx_refs recur with (nolock) on tx.transaction_id = recur.transaction_id
		left join dbo.ar_recurring_transactions rtx with (nolock) on rtx.transaction_id = recur.recurring_tx_id
		left join dbo.ar_batch batch with (nolock) on tx.batch_id = batch.batch_id
		left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
		left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
		left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
		left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
		left join dbo.ar_mppr_bumpup bump with (nolock) on tx.distribution_tx_id = bump.bumpup_transaction_id  
		WHERE 
			libcc.charge_code_id is null and tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA')

		If @vPrivateStatementsIncluded = 1 
			begin

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, libcc.charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')<>'' then 
						--(Case when min(tx.effective_date) <> max(tx.effective_date) then 
						--	'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + tx.alt_description
						(Case when min(tx.effective_date) <> max(tx.effective_date) then tx.alt_description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							tx.alt_description 
						end)
						else 
						--(Case when min(tx.effective_date) <> max(tx.effective_date) then 
						--	'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + libcc.description
						(Case when min(tx.effective_date) <> max(tx.effective_date) then libcc.description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')

						else
							libcc.description
						end)
						end as detail_description	
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					left join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id > -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type, tx.transaction_type, tx.care_level, libcc.charge_code 
					,tx.alt_description, libcc.description, tx.is_billed, tx.transaction_type_group, tx.bill_date, concl.contact_id, concl.contact_num, concl.bill_date, tx.generated_date
					, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, tx.transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					libcc.charge_code_id is null and tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.invoice_id > -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description 

			end

		If @vOtherStatementsIncluded = 1 
			begin

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, libcc.charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')<>'' then 
						--(Case when min(tx.effective_date) <> max(tx.effective_date) then 
						--	'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + tx.alt_description
						(Case when min(tx.effective_date) <> max(tx.effective_date) then tx.alt_description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							tx.alt_description 
						end)
						else 
						--(Case when min(tx.effective_date) <> max(tx.effective_date) then 
						--	'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + libcc.description
						(Case when min(tx.effective_date) <> max(tx.effective_date) then libcc.description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')

						else
							libcc.description
						end)
						end as detail_description	
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					left join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id <= -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type, tx.transaction_type, tx.care_level, libcc.charge_code 
					,tx.alt_description, libcc.description, tx.is_billed, tx.transaction_type_group, tx.bill_date, concl.contact_id, concl.contact_num, concl.invoice_id, concl.bill_date, tx.generated_date
					, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, tx.transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					libcc.charge_code_id is null and tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.invoice_id <= -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description 

			end

	end

if @vShowResults = 'CC'

	begin

		INSERT INTO #transactions	
		SELECT 
			  concl.invoice_id
			, tx.fac_id
			, concl.contact_id
			, concl.contact_num
			, tx.client_id
			, tx.payer_id
			, libpayer.description AS payer
			, libpayer.payer_type
			, tx.batch_id
			, tx.entry_number
			, tx.distribution_tx_id
			, tx.transaction_id
			, tx.reversing_tx_id
			, isnull(tx.auto_generated, 'N') as auto_generated
			, concl.bill_date
			, tx.transaction_date as posting_date
			, tx.effective_date
			, Null as effective_from_date
			, Null as effective_thru_date
			, tx.generated_date
			, libcc.charge_code
			, isnull(rtx.charge_frequency,'O') as frequency
			, tx.revenue_code
			, tx.hcpcs_code
			, tx.mppr_flag
			, Case when tx.transaction_type = 'R' and isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> '' 
					then rtype.long_description + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then 
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' + convert(varchar(4),YEAR(tx.effective_date))
					end) 
					+ (case when isnull(arpayer.show_care_level,'N') = 'Y'  and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') <> ''  
				and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'R' and isnull(arpayer.room_charge_bill_desc,'') = ''  
				and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
					FORMAT(tx.effective_date,'MMM dd') + 
					(case when abs(tx.days_amount) > 1 then
						'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
						convert(varchar(4),YEAR(tx.effective_date))
					else ' ' +	convert(varchar(4),YEAR(tx.effective_date))
					end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				when tx.transaction_type = 'CL' and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X','CA') and isnull(tx.alt_description,'')<>'' then tx.alt_description 
				when tx.transaction_type in('A','X') and isnull(tx.alt_description,'')='' then tx.description
				when tx.transaction_type ='CA' and isnull(tx.alt_description,'')='' then tx.description + ' ('+FORMAT(tx.effective_date,'MMM')+')'
				when tx.transaction_type = 'CO' and tx.parent_tx_type <> 'R' then tx.description --+  ' Coinsurance'
				when tx.transaction_type = 'XR' and tx.parent_tx_type ='A' then tx.description --+  ' Reimb. Reduction' 
				when tx.transaction_type = 'CX' and tx.parent_tx_type ='R' then 'Room Excess' 
				when (tx.transaction_type in('XR','CO', 'D', 'CR') or (tx.transaction_type = 'CL' and isnull(tx.alt_description,'')='')) and tx.parent_tx_type = 'R' then
				(Case 
					when isnull(arpayer.use_rate_desc,'N') = 'Y' and isnull(rtype.long_description,'') <> ''  
						then rtype.long_description + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(arpayer.show_care_level,'N') = 'Y' and isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
						and isnull(arpayer.show_care_level,'N') = 'Y' then arpayer.room_charge_bill_desc + ' ' +
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date)) 
						else ' ' + convert(varchar(4),YEAR(tx.effective_date)) 
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') <> ''  
					and isnull(arpayer.show_care_level,'N') = 'N' then arpayer.room_charge_bill_desc + ' ' + 
						FORMAT(tx.effective_date,'MMM dd') +
						(case when abs(tx.days_amount) > 1 then  
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'XR'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then 
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else ' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end)
					when isnull(arpayer.room_charge_bill_desc,'') = ''  and tx.transaction_type = 'CO'
					and isnull(arpayer.show_care_level,'N') = 'Y' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
						(case when abs(tx.days_amount) > 1 then
							'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
							convert(varchar(4),YEAR(tx.effective_date))
						else
							' ' + convert(varchar(4),YEAR(tx.effective_date))
						end) + (case when isnull(tx.care_level,'') <> '' then ' (' +isnull(tx.care_level,'') + ')' else '' end) --+ ' Coinsurance'
					else 
						(case when tx.transaction_type = 'XR' then 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') + 
							(case when abs(tx.days_amount) > 1 then
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else  ' ' +	convert(varchar(4),YEAR(tx.effective_date))
							end)
						else 'Room ' + 
						FORMAT(tx.effective_date,'MMM dd') +
							(case when abs(tx.days_amount) > 1 then 
								'-' +  CAST((DATEPART(dd,tx.effective_date) + ABS(tx.days_amount) -1) AS VARCHAR) + ' ' +
								convert(varchar(4),YEAR(tx.effective_date))
							else ' ' + convert(varchar(4),YEAR(tx.effective_date))
							end) --+
							--(case when tx.transaction_type = 'D' then ' Deductible' 
							--	when tx.transaction_type = 'CO' then ' Coinsurance' else '' end)  
						end)
					end
					+ (case when isnull(arpayer.show_location, 'N') = 'Y' then ' ' + isnull(roomLocation.room_desc, '') else '' end)
				) --+ (case when tx.transaction_type = 'CL' then ' Coverage Deductible' else '' end) 
				 --+ (case when tx.transaction_type = 'CR' then ' Contractural Adj.' else '' end) 
				else tx.description end as detail_description
			, tx.care_level
			, Case when tx.transaction_type = 'R' and libpayer.pps_flag='Y' then ltrim(rtrim(str(tx.medicare_day))) + '-' 
				+ltrim(rtrim(str((
					case when tx.days_amount < 0 and (tx.days_amount*-1) > 1 then tx.days_amount*-1 + tx.medicare_day -1
					when tx.days_amount > 0 and (tx.days_amount*-1) = 1 then tx.days_amount*-1  + tx.medicare_day
					when tx.days_amount > 1 then tx.days_amount + tx.medicare_day -1
					else tx.days_amount + tx.medicare_day end))))
				else Null
					end as benefit_days
			, tx.parent_tx_type
			, tx.transaction_type
			, tx.daily_rate as unit_amount
			, case when tx.transaction_type = 'XR' then Null else tx.days_amount end as number_of_units
			, tx.amount
			, acct.account_number as gl_account
			, daysacct.account_number as days_account
			, case when tx.is_billed = 1 and isnull(tx.invoice_id,0) > 0 then 'Y'
				when tx.is_billed = 1 and isnull(tx.invoice_id,0) < 0 then 'N/A' else 'N' end as billed
			, tx.comment
			, tx.cheque_number
			, case when libcc.adjustment_type is not null and tx.transaction_type = 'X' then libcc.transaction_type + '_' + libcc.adjustment_type 
				when recur.transaction_id is not null then 'Recur'
				when tx.mppr_flag = 1 or convert(bit, case when bump.bumpup_transaction_id is null then 0 else 1 end) = 'true' then 'MPPR'
				else tx.transaction_type end as adjusted_tx_type
			, case when recur.transaction_id is null then 0 else 1 end as recurring_tx
			, case when tx.reversing_tx_id is null then 0 else 1 end as reversed
			, tx.transaction_type_group	
			, 0 as ancillary_year
			, 0 as ancillary_month	
			, 0 as balance_due
			, 0 as other_payer
			, NULL as aging_total
			, NULL as aging_current_label
			, NULL as aging_current_amount
			, NULL as aging_30_label
			, NULL as aging_30_amount
			, NULL as aging_60_label
			, NULL as aging_60_amount
			, NULL as aging_90_label
			, NULL as aging_90_amount
			, NULL as aging_120_label
			, NULL as aging_120_amount
			, NULL as aging_150_label
			, NULL as aging_150_amount
			, NULL as aging_180_label
			, NULL as aging_180_amount
			, NULL as aging_210_label
			, NULL as aging_210_amount
			, 0 as detail_order		
		FROM #local_transactions tx with (nolock)
		inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
		inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
		inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
		left join dbo.ar_transactions_location_room roomLocation with (nolock) on roomLocation.transaction_id = tx.transaction_id  
		left join dbo.ar_transaction_recurring_tx_refs recur with (nolock) on tx.transaction_id = recur.transaction_id
		left join dbo.ar_recurring_transactions rtx with (nolock) on rtx.transaction_id = recur.recurring_tx_id
		left join dbo.ar_batch batch with (nolock) on tx.batch_id = batch.batch_id
		left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
		left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
		left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
		left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
		left join dbo.ar_mppr_bumpup bump with (nolock) on tx.distribution_tx_id = bump.bumpup_transaction_id  
		WHERE 
			libcc.charge_code_id is null and tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA')

		If @vPrivateStatementsIncluded = 1 
			begin

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, Case when min(tx.effective_date) <> max(tx.effective_date) then 
					--		'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + cat.cat_description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then cat.cat_description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							cat.cat_description
						end as detail_description
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due	
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order	
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					inner join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id > -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type,
					tx.transaction_type, tx.care_level, cat.item_cat_id, cat.cat_description,tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, Case when min(tx.effective_date) <> max(tx.effective_date) then 
					--		'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + libcc.description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then libcc.description + ' ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							libcc.description
						end as detail_description
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					left join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where cat.item_cat_id is null and tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id > -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type,
					tx.transaction_type, tx.care_level, libcc.charge_code, libcc.description, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  min(concl.invoice_id) as invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, tx.transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					libcc.charge_code_id is null and tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.invoice_id > -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description

			end

		If @vOtherStatementsIncluded = 1 
			begin

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, Case when min(tx.effective_date) <> max(tx.effective_date) then 
					--		'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + cat.cat_description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then cat.cat_description + ': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							cat.cat_description
						end as detail_description
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due	
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order	
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					inner join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id <= -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type,
					tx.transaction_type, tx.care_level, cat.item_cat_id, cat.cat_description,tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					--, Case when min(tx.effective_date) <> max(tx.effective_date) then 
					--		'to '+ format(max(tx.effective_date),'MMM dd, yyyy') + ' ' + libcc.description
					, Case when min(tx.effective_date) <> max(tx.effective_date) then libcc.description + ' ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else
							libcc.description
						end as detail_description
					, tx.care_level
					, Null as benefit_days
					, tx.parent_tx_type
					, tx.transaction_type
					, sum(tx.daily_rate) as unit_amount
					, sum(tx.days_amount)  as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group
					, 0 as ancillary_year
					, 0 as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
					FROM #local_transactions tx with (nolock)
					inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
					inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
					inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N' 
					inner join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N') 
					left join dbo.ar_item_category cat with (nolock) on libcc.category_id = cat.item_cat_id 
					left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
					left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
					left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
					where cat.item_cat_id is null and tx.transaction_type <> 'TA' and not (tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA') and concl.invoice_id <= -2.1
					group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.parent_tx_type,
					tx.transaction_type, tx.care_level, libcc.charge_code, libcc.description, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date)

				INSERT INTO #transactions	
				SELECT 
					  concl.invoice_id
					, tx.fac_id
					, concl.contact_id
					, concl.contact_num
					, tx.client_id
					, tx.payer_id
					, libpayer.description AS payer
					, libpayer.payer_type
					, Null as batch_id
					, Null as entry_number
					, 0 as distribution_tx_id
					, 0 as transaction_id
					, 0 as reversing_tx_id
					, '' as auto_generated
					, concl.bill_date
					, Null as posting_date
					, min(tx.effective_date) as effective_date
					, min(tx.effective_date) as effective_from_date
					, max(tx.effective_date) as effective_thru_date
					, tx.generated_date
					, '' as charge_code
					, '' as frequency
					, '' as revenue_code
					, '' as hcpcs_code
					, '' as mppr_flag
					, Case when min(tx.effective_date) <> max(tx.effective_date) then  tx.description +': ' + format(min(tx.effective_date),'MMM dd') + '-' + format(max(tx.effective_date),'dd')
						else tx.description end as detail_description
					--, tx.description as detail_description
					, '' as care_level
					, Null as benefit_days
					, '' as parent_tx_type
					, tx.transaction_type
					, Null as unit_amount
					, Null as number_of_units
					, sum(tx.amount) as amount
					, '' as gl_account
					, '' as days_account
					, case when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) > 0 then 'Y'
						when tx.is_billed = 1 and min(isnull(tx.invoice_id,0)) < 0 then 'N/A' else 'N' end as billed
					, '' as comment
					, '' as cheque_number
					, tx.transaction_type as adjusted_tx_type
					, 0 as recurring_tx
					, 0 as reversed	
					, tx.transaction_type_group	
					, datepart(yyyy,tx.bill_date) as ancillary_year
					, datepart(mm,tx.bill_date) as ancillary_month
					, 0 as balance_due
					, 0 as other_payer
					, NULL as aging_total
					, NULL as aging_current_label
					, NULL as aging_current_amount
					, NULL as aging_30_label
					, NULL as aging_30_amount
					, NULL as aging_60_label
					, NULL as aging_60_amount
					, NULL as aging_90_label
					, NULL as aging_90_amount
					, NULL as aging_120_label
					, NULL as aging_120_amount
					, NULL as aging_150_label
					, NULL as aging_150_amount
					, NULL as aging_180_label
					, NULL as aging_180_amount
					, NULL as aging_210_label
					, NULL as aging_210_amount
					, 0 as detail_order		
				FROM #local_transactions tx with (nolock)
				inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
				inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
				inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
				left join dbo.ar_lib_rate_type rtype with (nolock) on tx.rate_type_id = rtype.rate_type_id and rtype.deleted='N'
				left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
				left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
				left join dbo.ar_lib_charge_codes libcc with (nolock) on tx.item_type_id = libcc.charge_code_id and (libcc.deleted = 'N')
				WHERE 
					libcc.charge_code_id is null and tx.transaction_type = 'CO' and tx.parent_tx_type = 'CA' and concl.invoice_id <= -2.1
				group by tx.fac_id, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.transaction_type, tx.is_billed, tx.transaction_type_group, tx.bill_date, tx.generated_date,
					concl.invoice_id, concl.contact_id, concl.contact_num, concl.bill_date, datepart(yyyy,tx.effective_date), datepart(mm,tx.effective_date), tx.description

			end

	end

--summarize Tax transactions
INSERT INTO #transactions	
SELECT 
	  concl.invoice_id
	, tx.fac_id
	, concl.contact_id
	, concl.contact_num
	, tx.client_id
	, tx.payer_id
	, libpayer.description AS payer
	, libpayer.payer_type
	, tx.batch_id
	, 0 as entry_number
	, 0 as distribution_tx_id
	, 0 as transaction_id
	, 0 as reversing_tx_id
	, isnull(tx.auto_generated, 'N') as auto_generated
	, concl.bill_date
	, tx.transaction_date as posting_date
	, max(tx.effective_date)
	, Null as effective_from_date
	, Null as effective_thru_date
	, tx.generated_date
	, '' as charge_code
	, 'O' as frequency
	, tx.revenue_code
	, tx.hcpcs_code
	, tx.mppr_flag
	, tx.description
	, tx.care_level
	, 0 as benefit_days
	, tx.parent_tx_type
	, tx.transaction_type
	, Null as unit_amount
	, Null as number_of_units
	, sum(tx.amount) as amount
	, acct.account_number as gl_account
	, daysacct.account_number as days_account
	, 'Y' as billed
	, tx.comment
	, tx.cheque_number
	, tx.transaction_type as adjusted_tx_type
	, 0 as recurring_tx
	, 0 as reversed
	, tx.transaction_type_group	
	, 0 as ancillary_year
	, 0 as ancillary_month	
	, 0 as balance_due
	, 0 as other_payer
	, NULL as aging_total
	, NULL as aging_current_label
	, NULL as aging_current_amount
	, NULL as aging_30_label
	, NULL as aging_30_amount
	, NULL as aging_60_label
	, NULL as aging_60_amount
	, NULL as aging_90_label
	, NULL as aging_90_amount
	, NULL as aging_120_label
	, NULL as aging_120_amount
	, NULL as aging_150_label
	, NULL as aging_150_amount
	, NULL as aging_180_label
	, NULL as aging_180_amount
	, NULL as aging_210_label
	, NULL as aging_210_amount
	, 0 as detail_order		
FROM #local_transactions tx with (nolock)
inner join #contact_clients concl with (nolock) on tx.invoice_id = concl.invoice_id and tx.contact_id = concl.contact_id
inner join dbo.ar_payers arpayer with (nolock) on tx.payer_id = arpayer.payer_id and arpayer.fac_id = tx.fac_id
inner join dbo.ar_lib_payers libpayer with (nolock) on tx.payer_id = libpayer.payer_id AND libpayer.deleted = 'N'   
left join dbo.ar_lib_accounts daysacct with (nolock) on tx.days_account_id = daysacct.account_id 
left join dbo.ar_lib_accounts acct with (nolock) on tx.dollars_account_id = acct.account_id 
where tx.transaction_type = 'TA'
group by concl.invoice_id, tx.fac_id, concl.contact_id, concl.contact_num, tx.client_id, tx.payer_id, libpayer.description, libpayer.payer_type, tx.batch_id
, isnull(tx.auto_generated, 'N'), concl.bill_date, tx.generated_date, tx.transaction_date, tx.effective_date, tx.revenue_code, tx.hcpcs_code, tx.mppr_flag, tx.description, tx.care_level
, tx.parent_tx_type, tx.transaction_type, acct.account_number, daysacct.account_number, tx.comment, tx.cheque_number, tx.transaction_type_group	

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 150
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' removing reversals that have been combined from different invoices ' + convert(varchar(26),getdate(),109)

delete  rev
from #transactions rev
inner join #transactions rev2 on rev.transaction_id = rev2.reversing_tx_id and rev.transaction_id > 0 
	and rev.contact_num = rev2.contact_num and rev.client_id = rev2.client_id

set @vRowCount = @@rowcount

if @debug_me='Y' Print ltrim(rtrim(str(@vRowCount)))+' combined reversing rows removed.'
	

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 160
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' calculating balance forwards ' + convert(varchar(26),getdate(),109)

If @vPrivateStatementsIncluded = 1 -- calculate BF's for private statements as they are included
begin	

	insert into #transactions
	select 
		  min(concl.invoice_id) as invoice_id
		, concl.summary_fac_id
		, concl.contact_id
		, concl.contact_num
		, concl.client_id
		, concl.payer_id
		, '' as payer
		, '' as payer_type
		, Null as batch_id
		, Null as entry_number
		, Null as distribution_tx_id
		, Null as transaction_id
		, Null as reversing_tx_id
		, Null as auto_generated
		, Null as bill_date
		, Null as posting_date	
		, Null as effective_date
		, Null as effective_from_date
		, Null as effective_thru_date	
		, Null as generated_date	
		, Null as charge_code
		, Null as frequency
		, Null as revenue_code
		, Null as hcpcs_code
		, Null as mppr_flag
		, 'BALANCE FORWARD' as tx_description
		, Null as care_level		
		, Null as benefit_days
		, Null as parent_tx_type
		, '00' as transaction_type
		, Null as unit_amount
		, Null as units
		, 0.0 as amount
		, Null as gl_account
		, Null as days_account
		, Null as billed
		, '' as comment
		, '' as cheque_number
		, Null as adjusted_tx_type
		, Null as recurring_tx
		, Null as reversed
		, Null as transaction_type_group
		, 0 as ancillary_year
		, 0 as ancillary_month
		, 0 as balance_due
		, 0 as other_payer
		, NULL as aging_total
		, NULL as aging_current_label
		, NULL as aging_current_amount
		, NULL as aging_30_label
		, NULL as aging_30_amount
		, NULL as aging_60_label
		, NULL as aging_60_amount
		, NULL as aging_90_label
		, NULL as aging_90_amount
		, NULL as aging_120_label
		, NULL as aging_120_amount
		, NULL as aging_150_label
		, NULL as aging_150_amount
		, NULL as aging_180_label
		, NULL as aging_180_amount
		, NULL as aging_210_label
		, NULL as aging_210_amount
		, 0 as detail_order
			
	from #contact_clients concl
	where concl.contact_id > -2.1
	group by  concl.contact_id, concl.contact_num, concl.summary_fac_id, concl.client_id, concl.bill_date, concl.payer_id

	insert into #balance_forward_union 
	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, 0--clientInv.invoice_id
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	FROM dbo.ar_transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, bill_date from #contact_clients where contact_id > -2.1) clientInv
		on clientInv.client_id = txn.client_id
	join dbo.ar_invoice invoice WITH (NOLOCK) ON invoice.invoice_id = txn.invoice_id --and clientInv.invoice_id<>invoice.invoice_id
		and invoice.deleted = 'N'
		and invoice.trial_flag = 'N'
		and invoice.fac_id = txn.fac_id 
		--and invoice.effective_date < (dateadd(mm,-1, clientInv.bill_date))
		--and invoice.effective_date < (dateadd(dd,-1, clientInv.bill_date))
		and invoice.effective_date < clientInv.bill_date
		and txn.deleted = 'N'
	join dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id
			and libpayer.deleted = 'N' and ((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))
		--	--and libpayer.bill_form = 'private' and (libpayer.payer_type  = 'Private' OR libpayer.payer_type  = 'Outpatient')
	join dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id = libpayer.payer_id and payer.fac_id = txn.fac_id and (@vExportMode = 0 or (@vExportMode = 1 and payer.export_ps_flag = 'Y'))
	where txn.deleted='N' 
		and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
		and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate')             
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	union all

	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, 0--clientInv.invoice_id
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	FROM #transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, bill_date,generated_date from #contact_clients where contact_id > -2.1) clientInv
		on clientInv.client_id = txn.client_id and clientInv.contact_id = txn.contact_id and clientInv.bill_date = txn.bill_date and txn.contact_id > -2.1
	inner join dbo.ar_invoice_statement invstat WITH (NOLOCK) ON txn.invoice_id = invstat.invoice_id and convert(varchar(10),invstat.generated_date, 101) < clientInv.generated_date
	left join (select invoice_id from #contact_clients where contact_id > -2.1 group by invoice_id having count(*) > 1) multinv on txn.invoice_id = multinv.invoice_id  
	where multinv.invoice_id is null     
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	union all

		SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, 0--clientInv.invoice_id
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	FROM #transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, bill_date,generated_date from #contact_clients where contact_id > -2.1) clientInv
		on clientInv.client_id = txn.client_id and clientInv.contact_id <> txn.contact_id and clientInv.bill_date = txn.bill_date and txn.contact_id > -2.1
	inner join dbo.ar_invoice_statement invstat WITH (NOLOCK) ON txn.invoice_id = invstat.invoice_id and convert(varchar(10),invstat.generated_date, 101) < clientInv.generated_date
	left join (select invoice_id from #contact_clients where contact_id > -2.1 group by invoice_id having count(*) > 1) multinv on txn.invoice_id = multinv.invoice_id  
	where multinv.invoice_id is null     
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	union all
--findme
	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, 0--clientInv.invoice_id
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	--select txn.*
	FROM #transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, bill_date,generated_date from #contact_clients where contact_id > -2.1) clientInv
		on clientInv.client_id = txn.client_id and clientInv.contact_id = txn.contact_id and clientInv.bill_date = txn.bill_date and txn.contact_id > -2.1
	inner join dbo.ar_invoice_statement invstat WITH (NOLOCK) ON txn.invoice_id = invstat.invoice_id and convert(varchar(10),invstat.generated_date, 101) < clientInv.generated_date
	left join (select invoice_id from #contact_clients where contact_id > -2.1 group by invoice_id having count(*) > 1) multinv on txn.invoice_id = multinv.invoice_id  
	where multinv.invoice_id is not null     
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	union all
	
	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, 0 
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount
	FROM dbo.ar_transactions txn WITH (NOLOCK)
		inner join (select distinct contact_id, contact_num, client_id, bill_date from #contact_clients where contact_id > -2.1) clientInv
			on clientInv.client_id = txn.client_id
		join dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id
			and libpayer.deleted = 'N' and ((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))
		--	--and libpayer.bill_form = 'private' and (libpayer.payer_type  = 'Private' OR libpayer.payer_type  = 'Outpatient')
		join dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id = libpayer.payer_id and payer.fac_id = txn.fac_id and (@vExportMode = 0 or (@vExportMode = 1 and payer.export_ps_flag = 'Y'))
	where txn.deleted='N' 
	and txn.invoice_id < 0 -- for 'mark as billed' -999
		and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
		and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
		--and txn.effective_date < (dateadd(mm,-1, clientInv.bill_date))
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	if @vInvoiceIdList is not null
		begin

			INSERT INTO #balance_forward_union
			SELECT   
					  t.contact_id
					, t.contact_num
					, t.client_id
					, 0 
					, t.bill_date
					, ''
					, SUM(t.amount) as amount	
			FROM (
					SELECT DISTINCT 
					  txn.transaction_id
					, clientInv.contact_id
					, clientInv.contact_num
					, clientInv.client_id
					, clientInv.bill_date
					, txn.amount 
				FROM #contact_clients payr WITH (NOLOCK) 
				inner join dbo.ar_invoice inv WITH (NOLOCK) ON payr.client_id = inv.client_id and inv.deleted = 'N' and inv.trial_flag = 'N'
					and payr.inv_effective_date = inv.effective_date and payr.contact_id > -2.1
				inner join dbo.ar_invoice_statement invstat WITH (NOLOCK) ON inv.invoice_id = invstat.invoice_id 
				inner join dbo.ar_transactions txn WITH (NOLOCK) ON inv.invoice_id = txn.invoice_id and txn.deleted='N'
				inner join dbo.ar_lib_payers libpayer WITH (NOLOCK) ON txn.payer_id = libpayer.payer_id AND (libpayer.deleted = 'N') 
					and ((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))	
				join dbo.ar_payers payer WITH (NOLOCK) on inv.payer_id = payer.payer_id and inv.fac_id = payer.fac_id 
				inner join (select distinct contact_id, contact_num, client_id, bill_date,generated_date from #contact_clients where contact_id > -2.1) clientInv
					on payr.contact_id = clientInv.contact_id and payr.contact_num = clientInv.contact_num and payr.client_id = clientInv.client_id and convert(varchar(10),inv.effective_date , 101) = clientInv.bill_date
					and convert(varchar(10),invstat.generated_date,101) < convert(varchar(10),payr.generated_date , 101)
				left join #contact_clients invids on invids.client_id = payr.client_id and invids.payer_id = payr.payer_id and invids.bill_date = payr.bill_date
					and inv.invoice_id = invids.invoice_id
				where invids.invoice_id is null 
					and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
					and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
				) t    
				group by t.contact_id, t.contact_num, t.client_id, t.bill_date 
				having SUM(t.amount) <> 0;

		end
end

if @vOtherStatementsIncluded = 1 -- calculate BF's for other payer statements as they are included
begin

	insert into #transactions
	select 
		  concl.invoice_id
		, concl.summary_fac_id
		, concl.contact_id
		, concl.contact_num
		, concl.client_id
		, concl.payer_id
		, '' as payer
		, '' as payer_type
		, Null as batch_id
		, Null as entry_number
		, Null as distribution_tx_id
		, Null as transaction_id
		, Null as reversing_tx_id
		, Null as auto_generated
		, Null as bill_date
		, Null as posting_date	
		, Null as effective_date
		, Null as effective_from_date
		, Null as effective_thru_date	
		, Null as generated_date	
		, Null as charge_code
		, Null as frequency
		, Null as revenue_code
		, Null as hcpcs_code
		, Null as mppr_flag
		, 'BALANCE FORWARD' as tx_description
		, Null as care_level		
		, Null as benefit_days
		, Null as parent_tx_type
		, '00' as transaction_type
		, Null as unit_amount
		, Null as units
		, 0.0 as amount
		, Null as gl_account
		, Null as days_account
		, Null as billed
		, '' as comment
		, '' as cheque_number
		, Null as adjusted_tx_type
		, Null as recurring_tx
		, Null as reversed
		, Null as transaction_type_group
		, 0 as ancillary_year
		, 0 as ancillary_month
		, 0 as balance_due
		, 0 as other_payer
		, NULL as aging_total
		, NULL as aging_current_label
		, NULL as aging_current_amount
		, NULL as aging_30_label
		, NULL as aging_30_amount
		, NULL as aging_60_label
		, NULL as aging_60_amount
		, NULL as aging_90_label
		, NULL as aging_90_amount
		, NULL as aging_120_label
		, NULL as aging_120_amount
		, NULL as aging_150_label
		, NULL as aging_150_amount
		, NULL as aging_180_label
		, NULL as aging_180_amount
		, NULL as aging_210_label
		, NULL as aging_210_amount
		, 0 as detail_order
			
	from #contact_clients concl
	where concl.contact_id <= -2.1

	insert into #balance_forward_union 
	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, clientInv.payer_id
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	FROM dbo.ar_transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, payer_id, bill_date from #contact_clients where contact_id <= -2.1) clientInv
		on clientInv.client_id = txn.client_id and clientInv.payer_id = txn.payer_id
	join dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id=txn.payer_id and payer.fac_id=txn.fac_id
	join dbo.ar_invoice invoice WITH (NOLOCK) ON invoice.invoice_id = txn.invoice_id
		and invoice.deleted = 'N'
		and invoice.trial_flag = 'N'
		and invoice.fac_id = txn.fac_id 
		and invoice.effective_date < clientInv.bill_date
	where txn.deleted='N' 
		and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
		and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate')          
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.payer_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	union all

	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, clientInv.payer_id 
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount	
	--select txn.*
	FROM #transactions txn WITH (NOLOCK)
	inner join (select distinct contact_id, contact_num, client_id, payer_id, bill_date, invoice_id from #contact_clients where contact_id <= -2.1) clientInv
		on clientInv.client_id = txn.client_id and clientInv.payer_id = txn.payer_id and clientInv.bill_date = txn.bill_date --and clientInv.contact_id = txn.contact_id 
			and txn.contact_id <= -2.1 
	left join (select invoice_id from #contact_clients where contact_id <= -2.1 group by invoice_id having count(*) > 1) multinv on txn.invoice_id = multinv.invoice_id  
	where txn.invoice_id < clientInv.invoice_id and ((txn.contact_id = clientInv.contact_id and multinv.invoice_id is not null) or multinv.invoice_id is null)    
	--where txn.invoice_id < clientInv.invoice_id --and txn.contact_id = clientInv.contact_id
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.payer_id, clientInv.bill_date, clientInv.invoice_id
	having SUM(txn.amount) <> 0

	union all

	SELECT 
		  clientInv.contact_id
		, clientInv.contact_num
		, clientInv.client_id
		, clientInv.payer_id 
		, clientInv.bill_date
		, ''
		, SUM(txn.amount) as amount
	FROM dbo.ar_transactions txn WITH (NOLOCK)
		inner join (select distinct contact_id, contact_num, client_id, payer_id, bill_date from #contact_clients where contact_id <= -2.1) clientInv
			on clientInv.client_id = txn.client_id and clientInv.payer_id = txn.payer_id 
		join dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id=txn.payer_id and payer.fac_id=txn.fac_id
	where txn.deleted='N' 
	and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
	and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate')    
	and txn.invoice_id < 0 -- for 'mark as billed' -999
	group by clientInv.contact_id, clientInv.contact_num, clientInv.client_id, clientInv.payer_id, clientInv.bill_date
	having SUM(txn.amount) <> 0

	if @vInvoiceIdList is not null
		begin
			INSERT INTO #balance_forward_union
			SELECT   
					  t.contact_id
					, t.contact_num
					, t.client_id
					, 0 
					, t.bill_date
					, ''
					, SUM(t.amount) as amount	
			FROM (
					SELECT DISTINCT 
					  txn.transaction_id
					, clientInv.contact_id
					, clientInv.contact_num
					, clientInv.client_id
					, clientInv.bill_date
					, txn.amount 
				FROM #contact_clients payr WITH (NOLOCK) 
				inner join dbo.ar_invoice inv WITH (NOLOCK) ON payr.client_id = inv.client_id and inv.deleted = 'N' and inv.trial_flag = 'N' 
					and payr.inv_effective_date = inv.effective_date and payr.contact_id <= -2.1
				inner join dbo.ar_transactions txn WITH (NOLOCK) ON inv.invoice_id = txn.invoice_id and txn.deleted='N'
				inner join dbo.ar_lib_payers libpayer WITH (NOLOCK) ON txn.payer_id = libpayer.payer_id AND (libpayer.deleted = 'N') 
					and libpayer.bill_form  = 'private' and libpayer.payer_type <> 'Private' and not( libpayer.payer_type = 'Outpatient' and outpatient_payer_type = 'Private')	
				join dbo.ar_payers payer WITH (NOLOCK) on inv.payer_id = payer.payer_id and inv.fac_id = payer.fac_id 
				inner join (select distinct contact_id, contact_num, client_id, bill_date,generated_date from #contact_clients where contact_id <= -2.1) clientInv
					on payr.contact_id = clientInv.contact_id and payr.contact_num = clientInv.contact_num and payr.client_id = clientInv.client_id and convert(varchar(10),inv.effective_date , 101) = clientInv.bill_date
				left join #contact_clients invids on invids.client_id = payr.client_id and invids.payer_id = payr.payer_id and invids.bill_date = payr.bill_date
					and inv.invoice_id = invids.invoice_id
				where invids.invoice_id is null 
					and not (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
					and not (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
				) t    
				group by t.contact_id, t.contact_num, t.client_id, t.bill_date 
				having SUM(t.amount) <> 0;
		end
end

--------------------------------------------------------------------------------
-- CONSOLIDATE AMOUNT
-------------------------------------------------------------------------------- 

insert into #balance_forward_amount
select contact_id,contact_num,client_id,payer_id,invoice_date,payer_type,sum(amount)
from #balance_forward_union 
group by contact_id,contact_num,client_id,payer_id,invoice_date,payer_type
having sum(amount) <>0
order by contact_id,contact_num,client_id,invoice_date,payer_type

if @debug_me='Y' select * from #balance_forward_union order by contact_num, client_id
if @debug_me='Y' select * from #balance_forward_amount order by contact_num, client_id

update csd set csd.amount = bfttl.ttl
from #transactions csd
inner join (select bf.contact_num,bf.client_id,bf.payer_id,bf.invoice_date,sum(bf.amount) ttl 
	from #balance_forward_amount bf
	group by bf.contact_num,bf.client_id,bf.payer_id,bf.invoice_date) bfttl on csd.contact_num = bfttl.contact_num 
		and csd.client_id = bfttl.client_id and csd.payer_id = bfttl.payer_id
where csd.other_payer <> 1 and csd.transaction_type = '00'

update concl set concl.previous_balance_due = csd.amount
from #contact_clients concl
inner join #transactions csd on concl.contact_num = csd.contact_num and concl.client_id = csd.client_id and csd.transaction_type = '00' 

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 180
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' calculating other payer summary ' + convert(varchar(26),getdate(),109)

--OtherPayers

IF @vOtherPayerSummary = 1
    BEGIN

		SELECT DISTINCT client_id, bill_date INTO #OtherPayerInfo FROM #contact_clients where contact_id <> -2.1 and contact_id <> -3.1;
	    
		insert into #transactions (invoice_id, fac_id, contact_id, contact_num, client_id, transaction_type, tx_description, comment,
		amount, balance_due, other_payer, detail_order, bill_date, payer_type, effective_date)                            
                SELECT 
                            max(concl.invoice_id) as invoice_id
                            , concl.summary_fac_id
                            , concl.contact_id
                            , concl.contact_num
                            , concl.client_id
                            , 'YZ' as transaction_type
                            , libpayer.[description] as [description]
                            , '' as comment
                            , tx.amount as amount
                            , 0 as balance_due
                            , 1 as other_payer
                            --, libpayer.payer_type as payer_type
                            , 0 as detail_order
                            , concl.bill_date
							, libPayer.payer_type 
							, tx.effective_date as effective_date  
                FROM   #contact_clients concl
                INNER JOIN 
                (
				SELECT client_id,payer_id, bill_date, SUM(amount) amount, max(effective_date) as effective_date
                        FROM
                                (SELECT  
                                                t.client_id, 
                                                t.payer_id, 
                                                c.bill_date,
												t.effective_date,
                                                t.amount 
                                    FROM dbo.ar_transactions_rollup_client AS t WITH (NOLOCK)
                                    INNER JOIN #OtherPayerInfo c
                                    ON t.client_id = c.client_id AND t.effective_date < DATEADD(dd,1, c.bill_date)
                                    INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK)  
                                    ON t.payer_id = libpayer.payer_id AND libPayer.deleted = 'N' 
                                    AND isnull(libpayer.informational_payer_flag,0) = 1
									AND (isnull(libpayer.informational_payer_use_standard_rate, 0) = 0 or t.transaction_type <> 'CR')
                                    UNION ALL
                                    SELECT
                                                t.client_id, 
                                                t.payer_id,
                                                c.bill_date,
												t.effective_date,
                                                (CASE WHEN t.transaction_type = 'C' THEN - 1 * h.amount ELSE t .amount END) AS amount 
                                    FROM dbo.ar_transactions AS t WITH (NOLOCK)
                                    INNER JOIN #OtherPayerInfo c
                                    ON t.client_id = c.client_id
                                    INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK)  
                                    ON t.payer_id = libpayer.payer_id AND libPayer.deleted = 'N' 
                                    AND isnull(libpayer.informational_payer_flag,0) = 1 
									AND (isnull(libpayer.informational_payer_use_standard_rate, 0) = 0 or t.transaction_type <> 'CR') 
                                    LEFT JOIN dbo.ar_applied_payment_history AS h WITH (NOLOCK) 
                                    ON h.transaction_id = t.transaction_id 
                                    AND h.fac_id = t.fac_id AND ISNULL(h.deleted, 'N') = 'N' 
                                    AND h.current_period_date IS NOT NULL
                                    WHERE t.deleted = 'N' AND (CASE WHEN t.transaction_type = 'C' THEN h.applied_to_date ELSE t.effective_date END) < DATEADD(dd,1, c.bill_date)
                                                AND t.payer_id > 0 AND t.transaction_date IS NOT NULL 
                                                AND t.OpenClose_Flag = 'O'
                                    UNION ALL
                                    SELECT 
                                                h.client_id, 
                                                h.payer_id,
                                                c.bill_date,
												h.applied_to_date as effective_date,
                                                - (1 * h.amount) AS amount
                                    FROM dbo.ar_applied_payment_history AS h WITH (NOLOCK)
                                    INNER JOIN #OtherPayerInfo c
                                    ON h.client_id = c.client_id and  h.applied_to_date < DATEADD(dd,1,c.bill_date) 
                                    INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK)  
                                    ON h.payer_id = libpayer.payer_id AND libPayer.deleted = 'N' 
                                    AND isnull(libpayer.informational_payer_flag,0) = 1
                                    WHERE h.deleted = 'N' 
                                    AND h.payer_id > 0 AND h.transaction_id = -1 
                                    AND h.OpenClose_Flag = 'O'
                                    ) op
                                GROUP BY client_id, payer_id, bill_date
                                --HAVING SUM(amount) <> 0

                ) tx         
                ON concl.client_id = tx.client_id  AND tx.bill_date= concl.bill_date and concl.contact_id <> -2.1 and concl.contact_id <> -3.1
                INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK)  
                ON tx.payer_id = libpayer.payer_id AND libPayer.deleted = 'N' 
                AND isnull(libpayer.informational_payer_flag,0) = 1
				WHERE tx.amount > 0 
                GROUP BY concl.contact_id, tx.amount,concl.contact_num, concl.summary_fac_id, concl.client_id, libpayer.[description], libPayer.payer_type, concl.bill_date,tx.effective_date

            update csd set csd.balance_due = csdttl.ttl
            from #transactions csd
            inner join (select contact_id, contact_num, invoice_id, bill_date ,sum(amount) ttl from #transactions 
            where other_payer = 1 group by contact_id, contact_num, invoice_id, bill_date) csdttl on 
            csd.invoice_id = csdttl.invoice_id and csd.contact_id = csdttl.contact_id and csd.contact_num = csdttl.contact_num 
            and csd.bill_date = csdttl.bill_date and csd.other_payer = 1;

        END 

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
--select * from #transactions where other_payer = 1
select @vStep = 190
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' gathering current trust balances ' + convert(varchar(26),getdate(),109)

--Trust balances
	    
insert into #transactions (invoice_id, fac_id, contact_id, contact_num, client_id, transaction_type, tx_description, comment,
amount, balance_due, other_payer, detail_order, bill_date)                            
SELECT cc.invoice_id
    , cc.summary_fac_id
    , cc.contact_id
    , cc.contact_num
    , cc.client_id
    , 'YY' as transaction_type
    , stdact.[description] as [description]
    , '' as comment
    , sum(tx.amount) as amount
    , 0 as balance_due
    , 3 as other_payer
    , 0 as detail_order
    , cc.bill_date
from dbo.ta_transaction tx with (nolock)
inner join
	(select max(invoice_id) as invoice_id,summary_fac_id, contact_id, contact_num, client_id, bill_date from #contact_clients where contact_id <> -2.1 and contact_id <> -3.1
		group by summary_fac_id, contact_id, contact_num, client_id, bill_date) cc
	on tx.client_id = cc.client_id and tx.deleted = 'N' and tx.transaction_date is not null
inner join dbo.ta_client_configuration tcc with (nolock) on cc.client_id = tcc.client_id and tcc.deleted = 'N' and isnull(tcc.trust_balance_on_bill,'N') = 'Y'
inner join dbo.ta_std_account stdact with (nolock) on tx.std_account_id = stdact.std_account_id
where cc.contact_id <> -2.1 and contact_id <> -3.1
group by cc.invoice_id, cc.summary_fac_id, cc.contact_id, cc.contact_num, cc.client_id, stdact.[description], cc.bill_date
order by stdact.[description]


update csd set csd.balance_due = csdttl.ttl
from #transactions csd
inner join (select contact_id, contact_num, invoice_id, bill_date ,sum(amount) ttl from #transactions 
where other_payer = 3 group by contact_id, contact_num, invoice_id, bill_date) csdttl on 
csd.invoice_id = csdttl.invoice_id and csd.contact_id = csdttl.contact_id and csd.contact_num = csdttl.contact_num 
and csd.bill_date = csdttl.bill_date and csd.other_payer = 3;

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 195
set @vgsStepStartTime = GETDATE()

if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' calculating various total values ' + convert(varchar(26),getdate(),109)

update csd set csd.balance_due = csdttl.ttl
from #transactions csd
inner join (select contact_id,contact_num,client_id,sum(amount) ttl from #transactions 
		where other_payer = 0
		group by contact_id,contact_num,client_id) csdttl on
	csd.contact_id = csdttl.contact_id and csd.contact_num = csdttl.contact_num and csd.client_id = csdttl.client_id  and csd.other_payer = 0 
--		and csd.other_payer <> 1 and csd.transaction_type <> '00' and csd.transaction_type <> 'C' and csd.tx_charge_code <> 'LateFeeSys'

update concl set concl.summary_client_balance_due = csdttl.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,client_id,sum(amount) ttl from #transactions 
		where other_payer = 0 and transaction_type <> '00' and transaction_type <> 'C' and (charge_code <> 'LateFeeSys' or charge_code is null)
		group by contact_id,contact_num,client_id) csdttl on
	concl.contact_id = csdttl.contact_id and concl.contact_num = csdttl.contact_num and concl.client_id = csdttl.client_id

update concl set concl.payments = csdttl.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,client_id,sum(payments) ttl from #contact_clients 
		group by contact_id,contact_num,client_id) csdttl on
	concl.contact_id = csdttl.contact_id and concl.contact_num = csdttl.contact_num and concl.client_id = csdttl.client_id

update concl set concl.summary_current_balance = bdttl.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,sum(amount) ttl from  #transactions csd
			where other_payer = 0 group by contact_id, contact_num) bdttl 
	on concl.contact_id = bdttl.contact_id and concl.contact_num = bdttl.contact_num
 
update concl set concl.summary_previous_balance_due = bfttl.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,sum(amount) ttl from #transactions  
			where transaction_type = '00' group by contact_id, contact_num) bfttl 
	on concl.contact_id = bfttl.contact_id and concl.contact_num = bfttl.contact_num --and concl.consolidate_statement = 1

update concl set concl.summary_payments = payttl.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,sum(amount) ttl from #transactions 
			where transaction_type = 'C' group by contact_id, contact_num) payttl 
	on concl.contact_id = payttl.contact_id and concl.contact_num = payttl.contact_num --and concl.consolidate_statement = 1

update concl set concl.summary_late_fees = latefee.ttl
from #contact_clients concl
inner join (select contact_id,contact_num,sum(amount) ttl from #transactions 	
			where charge_code = 'LateFeeSys' group by contact_id, contact_num) latefee 
	on concl.contact_id = latefee.contact_id and concl.contact_num = latefee.contact_num 


set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

--Aging
IF @vShowAging = 1
BEGIN
	CREATE TABLE #temp_bucket_sum 
	(
		amount money,
		client_id int, 
		aging_date datetime,
		bill_date datetime,
		payer_id int,
		bucket_index int
	);

	IF @vPrivateStatementsIncluded = 1
	BEGIN
		SET @vStep = 200;
		SET @vgsStepStartTime = GETDATE();
		IF  @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Start aging calculations ' + convert(varchar(26),getdate(),109);
       
		INSERT INTO #transactions (invoice_id, fac_id, contact_id, contact_num, client_id, payer_id, transaction_type, comment
		, balance_due, other_payer, aging_total, aging_current_label, aging_current_amount, aging_30_label, aging_30_amount, aging_60_label, aging_60_amount, aging_90_label
		, aging_90_amount, aging_120_label, aging_120_amount, aging_150_label, aging_150_amount, aging_180_label, aging_180_amount, aging_210_label, aging_210_amount
		, detail_order, bill_date)                           
				SELECT  
									max(concl.invoice_id) as invoice_id
									, concl.summary_fac_id
									, concl.contact_id
									, concl.contact_num
									, concl.client_id
									, concl.payer_id
									, 'ZZ' as transaction_type
									, '' as detail_comment
									, 0 as balance_due
									, 2 as other_payer
									, 0.0 as aging_total
									, convert(varchar(2),datepart(mm,concl.aging_date)) + '/' + convert(varchar(4),datepart(yyyy,concl.aging_date)) as aging_current_label
									, 0.0 as aging_current_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-1,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-1,concl.aging_date)))) as aging_30_label
									, 0.0 as aging_30_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-2,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-2,concl.aging_date)))) as aging_60_label
									, 0.0 as aging_60_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-3,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-3,concl.aging_date)))) as aging_90_label
									, 0.0 as aging_90_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-4,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-4,concl.aging_date)))) as aging_120_label
									, 0.0 as aging_120_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-5,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-5,concl.aging_date)))) as aging_150_label
									, 0.0 as aging_150_amount
									, convert(varchar(2),datepart(mm,(dateadd(mm,-6,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-6,concl.aging_date)))) as aging_180_label
									, 0.0 as aging_180_amount
									, '+ '+convert(varchar(2),datepart(mm,(dateadd(mm,-7,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-7,concl.aging_date)))) as aging_210_label
									, 0.0 as aging_210_amount
									, 0 as detail_order 
									, concl.bill_date
   					FROM #contact_clients concl
					WHERE concl.payer_id = 0
					GROUP BY concl.contact_id, concl.contact_num,concl.bill_date, concl.aging_date, concl.summary_fac_id, concl.client_id, concl.payer_id;

		SELECT DISTINCT csd.client_id, cc.aging_date,cc.bill_date,cc.payer_id  INTO #aging_clients 
		FROM #transactions csd
		INNER JOIN #contact_clients cc ON csd.client_id = cc.client_id AND cc. payer_id = 0 AND csd.transaction_type='ZZ';

		-- Temp table used to calculate amount for each bucket
		INSERT INTO #temp_bucket_sum (amount, client_id, aging_date, bill_date, payer_id, bucket_index)
			SELECT SUM(s.amount) AS amount, s.client_id, s.aging_date ,s.bill_date, s.payer_id, 
			CASE WHEN s.month_diff < 0 THEN 0 WHEN s.month_diff > 7 THEN 7 ELSE s.month_diff END AS bucket_index 
			FROM (
				SELECT 
						cl.client_id    
						, cl.aging_date 
						, cl.bill_date
						, cl.payer_id
						, CASE WHEN h.transaction_id is null THEN txn.amount ELSE -1*h.amount END AS 'amount'
						, CASE WHEN h.transaction_id is null 
								THEN DATEDIFF(MONTH, txn.effective_date,  DATEADD(dd,1, cl.bill_date)) 
								ELSE DATEDIFF(MONTH, h.applied_to_date,  DATEADD(dd,1, cl.bill_date)) 
							END AS 'month_diff'
				FROM dbo.ar_transactions txn WITH (NOLOCK)
				INNER JOIN #aging_clients cl
				ON cl.client_id = txn.client_id
				INNER JOIN dbo.ar_invoice invoice WITH (NOLOCK) 
				ON invoice.invoice_id = txn.invoice_id  AND invoice.effective_date < DATEADD(dd,1,cl.bill_date)
				AND invoice.deleted = 'N' AND invoice.trial_flag = 'N' AND invoice.fac_id = txn.fac_id 
				AND txn.deleted = 'N'
				INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id
				AND libpayer.deleted = 'N' and ((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))
				INNER JOIN dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id = txn.payer_id and payer.fac_id = txn.fac_id 
				LEFT JOIN ar_applied_payment_history h on txn.transaction_id = h.transaction_id AND h.deleted = 'N' 
				WHERE txn.deleted='N' 
				AND NOT (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
				AND NOT (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate')             
				UNION ALL
				SELECT
					  cl.client_id    
					, cl.aging_date 
					, cl.bill_date
					, cl.payer_id
					, CASE WHEN h.transaction_id is null THEN txn.amount ELSE -1*h.amount END AS 'amount'
					, CASE WHEN h.transaction_id is null 
						THEN DATEDIFF(MONTH, txn.effective_date,  DATEADD(dd,1, cl.bill_date)) 
						ELSE DATEDIFF(MONTH, h.applied_to_date,  DATEADD(dd,1, cl.bill_date)) 
					  END AS 'month_diff'
				FROM dbo.ar_transactions txn WITH (NOLOCK)
				INNER JOIN #aging_clients cl ON cl.client_id = txn.client_id
				INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id
				AND libpayer.deleted = 'N' and ((libpayer.payer_type = 'Private' and libpayer.bill_form = 'private') or (libpayer.payer_type = 'Outpatient' and libpayer.outpatient_payer_type = 'Private'))
				INNER JOIN dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id=txn.payer_id and payer.fac_id=txn.fac_id
				LEFT JOIN ar_applied_payment_history h on txn.transaction_id = h.transaction_id AND h.deleted = 'N' 
				WHERE txn.deleted='N' 
					AND txn.invoice_id < 0 
					AND NOT (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
					AND NOT (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
				)s
				GROUP BY s.client_id, s.aging_date, s.bill_date, s.payer_id, CASE WHEN s.month_diff < 0 THEN 0 WHEN s.month_diff > 7 THEN 7 ELSE s.month_diff END 

		-- --- Update each bucket using #temp_bucket_sum ---

		--Current bucket: bucket_index = 0 
		UPDATE std SET std.aging_current_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 0
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 30: bucket_index = 1 
		UPDATE std SET std.aging_30_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 1
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 60: bucket_index = 2
		UPDATE std SET std.aging_60_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 2
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 90: bucket_index = 3	
		UPDATE std SET std.aging_90_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 3
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 120: bucket_index = 4
		UPDATE std SET std.aging_120_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 4
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 150: bucket_index = 5
		UPDATE std SET std.aging_150_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 5
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 180: bucket_index = 6
		UPDATE std SET std.aging_180_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 6
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		--Bucket 210:  bucket_index = 7
		UPDATE std SET std.aging_210_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id = 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 7
		WHERE std.transaction_type = 'ZZ' and std.payer_id = 0;

		SET @vgsStepEndTime = GETDATE();
		IF  @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete aging calculations: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';
	END

	IF @vOtherStatementsIncluded = 1
	BEGIN
		SET @vStep = 210;
		SET @vgsStepStartTime = GETDATE();
		IF  @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Start other payer aging calculations ' + convert(varchar(26),getdate(),109);
       
		INSERT INTO #transactions (invoice_id, fac_id, contact_id, contact_num, client_id, payer_id, transaction_type, comment
		, balance_due, other_payer, aging_total, aging_current_label, aging_current_amount, aging_30_label, aging_30_amount, aging_60_label, aging_60_amount, aging_90_label
		, aging_90_amount, aging_120_label, aging_120_amount, aging_150_label, aging_150_amount, aging_180_label, aging_180_amount, aging_210_label, aging_210_amount
		, detail_order, bill_date)                           
				SELECT
					max(concl.invoice_id) as invoice_id
					, concl.summary_fac_id
					, concl.contact_id
					, concl.contact_num
					, concl.client_id
					, concl.payer_id
					, 'ZZ' as transaction_type
					, '' as detail_comment
					, 0 as balance_due
					, 2 as other_payer
					, 0.0 as aging_total
					, convert(varchar(2),datepart(mm,concl.aging_date)) + '/' + convert(varchar(4),datepart(yyyy,concl.aging_date)) as aging_current_label
					, 0.0 as aging_current_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-1,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-1,concl.aging_date)))) as aging_30_label
					, 0.0 as aging_30_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-2,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-2,concl.aging_date)))) as aging_60_label
					, 0.0 as aging_60_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-3,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-3,concl.aging_date)))) as aging_90_label
					, 0.0 as aging_90_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-4,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-4,concl.aging_date)))) as aging_120_label
					, 0.0 as aging_120_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-5,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-5,concl.aging_date)))) as aging_150_label
					, 0.0 as aging_150_amount
					, convert(varchar(2),datepart(mm,(dateadd(mm,-6,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-6,concl.aging_date)))) as aging_180_label
					, 0.0 as aging_180_amount
					, '+ '+convert(varchar(2),datepart(mm,(dateadd(mm,-7,concl.aging_date)))) + '/' + convert(varchar(4),datepart(yyyy,(dateadd(mm,-7,concl.aging_date)))) as aging_210_label
					, 0.0 as aging_210_amount
					, 0 as detail_order 
					, concl.bill_date
   				FROM #contact_clients concl
				WHERE concl.payer_id <> 0 and concl.contact_id <= -2.1 
				GROUP BY concl.contact_id, concl.contact_num,concl.bill_date, concl.aging_date, concl.summary_fac_id, concl.client_id, concl.payer_id;

		SELECT DISTINCT csd.client_id, cc.aging_date,cc.bill_date,cc.payer_id INTO #aging_clients_other 
		FROM #transactions csd
		INNER JOIN #contact_clients cc ON csd.client_id = cc.client_id AND cc. payer_id <> 0 AND csd.transaction_type='ZZ';

		-- Temp table used to calculate amount for each bucket
		INSERT INTO #temp_bucket_sum (amount, client_id, aging_date, bill_date, payer_id, bucket_index)
			SELECT SUM(s.amount) AS amount, s.client_id, s.aging_date ,s.bill_date, s.payer_id, 
			CASE WHEN s.month_diff < 0 THEN 0 WHEN s.month_diff > 7 THEN 7 ELSE s.month_diff END AS bucket_index 
			FROM (
				SELECT 
						cl.client_id    
						, cl.aging_date 
						, cl.bill_date
						, cl.payer_id
						, CASE WHEN h.transaction_id is null THEN txn.amount ELSE -1*h.amount END AS 'amount'
						, CASE WHEN h.transaction_id is null 
							THEN DATEDIFF(MONTH, txn.effective_date,  DATEADD(dd,1, cl.bill_date)) 
							ELSE DATEDIFF(MONTH, h.applied_to_date,  DATEADD(dd,1, cl.bill_date)) 
						END AS 'month_diff'
				FROM dbo.ar_transactions txn WITH (NOLOCK)
				INNER JOIN #aging_clients_other cl
				ON cl.client_id = txn.client_id and cl.payer_id = txn.payer_id
				INNER JOIN dbo.ar_invoice invoice WITH (NOLOCK) 
				ON cl.client_id = invoice.client_id and invoice.invoice_id = txn.invoice_id  AND invoice.effective_date < DATEADD(dd,1,cl.bill_date)
				AND invoice.deleted = 'N' AND invoice.trial_flag = 'N' AND invoice.fac_id = txn.fac_id 
				AND txn.deleted = 'N'
				INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id AND libpayer.deleted = 'N'
				INNER JOIN dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id = txn.payer_id and payer.fac_id = txn.fac_id 
				LEFT JOIN ar_applied_payment_history h on txn.transaction_id = h.transaction_id AND h.deleted = 'N'
				WHERE txn.deleted='N' 
				AND NOT (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
				AND NOT (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate')             
				UNION ALL
				SELECT 
						cl.client_id    
						, cl.aging_date 
						, cl.bill_date
						, cl.payer_id
						, CASE WHEN h.transaction_id is null THEN txn.amount ELSE -1*h.amount END AS 'amount'
						, CASE WHEN h.transaction_id is null 
							THEN DATEDIFF(MONTH, txn.effective_date,  DATEADD(dd,1, cl.bill_date)) 
							ELSE DATEDIFF(MONTH, h.applied_to_date,  DATEADD(dd,1, cl.bill_date)) 
						END AS 'month_diff'
			FROM dbo.ar_transactions txn WITH (NOLOCK)
			INNER JOIN #aging_clients_other cl
			ON cl.client_id = txn.client_id and cl.payer_id = txn.payer_id
			INNER JOIN dbo.ar_lib_payers libpayer WITH (NOLOCK) on libpayer.payer_id=txn.payer_id AND libpayer.deleted = 'N'
			INNER JOIN dbo.ar_payers payer WITH (NOLOCK) on payer.payer_id=txn.payer_id and payer.fac_id=txn.fac_id
			LEFT JOIN ar_applied_payment_history h on txn.transaction_id = h.transaction_id AND h.deleted = 'N'
 			WHERE txn.deleted='N' 
			AND txn.invoice_id < 0 
			AND NOT (txn.transaction_type = 'CA' AND payer.anc_rate_field = 'daily_rate')
			AND NOT (txn.transaction_type = 'CR' AND payer.daily_rate_field = 'daily_rate') 
			)s
			GROUP BY s.client_id, s.aging_date, s.bill_date, s.payer_id, CASE WHEN s.month_diff < 0 THEN 0 WHEN s.month_diff > 7 THEN 7 ELSE s.month_diff END 

		-- --- Update each bucket using #temp_bucket_sum ---

		--Current bucket: bucket_index = 0 
		UPDATE std SET std.aging_current_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.payer_id = b.payer_id 
			AND concl.bill_date = b.bill_date AND b.bucket_index = 0
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

	   --Bucket 30: bucket_index = 1 
		UPDATE std SET std.aging_30_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0 
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id  AND b.bucket_index = 1
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;
	
		--Bucket 60: bucket_index = 2
		UPDATE std SET std.aging_60_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0 
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 2
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		--Bucket 90: bucket_index = 3
		UPDATE std SET std.aging_90_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0  
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date
			AND concl.payer_id = b.payer_id AND b.bucket_index = 3
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		--Bucket 120: bucket_index = 4
		UPDATE std SET std.aging_120_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0 
		LEFT OUTER JOIN  #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 4
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		--Bucket 150: bucket_index = 5
		UPDATE std SET std.aging_150_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0 
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 5
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		--Bucket 180: bucket_index = 6
		UPDATE std SET std.aging_180_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0 
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id AND b.bucket_index = 6
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		--Bucket 210:  bucket_index = 7
		UPDATE std SET std.aging_210_amount = ISNULL(b.amount,0)
		FROM #transactions std
		INNER JOIN #contact_clients concl on std.client_id = concl.client_id and std.bill_date = concl.bill_date and concl.payer_id <> 0
		LEFT OUTER JOIN #temp_bucket_sum b ON std.client_id = b.client_id AND concl.aging_date = b.aging_date AND concl.bill_date = b.bill_date 
			AND concl.payer_id = b.payer_id  AND b.bucket_index = 7
		WHERE std.transaction_type = 'ZZ' and std.payer_id <> 0 and concl.payer_id = std.payer_id;

		SET @vgsStepEndTime = GETDATE();
		IF  @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete other payer aging calculations: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';
	END
END


--Update aging totals 

UPDATE #transactions SET aging_total = 
aging_current_amount + aging_30_amount + aging_60_amount + aging_90_amount 
+ aging_120_amount + aging_150_amount + aging_180_amount + aging_210_amount
WHERE transaction_type = 'ZZ' ;

select @vStep = 220
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' set detail order and update contact data as needed ' + convert(varchar(26),getdate(),109)

update tx set tx.detail_order	= (Case when tx.transaction_type = '00' then 0
									when tx.transaction_type = 'C' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 10
									when tx.transaction_type = 'CR' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 15
									when tx.transaction_type = 'R' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 20
									when tx.transaction_type = 'DR' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 25
									when tx.transaction_type = 'A' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 40
									when tx.transaction_type = 'CA' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 50
									when tx.transaction_type = 'PC' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 55
									when tx.charge_code = 'LateFeeSys' then 60
									when tx.transaction_type = 'TA' and isnull(tx.charge_code,'') <> 'LateFeeSys' then 70	
									when tx.transaction_type = 'YY' then 100								
									when tx.transaction_type = 'YZ' then 150
									when tx.transaction_type = 'ZZ' then 200
									else 30 END)
from #transactions tx

update concl set concl.pre_consolidated_payment_due_date = concl.payment_due_date, concl.payment_due_date = maxddate.duedate 
from #contact_clients concl
inner join (select contact_id,contact_num,max(payment_due_date) duedate from #contact_clients 
		where payment_due_date is not null group by contact_id, contact_num) maxddate 
	on concl.contact_id = maxddate.contact_id and concl.contact_num = maxddate.contact_num

--get most recent contact name and address for each contact, and assign it to all other residents - put here for debug reasons (we can see what the conacts were prior to the update)
update con set 
	con.contact_title = LatestContact.contact_title,
	con.contact_first_name = LatestContact.contact_first_name,
	con.contact_last_name = LatestContact.contact_last_name,
	con.contact_address1 = LatestContact.contact_address1,
	con.contact_address2 = LatestContact.contact_address2,
	con.contact_address3 = LatestContact.contact_address3,
	con.contact_city = LatestContact.contact_city,
	con.contact_prov_state = LatestContact.contact_prov_state,
	con.contact_postal_zip_code = LatestContact.contact_postal_zip_code,
	con.contact_country = LatestContact.contact_country,
	con.contact_county = LatestContact.contact_county,
	con.contact_email = LatestContact.contact_email,	
	con.private_bills_to = Case when con.private_bills_to <> LatestContact.private_bills_to then 'M' else con.private_bills_to end
from #contact_clients con
inner join (select ccl.contact_id,ccl.contact_num,ccl.bill_date,ccl.invoice_id,	ccl.contact_title, ccl.contact_first_name, ccl.contact_last_name, ccl.contact_address1
			, ccl.contact_address2, ccl.contact_address3, ccl.contact_city, ccl.contact_prov_state, ccl.contact_postal_zip_code, ccl.contact_country, ccl.contact_county, contact_email,private_bills_to
			, ROW_NUMBER() OVER ( PARTITION BY ccl.contact_id,ccl.bill_date 
			order by  ccl.contact_id,ccl.contact_num,ccl.bill_date desc, inv.created_date desc) as rwnum
			from #contact_clients ccl
			inner join dbo.ar_invoice inv with (nolock) on ccl.invoice_id = inv.invoice_id
		) LatestContact on con.contact_num = LatestContact.contact_num and con.bill_date = LatestContact.bill_date and LatestContact.rwnum = 1

update con set con.private_bills_to = 'M'
from #contact_clients con
inner join #contact_clients m on con.contact_num = m.contact_num and con.bill_date = m.bill_date  
where m.private_bills_to = 'M' and con.private_bills_to <> 'M' 

insert into #contact_return_to --set return to address info
select distinct
	  ccl.contact_num
	, case when fgi.fac_id is null then NULL else fgi.facility_group_id end as campus_id
	, case when fgi.fac_id is null then hfac.facility_code else fgi.remit_to_group_number end as return_to_group_number
	, case when fgi.fac_id is null then hfac.name else fgi.facility_group_name end as return_to_name
	, case when fgi.fac_id is null then hfac.address1 else fgi.facility_group_address1 end as return_to_address1
	, case when fgi.fac_id is null then hfac.address2 else fgi.facility_group_address2 end as return_to_address2
	, case when fgi.fac_id is null then '' else fgi.facility_group_address3 end as return_to_address3
	, case when fgi.fac_id is null then hfac.city else fgi.facility_group_city end as return_to_city
	, case when fgi.fac_id is null then faccnty.name else fgi.facility_group_county end as return_to_county
	, case when fgi.fac_id is null then hfac.prov else fgi.facility_group_prov_state end as return_to_prov_state
	, case when fgi.fac_id is null then fl.country else fgi.facility_group_country end as return_to_country
	, case when fgi.fac_id is null then hfac.pc else fgi.facility_group_postal_zip_code end as return_to_postal_zip_code
	, case when fgi.fac_id is null then hfac.tel else fgi.facility_group_phone end as return_to_phone
from #contact_clients ccl
inner join (select contact_num,max(invoice_id) as max_invoice_id from #contact_clients group by contact_num) mccl on 
	ccl.contact_num = mccl.contact_num
inner join #facility_list fl on ccl.fac_id = fl.fac_id
inner join dbo.ar_invoice inv with (nolock) on mccl.max_invoice_id = inv.invoice_id
left join #facilty_group_info fgi on ccl.fac_id = fgi.fac_id
inner join dbo.facility_audit hfac with (nolock) on ccl.fac_id = hfac.fac_id
	and hfac.effective_date  <= inv.created_date AND (hfac.ineffective_date  >= inv.created_date or hfac.ineffective_date is null)	
left join dbo.county faccnty with (nolock) on hfac.county_id = faccnty.county_id
--select * from #contact_return_to
--select * from #contact_clients
--check for override remit to address info - default private payer takes precident, then most recent invoices payer per contact.
--if @vIsEmc = 0 
update con set 
	con.remit_to_name				= LatestContact.remit_to_name,
	con.remit_to_address1			= LatestContact.remit_to_address1,
	con.remit_to_address2			= LatestContact.remit_to_address2,
	con.remit_to_address3			= LatestContact.remit_to_address3,
	con.remit_to_city				= LatestContact.remit_to_city,
	con.remit_to_prov_state			= LatestContact.remit_to_prov_state,
	con.remit_to_postal_zip_code	= LatestContact.remit_to_postal_zip_code,
	con.remit_to_phone				= LatestContact.remit_to_phone,
	con.remit_to_county				= LatestContact.remit_to_county,
	con.remit_to_country			= LatestContact.remit_to_country
from #contact_clients con
inner join (select 
			ccl.contact_id,
			ccl.contact_num,
			ccl.bill_date,
			ccl.invoice_id,	
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_name else ccl.remit_to_name end as remit_to_name, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_address1 else ccl.remit_to_address1 end as remit_to_address1, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_address2 else ccl.remit_to_address2 end as remit_to_address2, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then '' else ccl.remit_to_address3 end as remit_to_address3,
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_city else ccl.remit_to_city end as remit_to_city, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_prov_state else ccl.remit_to_prov_state end as remit_to_prov_state, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_postal_zip_code else ccl.remit_to_postal_zip_code end as remit_to_postal_zip_code, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then pyraud.provider_tel else ccl.remit_to_phone end as remit_to_phone, 
			case when isnull(pyraud.provider_override,'N') = 'Y' then cnty.name else ccl.remit_to_county end as remit_to_county,
			case when isnull(pyraud.provider_override,'N') = 'Y' then country.item_description else ccl.remit_to_country end as remit_to_country, 
			ROW_NUMBER() OVER ( PARTITION BY ccl.contact_id,ccl.contact_num,ccl.bill_date 
			order by  ccl.contact_id,ccl.contact_num,ccl.bill_date desc, case when cfg.default_payer_id = inv.payer_id then dateadd(yyyy, 100, inv.created_date) else inv.created_date end desc, inv.invoice_id desc) as rwnum
			from #contact_clients ccl
			inner join dbo.ar_invoice inv with (nolock) on ccl.invoice_id = inv.invoice_id
			inner join dbo.ar_configuration cfg on ccl.fac_id = cfg.fac_id and cfg.deleted = 'N'
			inner join dbo.ar_payers pyr with (nolock) on inv.payer_id = pyr.payer_id and inv.fac_id = pyr.fac_id 
			inner join dbo.ar_payers_audit pyraud with (nolock) on inv.payer_id = pyraud.payer_id and inv.fac_id = pyraud.fac_id and 
				pyraud.effective_date  <= inv.created_date AND (pyraud.ineffective_date  >= inv.created_date or pyraud.ineffective_date is null)
			left join dbo.county cnty with (nolock) on pyraud.provider_county_id = cnty.county_id
			left join common_code country with (nolock) on pyraud.provider_country_id = country.item_id
			left join #facilty_group_info fgi on ccl.fac_id = fgi.fac_id
			where fgi.fac_id is null
		) LatestContact on con.contact_num = LatestContact.contact_num and con.bill_date = LatestContact.bill_date and LatestContact.rwnum = 1
--select * from #contact_clients

if @debug_me='Y'  select * from #transactions order by contact_id,client_id,invoice_id,other_payer,transaction_type

--select * from ar_payers_audit

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 240
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' $0 suppression updates and other payer Aging and information payer data deletion' + convert(varchar(26),getdate(),109)

delete from #transactions where transaction_type not in ('00', 'YY', 'YZ', 'ZZ') and other_payer = 0 and amount = 0 --remove any detail values that have a $0 total and aren't a balance forward, other payer total or aging

delete from #transactions where transaction_type in ('YY', 'YZ') and other_payer <> 0 and (contact_id = -2.1 or contact_id = -3.1)--remove any detail values that have a $0 total and aren't a balance forward, other payer total or aging

if @vShowResults = 'D' -- suppress charge codes that sum to $0

update csd set csd.detail_order=999
from #transactions csd
inner join (select 	contact_num,contact_id,client_id, charge_code, frequency,dateadd(mm, datediff(mm, 0,effective_date) + 0, 0) as effective_date, sum(amount) as ttl
	from #transactions where charge_code is not null 
	group by contact_num,contact_id,client_id, charge_code, frequency, dateadd(mm, datediff(mm, 0, effective_date) + 0, 0)) supress on 
	csd.contact_num = supress.contact_num and csd.contact_id = supress.contact_id and csd.client_id = supress.client_id and csd.charge_code = supress.charge_code 
	and csd.frequency = supress.frequency and dateadd(mm, datediff(mm, 0, csd.effective_date) + 0, 0) = supress.effective_date and supress.ttl = 0

--suppress other transactions that sum to $0.00
update marked set marked.detail_order=999
from #transactions marked
inner join (
			select contact_num, contact_id, client_id, bill_date, generated_date, effective_date, transaction_type, tx_description, sum(amount) as ttl, count(*) as cnt
			from #transactions 
			where transaction_type <> '00' and other_payer = 0 and detail_order <> 999
			group by contact_num, contact_id, client_id, bill_date, generated_date, effective_date, transaction_type, tx_description having count (*) > 1
			) sum0 on marked.contact_num = sum0.contact_num and marked.contact_id = sum0.contact_id and marked.client_id = sum0.client_id and marked.bill_date = sum0.bill_date
				and marked.generated_date = sum0.generated_date and marked.effective_date = sum0.effective_date and marked.transaction_type = sum0.transaction_type
				and marked.tx_description = sum0.tx_description and sum0.ttl = 0 and marked.detail_order <> 999

--select detail_order,* from #transactions
--delete ccl --remove contact clients that have a single invoice, but one has no 'real' transactions and everything is $0.00
--from #contact_clients ccl
--inner join (select contact_num, contact_id, client_id from #contact_clients where contact_id > -2.1 group by contact_num, contact_id, client_id having count(1) = 1) minv
--	on ccl.contact_num = minv.contact_num and ccl.contact_id = minv.contact_id and ccl.client_id = minv.client_id
--inner join (select contact_num, contact_id, client_id from #transactions 
--	where detail_order <> 999 and other_payer = 0 group by contact_num, contact_id, client_id having count(1) = 1 and contact_id > -2.1) mtx
--	on ccl.contact_num = mtx.contact_num and ccl.contact_id = mtx.contact_id and ccl.client_id = mtx.client_id
--left join #transactions csd on csd.invoice_id = ccl.invoice_id and csd.transaction_type = '00' and csd.amount <> 0.00
--where csd.invoice_id is null

if @debug_me='Y'  select * from #transactions

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'

select @vStep = 260
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' udpate merged contacts with the most recent statement invoice # ' + convert(varchar(26),getdate(),109)

--remove extra invoices added for Balance Forward Calculations
if @vInvoiceIdList is not null
	begin
		delete rem 
		from #contact_clients rem
		LEFT join 
			(select con.contact_num
			from #contact_clients con
			inner join #invoice_ids_table inv on con.invoice_id = inv.invoice_id) kep on rem.contact_num = kep.contact_num
		where kep.contact_num is null
	end

update con set 
	con.statement_invoice_number = getinvnum.statement_invoice_number
from #contact_clients con
inner join (select cc.contact_num, client_id, max(cc.invoice_id) invoice_id
	from #contact_clients cc
	group by contact_num, client_id) latest on con.contact_num = latest.contact_num and con.client_id = latest.client_id 
inner join #contact_clients getinvnum with (nolock) on latest.invoice_id = getinvnum.invoice_id
		
set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
				
select @vStep = 270;
set @vgsStepStartTime = GETDATE();
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' Add contact numbers and client list  ' + convert(varchar(26),getdate(),109);

DECLARE @ContactNums TABLE
				(
					contact_id numeric(18,1), 
					contact_number varchar(86),
					contact_email varchar(75),
					online_id varchar(35),
					fac_id int
				);

if @vExportMode = 0

	INSERT INTO @ContactNums(contact_id, contact_number, contact_email, online_id, fac_id)
				SELECT DISTINCT cont.contact_id, CASE WHEN cont.contact_id = 0 THEN '0'
													ELSE
												(CASE WHEN @vIncludePrefixFacilityCode = 1 THEN 
													(CASE WHEN @vIsEmc = 1 THEN 
															(CASE 
																WHEN fg.facility_group_id IS NULL AND (f.facility_code IS NULL OR LTRIM(f.facility_code)='') THEN c.contact_number
																WHEN fg.facility_group_id IS NULL THEN f.facility_code + '-' +  c.contact_number
																WHEN (fg.facility_group_code IS NULL OR LTRIM (fg.facility_group_code) = '') THEN c.contact_number 
																ELSE fg.facility_group_code  + '-' +  c.contact_number END)
														ELSE -- @vIncludePrefixFacilityCode = 0
															(CASE WHEN (f.facility_code IS NULL OR LTRIM(f.facility_code)='') THEN c.contact_number
																ELSE  
																f.facility_code + '-' +  c.contact_number END)
															END)
												ELSE c.contact_number END)  
												END
												AS contact_number
												,c.email_address
												,c.contact_number as online_id
												,f.fac_id
				FROM (SELECT DISTINCT contact_id, fac_id FROM #contact_clients) cont
				LEFT OUTER JOIN dbo.contact c WITH(NOLOCK)
				ON cont.contact_id = c.contact_id
				INNER JOIN dbo.facility f WITH(NOLOCK)
				ON f.fac_id = cont.fac_id
				LEFT OUTER JOIN (SELECT fgm.fac_id, fg.facility_group_id, fg.facility_group_code 
							FROM dbo.facility_group fg WITH(NOLOCK)
							INNER JOIN dbo.facility_group_mapping fgm WITH(NOLOCK) 
							ON fgm.facility_group_id = fg.facility_group_id 
							WHERE fg.[type_id] = 1 ) fg
				ON f.fac_id = fg.fac_id;
else

	INSERT INTO @ContactNums(contact_id, contact_number, contact_email, online_id, fac_id)
				SELECT DISTINCT cont.contact_id, c.contact_number, c.email_address, c.contact_number, cont.fac_id
				FROM (SELECT DISTINCT contact_id, fac_id FROM #contact_clients) cont
				LEFT OUTER JOIN dbo.contact c WITH(NOLOCK)
				ON cont.contact_id = c.contact_id

update  con set con.client_list = stuff(clients,1,0,'')
FROM #contact_clients con
CROSS APPLY
( 
SELECT top 2 concl.summary_charge_client_name + ' ('+concl.summary_charge_client_number+')| ' --+ ', '
	FROM  #contact_clients concl
	WHERE con.contact_num = concl.contact_num and con.contact_id = concl.contact_id and con.payer_id = concl.payer_id
	group by concl.summary_charge_client_name,concl.summary_charge_client_number 
	ORDER BY concl.summary_charge_client_name,concl.summary_charge_client_number
	FOR XML PATH ('')
) a ( clients )

update #contact_clients set client_list = left(client_list,len(client_list)-1)

update con  set con.client_list = con.client_list +'...'
from
#contact_clients con
inner join (select contact_num, contact_id from (select contact_num, contact_id, client_id from #contact_clients group by contact_num, contact_id, client_id) getcl group by  contact_num, contact_id  having count(*) > 2 ) maxcl
on con.contact_num = maxcl.contact_num and con.contact_id = maxcl.contact_id

set @vgsStepEndTime=GETDATE();
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms';
	
	
select @vStep = 300
set @vgsStepStartTime = GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' returning final result ' + convert(varchar(26),getdate(),109)
--*********************************************************************************************************
if @vExportMode = 0
	select 
			ccl.fac_id
		, c.item_description as fac_country
		, ccl.contact_id
		, ccl.contact_num
		, ccl.consolidate_statement
		, cn.online_id
		, ccl.client_id
		, ccl.invoice_id
		, ccl.statement_invoice_number
		, ccl.payer
		, ltrim(rtrim(ccl.remit_to_name)) as remit_to_name
		, ltrim(rtrim(case when isnull(ccl.remit_to_address3,'')<>'' and isnull(ccl.remit_to_address2,'')<>'' and isnull(ccl.remit_to_address1,'')<>''  
				then ccl.remit_to_address1 + @vCflr + ccl.remit_to_address2+ @vCflr + ccl.remit_to_address3
			when isnull(ccl.remit_to_address3,'')='' and isnull(ccl.remit_to_address2,'')<>'' and isnull(ccl.remit_to_address1,'')<>'' 
				then ccl.remit_to_address1 + @vCflr + ccl.remit_to_address2
			when isnull(ccl.remit_to_address3,'')<>'' and isnull(ccl.remit_to_address2,'')='' and isnull(ccl.remit_to_address1,'')<>'' 
				then ccl.remit_to_address1 + @vCflr + ccl.remit_to_address3
			when isnull(ccl.remit_to_address3,'')<>'' and isnull(ccl.remit_to_address2,'')<>'' and isnull(ccl.remit_to_address1,'')='' 
				then ccl.remit_to_address2 + @vCflr + ccl.remit_to_address3
			when isnull(ccl.remit_to_address3,'')='' and isnull(ccl.remit_to_address2,'')<>'' and isnull(ccl.remit_to_address1,'')='' 
				then ccl.remit_to_address2
			when isnull(ccl.remit_to_address3,'')<>'' and isnull(ccl.remit_to_address2,'')='' and isnull(ccl.remit_to_address1,'')='' 
				then ccl.remit_to_address3
			else ccl.remit_to_address1 end)) as remit_to_address
		, ltrim(rtrim(isnull(ccl.remit_to_city, '') + ', ' + isnull(ccl.remit_to_prov_state, '') + ' ' +  isnull(ccl.remit_to_postal_zip_code, ''))) as remit_to_address2
		, isnull(ccl.remit_to_city, '') as remit_to_city
		, isnull(ccl.remit_to_county, '') as remit_to_county
		, isnull(ccl.remit_to_prov_state, '') as remit_to_prov_state
		, isnull(ccl.remit_to_postal_zip_code, '') as remit_to_postal_zip_code
		, ccl.remit_to_phone
		, ltrim(rtrim(return_add.return_to_name)) as return_to_name
		, ltrim(rtrim(case when isnull(return_add.return_to_address3,'')<>'' and isnull(return_add.return_to_address2,'')<>'' and isnull(return_add.return_to_address1,'')<>''  
				then return_add.return_to_address1 + @vCflr + return_add.return_to_address2+ @vCflr + return_add.return_to_address3
			when isnull(return_add.return_to_address3,'')='' and isnull(return_add.return_to_address2,'')<>'' and isnull(return_add.return_to_address1,'')<>'' 
				then return_add.return_to_address1 + @vCflr + return_add.return_to_address2
			when isnull(return_add.return_to_address3,'')<>'' and isnull(return_add.return_to_address2,'')='' and isnull(return_add.return_to_address1,'')<>'' 
				then return_add.return_to_address1 + @vCflr + return_add.return_to_address3
			when isnull(return_add.return_to_address3,'')<>'' and isnull(return_add.return_to_address2,'')<>'' and isnull(return_add.return_to_address1,'')='' 
				then return_add.return_to_address2 + @vCflr + return_add.return_to_address3
			when isnull(return_add.return_to_address3,'')='' and isnull(return_add.return_to_address2,'')<>'' and isnull(return_add.return_to_address1,'')='' 
				then return_add.return_to_address2
			when isnull(return_add.return_to_address3,'')<>'' and isnull(return_add.return_to_address2,'')='' and isnull(return_add.return_to_address1,'')='' 
				then return_add.return_to_address3
			else return_add.return_to_address1 end)) as return_to_address
		, ltrim(rtrim(isnull(return_add.return_to_city, '') + ', ' + isnull(return_add.return_to_prov_state, '') + ' ' +  isnull(return_add.return_to_postal_zip_code, ''))) as return_to_address2
		, isnull(return_add.return_to_city, '') as return_to_city
		, isnull(return_add.return_to_county, '') as return_to_county
		, isnull(return_add.return_to_prov_state, '') as return_to_prov_state
		, isnull(return_add.return_to_postal_zip_code, '') as return_to_postal_zip_code
		, return_add.return_to_phone
		, Case when private_bills_to = 'G' and ccl.contact_id <> 0 and ccl.contact_id <>-3.1 then 
				(ltrim(rtrim(case when isnull(ccl.contact_title,'')<>'' then ccl.contact_title + ' ' + ccl.contact_first_name + ' ' + ccl.contact_last_name 
				else ccl.contact_first_name + ' ' + ccl.contact_last_name end)))
			when ccl.contact_id = 0 or private_bills_to = 'M' or ccl.contact_id = -3.1 then 'No contact information available for:' 
			when ccl.contact_id = -2.1 then ccl.contact_first_name
			else 'No default payer address available for:' end	as contact_name
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0 and ccl.contact_id <> -3.1) or ccl.contact_id = -2.1 then 
				(ltrim(rtrim(case when isnull(ccl.contact_address3,'')<>'' and isnull(ccl.contact_address2,'')<>'' and isnull(ccl.contact_address1,'')<>'' 
				then ccl.contact_address1 + @vCflr + ccl.contact_address2 + @vCflr + ccl.contact_address3
			when isnull(ccl.contact_address3,'')='' and isnull(ccl.contact_address2,'')<>'' and isnull(ccl.contact_address1,'')<>'' 
				then ccl.contact_address1 + @vCflr + ccl.contact_address2
			when isnull(ccl.contact_address3,'')<>'' and isnull(ccl.contact_address2,'')='' and isnull(ccl.contact_address1,'')<>'' 
				then ccl.contact_address1 + @vCflr + ccl.contact_address3
			when isnull(ccl.contact_address3,'')<>'' and isnull(ccl.contact_address2,'')<>'' and isnull(ccl.contact_address1,'')='' 
				then ccl.contact_address2 + @vCflr + ccl.contact_address3
			when isnull(ccl.contact_address3,'')='' and isnull(ccl.contact_address2,'')<>'' and isnull(ccl.contact_address1,'')='' 
				then ccl.contact_address2
			when isnull(ccl.contact_address3,'')<>'' and isnull(ccl.contact_address2,'')='' and isnull(ccl.contact_address1,'')='' 
				then ccl.contact_address3
				else isnull(ccl.contact_address1,'') end)))
			when ccl.contact_id = 0 or private_bills_to = 'M' or ccl.contact_id = -3.1 then ccl.summary_charge_client_name + ' ('+ccl.summary_charge_client_number+')'
			else ccl.payer end as contact_address
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1 then 
				(ltrim(rtrim(case when isnull(ccl.contact_city, '')<>'' and  isnull(ccl.contact_prov_state, '')<>'' then ccl.contact_city + ', ' + ccl.contact_prov_state + ' ' 
					+ isnull(ccl.contact_postal_zip_code, '')
				when isnull(ccl.contact_city, '')<>'' and isnull(ccl.contact_prov_state, '')='' then ccl.contact_city + ', ' + isnull(ccl.contact_postal_zip_code, '')
				when isnull(ccl.contact_city, '')='' and isnull(ccl.contact_prov_state, '')<>'' then ccl.contact_prov_state + ', ' + isnull(ccl.contact_postal_zip_code, '')
				else '' end)))
			else '' end as contact_address2
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_city, '') else '' end as contact_city
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_county, '') else '' end as contact_county
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_prov_state, '') else '' end as contact_prov_state
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_postal_zip_code, '') else '' end as contact_postal_zip_code
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_country, '') else '' end as contact_country
		, Case when private_bills_to = 'G' and ccl.contact_id <> 0 and @vAccountNumberSource = 'C' then cn.contact_number 
			when private_bills_to = 'G' and ccl.contact_id <> 0 and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) > 0 then cn.contact_number
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 0 then ccl.summary_charge_client_number
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 1 and @vIsEmc = 0
				and (f.facility_code IS NULL OR LTRIM(f.facility_code)='') then ccl.summary_charge_client_number
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 1 and @vIsEmc = 0
				and (f.facility_code IS NOT NULL OR LTRIM(f.facility_code)<>'') then f.facility_code + '-' + ccl.summary_charge_client_number
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 1 and @vIsEmc = 1
				and return_add.return_to_group_number IS NOT NULL then return_add.return_to_group_number + '-' + ccl.summary_charge_client_number 
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 1 and @vIsEmc = 1
				and return_add.return_to_group_number IS NULL and (f.facility_code IS NOT NULL OR LTRIM(f.facility_code)<>'') then f.facility_code  + '-' + ccl.summary_charge_client_number 
			when private_bills_to = 'G' and @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) = 0 and @vIncludePrefixFacilityCode = 1 and @vIsEmc = 1
				and return_add.return_to_group_number IS NULL and (f.facility_code IS NULL OR LTRIM(f.facility_code)='') then ccl.summary_charge_client_number 
			else Null end as account_number
		, Case when @vUseEffectiveDateAsBillDate = 1 then ccl.bill_date else dateadd(mm, datediff(mm, 0, ccl.bill_date) + 1, 0) end as bill_date
		, ccl.inv_effective_date as effective_date
		, ccl.generated_date
		, Case when fac.show_payment_due_date = 1 then ccl.payment_due_date else Null end as payment_due_date
		, Case when fac.show_payment_due_date = 1 then ccl.pre_consolidated_payment_due_date else Null end as pre_consolidated_payment_due_date
		, coalesce(convert(datetime,convert(varchar(10),ccl.statement_through_date, 101)),ccl.bill_date) as statement_through_date
		, ccl.amount_due
		, case when ccl.contact_id <> -2.1 then ccl.eft_message else '' end as eft_message
		, replace(ccl.client_list,'|',';') as client_list
		, case when ccl.contact_id <> -2.1 then ccl.client_message else '' end as client_message
		, case when ccl.contact_id <> -2.1 then ccl.group_message else '' end as group_message
		, case when ccl.contact_id <> -2.1 then ccl.global_message else '' end as global_message
		, case when ccl.contact_id <> -2.1 then @vStatementMessage else '' end as statement_message
		, fac.gst_hst
		, fac.gst_number
		, ccl.previous_balance_due
		, ccl.payments
		, ltrim(rtrim(ccl.summary_charge_center)) as summary_charge_center
		, ccl.summary_charge_client_name
		, ccl.summary_charge_client_number
		, ccl.summary_charge_client_location
		, case when @vDisplayAdmitDate = 1 then ccl.summary_charge_client_admission else Null end as summary_charge_client_admission
		, case when @vDisplayDischargeDate = 1 then  ccl.summary_charge_client_discharge else Null end as summary_charge_client_discharge
		, ccl.summary_current_balance
		, ccl.summary_previous_balance_due
		, ccl.summary_payments
		, ccl.summary_late_fees	
		, ccl.summary_client_balance_due
		, csd.transaction_type
		, csd.detail_order
		, csd.effective_date as detail_effective_date
		, case when csd.effective_thru_date <> csd.effective_date then 'thru' else '' end as detail_thru
		, csd.effective_thru_date as detail_effective_thru_date
		, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0) THEN '** ' +
				(case when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') = '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') = '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 0 and isnull(csd.cheque_number,'') <> '' 
					then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'A' and @vAncillaryComments = 1 and @vShowResults = 'D' and isnull(csd.comment,'') <> ''  then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'X' and @vAdjustmentComments = 1 and isnull(csd.comment,'') <> '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				else isnull(csd.tx_description,'') end
				) +' **'
			else (case when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') = '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') = '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 0 and isnull(csd.cheque_number,'') <> '' 
					then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'A' and @vAncillaryComments = 1 and @vShowResults = 'D' and isnull(csd.comment,'') <> ''  then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'X' and @vAdjustmentComments = 1 and isnull(csd.comment,'') <> '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				else isnull(csd.tx_description,'') end	
				)
			end as detail_description
		, csd.comment as detail_comment
		, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end as reversed_tx
		, Case when csd.transaction_type = 'R' and csd.unit_amount is null then Null 
			when csd.transaction_type = 'XR' and isnull(csd.units,0) = 0 then Null
			when csd.transaction_type = 'D' then Null  
			when csd.transaction_type not in('R','XR','CO','CR','D') and isnull(csd.unit_amount,0) = 0 then Null 
			else csd.units end as detail_units
		, Case when csd.transaction_type = 'D' then Null 
			when isnull(csd.unit_amount,0) = 0 then Null 
			when round((csd.units * csd.unit_amount),2) <> round(csd.amount, 2) then Null else round(csd.unit_amount, 2) end as detail_unit_amount
		, round(csd.amount, 2) as detail_amount
		, csd.balance_due
		, csd.other_payer
		, csd.payer_type
		, csd.aging_total
		, csd.aging_current_label
		, csd.aging_current_amount
		, csd.aging_30_label
		, csd.aging_30_amount
		, csd.aging_60_label
		, csd.aging_60_amount
		, csd.aging_90_label
		, csd.aging_90_amount
		, csd.aging_120_label
		, csd.aging_120_amount
		, csd.aging_150_label
		, csd.aging_150_amount
		, csd.aging_180_label
		, csd.aging_180_amount
		, csd.aging_210_label
		, csd.aging_210_amount
		, fac.cheques_payable_to
		, Case when (@vShowResults = 'C' or @vShowResults = 'CC') and csd.transaction_type = 'A' then Dense_rank() over 
			(ORDER BY ccl.contact_num, csd.detail_order, csd.tx_description) else 0 end ccorder
		, Case when @vTransactionOrder = 'P' then Dense_rank() over (ORDER BY ccl.contact_num, csd.detail_order, FORMAT(csd.effective_date,'YYYY'), FORMAT(csd.effective_date,'MM'),
			Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end desc, csd.effective_date, csd.tx_description)
			when @vTransactionOrder = 'D' then Dense_rank() over (ORDER BY ccl.contact_num, 
			 (case when csd.transaction_type = '00' then '1/1/1900'
				when csd.transaction_type in ('YY','YZ','ZZ') then dateadd(yyyy,100,ccl.bill_date)
				else csd.effective_date end), csd.detail_order, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end desc, csd.tx_description) 
			else 0 end txsort
		, Dense_rank() over (ORDER BY ccl.contact_num, ccl.non_consolidated_contact_num	, ccl.remit_to_name) statement_num
		, Case when csd.transaction_type = 'PC' then Dense_rank() over 
				(ORDER BY Left(csd.tx_description,charindex(':', csd.tx_description)), csd.effective_date, csd.transaction_type)
				else Dense_rank() over 
				(ORDER BY csd.effective_date, csd.transaction_type, csd.tx_description)
				end txtypeorder
		, @status_code status_code
		, @status_text status_text
	 
	from #contact_clients ccl
	left join #facility_list fac on ccl.fac_id = fac.fac_id
	inner join #transactions csd on ccl.invoice_id= csd.invoice_id and ccl.client_id = csd.client_id and ccl.contact_id = csd.contact_id
			and ccl.contact_num = csd.contact_num --and (ccl.contact_id = @vReceiverIds or @vReceiverIds = -1)
	inner join dbo.facility f with (nolock) on ccl.fac_id = f.fac_id
	inner join dbo.common_code c with (nolock) on f.country_id = c.item_id
	inner join #contact_return_to return_add on ccl.contact_num = return_add.contact_num
	LEFT OUTER JOIN @ContactNums cn
	ON ccl.contact_id = cn.contact_id and ccl.fac_id = cn.fac_id
	where csd.detail_order <> 999 --and csd.detail_amount is not null
		and (csd.amount is not null or csd.other_payer > 0)
		and (@vMinimumBalance is null or ccl.summary_current_balance >= @vMinimumBalance)
		and (@vSuppress0value = 0 or (@vSuppress0value = 1 and  (csd.amount <> 0.00 or csd.transaction_type in('00','YY','YZ','ZZ'))) or csd.payer_id = 0)
	order by statement_num, ccl.summary_charge_center, ccl.summary_charge_client_name, ccl.summary_charge_client_number, ccl.bill_date, 
		Case when ccl.contact_id <= -2.1 then ccl.invoice_id else 0 end, ccl.generated_date, txsort, ccorder, txtypeorder
else
	select 
		 
		  ccl.contact_num
		, Dense_rank() over (ORDER BY ccl.contact_num, ccl.non_consolidated_contact_num	, ccl.remit_to_name) statement_num
		, return_add.campus_id as campus_id
		, ltrim(rtrim(return_add.return_to_group_number)) as facility_group_number
		, ltrim(rtrim(return_add.return_to_name)) as facility_group_name
		, isnull(return_add.return_to_address1,'') as facility_group_address_1
		, isnull(return_add.return_to_address2,'') as facility_group_address_2
		, isnull(return_add.return_to_address3,'') as facility_group_address_3
		, isnull(return_add.return_to_county, '') as facility_group_county
		, isnull(return_add.return_to_city, '') as facility_group_city
		, isnull(return_add.return_to_prov_state, '') as facility_group_state
		, isnull(return_add.return_to_country, '') as facility_group_country
		, isnull(return_add.return_to_postal_zip_code, '') as facility_group_zip_code
		, isnull(return_add.return_to_phone,'') as facility_group_telephone	
		--, ltrim(rtrim(str(abs(ccl.contact_id)))) as contact_id
		, Case when private_bills_to = 'G' and ccl.contact_id <> 0 then cn.contact_number else '' end as guarantor_id 
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0 and ccl.contact_id <>-3.1) or private_bills_to = 'D' then ccl.contact_first_name else '' end as guarantor_first_name
		, Case when private_bills_to = 'G' and ccl.contact_id <> 0 and ccl.contact_id <>-3.1 then ccl.contact_last_name
			when ccl.contact_id = 0 or private_bills_to = 'M' or ccl.contact_id = -3.1 then 'No contact information available for:' 
			when ccl.contact_id = -2.1 then ccl.contact_last_name
			else 'No default payer address available for:' end	as guarantor_last_name
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0 and ccl.contact_id <> -3.1) or ccl.contact_id = -2.1 then isnull(ccl.contact_address1,'')
			when ccl.contact_id = 0 or private_bills_to = 'M' or ccl.contact_id = -3.1 then ccl.summary_charge_client_name + ' ('+ccl.summary_charge_client_number+')'
			else ccl.payer end as guarantor_address_1
		, isnull(ccl.contact_address2,'') as guarantor_address_2
		, isnull(ccl.contact_address3,'') as guarantor_address_3
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_county, '') else '' end as guarantor_county
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_city, '') else '' end as guarantor_city
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_prov_state, '') else '' end as guarantor_state		
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_country, '') else '' end as guarantor_country
		, Case when (private_bills_to = 'G' and ccl.contact_id <> 0) or ccl.contact_id = -2.1  then isnull(ccl.contact_postal_zip_code, '') else '' end as guarantor_zip_code
		, isnull(cn.contact_email,'') as guarantor_email_address
		, ltrim(rtrim(ccl.remit_to_name)) as remit_to_name
		, isnull(ccl.remit_to_address1,'') as remit_to_address_1
		, isnull(ccl.remit_to_address2,'') as remit_to_address_2
		, isnull(ccl.remit_to_address3,'') as remit_to_address_3
		, isnull(ccl.remit_to_county, '') as remit_to_county
		, isnull(ccl.remit_to_city, '') as remit_to_city
		, isnull(ccl.remit_to_prov_state, '') as remit_to_state
		, isnull(ccl.remit_to_country, '') as remit_to_country
		, isnull(ccl.remit_to_postal_zip_code, '') as remit_to_zip_code
		, isnull(ccl.remit_to_phone, '') as remit_to_phone_number
		, ccl.summary_current_balance as grand_total
		, ccl.summary_late_fees	as late_fees
		, ccl.summary_previous_balance_due as balance_forward_amount
		, ccl.summary_payments as cash_payments_received
		, cn.online_id
		, @vTermClient as term_used_for_patient
		, @vTermAdmission as term_used_for_admission
		, @vTermDischarge as term_used_for_discharge
		--, @vTermRoom as term_used_for_room
		--, @vTermFacility as term_used_for_facility
		, case when @vShowInvoiceNumber = 1 then 'Y' else 'N' end as show_invoice_number
		, case when @vShowLocation = 1 then 'Y' else 'N' end as show_location
		, case when @vDisplayAdmitDate = 1 then 'Y' else 'N' end as show_admit_date
		, case when @vDisplayDischargeDate = 1 then 'Y' else 'N' end as show_discharge_date
		, case when @vShowResidentNumber = 1 then 'Y' else 'N' end as show_patient_number
		, case when @vShowTransactionWarningMessage = 1 then 'Y' else 'N' end as show_transaction_warning_message
		, case when @vIncludePrefixFacilityCode = 1 then 'Y' else 'N' end as prefix_fac_code_to_acct_no
		--, @vDisplayUnitAndAmountFlag as display_unit_and_amount_flag
		, Case when isnull(fac.cheques_payable_to,'') <> '' and isnull(eftconfig.enabled,0) <> 1 and ccl.summary_current_balance > 0
			then 'Please make ' + (case when c.item_description = 'United States' then 'checks' else 'cheques' end) + ' payable to: ' + fac.cheques_payable_to else '' end as checks_payable_to		
		, isnull(@vPaymentInstructions,'') as payment_instruction
		, isnull(replace(@vTransactionWarningMessage, '<<stmt_thru_date>>', convert(varchar(10),coalesce(convert(datetime,convert(varchar(10),ccl.statement_through_date, 101)),ccl.bill_date), 101)),'') as transaction_warning_message
		, @vAccountNumberLabel as account_number_label
		, Case when @vAccountNumberSource = 'R' and charindex('|',ccl.client_list,1) > 0 then 'C' else @vAccountNumberSource end as account_number_source
		, ccl.fac_id as facility_id
		, ltrim(rtrim(isnull(ccl.summary_charge_center_code,''))) as facility_code
		, ltrim(rtrim(ccl.summary_charge_center)) as facility_name
		, ccl.client_id
		, convert(varchar(10),ccl.summary_charge_client_admission, 101) as patient_admit_date
		, convert(varchar(10),ccl.summary_charge_client_discharge, 101) as patient_discharge_date
		, ccl.summary_charge_client_number as patient_number
		, ccl.summary_charge_client_first_name as patient_first_name
		, ccl.summary_charge_client_last_name as patient_last_name
		, ccl.summary_charge_client_name as patient_name
		, convert(varchar(10),ccl.summary_charge_client_dob, 101) as patient_dob
		, isnull(ccl.summary_charge_client_location,'') as patient_location	
		, case when isnull(eftconfig.enabled,0) = 1 then 'Y' else 'N' end as eft_enabled
		, case when ccl.contact_id <> -2.1 then isnull(ccl.client_message,'') else '' end as patient_invoice_message
		, case when ccl.contact_id <> -2.1 then isnull(ccl.group_message,'') else '' end as patient_group_message
		, case when ccl.contact_id <> -2.1 then isnull(ccl.eft_message,'') else '' end as eft_message
		--, case when ccl.contact_id <> -2.1 then ccl.global_message else '' end as global_message
		--, case when ccl.contact_id <> -2.1 then @vStatementMessage else '' end as statement_message
		, ccl.statement_invoice_number as invoice_number
		, Case when @vUseEffectiveDateAsBillDate = 1 then convert(varchar(10),ccl.bill_date, 101) else convert(varchar(10),dateadd(mm, datediff(mm, 0, ccl.bill_date) + 1, 0), 101) end as invoice_date
		, convert(varchar(10),ccl.payment_due_date, 101) as invoice_due_date
		--, convert(varchar(10),ccl.inv_effective_date, 101) as effective_date
		--, convert(varchar(10),ccl.generated_date, 101) as generated_date
		, ccl.summary_client_balance_due as current_invoice_charges
		, csd.balance_due as total_amount_due
		, convert(varchar(10),csd.effective_date, 101) as date_of_service
		--, case when csd.effective_thru_date <> csd.effective_date then 'thru' else '' end as detail_thru
		--, convert(varchar(10),csd.effective_thru_date, 101) as detail_effective_thru_date
		, csd.transaction_type
		, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0) THEN '** ' +
				(case when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') = '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') = '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 0 and isnull(csd.cheque_number,'') <> '' 
					then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'A' and @vAncillaryComments = 1 and @vShowResults = 'D' and isnull(csd.comment,'') <> ''  then isnull(csd.tx_description,'') + ' - ' + csd.comment
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				when csd.transaction_type = 'X' and @vAdjustmentComments = 1 and isnull(csd.comment,'') <> '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				else isnull(csd.tx_description,'') 
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				end
				) +' **'
			else (case when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') = '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') = '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'C' and @vCashReceiptComments = 1 and isnull(csd.comment,'') <> '' 
					and isnull(csd.cheque_number,'') <> '' then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number + ' - ' + csd.comment
				when csd.transaction_type = 'C' and @vCashReceiptComments = 0 and isnull(csd.cheque_number,'') <> '' 
					then isnull(csd.tx_description,'') + ' - #' + csd.cheque_number
				when csd.transaction_type = 'A' and @vAncillaryComments = 1 and @vShowResults = 'D' and isnull(csd.comment,'') <> ''  then isnull(csd.tx_description,'') + ' - ' + csd.comment
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				when csd.transaction_type = 'X' and @vAdjustmentComments = 1 and isnull(csd.comment,'') <> '' then isnull(csd.tx_description,'') + ' - ' + csd.comment
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				else isnull(csd.tx_description,'') 
					+ (case when @vDisplayUnitAndAmountFlag = 1 and isnull(csd.units,0) <> 0 and csd.unit_amount is not null and round((csd.units * csd.unit_amount),2) = round(csd.amount, 2) 
					then ' (' + ltrim(rtrim(str(csd.units))) + '@' + convert(varchar(10),convert(Money,csd.unit_amount)) + ')' else '' end)
				end	
				)
			end as transaction_description
		--, csd.comment as detail_comment
		--, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end as reversed_tx
		, Case when csd.transaction_type = 'R' and csd.unit_amount is null then Null 
			when csd.transaction_type = 'XR' and isnull(csd.units,0) = 0 then Null
			when csd.transaction_type = 'D' then Null  
			when csd.transaction_type not in('R','XR','CO','CR','D') and isnull(csd.unit_amount,0) = 0 then Null 
			else csd.units end as quantity
		, Case when csd.transaction_type = 'D' then Null 
			when isnull(csd.unit_amount,0) = 0 then Null 
			when round((csd.units * csd.unit_amount),2) <> round(csd.amount, 2) then Null else round(csd.unit_amount, 2) end as unit_amount
		, round(csd.amount, 2) as transaction_total_amount
		, Case when fac.show_payment_due_date = 1 then 'Y' else 'N' end as show_payment_due_date
		, convert(varchar(10),ccl.pre_consolidated_payment_due_date, 101) as pre_consolidated_payment_due_date
		, convert(varchar(10),coalesce(convert(datetime,convert(varchar(10),ccl.statement_through_date, 101)),ccl.bill_date), 101) as statement_through_date			
		--, ccl.client_list
		--, fac.gst_hst
		--, fac.gst_number
		, csd.detail_order
		, csd.other_payer
		, csd.payer_type
		, Case when (@vShowResults = 'C' or @vShowResults = 'CC') and csd.transaction_type = 'A' then Dense_rank() over 
			(ORDER BY ccl.contact_num, csd.detail_order, csd.tx_description) else 0 end ccorder
		, Case when @vTransactionOrder = 'P' then Dense_rank() over (ORDER BY ccl.contact_num, csd.detail_order, FORMAT(csd.effective_date,'YYYY'), FORMAT(csd.effective_date,'MM'),
			Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end desc, csd.effective_date, csd.tx_description)
			when @vTransactionOrder = 'D' then Dense_rank() over (ORDER BY ccl.contact_num, 
			 (case when csd.transaction_type = '00' then '1/1/1900'
				when csd.transaction_type in ('YY','YZ','ZZ') then dateadd(yyyy,100,ccl.bill_date)
				else csd.effective_date end), csd.detail_order, Case when isnull(csd.units,0) < 0 or (csd.transaction_type = 'C' and csd.reversed = 1 and csd.amount > 0)then 1 else 0 end desc, csd.tx_description) 
			else 0 end txsort
		--, Dense_rank() over (ORDER BY ccl.contact_num, ccl.non_consolidated_contact_num	, ccl.remit_to_name) statement_num
		, Case when csd.transaction_type = 'PC' then Dense_rank() over 
				(ORDER BY Left(csd.tx_description,charindex(':', csd.tx_description)), csd.effective_date, csd.transaction_type)
				else Dense_rank() over 
				(ORDER BY csd.effective_date, csd.transaction_type, csd.tx_description)
				end txtypeorder
		, @status_code status_code
		, @status_text status_text
	 
	from #contact_clients ccl
	left join #facility_list fac on ccl.fac_id = fac.fac_id
	inner join #transactions csd on ccl.invoice_id= csd.invoice_id and ccl.client_id = csd.client_id and ccl.contact_id = csd.contact_id
			and ccl.contact_num = csd.contact_num --and (ccl.contact_id = @vReceiverIds or @vReceiverIds = -1)
	inner join dbo.facility f with (nolock) on ccl.fac_id = f.fac_id
	inner join dbo.common_code c with (nolock) on f.country_id = c.item_id
	inner join #contact_return_to return_add on ccl.contact_num = return_add.contact_num
	left join #invoices inv on ccl.invoice_id = inv.invoice_id
	left join dbo.ar_eft_client_configuration_history eftconfig with (nolock) on ccl.client_id = eftconfig.client_id
		and eftconfig.effective_date  <= inv.created_date AND (eftconfig.ineffective_date  >= inv.created_date or eftconfig.ineffective_date is null)	
	LEFT OUTER JOIN @ContactNums cn
	ON ccl.contact_id = cn.contact_id and ccl.fac_id = cn.fac_id
	where csd.detail_order <> 999 --and csd.detail_amount is not null
		and (csd.amount is not null or csd.other_payer > 0)
		and (@vMinimumBalance is null or ccl.summary_current_balance >= @vMinimumBalance)
		and (@vSuppress0value = 0 or (@vSuppress0value = 1 and  (csd.amount <> 0.00 or csd.transaction_type in('00','YY','YZ','ZZ'))) or csd.payer_id = 0)
	order by statement_num, ccl.summary_charge_center, ccl.summary_charge_client_name, ccl.summary_charge_client_number, ccl.bill_date, 
		Case when ccl.contact_id <= -2.1 then ccl.invoice_id else 0 end, ccl.generated_date, txsort, ccorder, txtypeorder

set @vgsStepEndTime=GETDATE()
if @debug_me='Y' Print 'STEP ' +  convert(varchar(20), @vStep)  + ' complete: '+ltrim(rtrim(str(DATEDIFF(ms,@vgsStepStartTime,@vgsStepEndTime))))+ ' ms'
if @debug_me='Y' Print 'Successful execution of stored procedure ' + Object_name(@@ProcID) + convert(varchar(26),getdate(),109);

	if @sprocParamLogEnable > 0
	BEGIN
		BEGIN TRY
			set @endTime = GETDATE()

			update ar_sproc_params_log set end_time = @endTime, elapsed_time_in_ms = DATEDIFF(MILLISECOND,@startTime, @endTime)
			where sproc_log_id = @sprocExecId

		END TRY
		BEGIN CATCH
			--we do not want to break the execution of this stored procedure, do nothing here.
		END CATCH
	END

END TRY 

BEGIN CATCH 

	if @sprocParamLogEnable > 0
	BEGIN
		BEGIN TRY
			set @endTime = GETDATE()

			update ar_sproc_params_log set end_time = @endTime, elapsed_time_in_ms = DATEDIFF(MILLISECOND,@startTime, @endTime),
				error_code = Error_number(), error_message = Error_message()
				where sproc_log_id = @sprocExecId

		END TRY
		BEGIN CATCH
			--we do not want to break the execution of this stored procedure, do nothing here.
		END CATCH
	END

	if @status_code = 0 Set @Status_Code = 1 else set @status_code = 2  --- convert 3 to 2
	if @status_code = 1
	BEGIN
		select @Status_Text = Rtrim(Left('Stored Procedure Failed with error Code : ' +   Cast(@@error as Varchar(10)) +  ' Line Number : ' +  Cast(ERROR_LINE() as Varchar(5)) + ' ' +  ERROR_MESSAGE(),3000))

		if @debug_me='Y' Print 'Stored procedure failure in step:'+ convert(varchar(3),@vstep) + '	' + convert(varchar(26),getdate())
		if @debug_me='Y' Print 'Error code: '+convert(varchar(3),@vStep) + '; Error description:	' + @Status_Text
	END
	
	if @vExportMode = 0
	 
		Select 
			  NULL as fac_id
			, NULL as fac_country
			, NULL as contact_id
			, NULL as contact_num
			, NULL as consolidate_statement
			, NULL as online_id
			, NULL as client_id 
			, NULL as invoice_id
			, NULL as statement_invoice_number
			, NULL as remit_to_name
			, NULL as remit_to_address
			, NULL as remit_to_address2
			, NULL as remit_to_city
			, NULL as remit_to_county
			, NULL as remit_to_prov_state
			, NULL as remit_to_postal_zip_code
			, NULL as remit_to_phone
			, NULL as return_to_name
			, NULL as return_to_address
			, NULL as return_to_address2
			, NULL as return_to_city
			, NULL as return_to_county
			, NULL as return_to_prov_state
			, NULL as return_to_postal_zip_code
			, NULL as return_to_phone
			, NULL as contact_name
			, NULL as contact_address
			, NULL as contact_address2
			, NULL as contact_city
			, NULL as contact_county
			, NULL as contact_prov_state
			, NULL as contact_postal_zip_code
			, NULL as contact_country
			, NULL as account_number
			, NULL as bill_date
			, NULL as effective_date
			, NULL as generated_date
			, NULL as payment_due_date
			, NULL as pre_consolidated_payment_due_date
			, NULL as statement_through_date
			, NULL as amount_due
			, NULL as eft_message
			, NULL as client_list
			, NULL as client_message
			, NULL as group_message
			, NULL as global_message
			, NULL as statement_message
			, NULL as gst_hst
			, NULL as gst_number
			, NULL as previous_balance_due
			, NULL as payments
			, NULL as summary_charge_center	
			, NULL as summary_charge_client_name
			, NULL as summary_charge_client_number
			, NULL as summary_charge_client_location
			, NULL as summary_charge_client_admission
			, NULL as summary_charge_client_discharge
			, NULL as summary_current_balance
			, NULL as summary_previous_balance_due
			, NULL as summary_payments
			, NULL as summary_late_fees	
			, NULL as summary_client_balance_due
			, NULL as transaction_type
			, NULL as detail_effective_date 
			, NULL as detail_thru
			, NULL as detail_effective_thru_date
			, NULL as detail_description
			, NULL as detail_comment
			, NULL as reversed_tx
			, NULL as detail_units
			, NULL as detail_unit_amount
			, NULL as detail_amount
			, NULL as balance_due
			, NULL as other_payer
			, NULL as payer_type
			, NULL as aging_total
			, NULL as aging_current_label
			, NULL as aging_current_amount
			, NULL as aging_30_label
			, NULL as aging_30_amount
			, NULL as aging_60_label
			, NULL as aging_60_amount
			, NULL as aging_90_label
			, NULL as aging_90_amount
			, NULL as aging_120_label
			, NULL as aging_120_amount
			, NULL as aging_150_label
			, NULL as aging_150_amount
			, NULL as aging_180_label
			, NULL as aging_180_amount
			, NULL as aging_210_label
			, NULL as aging_210_amount
			, NULL as cheques_payable_to
			, NULL as ccorder
			, Null as statement_num
			, NULL as txtypeorder
			, NULL as status_code
			, NULL as status_text

	else

		select
			  NULL as contact_num
			, NULL as statement_num
			, NULL as campus_id
			, NULL as facility_group_number
			, NULL as facility_group_name
			, NULL as facility_group_address_1
			, NULL as facility_group_address_2
			, NULL as facility_group_address_3
			, NULL as facility_group_county
			, NULL as facility_group_city
			, NULL as facility_group_state
			, NULL as facility_group_country
			, NULL as facility_group_zip_code
			, NULL as facility_group_telephone
			, NULL as facility_group_county
			, NULL as guarantor_id 
			, NULL as guarantor_first_name
			, NULL as guarantor_last_name
			, NULL as guarantor_address_1
			, NULL as guarantor_address_2
			, NULL as guarantor_address_3
			, NULL as guarantor_county
			, NULL as guarantor_city
			, NULL as guarantor_state
			, NULL as guarantor_country
			, NULL as guarantor_zip_code
			, NULL as guarantor_email_address
			, NULL as guarantor_county
			, NULL as remit_to_name
			, NULL as remit_to_address_1
			, NULL as remit_to_address_2
			, NULL as remit_to_address_3
			, NULL as remit_to_county
			, NULL as remit_to_city
			, NULL as remit_to_state
			, NULL as remit_to_country
			, NULL as remit_to_zip_code
			, NULL as remit_to_phone_number
			, NULL as remit_to_county
			, NULL as grand_total
			, NULL as late_fees
			, NULL as balance_forward_amount
			, NULL as cash_payments_received
			, NULL as online_id
			, NULL as term_used_for_patient
			, NULL as term_used_for_admission
			, NULL as term_used_for_discharge
			, NULL as show_invoice_number
			, NULL as show_location
			, NULL as show_admit_date
			, NULL as show_discharge_date
			, NULL as show_patient_number
			, NULL as show_transaction_warning_message
			, NULL as prefix_fac_code_to_acct_no
			, NULL as checks_payable_to		
			, NULL as payment_instruction
			, NULL as transaction_warning_message
			, NULL as account_number_label
			, NULL as account_number_source	
			, NULL as facility_id
			, NULL as facility_code
			, NULL as facility_name
			, NULL as client_id
			, NULL as patient_admit_date
			, NULL as patient_discharge_date
			, NULL as patient_number
			, NULL as patient_first_name
			, NULL as patient_last_name
			, NULL as patient_name
			, NULL as patient_dob
			, NULL as patient_location	
			, NULL as eft_enabled
			, NULL as patient_invoice_message
			, NULL as patient_group_message
			, NULL as eft_message
			, NULL as invoice_number
			, NULL as invoice_date
			, NULL as invoice_due_date
			, NULL as current_invoice_charges
			, NULL as total_amount_due
			, NULL as date_of_service
			, NULL as transaction_type
			, NULL as transaction_description
			, NULL as quantity
			, NULL as unit_amount
			, NULL as transaction_total_amount
			, NULL as show_payment_due_date
			, NULL as pre_consolidated_payment_due_date
			, NULL as statement_through_date			
			, NULL as detail_order
			, NULL as other_payer
			, NULL as payer_type
			, NULL as ccorder
			, NULL as txsort
			, NULL as txtypeorder
			, NULL as status_code
			, NULL as status_text

		
END CATCH 

RETURN 

END
GO
GRANT EXECUTE ON  dbo.sproc_prp_rl_statements   to PUBLIC
GO

GO

print 'C_Branch/04_StoredProcedures/sproc_prp_rl_statements.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_prp_rl_statements.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =========================================================================================================================
--
--  Script Type: user defined store procedure
--  Target DB Type:  Client
--  Target Database:  Both
--
--  Re-Runable:  Yes
--
--  Description :  Return a list of Physician Orders and other dependent data such as schedules.
--
--	Params:			
--			@facUUIdCSV
--			@clientId
--			@facilityDateTime
--			@orderCategoryIdsCSV
--			@orderStatusCSV
--			@clientStatus
--			@changesetTypesCSV
--			@changesetStatusesCSV
--			@changesetSourceId
--			@physOrderId
--			@pageSize
--			@pageNumber
--			@sortByColumn
--			@sortByOrder
--			@includeOrders
--			@includeSchedules
--			@includeChangesets
--			@debug          - Debug param, 'Y' or 'N'
--			@status_code    - SP execution flag, 0 for success.
--			@status_text    - SP error text if error occurs.
--
-- Change History:
--   Date			Jira				Team		Author				Comment
-- -----------------------------------------------------------------------------------------------------------------------------------
--   09/28/2021     SPRT-740			Coda	    Elias Ghanem  		Created.
-- =========================================================================================================================

IF EXISTS (SELECT *
               FROM
                   dbo.sysobjects
               WHERE
                   id = object_id(N'[dbo].[sproc_sprt_order_list]')
                   AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[sproc_sprt_order_list]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sproc_sprt_order_list]			@facUUIdCSV             VARCHAR(MAX),-- Required: CSV list of fac uuids to filter on
														@clientId				INT,-- Optional: client Id to filter on
                                                        @facilityDateTime       DATETIME,-- Required: facility date time
                                                        @orderCategoryIdsCSV	VARCHAR(100),-- Required CSV list of categegory ids to filter n
                                                        @orderStatusCSV         VARCHAR(100),-- Required: CSV list of order status ids to filter on
                                                        @clientStatus 			INT,-- Required: flag to filter on client status: -1: ALL, 0: Discharged, 1:Current(not discharged)
														@changesetTypesCSV		VARCHAR(100),-- Optional: changeset types to filter on and return
														@changesetStatusesCSV	VARCHAR(100),-- Optional: changeset statuses to filter on and return
														@changesetSourceId		INT,-- Optional: changeset sourece to filter on
                                                        @physOrderId 			INT,-- Optional: physOrderId to filter on
                                                        @pageSize 				INT,-- Required: number of phys orders per page
                                                        @pageNumber 			INT,-- Required: page number	
                                                        @sortByColumn 			VARCHAR(100),-- Required: column to sort on.
                                                        @sortByOrder  			VARCHAR(10),-- Required sort order
														@includeOrders 			INT,-- Required: flag to indicate whether orders data is returned or not: 1: orders summary, 2:orders details, 0:orders data not to be returned
														@includeSchedules 		INT,-- Required: flag to indicate whether schedules data is returned or not: 1: schedules summary, 2:schedules details, 0:schedules data not to be returned
														@includeChangesets 		INT,-- Required: flag to indicate whether changeset data is returned or not: 1: changeset summary, 2:changeset details, 0:changeset data not to be returned
														@debug              	CHAR(1)  = 'N',-- Required: flag to indicate whether to print debug data or not
														@status_code        	INT  = 0 OUT,
                                                        @status_text        	VARCHAR(3000) OUT



AS
BEGIN TRY
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

DECLARE @step                       			int,
		@step_label								varchar(100),
        @error_code                 			int,
		@num_records							int

SET @step = 0
SET @step_label = 'Starting...'
SET @error_code = 0

/*
DECLARE @facIds TABLE
(
	fac_id int  not null
)
*/

DECLARE @orderCategoryIds TABLE
(
	order_category_id INT  NOT NULL
)

DECLARE @orderStatus TABLE
(
	status INT NOT NULL
)

DECLARE @changesetTypes TABLE
(
	changeset_type_id INT NOT NULL
)

DECLARE @changesetStatuses TABLE
(
	status_id INT NOT NULL
)

DECLARE @facInfo TABLE
(
	fac_id INT,
	fac_uuid UNIQUEIDENTIFIER,
	facility_time datetime,
	IsDischargeEnabled  BIT
)

CREATE TABLE #orders_data
  ( 
	phys_order_id             	INT, 
	fac_id                    	INT, 
	client_id                 	INT, 
	order_verified            	VARCHAR(1),
	order_status				INT,
	active_flag               	CHAR(1), 
	draft                     	BIT, 
	hold_date                 	DATETIME, 
	hold_date_end             	DATETIME, 
	end_date                  	DATETIME, 
	discontinued_date         	DATETIME, 
	order_category_id         	INT, 
	controlled_substance_code 	VARCHAR(50),
	
	physician_id INT,
	alter_med_src INT,
	pharmacy_id INT,
	route_of_admin INT,
	created_by VARCHAR(60),
	created_date DATETIME,
	revision_by VARCHAR(60),
	revision_date DATETIME,
	start_date DATETIME,
	strength VARCHAR(30),
	form VARCHAR(50),
	description VARCHAR(500),
	directions VARCHAR(1000),
	nurse_pharm_notes VARCHAR(512),
	related_generic VARCHAR(250),
	communication_method INT,
	prescription VARCHAR(50),
	disp_package_identifier VARCHAR(50),
	order_date DATETIME,
	completed_date DATETIME,
	origin_id INT,
	drug_strength VARCHAR(100),
	drug_strength_uom VARCHAR(10),
	drug_name VARCHAR(500),
	order_class_id INT,
	resident_last_name varchar(50),
	resident_first_name varchar(50)	 
  ) ;

CREATE TABLE #tempresult 
  ( 
	phys_order_id             INT, 
	fac_id                    INT, 
	client_id                 INT, 
	order_verified            VARCHAR(1), 
	active_flag               CHAR(1), 
	draft                     BIT, 
	hold_date                 DATETIME, 
	hold_date_end             DATETIME, 
	end_date                  DATETIME, 
	discontinued_date         DATETIME, 
	order_category_id         INT, 
	controlled_substance_code VARCHAR(50),
	facility_time datetime,
	IsDischargeEnabled  BIT,
	
	physician_id INT,
	alter_med_src INT,
	pharmacy_id INT,
	route_of_admin INT,
	created_by VARCHAR(60),
	created_date DATETIME,
	revision_by VARCHAR(60),
	revision_date DATETIME,
	start_date DATETIME,
	strength VARCHAR(30),
	form VARCHAR(50),
	description VARCHAR(500),
	directions VARCHAR(1000),
	nurse_pharm_notes VARCHAR(512),
	related_generic VARCHAR(250),
	communication_method INT,
	prescription VARCHAR(50),
	disp_package_identifier VARCHAR(50),
	order_date DATETIME,
	completed_date DATETIME,
	origin_id INT,
	drug_strength VARCHAR(100),
	drug_strength_uom VARCHAR(10),
	drug_name VARCHAR(500),
	order_class_id INT,
	resident_last_name varchar(50),
	resident_first_name varchar(50)
  ) ;
CREATE CLUSTERED INDEX _tempresult_order_id ON #tempresult( phys_order_id );  

CREATE TABLE #vpos
	(
	phys_order_id int NOT NULL,
	fac_id int NOT NULL,
	order_status int NOT NULL,
	order_relationship int NULL,
	status_reason int NULL
	)

SET @step = @step + 1	
SET @step_label = 'Parse CSV parameters into table vairables'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
	
--INSERT INTO @facIds (fac_id)
--SELECT f.fac_id FROM facility f INNER JOIN dbo.Split(@facUUIdCSV, ',') uuids ON uuids.items = f.fac_uuid
INSERT INTO @facInfo
	(fac_id,
	fac_uuid,
	facility_time,
	IsDischargeEnabled
	)
	SELECT f.fac_id,
	f.fac_uuid,
	dbo.fn_facility_getCurrentTime(f.fac_id),
	CASE WHEN cp.value = 'Y' THEN 1 ELSE 0 END
	FROM facility f
	INNER JOIN dbo.Split(@facUUIdCSV, ',') uuids ON uuids.items = f.fac_uuid
	LEFT JOIN configuration_parameter cp ON cp.fac_id = f.fac_id AND cp.name='discharge_order_enable'


INSERT INTO @orderCategoryIds (order_category_id)
SELECT * FROM dbo.Split(@orderCategoryIdsCSV, ',')	
DELETE FROM @orderCategoryIds where order_category_id=1 or order_category_id=3030

INSERT INTO @orderStatus (status)
SELECT * FROM dbo.Split(@orderStatusCSV, ',');

INSERT INTO @changesetTypes (changeset_type_id)
SELECT * FROM dbo.Split(@changesetTypesCSV, ',');

INSERT INTO @changesetStatuses (status_id)
SELECT * FROM dbo.Split(@changesetStatusesCSV, ',');

	
SET @step = @step + 1	
SET @step_label = 'Check for required parameters...'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF NOT EXISTS(SELECT 1 FROM @facInfo)
BEGIN
	raiserror ('facUUIdCSV is required. At least one facUUId must be provided.', 16, 1)
END
IF NOT EXISTS(SELECT 1 FROM @orderCategoryIds)
BEGIN
	raiserror ('orderCategoryIdsCSV is required. At least one orderCategoryId must be provided.', 16, 1)
END
IF NOT EXISTS(SELECT 1 FROM @orderStatus)
BEGIN
	raiserror ('orderStatusCSV is required. At least one orderStatus must be provided.', 16, 1)
END	
IF @facilityDateTime IS NULL
BEGIN
	raiserror ('facilityDateTime is required.', 16, 1)
END
IF @clientStatus IS NULL OR @clientStatus NOT IN (-1, 0, 1)
BEGIN
	raiserror ('clientStatus is required. Allowed values are: -1, 0, 1.', 16, 1)
END	
IF @pageSize IS NULL OR @pageSize <= 0
BEGIN
	raiserror ('pageSize is required and should be a positive number.', 16, 1)
END	
IF @pageNumber IS NULL or @pageNumber <= 0
BEGIN
	raiserror ('pageNumber is required and should be a positive number.', 16, 1)
END	
IF @sortByColumn IS NULL
BEGIN
	raiserror ('sortByColumn is required.', 16, 1)
END	
IF @sortByOrder IS NULL
BEGIN
	raiserror ('sortByOrder is required.', 16, 1)
END
IF (( EXISTS(SELECT 1 FROM @changesetTypes) OR EXISTS(SELECT 1 FROM @changesetStatuses)) AND
	(NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses)))
BEGIN
	raiserror ('changesetTypesCSV and changesetStatusesCSV should be both set or both empty', 16, 1)
END
IF @changesetSourceId IS NOT NULL AND (NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses))
BEGIN
	raiserror ('If changesetSourceId is set, both changesetTypesCSV and changesetStatusesCSV should be set', 16, 1)
END
IF @includeOrders IS NULL OR @includeOrders NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeOrders is required. Allowed values are: 0, 1, 2', 16, 1)
END	
IF @includeSchedules IS NULL OR @includeSchedules NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeSchedules is required. Allowed values are: 0, 1, 2', 16, 1)
END
IF @includeChangesets IS NULL OR @includeSchedules NOT IN (0, 1, 2)
BEGIN
	raiserror ('includeChangesets is required. Allowed values are: 0, 1, 2', 16, 1)
END
IF @includeChangesets IN (1, 2) AND (NOT EXISTS(SELECT 1 FROM @changesetTypes) OR NOT EXISTS(SELECT 1 FROM @changesetStatuses))
BEGIN
	raiserror ('If includeChangesets value is 1 or 2, both changesetTypesCSV and changesetStatusesCSV should be set', 16, 1)
END
		
/*
SET @step = @step + 1
SET @step_label = 'Prepare facility info'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
INSERT INTO @facInfo	
	(fac_id,
	facility_time,
	IsDischargeEnabled
	)
	SELECT f.fac_id, 
	dbo.fn_facility_getCurrentTime(f.fac_id),
	CASE WHEN cp.value = 'Y' THEN 1 ELSE 0 END
	FROM @facIds f	
	LEFT JOIN configuration_parameter cp ON cp.fac_id = f.fac_id AND cp.name='discharge_order_enable'
*/	
	
SET @step = @step + 1
SET @step_label = 'Insert into #tempresult'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

INSERT INTO #tempresult
	( 
	phys_order_id, 
	fac_id, 
	client_id, 
	order_verified, 
	active_flag, 
	draft, 
	hold_date, 
	hold_date_end, 
	end_date, 
	discontinued_date, 
	order_category_id, 
	controlled_substance_code,
	facility_time,
	IsDischargeEnabled,
	
	physician_id,
	alter_med_src,
	pharmacy_id,
	route_of_admin,
	created_by,
	created_date,
	revision_by,
	revision_date,
	start_date,
	strength,
	form,
	description,
	directions,
	nurse_pharm_notes,
	related_generic,
	communication_method,
	prescription,
	disp_package_identifier,
	order_date,
	completed_date,
	origin_id,
	drug_strength,
	drug_strength_uom,
	drug_name,
	order_class_id,
	resident_last_name,
	resident_first_name
	)
	SELECT
		o.phys_order_id, 
		o.fac_id, 
		o.client_id, 
		o.order_verified, 
		o.active_flag, 
		o.draft, 
		o.hold_date, 
		o.hold_date_end, 
		o.end_date, 
		o.discontinued_date, 
		o.order_category_id, 
		o.controlled_substance_code,
		fi.facility_time,
		fi.IsDischargeEnabled,
		o.physician_id,
		o.alter_med_src,
		o.pharmacy_id,
		o.route_of_admin,
		o.created_by,
		o.created_date,
		o.revision_by,
		o.revision_date,
		o.start_date,
		o.strength,
		o.form,
		o.description,
		o.directions,
		o.nurse_pharm_notes,
		o.related_generic,
		o.communication_method,
		o.prescription,
		o.disp_package_identifier,
		o.order_date,
		o.completed_date,
		o.origin_id,
		o.drug_strength,
		o.drug_strength_uom,
		o.drug_name,
		o.order_class_id,
		m.last_name,
		m.first_name
	FROM pho_phys_order o
	--INNER JOIN @facIds f ON f.fac_id = o.fac_id
	INNER JOIN @facInfo fi ON fi.fac_id = o.fac_id
	INNER JOIN @orderCategoryIds cat ON cat.order_category_id = o.order_category_id
	INNER JOIN clients c ON c.client_id = o.client_id
	INNER JOIN mpi m ON m.mpi_id = c.mpi_id
	WHERE (@physOrderId IS NULL OR o.phys_order_id = @physOrderId) AND ISNULL(o.active_flag, 'Y') = 'Y'
	AND (@clientId IS NULL OR o.client_id = @clientId)
	AND (@clientStatus = -1 OR (@clientStatus = 1 AND (c.discharge_date IS NULL OR c.discharge_date > @facilityDateTime)) OR (@clientStatus = 0 AND c.discharge_date <= @facilityDateTime))

SET @step = @step + 1	
SET @step_label = 'Applying changeset filtering if needed'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

IF EXISTS(SELECT 1 FROM @changesetTypes) OR EXISTS (SELECT 1 FROM @changesetStatuses) OR @changesetSourceId IS NOT NULL
	BEGIN
	MERGE #tempresult AS TARGET
	USING (select o.phys_order_id
	FROM #tempresult o	
	INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
	INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
	INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
	INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
	WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId
	) AS SOURCE
	ON (TARGET.phys_order_id = SOURCE.phys_order_id) 
	WHEN NOT MATCHED BY SOURCE 
	THEN DELETE; 
END

SET @step = @step + 1	
SET @step_label = 'Calculating orders statuses'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
insert into #vpos
exec sproc_sprt_pho_getOrderStatus  @debug,@status_code out,@status_text out


SET @step = @step + 1	
SET @step_label = 'Insert into #orders_data'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
INSERT INTO #orders_data
	( 
	phys_order_id, 
	fac_id, 
	client_id, 
	order_verified,
	order_status,
	active_flag, 
	draft, 
	hold_date, 
	hold_date_end, 
	end_date, 
	discontinued_date, 
	order_category_id, 
	controlled_substance_code,
	physician_id,
	alter_med_src,
	pharmacy_id,
	route_of_admin,
	created_by,
	created_date,
	revision_by,
	revision_date,
	start_date,
	strength,
	form,
	description,
	directions,
	nurse_pharm_notes,
	related_generic,
	communication_method,
	prescription,
	disp_package_identifier,
	order_date,
	completed_date,
	origin_id,
	drug_strength,
	drug_strength_uom,
	drug_name,
	order_class_id,
	resident_last_name,
	resident_first_name
	)
	SELECT
		temp.phys_order_id, 
		temp.fac_id, 
		temp.client_id, 
		temp.order_verified,
		vpos.order_status,
		temp.active_flag, 
		temp.draft, 
		temp.hold_date, 
		temp.hold_date_end, 
		temp.end_date, 
		temp.discontinued_date, 
		temp.order_category_id, 
		temp.controlled_substance_code,
		temp.physician_id,
		temp.alter_med_src,
		temp.pharmacy_id,
		temp.route_of_admin,
		temp.created_by,
		temp.created_date,
		temp.revision_by,
		temp.revision_date,
		temp.start_date,
		temp.strength,
		temp.form,
		temp.description,
		temp.directions,
		temp.nurse_pharm_notes,
		temp.related_generic,
		temp.communication_method,
		temp.prescription,
		temp.disp_package_identifier,
		temp.order_date,
		temp.completed_date,
		temp.origin_id,
		temp.drug_strength,
		temp.drug_strength_uom,
		temp.drug_name,
		temp.order_class_id,
		temp.resident_last_name,
		temp.resident_first_name
	FROM @orderStatus stat
	INNER JOIN #vpos vpos ON vpos.order_status = stat.status
	INNER JOIN #tempresult temp ON temp.phys_order_id = vpos.phys_order_id	


SET @step = @step + 1
SET @step_label = 'Apply pagination'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
select @num_records = count(1) from #orders_data
IF @sortByOrder='desc'
BEGIN
	;WITH TMP AS
	(
		SELECT ROW_NUMBER() OVER(ORDER BY
									 CASE
										WHEN @sortByColumn = 'fac_id' THEN CONVERT(VARCHAR(50), o.fac_id)
										WHEN @sortByColumn = 'description' THEN o.description
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_first_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									DESC,
									CASE
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_last_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									DESC,
									o.phys_order_id DESC) AS rn FROM #orders_data o
	)
	DELETE FROM TMP WHERE @pageSize > 0 AND (rn <= (@pageSize * (@pageNumber-1)) OR rn > (@pageSize * @pageNumber))
END
ELSE
BEGIN
	;WITH TMP AS
	(
		SELECT ROW_NUMBER() OVER(ORDER BY
										CASE
										WHEN @sortByColumn = 'fac_id' THEN CONVERT(varchar(50), o.fac_id)
										WHEN @sortByColumn = 'description' THEN o.description										
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_first_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									ASC,
									CASE
										WHEN @sortByColumn = 'client_id' THEN CONVERT(VARCHAR(50), o.resident_last_name)
										ELSE CONVERT(VARCHAR(50), o.phys_order_id)
									END
									ASC,
									o.phys_order_id DESC) AS rn FROM #orders_data o
	)
	DELETE FROM TMP WHERE @pageSize > 0 AND (rn <= (@pageSize * (@pageNumber-1)) OR rn > (@pageSize * @pageNumber))

END


    /****************************************
    return final result
    ****************************************/
SET @step = @step + 1	
SET @step_label = 'Return final results...'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

SET @step = @step + 1	
SET @step_label = 'Return orders'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeOrders = 1
BEGIN
	SELECT
	o.phys_order_id,
	o.fac_id,
	f.fac_uuid,
	o.client_id,
	o.order_status,
	o.description,
	lib.pho_ext_lib_id,
	lib.pho_ext_lib_med_id,
	lib.pho_ext_lib_med_ddid,
	o.resident_first_name,
	o.resident_last_name,
	o.created_date,
	o.revision_date
	FROM #orders_data o
	INNER JOIN @facInfo f ON f.fac_id = o.fac_id
	LEFT JOIN pho_order_ext_lib_med_ref lib ON lib.phys_order_id = o.phys_order_id
	ORDER BY o.fac_id, o.phys_order_id ASC
END
ELSE
BEGIN
	IF @includeOrders = 2
	BEGIN
		SELECT
		o.phys_order_id,
		o.fac_id,
		f.fac_uuid,
		o.client_id,
		o.physician_id,
		s.identifier_npi,
		c.first_name AS physician_first_name,
		c.last_name AS physician_last_name,
		c.title AS physician_title,
		o.order_category_id,
		o.communication_method,
		o.order_date,
		o.start_date,
		o.end_date,
		o.directions,
		o.nurse_pharm_notes,
		o.route_of_admin,
		roa.pcc_route_of_admin AS route_of_admin_desc,
		o.order_status,
		o.description,
		o.form,
		o.drug_strength,
		o.drug_strength_uom,
		o.prescription,
		o.disp_package_identifier,
		qi.no_of_refills,
		lib.pho_ext_lib_id,
		lib.pho_ext_lib_med_id,
		lib.pho_ext_lib_med_ddid,
		lib.pho_ext_lib_generic_id,
		lib.pho_ext_lib_generic_desc,
		lib.ext_lib_rxnorm_id,
		o.resident_first_name,
		o.resident_last_name,
		o.controlled_substance_code,
		o.alter_med_src,
		o.pharmacy_id,
		ext_facs.name AS pharmacy_name,
		o.created_by,
		o.created_date,
		o.revision_by,
		o.revision_date
		FROM #orders_data o
		INNER JOIN @facInfo f ON f.fac_id = o.fac_id
		LEFT JOIN wesreference.dbo.pho_std_route_of_admin roa ON roa.route_of_admin_id = o.route_of_admin
		LEFT JOIN pho_phys_order_quantity_info qi ON qi.phys_order_id = o.phys_order_id
		LEFT JOIN contact c ON c.contact_id = o.physician_id
		LEFT JOIN staff s ON s.contact_id = c.contact_id AND (s.fac_id = o.fac_id OR s.fac_id = -1)
		LEFT JOIN pho_order_ext_lib_med_ref lib ON lib.phys_order_id = o.phys_order_id
		LEFT JOIN emc_ext_facilities ext_facs ON ext_facs.ext_fac_id = o.pharmacy_id
		ORDER BY o.fac_id, o.phys_order_id ASC
	END
	ELSE
		SELECT 'ORDER DATA NOT REQUESTED'
END

SET @step = @step + 1	
SET @step_label = 'Return schedules'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeSchedules = 1
BEGIN
	SELECT
	o.phys_order_id,
	s.order_schedule_id,
	s.schedule_directions
	FROM #orders_data o
	INNER JOIN PHO_ORDER_SCHEDULE s ON s.phys_order_id = o.phys_order_id
	WHERE s.deleted = 'N'
	ORDER BY o.fac_id, o.phys_order_id, s.order_schedule_id
END
ELSE
BEGIN
	IF @includeSchedules = 2	
	BEGIN	
		SELECT
		os.phys_order_id,
		os.order_schedule_id,
		os.schedule_template,
		os.dose_value,
		os.dose_uom_id,
		os.alternate_dose_value,
		os.dose_low,
		os.quantity_per_dose,
		os.quantity_uom_id,
		os.need_location_of_admin,
		os.sliding_scale_id,
		os.apply_to,
		os.apply_remove_flag,
		os.std_freq_id,
		os.schedule_type,
		sched_type.description AS schedule_type_desc,
		os.repeat_week,
		os.mon,
		os.tues,
		os.wed,
		os.thurs,
		os.fri,
		os.sat,
		os.sun,
		os.xxdays,
		os.xxmonths,
		os.xxhours,
		os.date_of_month,
		os.date_start,
		os.date_stop,
		os.days_on,
		os.days_off,
		os.pho_std_time_id,
		os.related_diagnosis,
		os.indications_for_use,
		os.additional_directions,
		os.administered_by_id,
		admined_by.description AS administered_by_desc,
		os.schedule_start_date,
		os.schedule_end_date,
		os.schedule_end_date_type_id,
		sched_end_date_type.name AS schedule_end_date_type_name,
		os.schedule_duration,
		os.schedule_duration_type_id,
		sched_duration_type.name AS schedule_duration_type_name,
		os.schedule_dose_duration,
		os.prn_admin,
		os.prn_admin_value,
		os.prn_admin_units,
		os.schedule_directions,
		os.created_by,
		os.created_date,
		os.revision_by,
		os.revision_date,		
		--os.std_freq_time_label,
		--os.until_finished,
		--os.order_type_id,
		--os.extended_end_date,
		--os.extended_count,
		--os.prescriber_schedule_start_date,		
		ps.order_schedule_id,
		ps.schedule_id,
		ps.start_time,
		ps.end_time,
		ps.std_shift_id,
		ps.remove_time,
		ps.remove_duration,
		ps.nurse_action_notes
		FROM #orders_data o
		INNER JOIN PHO_ORDER_SCHEDULE os ON os.phys_order_id = o.phys_order_id
		INNER JOIN PHO_SCHEDULE ps ON ps.order_schedule_id = os.order_schedule_id
		INNER JOIN pho_schedule_type sched_type ON sched_type.schedule_type_id = os.schedule_type
		INNER JOIN pho_std_administered_by admined_by ON admined_by.administered_by_id = os.administered_by_id
		INNER JOIN pho_schedule_end_date_type sched_end_date_type ON sched_end_date_type.schedule_end_date_type_id = os.schedule_end_date_type_id
		LEFT JOIN pho_schedule_duration_type sched_duration_type ON sched_duration_type.schedule_duration_type_id = os.schedule_duration_type_id
		WHERE os.deleted = 'N' and ps.deleted = 'N'
		ORDER BY o.fac_id, o.phys_order_id, os.order_schedule_id		
	END
	ELSE
		SELECT 'SCHEDULES DATA NOT REQUESTED'
END

SET @step = @step + 1	
SET @step_label = 'Return changeset'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text
IF @includeChangesets = 1
BEGIN
	SELECT
	o.phys_order_id,
	cs.changeset_id,
	cs.changeset_type_id,
	cs.changeset_source_id,
	csstat.status_id
	FROM #orders_data o
	INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
	INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
	INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
	INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
	WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId	
END
ELSE
BEGIN
	IF @includeChangesets = 2
	BEGIN
		SELECT
		o.phys_order_id,
		cs.changeset_id,
		cs.changeset_type_id,
		cs.changeset_source_id,
		cs.changeset_data,
		cs.resulting_phys_order_id,
		cs.aggregate_changeset_id,
		cs.created_by,
		cs.created_date,		
		csstat.status_id,
		csstat.status_source,
		csstat.status_reason,
		csstat.notes,
		csstat.status_by,
		csstat.status_date
		FROM #orders_data o
		INNER JOIN pho_phys_order_changeset cs ON cs.phys_order_id = o.phys_order_id
		INNER JOIN @changesetTypes cst ON cst.changeset_type_id = cs.changeset_type_id
		INNER JOIN changeset_status csstat ON csstat.changeset_status_id = cs.current_status_id
		INNER JOIN @changesetStatuses csstats ON csstats.status_id = csstat.status_id
		WHERE @changesetSourceId IS NULL OR cs.changeset_source_id = @changesetSourceId	
	END
	ELSE
		SELECT 'CHANGESET DATA NOT REQUESTED'
END
SET @step = @step + 1	
SET @step_label = 'Return total record number'
SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' ' + @step_label
IF @debug='Y' PRINT @status_text

select @num_records as total_record_number

    SET @status_text = convert(VARCHAR(26), getdate(), 13) + ' Done'
    IF @debug='Y'
        PRINT @status_text
    SET @status_code = 0
    GOTO PgmSuccess
END TRY
--error trapping
BEGIN CATCH
    --SELECT @error_code = @@error, @status_text = 'Error at step:'+convert(varchar(3),@step)+', '+ERROR_MESSAGE()
	SELECT @error_code = @@error, @status_text = 'Error at step:' + convert(varchar(3),@step) + ' <' + @step_label + '>, '+ERROR_MESSAGE()

    SET @status_code = 1

    GOTO PgmAbend

END CATCH

--program success return
PgmSuccess:

IF @status_code = 0
BEGIN
    IF @debug='Y' PRINT 'Successfull execution of stored procedure'
    RETURN @status_code
END

--program failure return
PgmAbend:

--IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + '   ' + convert(varchar(26),getdate())
IF @debug='Y' PRINT 'Stored procedure failure in step:'+ convert(varchar(3),@step) + ' <' + @step_label + '>   ' + convert(varchar(26),getdate())
    IF @debug='Y' PRINT 'Error code: '+convert(varchar(3),@error_code) + '; Error description:    ' +@status_text
    RETURN @status_code

GO
GRANT EXECUTE ON sproc_sprt_order_list TO public
GO


GO

print 'C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/sproc_sprt_order_list.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*****************************************************************************************************
**
**	Purpose:	The purpose of this procedure is to create a new MDS 3.0 assessment and return the newly
**				created assess_id from the assessment table.
**				This version changes the parameter list primarily due to revision v2.00
**
**  Target Env: US Only
**
**	Parameters:
**			@facId				- Facility id
**			@clientId			- Client id
**			@createdDate		- created date
**			@createdBy			- created by
**			@assessDate			- This is the assess date the user enters.
**			@provState			- Province/State
**			@ruralUrban			- 'U' if facility is urban, 'R' if facility is rural
**			@positDesc			- Position Description
**			@longUsername		- Long username
**	        @rugsPayer		    - post-October 2019 RUGS Insurance Payer workflow
**			@A0200				- Question A0200
**			@A0300A				- Question A0300A
**			@A0300B				- Question A0300B
**			@A0310A				- Question A0310A
**			@A0310B				- Question A0310B
**			@A0310C				- Question A0310C
**			@A0310D				- Question A0310D
**			@A0310E				- Question A0310E
**			@A0310F				- Question A0310F
**			@A0310G				- Question A0310G
**			@A0310G1			- Question A0310G1
**			@A0310H				- Question A0310H
**			@A2200				- Question A2200
**			@mdcrStartDate		- Medicare start date
**			@rapsType			- raps type
**			@autoPopulateFlag	- Is a flag to determine if to do the auto populate
**			@operationFlag		- Is a flag to determine if we're copying or creating a new assessment. Can be 'Y' or 'N'
**			@copyFromAssessId	- Is the assess_id of the assessment to copy from.
**			@hc_no_id_param		- Resident Number = -2 this set by Admin general conf.
**			@debug				- Flag to print debug statements.
**			@status_code		- Return value if the procedure ran correctly, 1 if error, 0 if success.
**			@status_text		- Error message if status_code is 1.
**
******************************************************************************************************/
IF EXISTS (	SELECT *
			FROM sys.objects
			WHERE object_id = OBJECT_ID(N'[dbo].[sproc_mds_dml_createMDS3Assessment_v2]')
			  AND OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[sproc_mds_dml_createMDS3Assessment_v2]
GO

CREATE PROCEDURE [dbo].[sproc_mds_dml_createMDS3Assessment_v2]
(
	@facId				int
	,@clientId			int
	,@createdDate		datetime
	,@createdBy			varchar(60)
	,@assessDate		datetime
	,@provState			char(2)
	,@ruralUrban		varchar(5)
	,@positDesc			varchar(254)
	,@longUsername		varchar(60)
	,@rugsPayer		    char(1)
	,@A0200				char(1)
	,@A0300A			char(1)
	,@A0300B			char(1)
	,@A0310A			varchar(2)
	,@A0310B			varchar(2)
	,@A0310C			char(1)
	,@A0310D			char(1)
	,@A0310E			char(1)
	,@A0310F			varchar(2)
	,@A0310G			char(1)
	,@A0310G1			char(1)
	,@A0310H			char(1)
	,@A2200				varchar(8)
	,@mdcrStartDate		datetime
	,@rapsType			char(1)
	,@autoPopulateFlag	char(1)
	,@operationFlag		char(1)
	,@copyFromAssessId	int
	,@hc_no_id_param	int
	,@debug				char(1) = 'N'
	,@status_code		int				OUTPUT
	,@status_text		varchar(3000)	OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@step				int = 0
		,@error_code		int = 0
		,@stdAssessId		int = 11
		,@assessId			int
		,@acknowledged		char(1)
		,@nonAutoAcknowledged char(1)
		,@actionQK			varchar(10)
		,@actionVal			char(1)
		,@cmiSetFed			varchar(5)
		,@cmiSetState		varchar(5)
		,@calcTypeState		varchar(5)
		,@altCmiSetState	varchar(5)
		,@altCalcTypeState	varchar(5)
		,@ard				varchar(8)
		,@isc				varchar(10) = '--'	-- default to invalid
		,@populateKey		varchar(16) = NULL
		,@Jan1900			datetime    = '1900-01-01'
		,@Oct2010			datetime    = '2010-10-01'
		,@Apr2012			datetime    = '2012-04-01'
		,@Oct2016			datetime    = '2016-10-01'
		,@Oct2019			datetime    = '2019-10-01'
		,@Oct2020			datetime    = '2020-10-01'
		,@NppA0310C 		char(1) = @A0310C
-- Return params for Gen Response use		

		,@rfaA0200			char(1) = ''
		,@rfaA0300A			char(1) = ''
		,@rfaA0300B			char(1) = ''
		,@rfaA0310A			varchar(2) = ''
		,@rfaA0310B			varchar(2) = ''
		,@rfaA0310C			char(1) = ''
		,@rfaA0310D			char(1) = ''
		,@rfaA0310E			char(1) = ''
		,@rfaA0310F			varchar(2) = ''
		,@rfaA0310G			char(1) = ''
		,@rfaA0310G1		char(1) = ''
		,@rfaA0310H			char(1) = ''
	;

	SELECT
		@status_code  = 0
		,@status_text = ''
	;
	IF (@rugsPayer is NULL)
	BEGIN
	    SET @rugsPayer = '0';  -- 0 = No 
	END

	BEGIN TRY
		SET @ard = CONVERT(varchar(8), @assessDate, 112);

		IF (@debug= 'Y')
			PRINT 'BEGIN STEP determine valid assess type ' + CONVERT(varchar(26), GETDATE(), 109);

		-- get assess type code from input values
		IF (@operationFlag = 'I')
		BEGIN
			SET @isc = 'XX';
		END
		ELSE IF (@assessDate < @Oct2016) 
		BEGIN
		-- A0300A, A0300B, & A0310H are not applicable
			EXEC [dbo].[sproc_mds_list_determineMDS3AssessType_v2]
				@assessDate, @rugsPayer, @A0200, '0', NULL, @A0310A, @A0310B, @A0310C, @A0310D, @A0310F, NULL,
				@isc OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;
		END
		ELSE
		BEGIN
			-- set default values
		    IF (@assessDate < @Oct2019) 
			BEGIN
			  SET @A0300A = '0';
			  SET @A0300B = null;
			END
			ELSE
			BEGIN
			  If (@rugsPayer = '0')
			  Begin
			    SET @A0310C = null;
			  End
			  SET @A0310D = null;
			END
		
			EXEC [dbo].[sproc_mds_list_determineMDS3AssessType_v2]
				@assessDate, @rugsPayer, @A0200, @A0300A, @A0300B, @A0310A, @A0310B, @A0310C, @A0310D, @A0310F, @A0310H,
				@isc OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;
		END

		
		IF (@status_code <> 0)
		BEGIN
			IF (@debug = 'Y')
				PRINT 'FAILED determine valid assess type, ' + @status_text + '  ' + CONVERT(varchar(26), GETDATE(), 109);
			RETURN;
		END

		IF (@debug = 'Y')
			PRINT 'END STEP select as_std_assess_type_code_map, ISC: ' + @isc + '   ' + CONVERT(varchar(26), GETDATE(), 109);
			

		-- if we have an invalid assess type selection then don't create an assessment and return 1
		IF (@isc IS NULL OR @isc = '--')
		BEGIN
			SELECT
				@status_code  = 1
				,@status_text = 'Invalid assess type'
			;

			RETURN;
		END

		-- if the final assessDate is before the MDS 3.0 implementation date,
		-- don't create an assessment and return 2
		IF (@assessDate < @Oct2010)
		BEGIN
			SELECT
				@status_code  = 2
				,@status_text = 'Assess date before Oct 1, 2010'
			;

			RETURN;
		END

		-- if the original admission date is before 1900-01-01,
		-- don't create an assessment and return 3
		IF EXISTS (	SELECT *
					FROM [dbo].[clients]
					WHERE client_id = @clientId
					  AND original_admission_date < @Jan1900
					)
		BEGIN
			SELECT
				@status_code  = 3
				,@status_text = 'The admission date entered for this resident is invalid. Please correct it prior to creating the MDS.'
			;

			RETURN;
		END

		-- get the RUG config parameters to copy into the assessment
		EXEC [dbo].[sproc_as_getStateRugConfiguration]
			@provstate, @facId, @cmiSetState OUTPUT, @calcTypeState OUTPUT, @altCmiSetState OUTPUT,
			@altCalcTypeState OUTPUT, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END

		-- Set the Federal CMI set depending on whether the facility is Rural or Urban
		SET @cmiSetFed =
				CASE @ruralUrban
					WHEN 'U' THEN 'E02'
					WHEN 'R' THEN 'E01'
					ELSE 'E02'
				END;

		IF (@debug = 'Y')
			PRINT 'BEGIN STEP INSERT into as_assessment ' + CONVERT(varchar(26), GETDATE(), 109);

		-- get new assess id from global primary keys table.
		EXEC [dbo].[get_next_primary_key]
			'as_assessment', 'assess_id', @assessId OUTPUT, 1;

		-- create response for the questions shown in the create new MDS popup

		IF (@A0310F IN ('10', '11', '12'))
			SET @populateKey = 'A2000'
		ELSE IF (@A0310F = '01')
			SET @populateKey = 'A1600'
		;

		-- when creating corrections we need to have everything as signed, even the auto-populated responses
		IF (@operationFlag = 'M')
		BEGIN
			SET @acknowledged = 'S'
			SET @nonAutoAcknowledged = 'S';
		END
		ELSE
		BEGIN
			SET @acknowledged = 'Y'
			SET @nonAutoAcknowledged = 'N';
		END
		;

		IF (@assessDate < @Apr2012)
			SET @actionQK = 'X0100'
		ELSE
			SET @actionQK = 'A0050'
		;

		SET @actionVal =
				CASE @operationFlag
					WHEN 'I' THEN '3'
					WHEN 'M' THEN '2'
					ELSE '1'
				END;

		BEGIN TRANSACTION MDS3A
			-- create as_assessment row
			INSERT INTO [dbo].[as_assessment] (
				fac_id
				,client_id
				,assess_id
				,assess_date
				,prov_state
				,std_assess_id
				,assess_type_code
				,created_date
				,created_by
				,revision_date
				,revision_by
				,edited_date
				,edited_by
				,status
				,raps_type
				,cmi_set_state
				,calc_type_state
				,alt_cmi_set_state
				,alt_calc_type_state
				,cmi_set_fed
				,primary_reason_code
				,secondary_reason_code
			) VALUES (
				@facId
				,@clientId
				,@assessId
				,@assessDate
				,@provState
				,@stdAssessId
				,@isc
				,@createdDate
				,@createdBy
				,@createdDate
				,@createdBy
				,@createdDate
				,@createdBy
				,'In Progress'
				,@rapsType
				,@cmiSetState
				,@calcTypeState
				,@altCmiSetState
				,@altCalcTypeState
				,@cmiSetFed
				,@A0310A
				,@A0310B
			);

			-- Use the federal CMI set (and calculation type) for now
			INSERT INTO [dbo].[as_assessment_insurance_rug] (
				assess_id
				,cmi_set_ins
			) VALUES (
				@assessId
				,@cmiSetFed
			);

		-- Set the Federal PDPM CMI set 
			DECLARE @cmiFedPdpm int;
			SELECT @cmiFedPdpm=model_id
			FROM WESREFERENCE..as_std_pdpm_model 
			WHERE short_desc = 'pdpm'
				and std_assess_id = 11
				and deleted = 'N'
				and effective_date < @assessDate
				and (ineffective_date is null or @assessDate < ineffective_date)
        
        -- set whether state is using PDPM for OBRA assessments.  
        -- Null for pre @Oct2020 unless special.
            declare @statePdpmObraCd  [char](1);  
            select @statePdpmObraCd = s.[STATE_PDPM_OBRA_CD]  
            from [WESREFERENCE]..[as_std_pdpm_state]  s 
            where s.prov_state = @provState
              and s.deleted = 'N'
              and s.effective_date <= @assessDate
              and (s.ineffective_date is null or s.ineffective_date >= @assessDate)
            ;
            if (@statePdpmObraCd is null and @assessDate >= @Oct2020)
            begin
                set @statePdpmObraCd = '0';
            end
			
		-- insert the new row to hold this asmt's PDPM data
			INSERT INTO [dbo].[as_assessment_pdpm] ( 
				  [assess_id]  ,[model_id]    ,[STATE_PDPM_OBRA_CD]
			) VALUES (
				  @assessId    ,@cmiFedPdpm   ,@statePdpmObraCd
			);

			IF (@debug = 'Y')
				PRINT 'BEGIN STEP INSERT into as_assessment_section ' + CONVERT(varchar(26), GETDATE(), 109);

			-- create sections
			INSERT INTO [dbo].[as_assessment_section] (
				section_code
				,sequence
				,assess_id
				,fac_id
			)
			SELECT
				DISTINCT(stdSect.section_code)
				,stdSect.sequence
				,@assessId
				,@facId
			FROM [dbo].[as_std_question_assessment_type_active_date_range] stdQuesAssType
				INNER JOIN [dbo].[as_std_question] stdQues
					ON  stdQues.std_assess_id = stdQuesAssType.std_assess_id
					AND stdQues.question_key  = stdQuesAssType.question_key
				INNER JOIN [dbo].[as_std_section] stdSect
					ON  stdSect.std_assess_id = stdQues.std_assess_id
					AND stdSect.section_code  = stdQues.section_code
				LEFT JOIN [dbo].[as_std_question_state_code] stdQuesState
					ON  stdQuesState.std_assess_id         = stdQues.std_assess_id
					AND stdQuesState.question_key          = stdQues.question_key
					AND stdQuesState.assess_type_code      = stdQuesAssType.assess_type_code
					AND stdQuesState.parent_effective_date = stdQuesAssType.effective_date
				WHERE stdQuesAssType.std_assess_id    =  @stdAssessId
				  AND stdQuesAssType.assess_type_code =  @isc
				  AND stdQuesAssType.effective_date   <= @assessDate
				  AND (stdQuesAssType.ineffective_date IS NULL OR stdQuesAssType.ineffective_date >= @assessDate)
				  AND (	(stdQuesState.prov_code IS NULL AND stdSect.section_code <> 'S')
						OR
						(stdQuesState.prov_code = @provState
						AND stdQuesState.effective_date <= @assessDate
						AND (stdQuesState.ineffective_date IS NULL OR stdQuesState.ineffective_date >= @assessDate)
						)
					  )
			;

			IF (@isc <> 'OSA')
			BEGIN
				INSERT INTO [dbo].[as_response] (
					assess_id
					,question_key
					,item_value
					,acknowledged
					,created_date
					,position_desc
					,revision_date
					,revision_by
					,long_username
				) VALUES
				 (@assessId, 'A0310A',  @A0310A,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310B',  @A0310B,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310E',  @A0310E,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				,(@assessId, 'A0310F',  @A0310F,    @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
				;
			END

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			 (@assessId, @actionQK, @actionVal, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Submission Parameters')
			,(@assessId, 'X1100E',  '^',        @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,@populateKey
				,@ard
				,@acknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @populateKey IS NOT NULL
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310C'
				,case when @assessDate < @Oct2019 then @A0310C else @NppA0310C end
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate < @Oct2019 or (@isc='NPP' and @assessDate >= @Oct2019)
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310D'
				,@A0310D
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate < @Oct2019
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310G'
				,@A0310G
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Apr2012 and @isc <> 'OSA')
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310G1'
				,@A0310G1
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2019 and @isc in ('NC','NQ','NP','ND','SP','SD','NPP'))
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0310H'
				,@A0310H
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2016 and @isc <> 'IPA' and @isc <> 'OSA')
			;

			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0300A'
				,@A0300A
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE @assessDate >= @Oct2019
			;
			
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			)
			SELECT
				@assessId
				,'A0300B'
				,@A0300B
				,@nonAutoAcknowledged
				,@createdDate
				,@positDesc
				,@createdDate
				,@createdBy
				,@longUsername
			WHERE (@assessDate >= @Oct2019 and @isc = 'OSA')
			;

			-- Insert A2200 and A2300 when applicable
			DECLARE  @A2200_Ack char(1)='N'
					,@A2200_UserName varchar(60)='System Populated - Validation Edit';
			IF (@A0310A='05' or @A0310A='06' or @operationFlag='M')
			BEGIN
				SET @A2200_Ack = @acknowledged;
				SET @A2200_UserName = @longUsername;
			END

			--Add A2200
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) SELECT
				@assessId, 'A2200', @A2200, @A2200_Ack, @createdDate, @positDesc, @createdDate, @createdBy, @A2200_UserName
			  FROM dbo.as_std_question_assessment_type_active_date_range stdQuesAssType
			  WHERE stdQuesAssType.std_assess_id = @stdAssessId
			    AND stdQuesAssType.assess_type_code = @isc
				AND stdQuesAssType.effective_date <= @assessDate
				AND stdQuesAssType.question_key = 'A2200'
			;
			
			--Add A2300
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) SELECT
			    @assessId, 'A2300', @ard, @nonAutoAcknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername
			  FROM dbo.as_std_question_assessment_type_active_date_range stdQuesAssType
			  WHERE stdQuesAssType.std_assess_id = @stdAssessId
			    AND stdQuesAssType.assess_type_code = @isc
				AND stdQuesAssType.effective_date <= @assessDate
				AND stdQuesAssType.question_key = 'A2300'
			;
			
			-- insert an entry into the as_mds3_resident_header_info
			INSERT INTO [dbo].[as_mds3_resident_header_info] (
				assess_id
				,admit_date
				,payer_id
				,mdcr_start_date
			)
			SELECT TOP 1
				@assessId
				,c.original_admission_date
				,ci.primary_payer_id
				,@mdcrStartDate
			FROM [dbo].[clients] c
				LEFT JOIN [dbo].[census_item] ci
					ON  ci.client_id = c.client_id
					AND ci.deleted   = 'N'
					AND CAST(ci.effective_date AS date) <= @assessDate
					AND (ci.ineffective_date IS NULL OR ci.ineffective_date > @assessDate)
					AND (ci.record_type IS NULL      OR ci.record_type = 'C')
			WHERE c.client_id = @clientId
			ORDER BY ci.effective_date DESC
			;

			-- Default the A2400a..c responses
			IF (@operationFlag = 'N')
			BEGIN
				-- defaults
				DECLARE
					@A2400A		varchar(30) = '0'
					,@A2400B	varchar(8)  = '^'
					,@A2400C	varchar(8)  = '^'
				;

				EXEC dbo.sproc_mds_dml_getMDS3A2400	@facId, @clientId, @assessId, @debug,	
								@A2400A	out, @A2400B out, @A2400C out, @status_code out, @status_text out;

				IF (@status_code <> 0)
				BEGIN
					SET @status_code = -1;
					RETURN;
				END
				
				INSERT INTO [dbo].[as_response] (
					assess_id
					,question_key
					,item_value
					,acknowledged
					,created_date
					,position_desc
					,revision_date
					,revision_by
					,long_username
				) VALUES
				 (@assessId, 'A2400A', @A2400A, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				,(@assessId, 'A2400B', @A2400B, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				,(@assessId, 'A2400C', @A2400C, 'N', @createdDate, @positDesc, @createdDate, @createdBy, 'System Populated - Census')
				;
			END

			-- TODO: Add error handling to this sproc
			EXEC [dbo].[sproc_mds_dml_insert_lineage]
				@assessId, @copyFromAssessId, @operationFlag;

		COMMIT TRANSACTION MDS3A

		IF (@debug = 'Y')
			PRINT 'END STEP								' + CONVERT(varchar(26), GETDATE(),109);
	END TRY

	-- error trapping
	BEGIN CATCH
		IF (@@TRANCOUNT > 0)
			ROLLBACK TRANSACTION MDS3A;

		SELECT
			@error_code   = ERROR_NUMBER()
			,@status_text = ERROR_MESSAGE()
			,@status_code = -1
		;

		GOTO PgmAbend;
	END CATCH

	IF (@copyFromAssessId IS NOT NULL)
	BEGIN
		UPDATE [dbo].[as_assessment] SET
			submission_req =
				(SELECT case when (@isc = 'NPP') or (@rugsPayer='1' and @A0310B='01') then 'N' else submission_req end
				 FROM [dbo].[as_assessment]
				 WHERE assess_id = @copyFromAssessId)
		WHERE assess_id = @assessId
		;
	END

	IF (@operationFlag = 'N' OR (@autoPopulateFlag = 'Y' AND @operationFlag <> 'X'))
	BEGIN
		-- Always auto populate for new assessments, or when copying and auto populate on copy has been selected.

		-- auto populate resident profile, weights & vitals, immunization
		EXEC [dbo].[sproc_mds_dml_autopopulateMDS3]
			@facId, @assessId, @assessDate, @clientId, @createdDate, @createdBy, @positDesc,
			'ALL', @hc_no_id_param, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END

		UPDATE a SET
			submission_req =
				CASE
					WHEN @isc = 'NPP' THEN 'N' -- do not submit NPP RUGs Payer 
					WHEN @isc = 'NP' AND @rugsPayer='1' AND @A0310B='01' THEN 'N'  -- do not submit NP RUGs Payer 
					WHEN r.item_value IS NULL AND submission_req in ('Y', 'N') THEN submission_req
					WHEN r.item_value = '3' OR r.item_value = '2' THEN 'Y'
					ELSE 'N'
				END
		FROM [dbo].[as_assessment] a
			LEFT JOIN [dbo].[as_response] r
				ON  r.assess_id    = a.assess_id
				AND r.question_key = 'A0410'
		WHERE a.assess_id = @assessId
		;
	END

	IF (@operationFlag IN ('C', 'X', 'M'))
	BEGIN
		EXEC [dbo].[sproc_mds_dml_copyMDS3AssessmentResponses]
			@facId, @copyFromAssessId, @assessId, @createdDate, @createdBy, @positDesc, @longUsername,
			@operationFlag, @autoPopulateFlag, @debug, @status_code OUTPUT, @status_text OUTPUT;

		IF (@status_code <> 0)
		BEGIN
			SET @status_code = -1;
			RETURN;
		END
	END

	IF (@operationFlag IN ('X', 'M', 'I'))
	BEGIN
		UPDATE [dbo].[as_assessment] SET
			status = CASE @operationFlag
						WHEN 'X' THEN 'Incomplete'
						WHEN 'M' THEN 'Modified'
						WHEN 'I' THEN 'Inactivated'
					 END
			,revision_by   = @createdBy
			,revision_date = @createdDate
		WHERE assess_id = @copyFromAssessId
		;

		IF (@operationFlag IN ('M', 'I'))
		BEGIN
			UPDATE [dbo].[as_assessment] SET
				incorrect_assess_id = @copyFromAssessId
			WHERE assess_id = @assessId
			;

			EXEC [dbo].[sproc_mds_dml_populateCorrectionAssessment]
				@assessId, @copyFromAssessId, @operationFlag, @createdDate, @createdBy, @positDesc,
				@longUsername, @debug, @status_code OUTPUT, @status_text OUTPUT;

			IF (@status_code <> 0)
			BEGIN
				SET @status_code = -1;
				RETURN;
			END
		END
	END

	/*	Insert SHORT STAY fields while creating a new assessment for effective date,
		for correct ISC type and if fields were not already present in the as_response
		table because of the change ARD type function or for copy
	*/
	IF EXISTS (	SELECT *
				FROM [dbo].[as_assessment] asmt
					INNER JOIN [dbo].[as_std_question_assessment_type_active_date_range] qat
						ON  qat.std_assess_id     = asmt.std_assess_id
						AND qat.assess_type_code  = asmt.assess_type_code
						AND qat.effective_date   <= asmt.assess_date
				WHERE asmt.std_assess_id = @stdAssessId
				  AND asmt.assess_id     = @assessId
				  AND qat.question_key   = 'A_SHORTA'
				)
	BEGIN
		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTA'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTA', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END

		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTB'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTB', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END

		IF NOT EXISTS (	SELECT *
						FROM [dbo].[as_response]
						WHERE assess_id    = @assessId
						  AND question_key = 'A_SHORTC'
						)
		BEGIN
			INSERT INTO [dbo].[as_response] (
				assess_id
				,question_key
				,item_value
				,acknowledged
				,created_date
				,position_desc
				,revision_date
				,revision_by
				,long_username
			) VALUES
			(@assessId, 'A_SHORTC', '^', @acknowledged, @createdDate, @positDesc, @createdDate, @createdBy, @longUsername)
			;
		END
	END

	-- if correction record is created, set the acknowledged = 'S' (signed) for SS fields, we found issue in VA
	IF (@operationFlag = 'M')
	BEGIN
		UPDATE [dbo].[as_response] SET
			acknowledged = 'S'
		WHERE assess_id = @assessId
		  AND question_key IN ('A_SHORTA', 'A_SHORTB', 'A_SHORTC')
		;
	END
	
	-- Get saved RFA values for Gen Response use
	Select @rfaA0200=coalesce(Item_Value,'')   from as_response where assess_id=@assessId and question_key='A0200';
	Select @rfaA0300A=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0300A';
	Select @rfaA0300B=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0300B';
	Select @rfaA0310A=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310A';
	Select @rfaA0310B=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310B';
	Select @rfaA0310C=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310C';
	Select @rfaA0310D=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310D';
	Select @rfaA0310E=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310E';
	Select @rfaA0310F=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310F';
	Select @rfaA0310G=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310G';
	Select @rfaA0310G1=coalesce(Item_Value,'') from as_response where assess_id=@assessId and question_key='A0310G1';
	Select @rfaA0310H=coalesce(Item_Value,'')  from as_response where assess_id=@assessId and question_key='A0310H';


	-- return the assess_id and assess_date that was inserted into as_assessment
	SELECT @assessId as assess_id, @isc as isc
		,@rfaA0200 as a0200, @rfaA0300A as a0300a, @rfaA0300B as a0300b, @rfaA0310A as a0310a, @rfaA0310B as a0310b, @rfaA0310C as a0310c
		,@rfaA0310D as a0310d, @rfaA0310E as a0310e, @rfaA0310F as a0310f, @rfaA0310G as a0310g, @rfaA0310G1 as a0310g1, @rfaA0310H as a0310h
	;
	

	-- program success return
	PgmSuccess:
	IF (@status_code = 0)
	BEGIN
		IF (@debug = 'Y')
			PRINT 'Successful execution of stored procedure';

		RETURN @status_code;
	END

	-- program failure return
	PgmAbend:
	IF (@debug = 'Y')
	BEGIN
		PRINT 'Stored procedure failure in step: ' + CONVERT(varchar(3), @step) + ' ' + CONVERT(varchar(26), GETDATE());
		PRINT 'Error code: ' + CONVERT(varchar(10), @error_code) + '; Error description: ' + @status_text;
	END

	RETURN @status_code;
END
GO

GRANT EXECUTE ON dbo.sproc_mds_dml_createMDS3Assessment_v2 TO PUBLIC
GO


GO

print 'C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql -- ****SCRIPT DONE****'

GO

insert into upload_tracking(script,timestamp,upload) values ('C_Branch/04_StoredProcedures/US_Only/sproc_mds_dml_createMDS3Assessment_v2.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking (script, timestamp, upload) values ('..\Update db version.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO
SET ANSI_NULLS ON
GO
SET ARITHABORT ON
GO
SET ANSI_WARNINGS ON
GO
SET ANSI_PADDING ON
GO
SET CONCAT_NULL_YIELDS_NULL ON
GO
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_NULL_DFLT_ON ON
GO

SET QUOTED_IDENTIFIER ON
GO


insert into pcc_db_version (db_version_code, db_upload_by)
values ('4.4.9_C', 'upload_history')


GO

print '..\Update db version.sql --****SCRIPT DONE****'

GO

insert into upload_tracking (script, timestamp, upload) values ('..\Update db version.sql',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')

GO

insert into upload_tracking (script,timestamp,upload) values ('UPLOAD END',getdate(),'4.4.9_06_CLIENT_C_Branch_US.sql')